import{_ as c,r as l,o as p,c as i,a as n,b as e,d as t,w as s,f as d,e as u}from"./app-aQeLbVW9.js";const g={},h=n("h1",{id:"_119-杨辉三角-ii",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_119-杨辉三角-ii","aria-hidden":"true"},"#"),e(" 119. 杨辉三角 II")],-1),k=n("code",null,"数组",-1),m=n("code",null,"动态规划",-1),_={href:"https://leetcode.cn/problems/pascals-triangle-ii",target:"_blank",rel:"noopener noreferrer"},b=n("code",null,"力扣",-1),f={href:"https://leetcode.com/problems/pascals-triangle-ii",target:"_blank",rel:"noopener noreferrer"},x=n("code",null,"LeetCode",-1),v=u(`<h2 id="题目" tabindex="-1"><a class="header-anchor" href="#题目" aria-hidden="true">#</a> 题目</h2><p>Given an integer <code>rowIndex</code>, return the <code>rowIndexth</code> (<strong>0-indexed</strong>) row of the <strong>Pascal &#39;s triangle</strong>.</p><p>In <strong>Pascal &#39;s triangle</strong>, each number is the sum of the two numbers directly above it as shown:</p><figure><img src="https://upload.wikimedia.org/wikipedia/commons/0/0d/PascalTriangleAnimated2.gif" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>Example 1:</strong></p><blockquote><p>Input: rowIndex = 3</p><p>Output: [1,3,3,1]</p></blockquote><p><strong>Example 2:</strong></p><blockquote><p>Input: rowIndex = 0</p><p>Output: [1]</p></blockquote><p><strong>Example 3:</strong></p><blockquote><p>Input: rowIndex = 1</p><p>Output: [1,1]</p></blockquote><p><strong>Constraints:</strong></p><ul><li><code>0 &lt;= rowIndex &lt;= 33</code></li></ul><p><strong>Follow up:</strong> Could you optimize your algorithm to use only <code>O(rowIndex)</code> extra space?</p><h2 id="题目大意" tabindex="-1"><a class="header-anchor" href="#题目大意" aria-hidden="true">#</a> 题目大意</h2><p>给定一个非负索引 <code>rowIndex</code>，返回「杨辉三角」的第 <code>rowIndex</code> 行。</p><p>在「杨辉三角」中，每个数是它左上方和右上方的数的和。</p><figure><img src="https://pic.leetcode-cn.com/1626927345-DZmfxB-PascalTriangleAnimated2.gif" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>示例 1:</strong></p><blockquote><p><strong>输入:</strong> rowIndex = 3</p><p><strong>输出:</strong> [1,3,3,1]</p></blockquote><p><strong>示例 2:</strong></p><blockquote><p><strong>输入:</strong> rowIndex = 0</p><p><strong>输出:</strong> [1]</p></blockquote><p><strong>示例 3:</strong></p><blockquote><p><strong>输入:</strong> rowIndex = 1</p><p><strong>输出:</strong> [1,1]</p></blockquote><p><strong>提示:</strong></p><ul><li><code>0 &lt;= rowIndex &lt;= 33</code></li></ul><p><strong>进阶：</strong></p><p>你可以优化你的算法到 <code>O(rowIndex)</code> 空间复杂度吗？</p><h2 id="解题思路" tabindex="-1"><a class="header-anchor" href="#解题思路" aria-hidden="true">#</a> 解题思路</h2><p>杨辉三角的性质：</p><ul><li>杨辉三角第 <code>i</code> 行的第 <code>j</code> 个元素可以通过 <strong>前一行</strong> 的第 <code>j-1</code> 和第 <code>j</code> 个元素相加得到。 <ul><li><code>arr[j] = arr[j] + arr[j-1]</code></li></ul></li><li>每一行的第一个和最后一个元素永远是 <code>1</code>。</li><li>第 <code>k</code> 行有 <code>k+1</code> 个元素，索引从 <code>0</code> 开始。</li></ul><ol><li><p><strong>初始化数组</strong> 创建一个长度为 <code>rowIndex + 1</code> 的数组 <code>arr</code>，并将所有元素初始化为 <code>1</code>（因为每行的两端元素始终为 <code>1</code>）。</p></li><li><p><strong>遍历行数</strong> 从第 2 行开始（<code>i = 2</code>），因为第 0 行和第 1 行的元素都是 <code>1</code>。</p></li><li><p><strong>动态更新当前行</strong> 从索引 <code>i - 1</code> 到 <code>1</code>，逐步更新数组元素。从<strong>右向左</strong>更新数组，避免当前元素被覆盖，影响后续计算。</p></li><li><p><strong>返回结果</strong> 遍历完成后，<code>arr</code> 就是第 <code>rowIndex</code> 行的结果。</p></li></ol><h4 id="复杂度分析" tabindex="-1"><a class="header-anchor" href="#复杂度分析" aria-hidden="true">#</a> 复杂度分析</h4><ul><li><strong>时间复杂度</strong>：<code>O(rowIndex^2)</code>，需要两层遍历。</li><li><strong>空间复杂度</strong>：<code>O(rowIndex)</code>，使用了一个数组 <code>arr</code> 来保存计算过程和结果。</li></ul><h2 id="代码" tabindex="-1"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">}</span></span> <span class="token parameter">rowIndex</span>
 * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span>
 */</span>
<span class="token keyword">var</span> <span class="token function-variable function">getRow</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">rowIndex</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">// 初始化一个长度为 rowIndex + 1 的数组，所有元素为 1</span>
	<span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>rowIndex <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token comment">// 从第 2 行开始遍历，计算每一行的中间元素</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> rowIndex<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token comment">// 从右向左更新数组，避免当前元素被覆盖</span>
		<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+=</span> arr<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>

	<span class="token comment">// 返回第 rowIndex 行</span>
	<span class="token keyword">return</span> arr<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="相关题目" tabindex="-1"><a class="header-anchor" href="#相关题目" aria-hidden="true">#</a> 相关题目</h2>`,36),w=n("thead",null,[n("tr",null,[n("th",{style:{"text-align":"center"}},"题号"),n("th",{style:{"text-align":"left"}},"标题"),n("th",{style:{"text-align":"center"}},"题解"),n("th",{style:{"text-align":"left"}},"标签"),n("th",{style:{"text-align":"center"}},"难度"),n("th",{style:{"text-align":"center"}},"力扣")])],-1),y=n("td",{style:{"text-align":"center"}},"118",-1),I=n("td",{style:{"text-align":"left"}},"杨辉三角",-1),j={style:{"text-align":"center"}},q={style:{"text-align":"left"}},E=n("code",null,"数组",-1),O=n("code",null,"动态规划",-1),C=n("td",{style:{"text-align":"center"}},"🟢",-1),L={style:{"text-align":"center"}},N={href:"https://leetcode.cn/problems/pascals-triangle",target:"_blank",rel:"noopener noreferrer"},V={href:"https://leetcode.com/problems/pascals-triangle",target:"_blank",rel:"noopener noreferrer"},B=n("td",{style:{"text-align":"center"}},"2221",-1),P=n("td",{style:{"text-align":"left"}},"数组的三角和",-1),z=n("td",{style:{"text-align":"center"}},null,-1),A={style:{"text-align":"left"}},R=n("code",null,"数组",-1),T=n("code",null,"数学",-1),D=n("code",null,"组合数学",-1),F=n("code",null,"1+",-1),G=n("td",{style:{"text-align":"center"}},"🟠",-1),S={style:{"text-align":"center"}},Z={href:"https://leetcode.cn/problems/find-triangular-sum-of-an-array",target:"_blank",rel:"noopener noreferrer"},H={href:"https://leetcode.com/problems/find-triangular-sum-of-an-array",target:"_blank",rel:"noopener noreferrer"};function J(K,M){const r=l("font"),a=l("RouterLink"),o=l("ExternalLinkIcon");return p(),i("div",null,[h,n("p",null,[e("🟢 "),t(r,{color:"#15bd66"},{default:s(()=>[e("Easy")]),_:1}),e("  🔖  "),t(a,{to:"/tag/array.html"},{default:s(()=>[k]),_:1}),e(),t(a,{to:"/tag/dynamic-programming.html"},{default:s(()=>[m]),_:1}),e("  🔗 "),n("a",_,[b,t(o)]),e(),n("a",f,[x,t(o)])]),v,d(" prettier-ignore "),n("table",null,[w,n("tbody",null,[n("tr",null,[y,I,n("td",j,[t(a,{to:"/problem/0118.html"},{default:s(()=>[e("[✓]")]),_:1})]),n("td",q,[t(a,{to:"/tag/array.html"},{default:s(()=>[E]),_:1}),e(),t(a,{to:"/tag/dynamic-programming.html"},{default:s(()=>[O]),_:1})]),C,n("td",L,[n("a",N,[e("🀄️"),t(o)]),e(),n("a",V,[e("🔗"),t(o)])])]),n("tr",null,[B,P,z,n("td",A,[t(a,{to:"/tag/array.html"},{default:s(()=>[R]),_:1}),e(),t(a,{to:"/tag/math.html"},{default:s(()=>[T]),_:1}),e(),t(a,{to:"/tag/combinatorics.html"},{default:s(()=>[D]),_:1}),e(),F]),G,n("td",S,[n("a",Z,[e("🀄️"),t(o)]),e(),n("a",H,[e("🔗"),t(o)])])])])])])}const U=c(g,[["render",J],["__file","0119.html.vue"]]);export{U as default};
