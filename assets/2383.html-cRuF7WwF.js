import{_ as c,r as s,o as r,c as l,a as n,b as e,d as a,w as o,e as d}from"./app-aQeLbVW9.js";const u={},g=n("h1",{id:"_2383-赢得比赛需要的最少训练时长",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_2383-赢得比赛需要的最少训练时长","aria-hidden":"true"},"#"),e(" 2383. 赢得比赛需要的最少训练时长")],-1),m=n("code",null,"贪心",-1),k=n("code",null,"数组",-1),y={href:"https://leetcode.cn/problems/minimum-hours-of-training-to-win-a-competition",target:"_blank",rel:"noopener noreferrer"},h=n("code",null,"力扣",-1),b={href:"https://leetcode.com/problems/minimum-hours-of-training-to-win-a-competition",target:"_blank",rel:"noopener noreferrer"},x=n("code",null,"LeetCode",-1),v=d(`<h2 id="题目" tabindex="-1"><a class="header-anchor" href="#题目" aria-hidden="true">#</a> 题目</h2><p>You are entering a competition, and are given two <strong>positive</strong> integers <code>initialEnergy</code> and <code>initialExperience</code> denoting your initial energy and initial experience respectively.</p><p>You are also given two <strong>0-indexed</strong> integer arrays <code>energy</code> and <code>experience</code>, both of length <code>n</code>.</p><p>You will face <code>n</code> opponents <strong>in order</strong>. The energy and experience of the <code>ith</code> opponent is denoted by <code>energy[i]</code> and <code>experience[i]</code> respectively. When you face an opponent, you need to have both <strong>strictly</strong> greater experience and energy to defeat them and move to the next opponent if available.</p><p>Defeating the <code>ith</code> opponent <strong>increases</strong> your experience by <code>experience[i]</code>, but <strong>decreases</strong> your energy by <code>energy[i]</code>.</p><p>Before starting the competition, you can train for some number of hours. After each hour of training, you can <strong>either</strong> choose to increase your initial experience by one, or increase your initial energy by one.</p><p>Return <em>the <strong>minimum</strong> number of training hours required to defeat all</em> <code>n</code><em>opponents</em>.</p><p><strong>Example 1:</strong></p><blockquote><p>Input: initialEnergy = 5, initialExperience = 3, energy = [1,4,3,2], experience = [2,6,3,1]</p><p>Output: 8</p><p>Explanation: You can increase your energy to 11 after 6 hours of training, and your experience to 5 after 2 hours of training.</p><p>You face the opponents in the following order:</p><ul><li><p>You have more energy and experience than the 0th opponent so you win.</p><p>Your energy becomes 11 - 1 = 10, and your experience becomes 5 + 2 = 7.</p></li><li><p>You have more energy and experience than the 1st opponent so you win.</p><p>Your energy becomes 10 - 4 = 6, and your experience becomes 7 + 6 = 13.</p></li><li><p>You have more energy and experience than the 2nd opponent so you win.</p><p>Your energy becomes 6 - 3 = 3, and your experience becomes 13 + 3 = 16.</p></li><li><p>You have more energy and experience than the 3rd opponent so you win.</p><p>Your energy becomes 3 - 2 = 1, and your experience becomes 16 + 1 = 17.</p></li></ul><p>You did a total of 6 + 2 = 8 hours of training before the competition, so we return 8.</p><p>It can be proven that no smaller answer exists.</p></blockquote><p><strong>Example 2:</strong></p><blockquote><p>Input: initialEnergy = 2, initialExperience = 4, energy = [1], experience = [3]</p><p>Output: 0</p><p>Explanation: You do not need any additional energy or experience to win the competition, so we return 0.</p></blockquote><p><strong>Constraints:</strong></p><ul><li><code>n == energy.length == experience.length</code></li><li><code>1 &lt;= n &lt;= 100</code></li><li><code>1 &lt;= initialEnergy, initialExperience, energy[i], experience[i] &lt;= 100</code></li></ul><h2 id="题目大意" tabindex="-1"><a class="header-anchor" href="#题目大意" aria-hidden="true">#</a> 题目大意</h2><p>你正在参加一场比赛，给你两个 <strong>正</strong> 整数 <code>initialEnergy</code> 和 <code>initialExperience</code> 分别表示你的初始精力和初始经验。</p><p>另给你两个下标从 <strong>0</strong> 开始的整数数组 <code>energy</code> 和 <code>experience</code>，长度均为 <code>n</code> 。</p><p>你将会 <strong>依次</strong> 对上 <code>n</code> 个对手。第 <code>i</code> 个对手的精力和经验分别用 <code>energy[i]</code> 和 <code>experience[i]</code> 表示。当你对上对手时，需要在经验和精力上都 <strong>严格</strong> 超过对手才能击败他们，然后在可能的情况下继续对上下一个对手。</p><p>击败第 <code>i</code> 个对手会使你的经验 <strong>增加</strong> <code>experience[i]</code>，但会将你的精力 <strong>减少</strong> <code>energy[i]</code> 。</p><p>在开始比赛前，你可以训练几个小时。每训练一个小时，你可以选择将增加经验增加 1 <strong>或者</strong> 将精力增加 1 。</p><p>返回击败全部 <code>n</code> 个对手需要训练的 <strong>最少</strong> 小时数目。</p><p><strong>示例 1：</strong></p><blockquote><p><strong>输入：</strong> initialEnergy = 5, initialExperience = 3, energy = [1,4,3,2], experience = [2,6,3,1]</p><p><strong>输出：</strong> 8</p><p><strong>解释：</strong> 在 6 小时训练后，你可以将精力提高到 11 ，并且再训练 2 个小时将经验提高到 5 。</p><p>按以下顺序与对手比赛：</p><ul><li><p>你的精力与经验都超过第 0 个对手，所以获胜。</p><p>精力变为：11 - 1 = 10 ，经验变为：5 + 2 = 7 。</p></li><li><p>你的精力与经验都超过第 1 个对手，所以获胜。</p><p>精力变为：10 - 4 = 6 ，经验变为：7 + 6 = 13 。</p></li><li><p>你的精力与经验都超过第 2 个对手，所以获胜。</p><p>精力变为：6 - 3 = 3 ，经验变为：13 + 3 = 16 。</p></li><li><p>你的精力与经验都超过第 3 个对手，所以获胜。</p><p>精力变为：3 - 2 = 1 ，经验变为：16 + 1 = 17 。</p></li></ul><p>在比赛前进行了 8 小时训练，所以返回 8 。</p><p>可以证明不存在更小的答案。</p></blockquote><p><strong>示例 2：</strong></p><blockquote><p><strong>输入：</strong> initialEnergy = 2, initialExperience = 4, energy = [1], experience = [3]</p><p><strong>输出：</strong> 0</p><p><strong>解释：</strong> 你不需要额外的精力和经验就可以赢得比赛，所以返回 0 。</p></blockquote><p><strong>提示：</strong></p><ul><li><code>n == energy.length == experience.length</code></li><li><code>1 &lt;= n &lt;= 100</code></li><li><code>1 &lt;= initialEnergy, initialExperience, energy[i], experience[i] &lt;= 100</code></li></ul><h2 id="解题思路" tabindex="-1"><a class="header-anchor" href="#解题思路" aria-hidden="true">#</a> 解题思路</h2><p>题目要求确定英雄完成所有战斗所需的最少训练时间，使英雄的能量和经验满足以下条件：</p><ol><li>总能量大于敌人能量之和。</li><li>对每个敌人，英雄的经验值必须严格大于敌人的经验值。</li></ol><p>为了最小化训练时间，我们需要分别计算能量需求和经验需求。</p><ol><li><strong>计算能量需求</strong></li></ol><p>英雄需要的总能量应大于所有敌人能量之和 <code>totalEnergy</code>，即满足以下条件： <code>initialEnergy + addEnergy &gt; totalEnergy</code></p><p>从而： <code>addEnergy = max(0, totalEnergy + 1 - initialEnergy)</code></p><ul><li>利用 <code>reduce</code> 方法快速计算 <code>totalEnergy</code>。</li><li>使用公式计算出需要补充的能量 <code>addEnergy</code>。</li></ul><ol start="2"><li><strong>计算经验需求</strong></li></ol><p>对于每个敌人，英雄的当前经验值 <code>initialExperience</code> 必须严格大于敌人的经验值： <code>initialExperience &gt; enemyExperience</code></p><p>否则，需要训练补充到至少 <code>enemyExperience + 1</code>，并在战斗后更新英雄的经验值。</p><p><strong>计算过程</strong>：</p><ul><li>遍历 <code>experience</code> 数组，逐个检查敌人的经验值。</li><li>如果 <code>initialExperience &lt;= enemyExperience</code>： <ul><li>计算需要补充的经验值为 <code>enemyExperience - initialExperience + 1</code>。</li><li>将补充值累加到 <code>addExperience</code>。</li><li>更新英雄的经验值为 <code>enemyExperience + 1</code>。</li></ul></li><li>无论是否补充，战斗后英雄的经验值都会增加当前敌人的经验值：<code>initialExperience += enemyExperience</code>。</li></ul><p>最终，<code>addExperience</code> 记录了训练所需的总经验补充量。</p><ol start="3"><li><strong>计算总训练时间</strong></li></ol><p>将能量和经验的补充时间相加： <code>Total Training Time = addEnergy + addExperience</code></p><h4 id="复杂度分析" tabindex="-1"><a class="header-anchor" href="#复杂度分析" aria-hidden="true">#</a> 复杂度分析</h4><ul><li><strong>时间复杂度</strong>：<code>O(n)</code>，计算总能量需要遍历 <code>energy</code>，计算经验需求需要遍历 <code>experience</code>，两个数组的长度都为 <code>n</code>。</li><li><strong>空间复杂度</strong>：<code>O(1)</code>，只使用了常数级别的变量。</li></ul><h2 id="代码" tabindex="-1"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">}</span></span> <span class="token parameter">initialEnergy</span>
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">}</span></span> <span class="token parameter">initialExperience</span>
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span> <span class="token parameter">energy</span>
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span> <span class="token parameter">experience</span>
 * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">}</span></span>
 */</span>
<span class="token keyword">var</span> <span class="token function-variable function">minNumberOfHours</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>
	<span class="token parameter">initialEnergy<span class="token punctuation">,</span>
	initialExperience<span class="token punctuation">,</span>
	energy<span class="token punctuation">,</span>
	experience</span>
<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">// 计算需要补充的能量</span>
	<span class="token keyword">const</span> totalEnergy <span class="token operator">=</span> energy<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> a <span class="token operator">+</span> b<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">const</span> addEnergy <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> totalEnergy <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">-</span> initialEnergy<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token comment">// 计算需要补充的经验</span>
	<span class="token keyword">let</span> addExperience <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> num <span class="token keyword">of</span> experience<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>initialExperience <span class="token operator">&lt;=</span> num<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			addExperience <span class="token operator">+=</span> num <span class="token operator">-</span> initialExperience <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 补充到比敌人多 1</span>
			initialExperience <span class="token operator">=</span> num <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 更新经验值</span>
		<span class="token punctuation">}</span>
		initialExperience <span class="token operator">+=</span> num<span class="token punctuation">;</span> <span class="token comment">// 战斗后获得经验</span>
	<span class="token punctuation">}</span>

	<span class="token comment">// 返回总训练时间</span>
	<span class="token keyword">return</span> addEnergy <span class="token operator">+</span> addExperience<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,46);function E(f,_){const i=s("font"),t=s("RouterLink"),p=s("ExternalLinkIcon");return r(),l("div",null,[g,n("p",null,[e("🟢 "),a(i,{color:"#15bd66"},{default:o(()=>[e("Easy")]),_:1}),e("  🔖  "),a(t,{to:"/tag/greedy.html"},{default:o(()=>[m]),_:1}),e(),a(t,{to:"/tag/array.html"},{default:o(()=>[k]),_:1}),e("  🔗 "),n("a",y,[h,a(p)]),e(),n("a",b,[x,a(p)])]),v])}const Y=c(u,[["render",E],["__file","2383.html.vue"]]);export{Y as default};
