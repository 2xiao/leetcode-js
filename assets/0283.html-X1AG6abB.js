import{_ as p,r as l,o as r,c as i,a as n,b as t,d as e,w as s,f as u,e as d}from"./app-B5EG-zH0.js";const h={},m=n("h1",{id:"_283-移动零",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_283-移动零","aria-hidden":"true"},"#"),t(" 283. 移动零")],-1),k=n("code",null,"数组",-1),_=n("code",null,"双指针",-1),g={href:"https://leetcode.cn/problems/move-zeroes",target:"_blank",rel:"noopener noreferrer"},b=n("code",null,"力扣",-1),f={href:"https://leetcode.com/problems/move-zeroes",target:"_blank",rel:"noopener noreferrer"},v=n("code",null,"LeetCode",-1),y=d(`<h2 id="题目" tabindex="-1"><a class="header-anchor" href="#题目" aria-hidden="true">#</a> 题目</h2><p>Given an integer array <code>nums</code>, move all <code>0</code>&#39;s to the end of it while maintaining the relative order of the non-zero elements.</p><p><strong>Note</strong> that you must do this in-place without making a copy of the array.</p><p><strong>Example 1:</strong></p><blockquote><p>Input: nums = [0,1,0,3,12]</p><p>Output: [1,3,12,0,0]</p></blockquote><p><strong>Example 2:</strong></p><blockquote><p>Input: nums = [0]</p><p>Output: [0]</p></blockquote><p><strong>Constraints:</strong></p><ul><li><code>1 &lt;= nums.length &lt;= 10^4</code></li><li><code>-2^31 &lt;= nums[i] &lt;= 2^31 - 1</code></li></ul><p><strong>Follow up:</strong> Could you minimize the total number of operations done?</p><h2 id="题目大意" tabindex="-1"><a class="header-anchor" href="#题目大意" aria-hidden="true">#</a> 题目大意</h2><p>给定一个数组 <code>nums</code>，编写一个函数将所有 <code>0</code> 移动到数组的末尾，同时保持非零元素的相对顺序。</p><p><strong>请注意</strong> ，必须在不复制数组的情况下原地对数组进行操作。</p><p><strong>示例 1:</strong></p><blockquote><p><strong>输入:</strong> nums = [0,1,0,3,12]</p><p><strong>输出:</strong> [1,3,12,0,0]</p></blockquote><p><strong>示例 2:</strong></p><blockquote><p><strong>输入:</strong> nums = [0]</p><p><strong>输出:</strong> [0]</p></blockquote><p><strong>提示</strong> :</p><ul><li><code>1 &lt;= nums.length &lt;= 10^4</code></li><li><code>-2^31 &lt;= nums[i] &lt;= 2^31 - 1</code></li></ul><p><strong>进阶：</strong> 你能尽量减少完成的操作次数吗？</p><h2 id="解题思路" tabindex="-1"><a class="header-anchor" href="#解题思路" aria-hidden="true">#</a> 解题思路</h2><ul><li>使用一个变量 <code>zeroCount</code> 来记录已经遍历过的 <code>0</code> 的数量。</li><li>遍历数组时，对于每个非零元素，将其与当前索引减去 <code>zeroCount</code> 的位置交换。 <ul><li>如果当前元素是 <code>0</code>，增加 <code>zeroCount</code>。</li><li>如果当前元素是非零，用解构赋值将当前元素和应该放置的位置交换，计算方式为 <code>i - zeroCount</code>。</li></ul></li><li>遍历完成后，所有的非零元素会被移到数组前部，而 <code>0</code> 会集中到数组末尾。</li></ul><h4 id="复杂度分析" tabindex="-1"><a class="header-anchor" href="#复杂度分析" aria-hidden="true">#</a> 复杂度分析</h4><ul><li><strong>时间复杂度</strong>：<code>O(n)</code>，遍历整个数组一次。</li><li><strong>空间复杂度</strong>：<code>O(1)</code>，使用常量级额外空间。</li></ul><h2 id="代码" tabindex="-1"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span> <span class="token parameter">nums</span>
 * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span><span class="token keyword">void</span><span class="token punctuation">}</span></span> Do not return anything, modify nums in-place instead.
 */</span>
<span class="token keyword">var</span> <span class="token function-variable function">moveZeroes</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">nums</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">let</span> zeroCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// 记录遇到的 0 的数量</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token comment">// 如果是 0，计数器加一</span>
			zeroCount<span class="token operator">++</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
			<span class="token comment">// 如果是非零元素，与它应该在的位置交换</span>
			<span class="token punctuation">[</span>nums<span class="token punctuation">[</span>i <span class="token operator">-</span> zeroCount<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>i <span class="token operator">-</span> zeroCount<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="相关题目" tabindex="-1"><a class="header-anchor" href="#相关题目" aria-hidden="true">#</a> 相关题目</h2>`,27),x=n("thead",null,[n("tr",null,[n("th",{style:{"text-align":"center"}},"题号"),n("th",{style:{"text-align":"left"}},"标题"),n("th",{style:{"text-align":"center"}},"题解"),n("th",{style:{"text-align":"left"}},"标签"),n("th",{style:{"text-align":"center"}},"难度"),n("th",{style:{"text-align":"center"}},"力扣")])],-1),w=n("td",{style:{"text-align":"center"}},"27",-1),C=n("td",{style:{"text-align":"left"}},"移除元素",-1),z={style:{"text-align":"center"}},q={style:{"text-align":"left"}},E=n("code",null,"数组",-1),N=n("code",null,"双指针",-1),L=n("td",{style:{"text-align":"center"}},"🟢",-1),V={style:{"text-align":"center"}},I={href:"https://leetcode.cn/problems/remove-element",target:"_blank",rel:"noopener noreferrer"},O={href:"https://leetcode.com/problems/remove-element",target:"_blank",rel:"noopener noreferrer"},j=n("td",{style:{"text-align":"center"}},"2460",-1),B=n("td",{style:{"text-align":"left"}},"对数组执行操作",-1),R={style:{"text-align":"center"}},D={style:{"text-align":"left"}},F=n("code",null,"数组",-1),G=n("code",null,"双指针",-1),S=n("code",null,"模拟",-1),T=n("td",{style:{"text-align":"center"}},"🟢",-1),Z={style:{"text-align":"center"}},A={href:"https://leetcode.cn/problems/apply-operations-to-an-array",target:"_blank",rel:"noopener noreferrer"},H={href:"https://leetcode.com/problems/apply-operations-to-an-array",target:"_blank",rel:"noopener noreferrer"};function J(K,M){const c=l("font"),a=l("RouterLink"),o=l("ExternalLinkIcon");return r(),i("div",null,[m,n("p",null,[t("🟢 "),e(c,{color:"#15bd66"},{default:s(()=>[t("Easy")]),_:1}),t("  🔖  "),e(a,{to:"/tag/array.html"},{default:s(()=>[k]),_:1}),t(),e(a,{to:"/tag/two-pointers.html"},{default:s(()=>[_]),_:1}),t("  🔗 "),n("a",g,[b,e(o)]),t(),n("a",f,[v,e(o)])]),y,u(" prettier-ignore "),n("table",null,[x,n("tbody",null,[n("tr",null,[w,C,n("td",z,[e(a,{to:"/problem/0027.html"},{default:s(()=>[t("[✓]")]),_:1})]),n("td",q,[e(a,{to:"/tag/array.html"},{default:s(()=>[E]),_:1}),t(),e(a,{to:"/tag/two-pointers.html"},{default:s(()=>[N]),_:1})]),L,n("td",V,[n("a",I,[t("🀄️"),e(o)]),t(),n("a",O,[t("🔗"),e(o)])])]),n("tr",null,[j,B,n("td",R,[e(a,{to:"/problem/2460.html"},{default:s(()=>[t("[✓]")]),_:1})]),n("td",D,[e(a,{to:"/tag/array.html"},{default:s(()=>[F]),_:1}),t(),e(a,{to:"/tag/two-pointers.html"},{default:s(()=>[G]),_:1}),t(),e(a,{to:"/tag/simulation.html"},{default:s(()=>[S]),_:1})]),T,n("td",Z,[n("a",A,[t("🀄️"),e(o)]),t(),n("a",H,[t("🔗"),e(o)])])])])])])}const Q=p(h,[["render",J],["__file","0283.html.vue"]]);export{Q as default};
