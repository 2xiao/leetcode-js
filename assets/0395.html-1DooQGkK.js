import{_ as p,r as l,o as i,c as r,a as n,b as t,d as s,w as e,f as u,e as d}from"./app-fBVbqwGY.js";const k={},h=n("h1",{id:"_395-至少有-k-个重复字符的最长子串",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_395-至少有-k-个重复字符的最长子串","aria-hidden":"true"},"#"),t(" 395. 至少有 K 个重复字符的最长子串")],-1),_=n("code",null,"哈希表",-1),g=n("code",null,"字符串",-1),m=n("code",null,"分治",-1),b=n("code",null,"滑动窗口",-1),f={href:"https://leetcode.cn/problems/longest-substring-with-at-least-k-repeating-characters",target:"_blank",rel:"noopener noreferrer"},v=n("code",null,"力扣",-1),y={href:"https://leetcode.com/problems/longest-substring-with-at-least-k-repeating-characters",target:"_blank",rel:"noopener noreferrer"},x=n("code",null,"LeetCode",-1),q=d(`<h2 id="题目" tabindex="-1"><a class="header-anchor" href="#题目" aria-hidden="true">#</a> 题目</h2><p>Given a string <code>s</code> and an integer <code>k</code>, return <em>the length of the longest substring of</em> <code>s</code> <em>such that the frequency of each character in this substring is greater than or equal to</em> <code>k</code>.</p><p>if no such substring exists, return 0.</p><p><strong>Example 1:</strong></p><blockquote><p>Input: s = &quot;aaabb&quot;, k = 3</p><p>Output: 3</p><p>Explanation: The longest substring is &quot;aaa&quot;, as &#39;a&#39; is repeated 3 times.</p></blockquote><p><strong>Example 2:</strong></p><blockquote><p>Input: s = &quot;ababbc&quot;, k = 2</p><p>Output: 5</p><p>Explanation: The longest substring is &quot;ababb&quot;, as &#39;a&#39; is repeated 2 times and &#39;b&#39; is repeated 3 times.</p></blockquote><p><strong>Constraints:</strong></p><ul><li><code>1 &lt;= s.length &lt;= 10^4</code></li><li><code>s</code> consists of only lowercase English letters.</li><li><code>1 &lt;= k &lt;= 10^5</code></li></ul><h2 id="题目大意" tabindex="-1"><a class="header-anchor" href="#题目大意" aria-hidden="true">#</a> 题目大意</h2><p>给你一个字符串 <code>s</code> 和一个整数 <code>k</code> ，请你找出 <code>s</code> 中的最长子串， 要求该子串中的每一字符出现次数都不少于 <code>k</code> 。返回这一子串的长度。</p><p>如果不存在这样的子字符串，则返回 0。</p><p><strong>示例 1：</strong></p><blockquote><p><strong>输入：</strong> s = &quot;aaabb&quot;, k = 3</p><p><strong>输出：</strong> 3</p><p><strong>解释：</strong> 最长子串为 &quot;aaa&quot; ，其中 &#39;a&#39; 重复了 3 次。</p></blockquote><p><strong>示例 2：</strong></p><blockquote><p><strong>输入：</strong> s = &quot;ababbc&quot;, k = 2</p><p><strong>输出：</strong> 5</p><p><strong>解释：</strong> 最长子串为 &quot;ababb&quot; ，其中 &#39;a&#39; 重复了 2 次， &#39;b&#39; 重复了 3 次。</p></blockquote><p><strong>提示：</strong></p><ul><li><code>1 &lt;= s.length &lt;= 10^4</code></li><li><code>s</code> 仅由小写英文字母组成</li><li><code>1 &lt;= k &lt;= 10^5</code></li></ul><h2 id="解题思路" tabindex="-1"><a class="header-anchor" href="#解题思路" aria-hidden="true">#</a> 解题思路</h2><ol><li><p><strong>字符种类限制的优化策略</strong></p><ul><li>不必暴力枚举所有子串，而是以 <strong>字符种类数量 (<code>targetUnique</code>)</strong> 为目标，从 <code>1</code> 到字符串中实际字符种类数进行滑动窗口遍历。</li><li><code>charLen</code> 是 <code>s</code> 中去重字符的数量，通过 <code>new Set(s.split(&#39;&#39;))</code> 来计算。</li></ul></li><li><p><strong>滑动窗口机制</strong></p><ul><li><strong>左右双指针 (<code>left</code> 和 <code>right</code>)</strong>：动态控制子串范围。</li><li><strong>字符计数 (<code>charCount</code>) 哈希表</strong>：记录当前窗口内字符的出现次数。</li><li><strong>状态变量 (<code>uniqueCount</code>, <code>countAtLeastK</code>)</strong>： <ul><li><code>uniqueCount</code>：窗口中不同字符的数量。</li><li><code>countAtLeastK</code>：出现次数至少为 <code>k</code> 的字符数量。</li></ul></li></ul></li><li><p><strong>窗口调整规则</strong></p><ul><li>每次向右扩展窗口时更新字符计数和状态变量。</li><li>如果 <code>uniqueCount &gt; targetUnique</code>，说明窗口内字符种类超出目标范围，需要移动左指针收缩窗口。</li><li>如果 <code>uniqueCount == countAtLeastK</code>，更新结果长度。</li></ul></li></ol><h4 id="复杂度分析" tabindex="-1"><a class="header-anchor" href="#复杂度分析" aria-hidden="true">#</a> 复杂度分析</h4><ul><li><strong>时间复杂度</strong>：<code>O(26 * n)</code><ul><li>外层循环最多 26 次（针对每种字符种类数量）。</li><li>内层滑动窗口处理时间复杂度为 <code>O(n)</code>。</li></ul></li><li><strong>空间复杂度</strong>：<code>O(26)</code>，用于字符计数哈希表 <code>charCount</code>。</li></ul><h2 id="代码" tabindex="-1"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>string<span class="token punctuation">}</span></span> <span class="token parameter">s</span>
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">}</span></span> <span class="token parameter">k</span>
 * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">}</span></span>
 */</span>
<span class="token keyword">var</span> <span class="token function-variable function">longestSubstring</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">s<span class="token punctuation">,</span> k</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>s <span class="token operator">||</span> s<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">let</span> maxLen <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">const</span> n <span class="token operator">=</span> s<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
	<span class="token keyword">const</span> charLen <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>size<span class="token punctuation">;</span>

	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> targetUnique <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> targetUnique <span class="token operator">&lt;=</span> charLen<span class="token punctuation">;</span> targetUnique<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">let</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>
			right <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
		<span class="token keyword">const</span> charCount <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">let</span> uniqueCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>
			countAtLeastK <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

		<span class="token keyword">while</span> <span class="token punctuation">(</span>right <span class="token operator">&lt;</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token comment">// 扩展窗口</span>
			<span class="token keyword">const</span> charRight <span class="token operator">=</span> s<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">;</span>
			charCount<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>charRight<span class="token punctuation">,</span> <span class="token punctuation">(</span>charCount<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>charRight<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span>charCount<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>charRight<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> uniqueCount<span class="token operator">++</span><span class="token punctuation">;</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span>charCount<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>charRight<span class="token punctuation">)</span> <span class="token operator">===</span> k<span class="token punctuation">)</span> countAtLeastK<span class="token operator">++</span><span class="token punctuation">;</span>
			right<span class="token operator">++</span><span class="token punctuation">;</span>

			<span class="token comment">// 收缩窗口</span>
			<span class="token keyword">while</span> <span class="token punctuation">(</span>uniqueCount <span class="token operator">&gt;</span> targetUnique<span class="token punctuation">)</span> <span class="token punctuation">{</span>
				<span class="token keyword">const</span> charLeft <span class="token operator">=</span> s<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">;</span>
				<span class="token keyword">if</span> <span class="token punctuation">(</span>charCount<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>charLeft<span class="token punctuation">)</span> <span class="token operator">===</span> k<span class="token punctuation">)</span> countAtLeastK<span class="token operator">--</span><span class="token punctuation">;</span>
				charCount<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>charLeft<span class="token punctuation">,</span> charCount<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>charLeft<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
				<span class="token keyword">if</span> <span class="token punctuation">(</span>charCount<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>charLeft<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> uniqueCount<span class="token operator">--</span><span class="token punctuation">;</span>
				left<span class="token operator">++</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span>

			<span class="token comment">// 更新结果</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span>uniqueCount <span class="token operator">===</span> countAtLeastK<span class="token punctuation">)</span> <span class="token punctuation">{</span>
				maxLen <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>maxLen<span class="token punctuation">,</span> right <span class="token operator">-</span> left<span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">return</span> maxLen<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="相关题目" tabindex="-1"><a class="header-anchor" href="#相关题目" aria-hidden="true">#</a> 相关题目</h2>`,25),w=n("thead",null,[n("tr",null,[n("th",{style:{"text-align":"center"}},"题号"),n("th",{style:{"text-align":"left"}},"标题"),n("th",{style:{"text-align":"center"}},"题解"),n("th",{style:{"text-align":"left"}},"标签"),n("th",{style:{"text-align":"center"}},"难度"),n("th",{style:{"text-align":"center"}},"力扣")])],-1),C=n("td",{style:{"text-align":"center"}},"2014",-1),L=n("td",{style:{"text-align":"left"}},"重复 K 次的最长子序列",-1),K=n("td",{style:{"text-align":"center"}},null,-1),E={style:{"text-align":"left"}},A=n("code",null,"贪心",-1),I=n("code",null,"字符串",-1),R=n("code",null,"回溯",-1),U=n("code",null,"2+",-1),N=n("td",{style:{"text-align":"center"}},"🔴",-1),O={style:{"text-align":"center"}},V={href:"https://leetcode.cn/problems/longest-subsequence-repeated-k-times",target:"_blank",rel:"noopener noreferrer"},S={href:"https://leetcode.com/problems/longest-subsequence-repeated-k-times",target:"_blank",rel:"noopener noreferrer"},j=n("td",{style:{"text-align":"center"}},"2067",-1),B=n("td",{style:{"text-align":"left"}},"等计数子串的数量 🔒",-1),M=n("td",{style:{"text-align":"center"}},null,-1),T={style:{"text-align":"left"}},z=n("code",null,"字符串",-1),G=n("code",null,"计数",-1),D=n("code",null,"前缀和",-1),F=n("td",{style:{"text-align":"center"}},"🟠",-1),H={style:{"text-align":"center"}},J={href:"https://leetcode.cn/problems/number-of-equal-count-substrings",target:"_blank",rel:"noopener noreferrer"},P={href:"https://leetcode.com/problems/number-of-equal-count-substrings",target:"_blank",rel:"noopener noreferrer"},Q=n("td",{style:{"text-align":"center"}},"2405",-1),W=n("td",{style:{"text-align":"left"}},"子字符串的最优划分",-1),X={style:{"text-align":"center"}},Y={style:{"text-align":"left"}},Z=n("code",null,"贪心",-1),$=n("code",null,"哈希表",-1),nn=n("code",null,"字符串",-1),tn=n("td",{style:{"text-align":"center"}},"🟠",-1),sn={style:{"text-align":"center"}},en={href:"https://leetcode.cn/problems/optimal-partition-of-string",target:"_blank",rel:"noopener noreferrer"},an={href:"https://leetcode.com/problems/optimal-partition-of-string",target:"_blank",rel:"noopener noreferrer"},on=n("td",{style:{"text-align":"center"}},"2958",-1),ln=n("td",{style:{"text-align":"left"}},"最多 K 个重复元素的最长子数组",-1),cn=n("td",{style:{"text-align":"center"}},null,-1),pn={style:{"text-align":"left"}},rn=n("code",null,"数组",-1),un=n("code",null,"哈希表",-1),dn=n("code",null,"滑动窗口",-1),kn=n("td",{style:{"text-align":"center"}},"🟠",-1),hn={style:{"text-align":"center"}},_n={href:"https://leetcode.cn/problems/length-of-longest-subarray-with-at-most-k-frequency",target:"_blank",rel:"noopener noreferrer"},gn={href:"https://leetcode.com/problems/length-of-longest-subarray-with-at-most-k-frequency",target:"_blank",rel:"noopener noreferrer"},mn=n("td",{style:{"text-align":"center"}},"2981",-1),bn=n("td",{style:{"text-align":"left"}},"找出出现至少三次的最长特殊子字符串 I",-1),fn=n("td",{style:{"text-align":"center"}},null,-1),vn={style:{"text-align":"left"}},yn=n("code",null,"哈希表",-1),xn=n("code",null,"字符串",-1),qn=n("code",null,"二分查找",-1),wn=n("code",null,"2+",-1),Cn=n("td",{style:{"text-align":"center"}},"🟠",-1),Ln={style:{"text-align":"center"}},Kn={href:"https://leetcode.cn/problems/find-longest-special-substring-that-occurs-thrice-i",target:"_blank",rel:"noopener noreferrer"},En={href:"https://leetcode.com/problems/find-longest-special-substring-that-occurs-thrice-i",target:"_blank",rel:"noopener noreferrer"},An=n("td",{style:{"text-align":"center"}},"2982",-1),In=n("td",{style:{"text-align":"left"}},"找出出现至少三次的最长特殊子字符串 II",-1),Rn=n("td",{style:{"text-align":"center"}},null,-1),Un={style:{"text-align":"left"}},Nn=n("code",null,"哈希表",-1),On=n("code",null,"字符串",-1),Vn=n("code",null,"二分查找",-1),Sn=n("code",null,"2+",-1),jn=n("td",{style:{"text-align":"center"}},"🟠",-1),Bn={style:{"text-align":"center"}},Mn={href:"https://leetcode.cn/problems/find-longest-special-substring-that-occurs-thrice-ii",target:"_blank",rel:"noopener noreferrer"},Tn={href:"https://leetcode.com/problems/find-longest-special-substring-that-occurs-thrice-ii",target:"_blank",rel:"noopener noreferrer"};function zn(Gn,Dn){const c=l("font"),a=l("RouterLink"),o=l("ExternalLinkIcon");return i(),r("div",null,[h,n("p",null,[t("🟠 "),s(c,{color:"#ffb800"},{default:e(()=>[t("Medium")]),_:1}),t("  🔖  "),s(a,{to:"/tag/hash-table.html"},{default:e(()=>[_]),_:1}),t(),s(a,{to:"/tag/string.html"},{default:e(()=>[g]),_:1}),t(),s(a,{to:"/tag/divide-and-conquer.html"},{default:e(()=>[m]),_:1}),t(),s(a,{to:"/tag/sliding-window.html"},{default:e(()=>[b]),_:1}),t("  🔗 "),n("a",f,[v,s(o)]),t(),n("a",y,[x,s(o)])]),q,u(" prettier-ignore "),n("table",null,[w,n("tbody",null,[n("tr",null,[C,L,K,n("td",E,[s(a,{to:"/tag/greedy.html"},{default:e(()=>[A]),_:1}),t(),s(a,{to:"/tag/string.html"},{default:e(()=>[I]),_:1}),t(),s(a,{to:"/tag/backtracking.html"},{default:e(()=>[R]),_:1}),t(),U]),N,n("td",O,[n("a",V,[t("🀄️"),s(o)]),t(),n("a",S,[t("🔗"),s(o)])])]),n("tr",null,[j,B,M,n("td",T,[s(a,{to:"/tag/string.html"},{default:e(()=>[z]),_:1}),t(),s(a,{to:"/tag/counting.html"},{default:e(()=>[G]),_:1}),t(),s(a,{to:"/tag/prefix-sum.html"},{default:e(()=>[D]),_:1})]),F,n("td",H,[n("a",J,[t("🀄️"),s(o)]),t(),n("a",P,[t("🔗"),s(o)])])]),n("tr",null,[Q,W,n("td",X,[s(a,{to:"/problem/2405.html"},{default:e(()=>[t("[✓]")]),_:1})]),n("td",Y,[s(a,{to:"/tag/greedy.html"},{default:e(()=>[Z]),_:1}),t(),s(a,{to:"/tag/hash-table.html"},{default:e(()=>[$]),_:1}),t(),s(a,{to:"/tag/string.html"},{default:e(()=>[nn]),_:1})]),tn,n("td",sn,[n("a",en,[t("🀄️"),s(o)]),t(),n("a",an,[t("🔗"),s(o)])])]),n("tr",null,[on,ln,cn,n("td",pn,[s(a,{to:"/tag/array.html"},{default:e(()=>[rn]),_:1}),t(),s(a,{to:"/tag/hash-table.html"},{default:e(()=>[un]),_:1}),t(),s(a,{to:"/tag/sliding-window.html"},{default:e(()=>[dn]),_:1})]),kn,n("td",hn,[n("a",_n,[t("🀄️"),s(o)]),t(),n("a",gn,[t("🔗"),s(o)])])]),n("tr",null,[mn,bn,fn,n("td",vn,[s(a,{to:"/tag/hash-table.html"},{default:e(()=>[yn]),_:1}),t(),s(a,{to:"/tag/string.html"},{default:e(()=>[xn]),_:1}),t(),s(a,{to:"/tag/binary-search.html"},{default:e(()=>[qn]),_:1}),t(),wn]),Cn,n("td",Ln,[n("a",Kn,[t("🀄️"),s(o)]),t(),n("a",En,[t("🔗"),s(o)])])]),n("tr",null,[An,In,Rn,n("td",Un,[s(a,{to:"/tag/hash-table.html"},{default:e(()=>[Nn]),_:1}),t(),s(a,{to:"/tag/string.html"},{default:e(()=>[On]),_:1}),t(),s(a,{to:"/tag/binary-search.html"},{default:e(()=>[Vn]),_:1}),t(),Sn]),jn,n("td",Bn,[n("a",Mn,[t("🀄️"),s(o)]),t(),n("a",Tn,[t("🔗"),s(o)])])])])])])}const Hn=p(k,[["render",zn],["__file","0395.html.vue"]]);export{Hn as default};
