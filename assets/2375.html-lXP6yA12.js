import{_ as l,r as c,o as i,c as r,a as n,b as t,d as s,w as e,f as d,e as u}from"./app-B5EG-zH0.js";const h={},k=n("h1",{id:"_2375-根据模式串构造最小数字",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_2375-根据模式串构造最小数字","aria-hidden":"true"},"#"),t(" 2375. 根据模式串构造最小数字")],-1),g=n("code",null,"栈",-1),m=n("code",null,"贪心",-1),_=n("code",null,"字符串",-1),b=n("code",null,"回溯",-1),f={href:"https://leetcode.cn/problems/construct-smallest-number-from-di-string",target:"_blank",rel:"noopener noreferrer"},q=n("code",null,"力扣",-1),v={href:"https://leetcode.com/problems/construct-smallest-number-from-di-string",target:"_blank",rel:"noopener noreferrer"},x=n("code",null,"LeetCode",-1),y=u(`<h2 id="题目" tabindex="-1"><a class="header-anchor" href="#题目" aria-hidden="true">#</a> 题目</h2><p>You are given a <strong>0-indexed</strong> string <code>pattern</code> of length <code>n</code> consisting of the characters <code>&#39;I&#39;</code> meaning <strong>increasing</strong> and <code>&#39;D&#39;</code> meaning <strong>decreasing</strong>.</p><p>A <strong>0-indexed</strong> string <code>num</code> of length <code>n + 1</code> is created using the following conditions:</p><ul><li><code>num</code> consists of the digits <code>&#39;1&#39;</code> to <code>&#39;9&#39;</code>, where each digit is used <strong>at most</strong> once.</li><li>If <code>pattern[i] == &#39;I&#39;</code>, then <code>num[i] &lt; num[i + 1]</code>.</li><li>If <code>pattern[i] == &#39;D&#39;</code>, then <code>num[i] &gt; num[i + 1]</code>.</li></ul><p>Return _the lexicographically<strong>smallest</strong> possible string _<code>num</code> <em>that meets the conditions.</em></p><p><strong>Example 1:</strong></p><blockquote><p>Input: pattern = &quot;IIIDIDDD&quot;</p><p>Output: &quot;123549876&quot;</p><p>Explanation: At indices 0, 1, 2, and 4 we must have that num[i] &lt; num[i+1].</p><p>At indices 3, 5, 6, and 7 we must have that num[i] &gt; num[i+1].</p><p>Some possible values of num are &quot;245639871&quot;, &quot;135749862&quot;, and &quot;123849765&quot;.</p><p>It can be proven that &quot;123549876&quot; is the smallest possible num that meets the conditions.</p><p>Note that &quot;123414321&quot; is not possible because the digit &#39;1&#39; is used more than once.</p></blockquote><p><strong>Example 2:</strong></p><blockquote><p>Input: pattern = &quot;DDD&quot;</p><p>Output: &quot;4321&quot;</p><p>Explanation:</p><p>Some possible values of num are &quot;9876&quot;, &quot;7321&quot;, and &quot;8742&quot;.</p><p>It can be proven that &quot;4321&quot; is the smallest possible num that meets the conditions.</p></blockquote><p><strong>Constraints:</strong></p><ul><li><code>1 &lt;= pattern.length &lt;= 8</code></li><li><code>pattern</code> consists of only the letters <code>&#39;I&#39;</code> and <code>&#39;D&#39;</code>.</li></ul><h2 id="题目大意" tabindex="-1"><a class="header-anchor" href="#题目大意" aria-hidden="true">#</a> 题目大意</h2><p>给你下标从 <strong>0</strong> 开始、长度为 <code>n</code> 的字符串 <code>pattern</code> ，它包含两种字符，<code>&#39;I&#39;</code> 表示 <strong>上升</strong> ，<code>&#39;D&#39;</code> 表示 <strong>下降</strong> 。</p><p>你需要构造一个下标从 <strong>0</strong> 开始长度为 <code>n + 1</code> 的字符串，且它要满足以下条件：</p><ul><li><code>num</code> 包含数字 <code>&#39;1&#39;</code> 到 <code>&#39;9&#39;</code> ，其中每个数字 <strong>至多</strong> 使用一次。</li><li>如果 <code>pattern[i] == &#39;I&#39;</code> ，那么 <code>num[i] &lt; num[i + 1]</code> 。</li><li>如果 <code>pattern[i] == &#39;D&#39;</code> ，那么 <code>num[i] &gt; num[i + 1]</code> 。</li></ul><p>请你返回满足上述条件字典序 <strong>最小</strong> 的字符串 <code>num</code>。</p><p><strong>示例 1：</strong></p><blockquote><p><strong>输入：</strong> pattern = &quot;IIIDIDDD&quot;</p><p><strong>输出：</strong> &quot;123549876&quot;</p><p><strong>解释：</strong> 下标 0 ，1 ，2 和 4 处，我们需要使 num[i] &lt; num[i+1] 。</p><p>下标 3 ，5 ，6 和 7 处，我们需要使 num[i] &gt; num[i+1] 。</p><p>一些可能的 num 的值为 &quot;245639871&quot; ，&quot;135749862&quot; 和 &quot;123849765&quot; 。</p><p>&quot;123549876&quot; 是满足条件最小的数字。</p><p>注意，&quot;123414321&quot; 不是可行解因为数字 &#39;1&#39; 使用次数超过 1 次。</p></blockquote><p><strong>示例 2：</strong></p><blockquote><p><strong>输入：</strong> pattern = &quot;DDD&quot;</p><p><strong>输出：</strong> &quot;4321&quot;</p><p><strong>解释：</strong></p><p>一些可能的 num 的值为 &quot;9876&quot; ，&quot;7321&quot; 和 &quot;8742&quot; 。</p><p>&quot;4321&quot; 是满足条件最小的数字。</p></blockquote><p><strong>提示：</strong></p><ul><li><code>1 &lt;= pattern.length &lt;= 8</code></li><li><code>pattern</code> 只包含字符 <code>&#39;I&#39;</code> 和 <code>&#39;D&#39;</code> 。</li></ul><h2 id="解题思路" tabindex="-1"><a class="header-anchor" href="#解题思路" aria-hidden="true">#</a> 解题思路</h2><p>题目保证 <code>pattern</code> 仅包含 <code>I</code> 和 <code>D</code>，并且 <code>pattern</code> 长度为 <code>n</code>，因此答案由 <code>n+1</code> 个不同的数字（1 到 <code>n+1</code>）组成。可以使用 <strong>贪心策略 + 单调栈</strong>：尽可能使左侧数字小，以确保整体的最小性。</p><ol><li><p>遍历 <code>pattern</code> 的索引 <code>i</code>，<strong>将 <code>i+1</code> 压入栈</strong>（因为最终结果包含 <code>n+1</code> 个数）。</p></li><li><p><strong>如果 <code>pattern[i] == &#39;I&#39;</code> 或 <code>i == n</code>（遍历结束）</strong>，依次弹出栈中的所有元素，加入 <code>res</code> 中。</p></li><li><p>最后，将 <code>res</code> 数组转换成字符串返回。</p></li></ol><h4 id="复杂度分析" tabindex="-1"><a class="header-anchor" href="#复杂度分析" aria-hidden="true">#</a> 复杂度分析</h4><ul><li><strong>时间复杂度</strong>：<code>O(n)</code>，每个元素最多入栈和出栈一次。</li><li><strong>空间复杂度</strong>：<code>O(n)</code>，使用 <code>stack</code> 额外存储 <code>n+1</code> 个元素。</li></ul><h2 id="代码" tabindex="-1"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>string<span class="token punctuation">}</span></span> <span class="token parameter">pattern</span>
 * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>string<span class="token punctuation">}</span></span>
 */</span>
<span class="token keyword">var</span> <span class="token function-variable function">smallestNumber</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">pattern</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">const</span> n <span class="token operator">=</span> pattern<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
	<span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token keyword">let</span> stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>pattern<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">&#39;I&#39;</span> <span class="token operator">||</span> i <span class="token operator">==</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">while</span> <span class="token punctuation">(</span>stack<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
				res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="相关题目" tabindex="-1"><a class="header-anchor" href="#相关题目" aria-hidden="true">#</a> 相关题目</h2>`,30),I=n("thead",null,[n("tr",null,[n("th",{style:{"text-align":"center"}},"题号"),n("th",{style:{"text-align":"left"}},"标题"),n("th",{style:{"text-align":"center"}},"题解"),n("th",{style:{"text-align":"left"}},"标签"),n("th",{style:{"text-align":"center"}},"难度"),n("th",{style:{"text-align":"center"}},"力扣")])],-1),D=n("td",{style:{"text-align":"center"}},"942",-1),w=n("td",{style:{"text-align":"left"}},"增减字符串匹配",-1),E={style:{"text-align":"center"}},N={style:{"text-align":"left"}},C=n("code",null,"贪心",-1),L=n("code",null,"数组",-1),V=n("code",null,"双指针",-1),j=n("code",null,"1+",-1),O=n("td",{style:{"text-align":"center"}},"🟢",-1),A={style:{"text-align":"center"}},B={href:"https://leetcode.cn/problems/di-string-match",target:"_blank",rel:"noopener noreferrer"},R={href:"https://leetcode.com/problems/di-string-match",target:"_blank",rel:"noopener noreferrer"};function S(M,T){const p=c("font"),o=c("RouterLink"),a=c("ExternalLinkIcon");return i(),r("div",null,[k,n("p",null,[t("🟠 "),s(p,{color:"#ffb800"},{default:e(()=>[t("Medium")]),_:1}),t("  🔖  "),s(o,{to:"/tag/stack.html"},{default:e(()=>[g]),_:1}),t(),s(o,{to:"/tag/greedy.html"},{default:e(()=>[m]),_:1}),t(),s(o,{to:"/tag/string.html"},{default:e(()=>[_]),_:1}),t(),s(o,{to:"/tag/backtracking.html"},{default:e(()=>[b]),_:1}),t("  🔗 "),n("a",f,[q,s(a)]),t(),n("a",v,[x,s(a)])]),y,d(" prettier-ignore "),n("table",null,[I,n("tbody",null,[n("tr",null,[D,w,n("td",E,[s(o,{to:"/problem/0942.html"},{default:e(()=>[t("[✓]")]),_:1})]),n("td",N,[s(o,{to:"/tag/greedy.html"},{default:e(()=>[C]),_:1}),t(),s(o,{to:"/tag/array.html"},{default:e(()=>[L]),_:1}),t(),s(o,{to:"/tag/two-pointers.html"},{default:e(()=>[V]),_:1}),t(),j]),O,n("td",A,[n("a",B,[t("🀄️"),s(a)]),t(),n("a",R,[t("🔗"),s(a)])])])])])])}const z=l(h,[["render",S],["__file","2375.html.vue"]]);export{z as default};
