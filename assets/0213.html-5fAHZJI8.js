import{_ as p,r as l,o as r,c as i,a as n,b as t,d as e,w as s,f as d,e as u}from"./app-B5EG-zH0.js";const h={},_=n("h1",{id:"_213-打家劫舍-ii",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_213-打家劫舍-ii","aria-hidden":"true"},"#"),t(" 213. 打家劫舍 II")],-1),m=n("code",null,"数组",-1),k=n("code",null,"动态规划",-1),g={href:"https://leetcode.cn/problems/house-robber-ii",target:"_blank",rel:"noopener noreferrer"},b=n("code",null,"力扣",-1),f={href:"https://leetcode.com/problems/house-robber-ii",target:"_blank",rel:"noopener noreferrer"},y=n("code",null,"LeetCode",-1),v=u(`<h2 id="题目" tabindex="-1"><a class="header-anchor" href="#题目" aria-hidden="true">#</a> 题目</h2><p>You are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed. All houses at this place are <strong>arranged in a circle.</strong> That means the first house is the neighbor of the last one. Meanwhile, adjacent houses have a security system connected, and <strong>it will automatically contact the police if two adjacent houses were broken into on the same night</strong>.</p><p>Given an integer array <code>nums</code> representing the amount of money of each house, return <em>the maximum amount of money you can rob tonight<strong>without alerting the police</strong></em>.</p><p><strong>Example 1:</strong></p><blockquote><p>Input: nums = [2,3,2]</p><p>Output: 3</p><p>Explanation: You cannot rob house 1 (money = 2) and then rob house 3 (money = 2), because they are adjacent houses.</p></blockquote><p><strong>Example 2:</strong></p><blockquote><p>Input: nums = [1,2,3,1]</p><p>Output: 4</p><p>Explanation: Rob house 1 (money = 1) and then rob house 3 (money = 3).</p><p>Total amount you can rob = 1 + 3 = 4.</p></blockquote><p><strong>Example 3:</strong></p><blockquote><p>Input: nums = [1,2,3]</p><p>Output: 3</p></blockquote><p><strong>Constraints:</strong></p><ul><li><code>1 &lt;= nums.length &lt;= 100</code></li><li><code>0 &lt;= nums[i] &lt;= 1000</code></li></ul><h2 id="题目大意" tabindex="-1"><a class="header-anchor" href="#题目大意" aria-hidden="true">#</a> 题目大意</h2><p>你是一个专业的小偷，计划偷窃沿街的房屋，每间房内都藏有一定的现金。这个地方所有的房屋都 <strong>围成一圈</strong> ，这意味着第一个房屋和最后一个房屋是紧挨着的。同时，相邻的房屋装有相互连通的防盗系统，<strong>如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警</strong> 。</p><p>给定一个代表每个房屋存放金额的非负整数数组，计算你 <strong>在不触动警报装置的情况下</strong> ，今晚能够偷窃到的最高金额。</p><p><strong>示例 1：</strong></p><blockquote><p><strong>输入：</strong> nums = [2,3,2]</p><p><strong>输出：</strong> 3</p><p><strong>解释：</strong> 你不能先偷窃 1 号房屋（金额 = 2），然后偷窃 3 号房屋（金额 = 2）, 因为他们是相邻的。</p></blockquote><p><strong>示例 2：</strong></p><blockquote><p><strong>输入：</strong> nums = [1,2,3,1]</p><p><strong>输出：</strong> 4</p><p><strong>解释：</strong> 你可以先偷窃 1 号房屋（金额 = 1），然后偷窃 3 号房屋（金额 = 3）。</p><blockquote><p>偷窃到的最高金额 = 1 + 3 = 4 。</p></blockquote></blockquote><p><strong>示例 3：</strong></p><blockquote><p><strong>输入：</strong> nums = [1,2,3]</p><p><strong>输出：</strong> 3</p></blockquote><p><strong>提示：</strong></p><ul><li><code>1 &lt;= nums.length &lt;= 100</code></li><li><code>0 &lt;= nums[i] &lt;= 1000</code></li></ul><h2 id="解题思路" tabindex="-1"><a class="header-anchor" href="#解题思路" aria-hidden="true">#</a> 解题思路</h2><p>这道题目是经典的“打家劫舍”问题的环形变种：在一个环形街区，房子排列成一个环，要求计算能够偷窃到的最高金额。由于房屋是环形排列，不能同时偷第一个房子和最后一个房子。</p><ol><li><p><strong>环形问题拆解</strong>：</p><ul><li>如果偷了第一个房子，那么最后一个房子不能偷，问题变为从第一个房子到倒数第二个房子的线性“打家劫舍”问题。</li><li>如果不偷第一个房子，那么可以从第二个房子到最后一个房子进行线性“打家劫舍”。</li></ul></li><li><p><strong>动态规划</strong>：</p><ul><li><p>设 <code>dp[i]</code> 表示偷窃到第 <code>i</code> 个房子时的最高金额。</p></li><li><p>转移方程为：</p><p><code>dp[i] = max(dp[i-1], dp[i-2] + nums[i])</code></p><ul><li><code>dp[i-1]</code>：不偷第 <code>i</code> 个房子，取前一个房子的最大金额。</li><li><code>dp[i-2] + nums[i]</code>：偷第 <code>i</code> 个房子，则前 <code>i-1</code> 个房子不能偷，取前 <code>i-2</code> 个房子的最大金额加上第 <code>i</code> 个房子的金额。</li></ul></li><li><p>初始化：</p><ul><li><code>dp[0] = nums[0]</code></li><li><code>dp[1] = max(nums[0], nums[1])</code></li></ul></li></ul></li><li><p><strong>两个独立的子问题</strong>：</p><ul><li>子问题 1：求解从第一个房子到倒数第二个房子的最高金额。</li><li>子问题 2：求解从第二个房子到最后一个房子的最高金额。</li></ul></li><li><p><strong>最终结果</strong>：</p><ul><li>返回两个子问题的最大值：<code>result = max(subproblem1, subproblem2)</code></li></ul></li></ol><h4 id="复杂度分析" tabindex="-1"><a class="header-anchor" href="#复杂度分析" aria-hidden="true">#</a> 复杂度分析</h4><ul><li><strong>时间复杂度</strong>：<code>O(n)</code>，每个子问题遍历一次数组，总共两次遍历。</li><li><strong>空间复杂度</strong>：<code>O(1)</code>，使用常数级变量存储中间结果。</li></ul><h2 id="代码" tabindex="-1"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span> <span class="token parameter">nums</span>
 * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">}</span></span>
 */</span>
<span class="token keyword">var</span> <span class="token function-variable function">rob</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">nums</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">const</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

	<span class="token comment">// 动态规划，解决线性问题</span>
	<span class="token keyword">const</span> <span class="token function-variable function">robLinear</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">nums<span class="token punctuation">,</span> start<span class="token punctuation">,</span> end</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
		<span class="token keyword">let</span> prev2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>
			prev1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
		<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> start<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> end<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">const</span> cur <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>prev1<span class="token punctuation">,</span> prev2 <span class="token operator">+</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			prev2 <span class="token operator">=</span> prev1<span class="token punctuation">;</span>
			prev1 <span class="token operator">=</span> cur<span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">return</span> prev1<span class="token punctuation">;</span>
	<span class="token punctuation">}</span><span class="token punctuation">;</span>

	<span class="token comment">// 分别计算两个子问题</span>
	<span class="token keyword">const</span> case1 <span class="token operator">=</span> <span class="token function">robLinear</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> n <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 偷第一个房子</span>
	<span class="token keyword">const</span> case2 <span class="token operator">=</span> <span class="token function">robLinear</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 不偷第一个房子</span>

	<span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>case1<span class="token punctuation">,</span> case2<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="相关题目" tabindex="-1"><a class="header-anchor" href="#相关题目" aria-hidden="true">#</a> 相关题目</h2>`,30),x=n("thead",null,[n("tr",null,[n("th",{style:{"text-align":"center"}},"题号"),n("th",{style:{"text-align":"left"}},"标题"),n("th",{style:{"text-align":"center"}},"题解"),n("th",{style:{"text-align":"left"}},"标签"),n("th",{style:{"text-align":"center"}},"难度"),n("th",{style:{"text-align":"center"}},"力扣")])],-1),w=n("td",{style:{"text-align":"center"}},"198",-1),q=n("td",{style:{"text-align":"left"}},"打家劫舍",-1),I={style:{"text-align":"center"}},E={style:{"text-align":"left"}},L=n("code",null,"数组",-1),j=n("code",null,"动态规划",-1),C=n("td",{style:{"text-align":"center"}},"🟠",-1),N={style:{"text-align":"center"}},O={href:"https://leetcode.cn/problems/house-robber",target:"_blank",rel:"noopener noreferrer"},V={href:"https://leetcode.com/problems/house-robber",target:"_blank",rel:"noopener noreferrer"},M=n("td",{style:{"text-align":"center"}},"256",-1),B=n("td",{style:{"text-align":"left"}},"粉刷房子 🔒",-1),R=n("td",{style:{"text-align":"center"}},null,-1),T={style:{"text-align":"left"}},Y=n("code",null,"数组",-1),A=n("code",null,"动态规划",-1),G=n("td",{style:{"text-align":"center"}},"🟠",-1),S={style:{"text-align":"center"}},z={href:"https://leetcode.cn/problems/paint-house",target:"_blank",rel:"noopener noreferrer"},D={href:"https://leetcode.com/problems/paint-house",target:"_blank",rel:"noopener noreferrer"},F=n("td",{style:{"text-align":"center"}},"276",-1),H=n("td",{style:{"text-align":"left"}},"栅栏涂色 🔒",-1),J=n("td",{style:{"text-align":"center"}},null,-1),K={style:{"text-align":"left"}},P=n("code",null,"动态规划",-1),Q=n("td",{style:{"text-align":"center"}},"🟠",-1),U={style:{"text-align":"center"}},W={href:"https://leetcode.cn/problems/paint-fence",target:"_blank",rel:"noopener noreferrer"},X={href:"https://leetcode.com/problems/paint-fence",target:"_blank",rel:"noopener noreferrer"},Z=n("td",{style:{"text-align":"center"}},"337",-1),$=n("td",{style:{"text-align":"left"}},"打家劫舍 III",-1),nn={style:{"text-align":"center"}},tn={style:{"text-align":"left"}},en=n("code",null,"树",-1),sn=n("code",null,"深度优先搜索",-1),an=n("code",null,"动态规划",-1),on=n("code",null,"1+",-1),ln=n("td",{style:{"text-align":"center"}},"🟠",-1),cn={style:{"text-align":"center"}},pn={href:"https://leetcode.cn/problems/house-robber-iii",target:"_blank",rel:"noopener noreferrer"},rn={href:"https://leetcode.com/problems/house-robber-iii",target:"_blank",rel:"noopener noreferrer"},dn=n("td",{style:{"text-align":"center"}},"600",-1),un=n("td",{style:{"text-align":"left"}},"不含连续1的非负整数",-1),hn=n("td",{style:{"text-align":"center"}},null,-1),_n={style:{"text-align":"left"}},mn=n("code",null,"动态规划",-1),kn=n("td",{style:{"text-align":"center"}},"🔴",-1),gn={style:{"text-align":"center"}},bn={href:"https://leetcode.cn/problems/non-negative-integers-without-consecutive-ones",target:"_blank",rel:"noopener noreferrer"},fn={href:"https://leetcode.com/problems/non-negative-integers-without-consecutive-ones",target:"_blank",rel:"noopener noreferrer"},yn=n("td",{style:{"text-align":"center"}},"656",-1),vn=n("td",{style:{"text-align":"left"}},"成本最小路径 🔒",-1),xn=n("td",{style:{"text-align":"center"}},null,-1),wn={style:{"text-align":"left"}},qn=n("code",null,"数组",-1),In=n("code",null,"动态规划",-1),En=n("td",{style:{"text-align":"center"}},"🔴",-1),Ln={style:{"text-align":"center"}},jn={href:"https://leetcode.cn/problems/coin-path",target:"_blank",rel:"noopener noreferrer"},Cn={href:"https://leetcode.com/problems/coin-path",target:"_blank",rel:"noopener noreferrer"};function Nn(On,Vn){const c=l("font"),a=l("RouterLink"),o=l("ExternalLinkIcon");return r(),i("div",null,[_,n("p",null,[t("🟠 "),e(c,{color:"#ffb800"},{default:s(()=>[t("Medium")]),_:1}),t("  🔖  "),e(a,{to:"/tag/array.html"},{default:s(()=>[m]),_:1}),t(),e(a,{to:"/tag/dynamic-programming.html"},{default:s(()=>[k]),_:1}),t("  🔗 "),n("a",g,[b,e(o)]),t(),n("a",f,[y,e(o)])]),v,d(" prettier-ignore "),n("table",null,[x,n("tbody",null,[n("tr",null,[w,q,n("td",I,[e(a,{to:"/problem/0198.html"},{default:s(()=>[t("[✓]")]),_:1})]),n("td",E,[e(a,{to:"/tag/array.html"},{default:s(()=>[L]),_:1}),t(),e(a,{to:"/tag/dynamic-programming.html"},{default:s(()=>[j]),_:1})]),C,n("td",N,[n("a",O,[t("🀄️"),e(o)]),t(),n("a",V,[t("🔗"),e(o)])])]),n("tr",null,[M,B,R,n("td",T,[e(a,{to:"/tag/array.html"},{default:s(()=>[Y]),_:1}),t(),e(a,{to:"/tag/dynamic-programming.html"},{default:s(()=>[A]),_:1})]),G,n("td",S,[n("a",z,[t("🀄️"),e(o)]),t(),n("a",D,[t("🔗"),e(o)])])]),n("tr",null,[F,H,J,n("td",K,[e(a,{to:"/tag/dynamic-programming.html"},{default:s(()=>[P]),_:1})]),Q,n("td",U,[n("a",W,[t("🀄️"),e(o)]),t(),n("a",X,[t("🔗"),e(o)])])]),n("tr",null,[Z,$,n("td",nn,[e(a,{to:"/problem/0337.html"},{default:s(()=>[t("[✓]")]),_:1})]),n("td",tn,[e(a,{to:"/tag/tree.html"},{default:s(()=>[en]),_:1}),t(),e(a,{to:"/tag/depth-first-search.html"},{default:s(()=>[sn]),_:1}),t(),e(a,{to:"/tag/dynamic-programming.html"},{default:s(()=>[an]),_:1}),t(),on]),ln,n("td",cn,[n("a",pn,[t("🀄️"),e(o)]),t(),n("a",rn,[t("🔗"),e(o)])])]),n("tr",null,[dn,un,hn,n("td",_n,[e(a,{to:"/tag/dynamic-programming.html"},{default:s(()=>[mn]),_:1})]),kn,n("td",gn,[n("a",bn,[t("🀄️"),e(o)]),t(),n("a",fn,[t("🔗"),e(o)])])]),n("tr",null,[yn,vn,xn,n("td",wn,[e(a,{to:"/tag/array.html"},{default:s(()=>[qn]),_:1}),t(),e(a,{to:"/tag/dynamic-programming.html"},{default:s(()=>[In]),_:1})]),En,n("td",Ln,[n("a",jn,[t("🀄️"),e(o)]),t(),n("a",Cn,[t("🔗"),e(o)])])])])])])}const Bn=p(h,[["render",Nn],["__file","0213.html.vue"]]);export{Bn as default};
