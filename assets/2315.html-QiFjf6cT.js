import{_ as p,r as o,o as d,c as l,a as e,b as n,d as s,w as t,e as i}from"./app-fBVbqwGY.js";const u={},k=e("h1",{id:"_2315-统计星号",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#_2315-统计星号","aria-hidden":"true"},"#"),n(" 2315. 统计星号")],-1),h=e("code",null,"字符串",-1),g={href:"https://leetcode.cn/problems/count-asterisks",target:"_blank",rel:"noopener noreferrer"},m=e("code",null,"力扣",-1),b={href:"https://leetcode.com/problems/count-asterisks",target:"_blank",rel:"noopener noreferrer"},v=e("code",null,"LeetCode",-1),f=i(`<h2 id="题目" tabindex="-1"><a class="header-anchor" href="#题目" aria-hidden="true">#</a> 题目</h2><p>You are given a string <code>s</code>, where every <strong>two</strong> consecutive vertical bars <code>&#39;|&#39;</code> are grouped into a <strong>pair</strong>. In other words, the 1st and 2nd <code>&#39;|&#39;</code> make a pair, the 3rd and 4th <code>&#39;|&#39;</code> make a pair, and so forth.</p><p>Return <em>the number of</em><code>&#39;*&#39;</code><em>in</em><code>s</code> _,<strong>excluding</strong> the _<code>&#39;*&#39;</code><em>between each pair of</em><code>&#39;|&#39;</code>.</p><p><strong>Note</strong> that each <code>&#39;|&#39;</code> will belong to <strong>exactly</strong> one pair.</p><p><strong>Example 1:</strong></p><blockquote><p>Input: s = <code>&quot;l|*e*et|c**o|*de|&quot;</code></p><p>Output: 2</p><p>Explanation: The considered characters are underlined: <code>&quot;l|*e*et|c**o|*de|&quot;</code>.</p><p>The characters between the first and second &#39;|&#39; are excluded from the answer.</p><p>Also, the characters between the third and fourth &#39;|&#39; are excluded from the answer.</p><p>There are 2 asterisks considered. Therefore, we return 2.</p></blockquote><p><strong>Example 2:</strong></p><blockquote><p>Input: s = &quot;iamprogrammer&quot;</p><p>Output: 0</p><p>Explanation: In this example, there are no asterisks in s. Therefore, we return 0.</p></blockquote><p><strong>Example 3:</strong></p><blockquote><p>Input: s = <code>&quot;yo|uar|e**|b|e***au|tifu|l&quot;</code></p><p>Output: 5</p><p>Explanation: The considered characters are underlined: <code>&quot;yo|uar|e**|b|e***au|tifu|l&quot;</code>. There are 5 asterisks considered. Therefore, we return 5.</p></blockquote><p><strong>Constraints:</strong></p><ul><li><code>1 &lt;= s.length &lt;= 1000</code></li><li><code>s</code> consists of lowercase English letters, vertical bars <code>&#39;|&#39;</code>, and asterisks <code>&#39;*&#39;</code>.</li><li><code>s</code> contains an <strong>even</strong> number of vertical bars <code>&#39;|&#39;</code>.</li></ul><h2 id="题目大意" tabindex="-1"><a class="header-anchor" href="#题目大意" aria-hidden="true">#</a> 题目大意</h2><p>给你一个字符串 <code>s</code> ，每 <strong>两个</strong> 连续竖线 <code>&#39;|&#39;</code> 为 <strong>一对</strong> 。换言之，第一个和第二个 <code>&#39;|&#39;</code> 为一对，第三个和第四个 <code>&#39;|&#39;</code> 为一对，以此类推。</p><p>请你返回 <strong>不在</strong> 竖线对之间，<code>s</code> 中 <code>&#39;*&#39;</code> 的数目。</p><p><strong>注意</strong> ，每个竖线 <code>&#39;|&#39;</code> 都会 <strong>恰好</strong> 属于一个对。</p><p><strong>示例 1：</strong></p><blockquote><p><strong>输入：</strong> s = <code>&quot;l|*e*et|c**o|*de|&quot;</code></p><p><strong>输出：</strong> 2</p><p><strong>解释：</strong> 不在竖线对之间的字符加粗加斜体后，得到字符串：<code>&quot;l|*e*et|c**o|*de|&quot;</code> 。</p><p>第一和第二条竖线 &#39;|&#39; 之间的字符不计入答案。</p><p>同时，第三条和第四条竖线 &#39;|&#39; 之间的字符也不计入答案。</p><p>不在竖线对之间总共有 2 个星号，所以我们返回 2 。</p></blockquote><p><strong>示例 2：</strong></p><blockquote><p><strong>输入：</strong> s = &quot;iamprogrammer&quot;</p><p><strong>输出：</strong> 0</p><p><strong>解释：</strong> 在这个例子中，s 中没有星号。所以返回 0 。</p></blockquote><p><strong>示例 3：</strong></p><blockquote><p><strong>输入：</strong> s = <code>&quot;yo|uar|e**|b|e***au|tifu|l&quot;</code></p><p><strong>输出：</strong> 5</p><p><strong>解释：</strong> 需要考虑的字符加粗加斜体后：<code>&quot;yo|uar|e**|b|e***au|tifu|l&quot;</code> 。不在竖线对之间总共有 5 个星号。所以我们返回 5 。</p></blockquote><p><strong>提示：</strong></p><ul><li><code>1 &lt;= s.length &lt;= 1000</code></li><li><code>s</code> 只包含小写英文字母，竖线 <code>&#39;|&#39;</code> 和星号 <code>&#39;*&#39;</code> 。</li><li><code>s</code> 包含 <strong>偶数</strong> 个竖线 <code>&#39;|&#39;</code> 。</li></ul><h2 id="解题思路" tabindex="-1"><a class="header-anchor" href="#解题思路" aria-hidden="true">#</a> 解题思路</h2><ol><li><p><strong>初始化变量</strong>：</p><ul><li><code>count</code>：统计星号 <code>*</code> 的数量。</li><li><code>bars</code>：记录竖线 <code>|</code> 的出现次数，用于判断当前星号是否在竖线包围内。</li></ul></li><li><p><strong>遍历字符串</strong>：</p><ul><li>遍历字符串中的每个字符。</li><li>如果遇到竖线 <code>|</code>，增加 <code>bars</code> 的计数。</li><li>如果遇到星号 <code>*</code>，检查 <code>bars</code> 的奇偶性： <ul><li>如果 <code>bars</code> 是偶数，说明当前星号不在竖线包围内，增加 <code>count</code>。</li></ul></li></ul></li><li><p><strong>返回结果</strong>：</p><ul><li>遍历完成后，返回统计的星号数量 <code>count</code>。</li></ul></li></ol><h4 id="复杂度分析" tabindex="-1"><a class="header-anchor" href="#复杂度分析" aria-hidden="true">#</a> 复杂度分析</h4><ul><li><strong>时间复杂度</strong>：<code>O(n)</code>，其中 <code>n</code> 是字符串的长度，遍历字符串。</li><li><strong>空间复杂度</strong>：<code>O(1)</code>，只使用了常数级变量。</li></ul><h2 id="代码" tabindex="-1"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>string<span class="token punctuation">}</span></span> <span class="token parameter">s</span>
 * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">}</span></span>
 */</span>
<span class="token keyword">var</span> <span class="token function-variable function">countAsterisks</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">s</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>
		bars <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> char <span class="token keyword">of</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>char <span class="token operator">==</span> <span class="token string">&#39;|&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			bars<span class="token operator">++</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>char <span class="token operator">==</span> <span class="token string">&#39;*&#39;</span> <span class="token operator">&amp;&amp;</span> bars <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			count<span class="token operator">++</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> count<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,30);function _(q,w){const c=o("font"),r=o("RouterLink"),a=o("ExternalLinkIcon");return d(),l("div",null,[k,e("p",null,[n("🟢 "),s(c,{color:"#15bd66"},{default:t(()=>[n("Easy")]),_:1}),n("  🔖  "),s(r,{to:"/tag/string.html"},{default:t(()=>[h]),_:1}),n("  🔗 "),e("a",g,[m,s(a)]),n(),e("a",b,[v,s(a)])]),f])}const y=p(u,[["render",_],["__file","2315.html.vue"]]);export{y as default};
