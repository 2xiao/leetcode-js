import{_ as p,r as c,o as r,c as i,a as n,b as e,d as t,w as s,f as d,e as u}from"./app-fBVbqwGY.js";const h={},k=n("h1",{id:"_942-增减字符串匹配",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_942-增减字符串匹配","aria-hidden":"true"},"#"),e(" 942. 增减字符串匹配")],-1),g=n("code",null,"贪心",-1),m=n("code",null,"数组",-1),_=n("code",null,"双指针",-1),f=n("code",null,"字符串",-1),b={href:"https://leetcode.cn/problems/di-string-match",target:"_blank",rel:"noopener noreferrer"},v=n("code",null,"力扣",-1),y={href:"https://leetcode.com/problems/di-string-match",target:"_blank",rel:"noopener noreferrer"},x=n("code",null,"LeetCode",-1),q=u(`<h2 id="题目" tabindex="-1"><a class="header-anchor" href="#题目" aria-hidden="true">#</a> 题目</h2><p>A permutation <code>perm</code> of <code>n + 1</code> integers of all the integers in the range <code>[0, n]</code> can be represented as a string <code>s</code> of length <code>n</code> where:</p><ul><li><code>s[i] == &#39;I&#39;</code> if <code>perm[i] &lt; perm[i + 1]</code>, and</li><li><code>s[i] == &#39;D&#39;</code> if <code>perm[i] &gt; perm[i + 1]</code>.</li></ul><p>Given a string <code>s</code>, reconstruct the permutation <code>perm</code> and return it. If there are multiple valid permutations perm, return <strong>any of them</strong>.</p><p><strong>Example 1:</strong></p><blockquote><p>Input: s = &quot;IDID&quot;</p><p>Output: [0,4,1,3,2]</p></blockquote><p><strong>Example 2:</strong></p><blockquote><p>Input: s = &quot;III&quot;</p><p>Output: [0,1,2,3]</p></blockquote><p><strong>Example 3:</strong></p><blockquote><p>Input: s = &quot;DDI&quot;</p><p>Output: [3,2,0,1]</p></blockquote><p><strong>Constraints:</strong></p><ul><li><code>1 &lt;= s.length &lt;= 10^5</code></li><li><code>s[i]</code> is either <code>&#39;I&#39;</code> or <code>&#39;D&#39;</code>.</li></ul><h2 id="题目大意" tabindex="-1"><a class="header-anchor" href="#题目大意" aria-hidden="true">#</a> 题目大意</h2><p>由范围 <code>[0,n]</code> 内所有整数组成的 <code>n + 1</code> 个整数的排列序列可以表示为长度为 <code>n</code> 的字符串 <code>s</code> ，其中:</p><ul><li>如果 <code>perm[i] &lt; perm[i + 1]</code> ，那么 <code>s[i] == &#39;I&#39;</code></li><li>如果 <code>perm[i] &gt; perm[i + 1]</code> ，那么 <code>s[i] == &#39;D&#39;</code></li></ul><p>给定一个字符串 <code>s</code> ，重构排列 <code>perm</code> 并返回它。如果有多个有效排列 perm，则返回其中 <strong>任何一个</strong> 。</p><p><strong>示例 1：</strong></p><blockquote><p><strong>输入：</strong> s = &quot;IDID&quot;</p><p><strong>输出：</strong>[0,4,1,3,2]</p></blockquote><p><strong>示例 2：</strong></p><blockquote><p><strong>输入：</strong> s = &quot;III&quot;</p><p><strong>输出：</strong>[0,1,2,3]</p></blockquote><p><strong>示例 3：</strong></p><blockquote><p><strong>输入：</strong> s = &quot;DDI&quot;</p><p><strong>输出：</strong>[3,2,0,1]</p></blockquote><p><strong>提示：</strong></p><ul><li><code>1 &lt;= s.length &lt;= 10^5</code></li><li><code>s</code> 只包含字符 <code>&quot;I&quot;</code> 或 <code>&quot;D&quot;</code></li></ul><h2 id="解题思路" tabindex="-1"><a class="header-anchor" href="#解题思路" aria-hidden="true">#</a> 解题思路</h2><p>可以使用双指针的方法，分别从数组的最小值 <code>left</code> 和最大值 <code>right</code> 开始分配：</p><ol><li><strong>初始化</strong>：令 <code>left = 0</code> 和 <code>right = n</code>，<code>n</code> 是字符串 <code>s</code> 的长度。结果数组 <code>res</code> 为空。</li><li><strong>遍历字符串</strong>： <ul><li>遇到字符 <code>&#39;I&#39;</code>：将 <code>left</code> 的值加入数组，并将 <code>left</code> 自增。</li><li>遇到字符 <code>&#39;D&#39;</code>：将 <code>right</code> 的值加入数组，并将 <code>right</code> 自减。</li></ul></li><li><strong>处理最后一个数</strong>：由于字符串长度为 <code>n</code>，结果数组需要 <code>n+1</code> 个元素。最后一个数可以是 <code>left</code> 或 <code>right</code>（两者此时相等）。</li><li>返回结果数组 <code>res</code>。</li></ol><h4 id="复杂度分析" tabindex="-1"><a class="header-anchor" href="#复杂度分析" aria-hidden="true">#</a> 复杂度分析</h4><ul><li><strong>时间复杂度</strong>: <code>O(n)</code>，需要遍历字符串 <code>s</code> 一次。</li><li><strong>空间复杂度</strong>: <code>O(n)</code>，用于存储结果数组 <code>res</code>。</li></ul><h2 id="代码" tabindex="-1"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>string<span class="token punctuation">}</span></span> <span class="token parameter">s</span>
 * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span>
 */</span>
<span class="token keyword">var</span> <span class="token function-variable function">diStringMatch</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">s</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">const</span> n <span class="token operator">=</span> s<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
	<span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token keyword">let</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>
		right <span class="token operator">=</span> n<span class="token punctuation">;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> char <span class="token keyword">of</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>char <span class="token operator">===</span> <span class="token string">&#39;I&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>left<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
			res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>right<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 此时 left 和 right 应该相等</span>
	<span class="token keyword">return</span> res<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="相关题目" tabindex="-1"><a class="header-anchor" href="#相关题目" aria-hidden="true">#</a> 相关题目</h2>`,32),I=n("thead",null,[n("tr",null,[n("th",{style:{"text-align":"center"}},"题号"),n("th",{style:{"text-align":"left"}},"标题"),n("th",{style:{"text-align":"center"}},"题解"),n("th",{style:{"text-align":"left"}},"标签"),n("th",{style:{"text-align":"center"}},"难度"),n("th",{style:{"text-align":"center"}},"力扣")])],-1),w=n("td",{style:{"text-align":"center"}},"2375",-1),D=n("td",{style:{"text-align":"left"}},"根据模式串构造最小数字",-1),E={style:{"text-align":"center"}},C={style:{"text-align":"left"}},L=n("code",null,"栈",-1),N=n("code",null,"贪心",-1),O=n("code",null,"字符串",-1),V=n("code",null,"1+",-1),j=n("td",{style:{"text-align":"center"}},"🟠",-1),B={style:{"text-align":"center"}},R={href:"https://leetcode.cn/problems/construct-smallest-number-from-di-string",target:"_blank",rel:"noopener noreferrer"},S={href:"https://leetcode.com/problems/construct-smallest-number-from-di-string",target:"_blank",rel:"noopener noreferrer"};function A(G,M){const l=c("font"),o=c("RouterLink"),a=c("ExternalLinkIcon");return r(),i("div",null,[k,n("p",null,[e("🟢 "),t(l,{color:"#15bd66"},{default:s(()=>[e("Easy")]),_:1}),e("  🔖  "),t(o,{to:"/tag/greedy.html"},{default:s(()=>[g]),_:1}),e(),t(o,{to:"/tag/array.html"},{default:s(()=>[m]),_:1}),e(),t(o,{to:"/tag/two-pointers.html"},{default:s(()=>[_]),_:1}),e(),t(o,{to:"/tag/string.html"},{default:s(()=>[f]),_:1}),e("  🔗 "),n("a",b,[v,t(a)]),e(),n("a",y,[x,t(a)])]),q,d(" prettier-ignore "),n("table",null,[I,n("tbody",null,[n("tr",null,[w,D,n("td",E,[t(o,{to:"/problem/2375.html"},{default:s(()=>[e("[✓]")]),_:1})]),n("td",C,[t(o,{to:"/tag/stack.html"},{default:s(()=>[L]),_:1}),e(),t(o,{to:"/tag/greedy.html"},{default:s(()=>[N]),_:1}),e(),t(o,{to:"/tag/string.html"},{default:s(()=>[O]),_:1}),e(),V]),j,n("td",B,[n("a",R,[e("🀄️"),t(a)]),e(),n("a",S,[e("🔗"),t(a)])])])])])])}const z=p(h,[["render",A],["__file","0942.html.vue"]]);export{z as default};
