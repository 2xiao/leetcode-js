import{_ as c,r as p,o as i,c as r,a as n,b as s,d as a,w as e,f as d,e as u}from"./app-B5EG-zH0.js";const k={},m=n("h1",{id:"_526-优美的排列",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_526-优美的排列","aria-hidden":"true"},"#"),s(" 526. 优美的排列")],-1),g=n("code",null,"位运算",-1),h=n("code",null,"数组",-1),b=n("code",null,"动态规划",-1),_=n("code",null,"回溯",-1),v=n("code",null,"状态压缩",-1),f={href:"https://leetcode.cn/problems/beautiful-arrangement",target:"_blank",rel:"noopener noreferrer"},x=n("code",null,"力扣",-1),y={href:"https://leetcode.com/problems/beautiful-arrangement",target:"_blank",rel:"noopener noreferrer"},w=n("code",null,"LeetCode",-1),q=u(`<h2 id="题目" tabindex="-1"><a class="header-anchor" href="#题目" aria-hidden="true">#</a> 题目</h2><p>Suppose you have <code>n</code> integers labeled <code>1</code> through <code>n</code>. A permutation of those <code>n</code> integers <code>perm</code> (<strong>1-indexed</strong>) is considered a <strong>beautiful arrangement</strong> if for every <code>i</code> (<code>1 &lt;= i &lt;= n</code>), <strong>either</strong> of the following is true:</p><ul><li><code>perm[i]</code> is divisible by <code>i</code>.</li><li><code>i</code> is divisible by <code>perm[i]</code>.</li></ul><p>Given an integer <code>n</code>, return <em>the <strong>number</strong> of the <strong>beautiful arrangements</strong> that you can construct</em>.</p><p><strong>Example 1:</strong></p><blockquote><p>Input: n = 2</p><p>Output: 2</p><p>Explanation:</p><p>The first beautiful arrangement is [1,2]:</p><ul><li><p>perm[1] = 1 is divisible by i = 1</p></li><li><p>perm[2] = 2 is divisible by i = 2</p></li></ul><p>The second beautiful arrangement is [2,1]:</p><ul><li><p>perm[1] = 2 is divisible by i = 1</p></li><li><p>i = 2 is divisible by perm[2] = 1</p></li></ul></blockquote><p><strong>Example 2:</strong></p><blockquote><p>Input: n = 1</p><p>Output: 1</p></blockquote><p><strong>Constraints:</strong></p><ul><li><code>1 &lt;= n &lt;= 15</code></li></ul><h2 id="题目大意" tabindex="-1"><a class="header-anchor" href="#题目大意" aria-hidden="true">#</a> 题目大意</h2><p>假设有从 1 到 n 的 n 个整数。用这些整数构造一个数组 <code>perm</code>（<strong>下标从 1 开始</strong> ），只要满足下述条件 <strong>之一</strong> ，该数组就是一个 <strong>优美的排列</strong> ：</p><ul><li><code>perm[i]</code> 能够被 <code>i</code> 整除</li><li><code>i</code> 能够被 <code>perm[i]</code> 整除</li></ul><p>给你一个整数 <code>n</code> ，返回可以构造的 <strong>优美排列</strong> 的 <strong>数量</strong> 。</p><p><strong>示例 1：</strong></p><blockquote><p><strong>输入：</strong> n = 2</p><p><strong>输出：</strong> 2</p><p><strong>解释：</strong></p><p>第 1 个优美的排列是 [1,2]：</p><ul><li><p>perm[1] = 1 能被 i = 1 整除</p></li><li><p>perm[2] = 2 能被 i = 2 整除</p></li></ul><p>第 2 个优美的排列是 [2,1]:</p><ul><li><p>perm[1] = 2 能被 i = 1 整除</p></li><li><p>i = 2 能被 perm[2] = 1 整除</p></li></ul></blockquote><p><strong>示例 2：</strong></p><blockquote><p><strong>输入：</strong> n = 1</p><p><strong>输出：</strong> 1</p></blockquote><p><strong>提示：</strong></p><ul><li><code>1 &lt;= n &lt;= 15</code></li></ul><h2 id="解题思路" tabindex="-1"><a class="header-anchor" href="#解题思路" aria-hidden="true">#</a> 解题思路</h2><ol><li><p><strong>回溯函数 <code>backtrack(idx)</code></strong></p><ul><li><code>idx</code> 代表当前填充的位置（从 <code>1</code> 开始）。</li><li>当 <code>idx &gt; n</code> 时，说明所有数字已经排列完成，满足条件的方案数 <code>result +1</code>。</li><li>否则，遍历 <code>1~n</code> 的所有数字，尝试放入当前 <code>idx</code> 位置： <ul><li>只有 <code>idx % i == 0</code> 或 <code>i % idx == 0</code> 时，才能继续递归。</li><li>使用 <code>used</code> 数组记录已使用的数字，避免重复选择。</li><li>回溯后恢复 <code>used</code> 状态（回溯撤销）。</li></ul></li></ul></li><li><p><strong>剪枝优化</strong></p><ul><li>由于 <strong>大的数字更难满足 <code>idx % i == 0</code></strong>，所以我们 <strong>倒序遍历</strong> <code>i</code>，让大数优先放入，能更早发现不符合的情况，减少回溯次数。</li></ul></li></ol><h4 id="复杂度分析" tabindex="-1"><a class="header-anchor" href="#复杂度分析" aria-hidden="true">#</a> 复杂度分析</h4><ul><li><strong>时间复杂度</strong>：<code>O(n^n)</code><ul><li>最坏情况下，我们需要遍历 <code>n!</code> 种排列，因此最坏时间复杂度为 <code>O(n!)</code>。</li><li>由于剪枝优化（<code>idx % i == 0 || i % idx == 0</code>），搜索空间被大幅减少，实际复杂度远小于 <code>O(n!)</code>，大约在 <code>O(n^n)</code> 级别。</li></ul></li><li><strong>空间复杂度</strong>：<code>O(n)</code>，使用了一个 <code>used</code> 数组记录已使用的数字。</li></ul><h2 id="代码" tabindex="-1"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">}</span></span> <span class="token parameter">n</span>
 * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">}</span></span>
 */</span>
<span class="token keyword">var</span> <span class="token function-variable function">countArrangement</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">const</span> used <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 长度设为 n+1，方便索引 1~n</span>

	<span class="token keyword">const</span> <span class="token function-variable function">backtrack</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">idx</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>idx <span class="token operator">==</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token comment">// 递归出口，找到一个合法排列</span>
			result<span class="token operator">++</span><span class="token punctuation">;</span>
			<span class="token keyword">return</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> n<span class="token punctuation">;</span> i <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token comment">// 倒序遍历，减少回溯</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>used<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>idx <span class="token operator">%</span> i <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> i <span class="token operator">%</span> idx <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
				used<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
				<span class="token function">backtrack</span><span class="token punctuation">(</span>idx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
				used<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment">// 恢复状态（回溯）</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span><span class="token punctuation">;</span>

	<span class="token function">backtrack</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="相关题目" tabindex="-1"><a class="header-anchor" href="#相关题目" aria-hidden="true">#</a> 相关题目</h2>`,27),O=n("thead",null,[n("tr",null,[n("th",{style:{"text-align":"center"}},"题号"),n("th",{style:{"text-align":"left"}},"标题"),n("th",{style:{"text-align":"center"}},"题解"),n("th",{style:{"text-align":"left"}},"标签"),n("th",{style:{"text-align":"center"}},"难度"),n("th",{style:{"text-align":"center"}},"力扣")])],-1),E=n("td",{style:{"text-align":"center"}},"667",-1),I=n("td",{style:{"text-align":"left"}},"优美的排列 II",-1),C=n("td",{style:{"text-align":"center"}},null,-1),L={style:{"text-align":"left"}},N=n("code",null,"数组",-1),V=n("code",null,"数学",-1),j=n("td",{style:{"text-align":"center"}},"🟠",-1),A={style:{"text-align":"center"}},B={href:"https://leetcode.cn/problems/beautiful-arrangement-ii",target:"_blank",rel:"noopener noreferrer"},T={href:"https://leetcode.com/problems/beautiful-arrangement-ii",target:"_blank",rel:"noopener noreferrer"};function R(S,G){const l=p("font"),t=p("RouterLink"),o=p("ExternalLinkIcon");return i(),r("div",null,[m,n("p",null,[s("🟠 "),a(l,{color:"#ffb800"},{default:e(()=>[s("Medium")]),_:1}),s("  🔖  "),a(t,{to:"/tag/bit-manipulation.html"},{default:e(()=>[g]),_:1}),s(),a(t,{to:"/tag/array.html"},{default:e(()=>[h]),_:1}),s(),a(t,{to:"/tag/dynamic-programming.html"},{default:e(()=>[b]),_:1}),s(),a(t,{to:"/tag/backtracking.html"},{default:e(()=>[_]),_:1}),s(),a(t,{to:"/tag/bitmask.html"},{default:e(()=>[v]),_:1}),s("  🔗 "),n("a",f,[x,a(o)]),s(),n("a",y,[w,a(o)])]),q,d(" prettier-ignore "),n("table",null,[O,n("tbody",null,[n("tr",null,[E,I,C,n("td",L,[a(t,{to:"/tag/array.html"},{default:e(()=>[N]),_:1}),s(),a(t,{to:"/tag/math.html"},{default:e(()=>[V]),_:1})]),j,n("td",A,[n("a",B,[s("🀄️"),a(o)]),s(),n("a",T,[s("🔗"),a(o)])])])])])])}const z=c(k,[["render",R],["__file","0526.html.vue"]]);export{z as default};
