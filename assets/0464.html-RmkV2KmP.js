import{_ as c,r as l,o as r,c as i,a as n,b as t,d as e,w as s,f as d,e as u}from"./app-aQeLbVW9.js";const h={},k=n("h1",{id:"_464-我能赢吗",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_464-我能赢吗","aria-hidden":"true"},"#"),t(" 464. 我能赢吗")],-1),m=n("code",null,"位运算",-1),g=n("code",null,"记忆化搜索",-1),_=n("code",null,"数学",-1),b=n("code",null,"动态规划",-1),f=n("code",null,"状态压缩",-1),y=n("code",null,"博弈",-1),v={href:"https://leetcode.cn/problems/can-i-win",target:"_blank",rel:"noopener noreferrer"},x=n("code",null,"力扣",-1),w={href:"https://leetcode.com/problems/can-i-win",target:"_blank",rel:"noopener noreferrer"},I=n("code",null,"LeetCode",-1),C=u(`<h2 id="题目" tabindex="-1"><a class="header-anchor" href="#题目" aria-hidden="true">#</a> 题目</h2><p>In the &quot;100 game&quot; two players take turns adding, to a running total, any integer from <code>1</code> to <code>10</code>. The player who first causes the running total to <strong>reach or exceed</strong> 100 wins.</p><p>What if we change the game so that players <strong>cannot</strong> re-use integers?</p><p>For example, two players might take turns drawing from a common pool of numbers from 1 to 15 without replacement until they reach a total &gt;= 100.</p><p>Given two integers <code>maxChoosableInteger</code> and <code>desiredTotal</code>, return <code>true</code> if the first player to move can force a win, otherwise, return <code>false</code>. Assume both players play <strong>optimally</strong>.</p><p><strong>Example 1:</strong></p><blockquote><p>Input: maxChoosableInteger = 10, desiredTotal = 11</p><p>Output: false</p><p>Explanation:</p><p>No matter which integer the first player choose, the first player will lose.</p><p>The first player can choose an integer from 1 up to 10.</p><p>If the first player choose 1, the second player can only choose integers from 2 up to 10.</p><p>The second player will win by choosing 10 and get a total = 11, which is &gt;= desiredTotal.</p><p>Same with other integers chosen by the first player, the second player will always win.</p></blockquote><p><strong>Example 2:</strong></p><blockquote><p>Input: maxChoosableInteger = 10, desiredTotal = 0</p><p>Output: true</p></blockquote><p><strong>Example 3:</strong></p><blockquote><p>Input: maxChoosableInteger = 10, desiredTotal = 1</p><p>Output: true</p></blockquote><p><strong>Constraints:</strong></p><ul><li><code>1 &lt;= maxChoosableInteger &lt;= 20</code></li><li><code>0 &lt;= desiredTotal &lt;= 300</code></li></ul><h2 id="题目大意" tabindex="-1"><a class="header-anchor" href="#题目大意" aria-hidden="true">#</a> 题目大意</h2><p>在 &quot;100 game&quot; 这个游戏中，两名玩家轮流选择从 <code>1</code> 到 <code>10</code> 的任意整数，累计整数和，先使得累计整数和 <strong>达到或超过</strong> 100 的玩家，即为胜者。</p><p>如果我们将游戏规则改为 “玩家 <strong>不能</strong> 重复使用整数” 呢？</p><p>例如，两个玩家可以轮流从公共整数池中抽取从 1 到 15 的整数（不放回），直到累计整数和 &gt;= 100。</p><p>给定两个整数 <code>maxChoosableInteger</code> （整数池中可选择的最大数）和 <code>desiredTotal</code>（累计和），若先出手的玩家能稳赢则返回 <code>true</code> ，否则返回 <code>false</code> 。假设两位玩家游戏时都表现 <strong>最佳</strong> 。</p><p><strong>示例 1：</strong></p><blockquote><p><strong>输入：</strong> maxChoosableInteger = 10, desiredTotal = 11</p><p><strong>输出：</strong> false</p><p><strong>解释：</strong> 无论第一个玩家选择哪个整数，他都会失败。</p><p>第一个玩家可以选择从 1 到 10 的整数。</p><p>如果第一个玩家选择 1，那么第二个玩家只能选择从 2 到 10 的整数。</p><p>第二个玩家可以通过选择整数 10（那么累积和为 11 &gt;= desiredTotal），从而取得胜利.</p><p>同样地，第一个玩家选择任意其他整数，第二个玩家都会赢。</p></blockquote><p><strong>示例 2:</strong></p><blockquote><p><strong>输入：</strong> maxChoosableInteger = 10, desiredTotal = 0</p><p><strong>输出：</strong> true</p></blockquote><p><strong>示例 3:</strong></p><blockquote><p><strong>输入：</strong> maxChoosableInteger = 10, desiredTotal = 1</p><p><strong>输出：</strong> true</p></blockquote><p><strong>提示:</strong></p><ul><li><code>1 &lt;= maxChoosableInteger &lt;= 20</code></li><li><code>0 &lt;= desiredTotal &lt;= 300</code></li></ul><h2 id="解题思路" tabindex="-1"><a class="header-anchor" href="#解题思路" aria-hidden="true">#</a> 解题思路</h2><p>本题涉及<strong>状态搜索</strong>和<strong>记忆化搜索</strong>，可以使用<strong>递归 + 备忘录 (Memoization)</strong> 来优化搜索过程。</p><ol><li><p><strong>基本情况剪枝</strong>：</p><ul><li>如果 <code>desiredTotal &lt;= maxChoosableInteger</code>，先手直接取 <code>desiredTotal</code> 胜利，返回 <code>true</code>。</li><li>如果 <code>sum(1, ..., maxChoosableInteger) &lt; desiredTotal</code>，则无论如何都无法达到目标，返回 <code>false</code>。</li><li>如果 <code>sum(1, ..., maxChoosableInteger) == desiredTotal</code>，则取决 <code>maxChoosableInteger</code> 的奇偶性，正好取完所有数字的一方获胜。</li></ul></li><li><p><strong>状态表示</strong>：</p><ul><li>使用一个 <code>used</code> 位标记哪些数字已被选过（可以用 <code>bitmask</code>）。</li><li>递归检查当前状态下，是否存在某个选择可以导致对手必败。</li></ul></li><li><p><strong>递归定义</strong>：</p><ul><li>设 <code>canWin(used, total)</code> 表示当前 <code>used</code> 状态下，<strong>当前玩家</strong> 是否有必胜策略： <ul><li>遍历所有未选过的数字 <code>i</code>： <ul><li>如果 <code>i + total &gt;= desiredTotal</code>，当前玩家直接获胜。</li><li>否则，对手进入 <code>canWin(used | (1 &lt;&lt; i), total + i)</code> 状态： <ul><li>如果对手 <strong>必败</strong>，则当前玩家必胜。</li></ul></li></ul></li></ul></li></ul></li><li><p><strong>记忆化搜索</strong>：</p><ul><li>使用 <code>Map</code> 存储已计算过的 <code>used</code> 状态，避免重复搜索，提高效率。</li></ul></li></ol><h4 id="复杂度分析" tabindex="-1"><a class="header-anchor" href="#复杂度分析" aria-hidden="true">#</a> 复杂度分析</h4><ul><li><strong>时间复杂度</strong>：<code>O(m * 2^m)</code>，其中 <code>m = maxChoosableInteger</code>，最坏情况下 <code>m ≤ 20</code>，仍然可行。 <ul><li>状态数：<code>2^m</code>，即二进制掩码的不同状态。</li><li>每次递归遍历 <code>O(m)</code>。</li></ul></li><li><strong>空间复杂度</strong>：<code>O(m)</code>，使用了一个哈希表存储 <code>used</code> 状态，避免重复计算。</li></ul><h2 id="代码" tabindex="-1"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">}</span></span> <span class="token parameter">maxChoosableInteger</span>
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">}</span></span> <span class="token parameter">desiredTotal</span>
 * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>boolean<span class="token punctuation">}</span></span>
 */</span>
<span class="token keyword">var</span> <span class="token function-variable function">canIWin</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">maxChoosableInteger<span class="token punctuation">,</span> desiredTotal</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">const</span> sum <span class="token operator">=</span> <span class="token punctuation">(</span>maxChoosableInteger <span class="token operator">*</span> <span class="token punctuation">(</span>maxChoosableInteger <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>desiredTotal <span class="token operator">&lt;=</span> maxChoosableInteger<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
	<span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>desiredTotal <span class="token operator">&gt;</span> sum<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
	<span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>sum <span class="token operator">==</span> desiredTotal<span class="token punctuation">)</span> <span class="token keyword">return</span> maxChoosableInteger <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">;</span>

	<span class="token keyword">const</span> memo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">const</span> <span class="token function-variable function">canWin</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">used<span class="token punctuation">,</span> total</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>memo<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>used<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> memo<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>used<span class="token punctuation">)</span><span class="token punctuation">;</span>

		<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> maxChoosableInteger<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">let</span> mask <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> i<span class="token punctuation">;</span>

			<span class="token comment">// 如果 i 号数字未被选过</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>used <span class="token operator">&amp;</span> mask<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
				<span class="token keyword">if</span> <span class="token punctuation">(</span>total <span class="token operator">+</span> i <span class="token operator">&gt;=</span> desiredTotal <span class="token operator">||</span> <span class="token operator">!</span><span class="token function">canWin</span><span class="token punctuation">(</span>used <span class="token operator">|</span> mask<span class="token punctuation">,</span> total <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
					memo<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>used<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
					<span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
				<span class="token punctuation">}</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>

		memo<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>used<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span><span class="token punctuation">;</span>

	<span class="token keyword">return</span> <span class="token function">canWin</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="相关题目" tabindex="-1"><a class="header-anchor" href="#相关题目" aria-hidden="true">#</a> 相关题目</h2>`,34),T=n("thead",null,[n("tr",null,[n("th",{style:{"text-align":"center"}},"题号"),n("th",{style:{"text-align":"left"}},"标题"),n("th",{style:{"text-align":"center"}},"题解"),n("th",{style:{"text-align":"left"}},"标签"),n("th",{style:{"text-align":"center"}},"难度"),n("th",{style:{"text-align":"center"}},"力扣")])],-1),q=n("td",{style:{"text-align":"center"}},"294",-1),E=n("td",{style:{"text-align":"left"}},"翻转游戏 II 🔒",-1),W=n("td",{style:{"text-align":"center"}},null,-1),N={style:{"text-align":"left"}},O=n("code",null,"记忆化搜索",-1),L=n("code",null,"数学",-1),V=n("code",null,"动态规划",-1),M=n("code",null,"2+",-1),j=n("td",{style:{"text-align":"center"}},"🟠",-1),z={style:{"text-align":"center"}},B={href:"https://leetcode.cn/problems/flip-game-ii",target:"_blank",rel:"noopener noreferrer"},R={href:"https://leetcode.com/problems/flip-game-ii",target:"_blank",rel:"noopener noreferrer"},S=n("td",{style:{"text-align":"center"}},"375",-1),A=n("td",{style:{"text-align":"left"}},"猜数字大小 II",-1),F={style:{"text-align":"center"}},G={style:{"text-align":"left"}},D=n("code",null,"数学",-1),H=n("code",null,"动态规划",-1),J=n("code",null,"博弈",-1),K=n("td",{style:{"text-align":"center"}},"🟠",-1),P={style:{"text-align":"center"}},Q={href:"https://leetcode.cn/problems/guess-number-higher-or-lower-ii",target:"_blank",rel:"noopener noreferrer"},U={href:"https://leetcode.com/problems/guess-number-higher-or-lower-ii",target:"_blank",rel:"noopener noreferrer"},X=n("td",{style:{"text-align":"center"}},"486",-1),Y=n("td",{style:{"text-align":"left"}},"预测赢家",-1),Z={style:{"text-align":"center"}},$={style:{"text-align":"left"}},nn=n("code",null,"递归",-1),tn=n("code",null,"数组",-1),en=n("code",null,"数学",-1),sn=n("code",null,"2+",-1),an=n("td",{style:{"text-align":"center"}},"🟠",-1),on={style:{"text-align":"center"}},ln={href:"https://leetcode.cn/problems/predict-the-winner",target:"_blank",rel:"noopener noreferrer"},pn={href:"https://leetcode.com/problems/predict-the-winner",target:"_blank",rel:"noopener noreferrer"},cn=n("td",{style:{"text-align":"center"}},"3222",-1),rn=n("td",{style:{"text-align":"left"}},"求出硬币游戏的赢家",-1),dn=n("td",{style:{"text-align":"center"}},null,-1),un={style:{"text-align":"left"}},hn=n("code",null,"数学",-1),kn=n("code",null,"博弈",-1),mn=n("code",null,"模拟",-1),gn=n("td",{style:{"text-align":"center"}},"🟢",-1),_n={style:{"text-align":"center"}},bn={href:"https://leetcode.cn/problems/find-the-winning-player-in-coin-game",target:"_blank",rel:"noopener noreferrer"},fn={href:"https://leetcode.com/problems/find-the-winning-player-in-coin-game",target:"_blank",rel:"noopener noreferrer"},yn=n("td",{style:{"text-align":"center"}},"3238",-1),vn=n("td",{style:{"text-align":"left"}},"求出胜利玩家的数目",-1),xn=n("td",{style:{"text-align":"center"}},null,-1),wn={style:{"text-align":"left"}},In=n("code",null,"数组",-1),Cn=n("code",null,"哈希表",-1),Tn=n("code",null,"计数",-1),qn=n("td",{style:{"text-align":"center"}},"🟢",-1),En={style:{"text-align":"center"}},Wn={href:"https://leetcode.cn/problems/find-the-number-of-winning-players",target:"_blank",rel:"noopener noreferrer"},Nn={href:"https://leetcode.com/problems/find-the-number-of-winning-players",target:"_blank",rel:"noopener noreferrer"};function On(Ln,Vn){const p=l("font"),a=l("RouterLink"),o=l("ExternalLinkIcon");return r(),i("div",null,[k,n("p",null,[t("🟠 "),e(p,{color:"#ffb800"},{default:s(()=>[t("Medium")]),_:1}),t("  🔖  "),e(a,{to:"/tag/bit-manipulation.html"},{default:s(()=>[m]),_:1}),t(),e(a,{to:"/tag/memoization.html"},{default:s(()=>[g]),_:1}),t(),e(a,{to:"/tag/math.html"},{default:s(()=>[_]),_:1}),t(),e(a,{to:"/tag/dynamic-programming.html"},{default:s(()=>[b]),_:1}),t(),e(a,{to:"/tag/bitmask.html"},{default:s(()=>[f]),_:1}),t(),e(a,{to:"/tag/game-theory.html"},{default:s(()=>[y]),_:1}),t("  🔗 "),n("a",v,[x,e(o)]),t(),n("a",w,[I,e(o)])]),C,d(" prettier-ignore "),n("table",null,[T,n("tbody",null,[n("tr",null,[q,E,W,n("td",N,[e(a,{to:"/tag/memoization.html"},{default:s(()=>[O]),_:1}),t(),e(a,{to:"/tag/math.html"},{default:s(()=>[L]),_:1}),t(),e(a,{to:"/tag/dynamic-programming.html"},{default:s(()=>[V]),_:1}),t(),M]),j,n("td",z,[n("a",B,[t("🀄️"),e(o)]),t(),n("a",R,[t("🔗"),e(o)])])]),n("tr",null,[S,A,n("td",F,[e(a,{to:"/problem/0375.html"},{default:s(()=>[t("[✓]")]),_:1})]),n("td",G,[e(a,{to:"/tag/math.html"},{default:s(()=>[D]),_:1}),t(),e(a,{to:"/tag/dynamic-programming.html"},{default:s(()=>[H]),_:1}),t(),e(a,{to:"/tag/game-theory.html"},{default:s(()=>[J]),_:1})]),K,n("td",P,[n("a",Q,[t("🀄️"),e(o)]),t(),n("a",U,[t("🔗"),e(o)])])]),n("tr",null,[X,Y,n("td",Z,[e(a,{to:"/problem/0486.html"},{default:s(()=>[t("[✓]")]),_:1})]),n("td",$,[e(a,{to:"/tag/recursion.html"},{default:s(()=>[nn]),_:1}),t(),e(a,{to:"/tag/array.html"},{default:s(()=>[tn]),_:1}),t(),e(a,{to:"/tag/math.html"},{default:s(()=>[en]),_:1}),t(),sn]),an,n("td",on,[n("a",ln,[t("🀄️"),e(o)]),t(),n("a",pn,[t("🔗"),e(o)])])]),n("tr",null,[cn,rn,dn,n("td",un,[e(a,{to:"/tag/math.html"},{default:s(()=>[hn]),_:1}),t(),e(a,{to:"/tag/game-theory.html"},{default:s(()=>[kn]),_:1}),t(),e(a,{to:"/tag/simulation.html"},{default:s(()=>[mn]),_:1})]),gn,n("td",_n,[n("a",bn,[t("🀄️"),e(o)]),t(),n("a",fn,[t("🔗"),e(o)])])]),n("tr",null,[yn,vn,xn,n("td",wn,[e(a,{to:"/tag/array.html"},{default:s(()=>[In]),_:1}),t(),e(a,{to:"/tag/hash-table.html"},{default:s(()=>[Cn]),_:1}),t(),e(a,{to:"/tag/counting.html"},{default:s(()=>[Tn]),_:1})]),qn,n("td",En,[n("a",Wn,[t("🀄️"),e(o)]),t(),n("a",Nn,[t("🔗"),e(o)])])])])])])}const jn=c(h,[["render",On],["__file","0464.html.vue"]]);export{jn as default};
