import{_ as p,r as i,o as l,c as r,a as e,b as t,d as n,w as s,f as d,e as u}from"./app-aQeLbVW9.js";const h={},m=e("h1",{id:"_2363-合并相似的物品",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#_2363-合并相似的物品","aria-hidden":"true"},"#"),t(" 2363. 合并相似的物品")],-1),g=e("code",null,"数组",-1),k=e("code",null,"哈希表",-1),w=e("code",null,"有序集合",-1),v=e("code",null,"排序",-1),_={href:"https://leetcode.cn/problems/merge-similar-items",target:"_blank",rel:"noopener noreferrer"},b=e("code",null,"力扣",-1),f={href:"https://leetcode.com/problems/merge-similar-items",target:"_blank",rel:"noopener noreferrer"},y=e("code",null,"LeetCode",-1),x=u(`<h2 id="题目" tabindex="-1"><a class="header-anchor" href="#题目" aria-hidden="true">#</a> 题目</h2><p>You are given two 2D integer arrays, <code>items1</code> and <code>items2</code>, representing two sets of items. Each array <code>items</code> has the following properties:</p><ul><li><code>items[i] = [valuei, weighti]</code> where <code>valuei</code> represents the <strong>value</strong> and <code>weighti</code> represents the <strong>weight</strong> of the <code>ith</code> item.</li><li>The value of each item in <code>items</code> is <strong>unique</strong>.</li></ul><p>Return <em>a 2D integer array</em> <code>ret</code> <em>where</em> <code>ret[i] = [valuei, weighti]</code><em>,</em><em>with</em> <code>weighti</code> <em>being the <strong>sum of weights</strong> of all items with value</em><code>valuei</code>.</p><p><strong>Note:</strong> <code>ret</code> should be returned in <strong>ascending</strong> order by value.</p><p><strong>Example 1:</strong></p><blockquote><p>Input: items1 = [[1,1],[4,5],[3,8]], items2 = [[3,1],[1,5]]</p><p>Output: [[1,6],[3,9],[4,5]]</p><p>Explanation:</p><p>The item with value = 1 occurs in items1 with weight = 1 and in items2 with weight = 5, total weight = 1 + 5 = 6.</p><p>The item with value = 3 occurs in items1 with weight = 8 and in items2 with weight = 1, total weight = 8 + 1 = 9.</p><p>The item with value = 4 occurs in items1 with weight = 5, total weight = 5.</p><p>Therefore, we return [[1,6],[3,9],[4,5]].</p></blockquote><p><strong>Example 2:</strong></p><blockquote><p>Input: items1 = [[1,1],[3,2],[2,3]], items2 = [[2,1],[3,2],[1,3]]</p><p>Output: [[1,4],[2,4],[3,4]]</p><p>Explanation:</p><p>The item with value = 1 occurs in items1 with weight = 1 and in items2 with weight = 3, total weight = 1 + 3 = 4.</p><p>The item with value = 2 occurs in items1 with weight = 3 and in items2 with weight = 1, total weight = 3 + 1 = 4.</p><p>The item with value = 3 occurs in items1 with weight = 2 and in items2 with weight = 2, total weight = 2 + 2 = 4.</p><p>Therefore, we return [[1,4],[2,4],[3,4]].</p></blockquote><p><strong>Example 3:</strong></p><blockquote><p>Input: items1 = [[1,3],[2,2]], items2 = [[7,1],[2,2],[1,4]]</p><p>Output: [[1,7],[2,4],[7,1]]</p><p>Explanation: The item with value = 1 occurs in items1 with weight = 3 and in items2 with weight = 4, total weight = 3 + 4 = 7.</p><p>The item with value = 2 occurs in items1 with weight = 2 and in items2 with weight = 2, total weight = 2 + 2 = 4.</p><p>The item with value = 7 occurs in items2 with weight = 1, total weight = 1.</p><p>Therefore, we return [[1,7],[2,4],[7,1]].</p></blockquote><p><strong>Constraints:</strong></p><ul><li><code>1 &lt;= items1.length, items2.length &lt;= 1000</code></li><li><code>items1[i].length == items2[i].length == 2</code></li><li><code>1 &lt;= valuei, weighti &lt;= 1000</code></li><li>Each <code>valuei</code> in <code>items1</code> is <strong>unique</strong>.</li><li>Each <code>valuei</code> in <code>items2</code> is <strong>unique</strong>.</li></ul><h2 id="题目大意" tabindex="-1"><a class="header-anchor" href="#题目大意" aria-hidden="true">#</a> 题目大意</h2><p>给你两个二维整数数组 <code>items1</code> 和 <code>items2</code> ，表示两个物品集合。每个数组 <code>items</code> 有以下特质：</p><ul><li><code>items[i] = [valuei, weighti]</code> 其中 <code>valuei</code> 表示第 <code>i</code> 件物品的 <strong>价值</strong> ，<code>weighti</code> 表示第 <code>i</code> 件物品的 <strong>重量</strong> 。</li><li><code>items</code> 中每件物品的价值都是 <strong>唯一的</strong> 。</li></ul><p>请你返回一个二维数组 <code>ret</code>，其中 <code>ret[i] = [valuei, weighti]</code>， <code>weighti</code> 是所有价值为 <code>valuei</code> 物品的 <strong>重量之和</strong> 。</p><p><strong>注意：</strong><code>ret</code> 应该按价值 <strong>升序</strong> 排序后返回。</p><p><strong>示例 1：</strong></p><blockquote><p><strong>输入：</strong> items1 = [[1,1],[4,5],[3,8]], items2 = [[3,1],[1,5]]</p><p><strong>输出：</strong>[[1,6],[3,9],[4,5]]</p><p><strong>解释：</strong></p><p>value = 1 的物品在 items1 中 weight = 1 ，在 items2 中 weight = 5 ，总重量为 1 + 5 = 6 。</p><p>value = 3 的物品再 items1 中 weight = 8 ，在 items2 中 weight = 1 ，总重量为 8 + 1 = 9 。</p><p>value = 4 的物品在 items1 中 weight = 5 ，总重量为 5 。</p><p>所以，我们返回 [[1,6],[3,9],[4,5]] 。</p></blockquote><p><strong>示例 2：</strong></p><blockquote><p><strong>输入：</strong> items1 = [[1,1],[3,2],[2,3]], items2 = [[2,1],[3,2],[1,3]]</p><p><strong>输出：</strong>[[1,4],[2,4],[3,4]]</p><p><strong>解释：</strong></p><p>value = 1 的物品在 items1 中 weight = 1 ，在 items2 中 weight = 3 ，总重量为 1 + 3 = 4 。</p><p>value = 2 的物品在 items1 中 weight = 3 ，在 items2 中 weight = 1 ，总重量为 3 + 1 = 4 。</p><p>value = 3 的物品在 items1 中 weight = 2 ，在 items2 中 weight = 2 ，总重量为 2 + 2 = 4 。</p><p>所以，我们返回 [[1,4],[2,4],[3,4]] 。</p></blockquote><p><strong>示例 3：</strong></p><blockquote><p><strong>输入：</strong> items1 = [[1,3],[2,2]], items2 = [[7,1],[2,2],[1,4]]</p><p><strong>输出：</strong>[[1,7],[2,4],[7,1]]</p><p><strong>解释：</strong> value = 1 的物品在 items1 中 weight = 3 ，在 items2 中 weight = 4 ，总重量为 3 + 4 = 7 。</p><p>value = 2 的物品在 items1 中 weight = 2 ，在 items2 中 weight = 2 ，总重量为 2 + 2 = 4 。</p><p>value = 7 的物品在 items2 中 weight = 1 ，总重量为 1 。</p><p>所以，我们返回 [[1,7],[2,4],[7,1]] 。</p></blockquote><p><strong>提示：</strong></p><ul><li><code>1 &lt;= items1.length, items2.length &lt;= 1000</code></li><li><code>items1[i].length == items2[i].length == 2</code></li><li><code>1 &lt;= valuei, weighti &lt;= 1000</code></li><li><code>items1</code> 中每个 <code>valuei</code> 都是 <strong>唯一的</strong> 。</li><li><code>items2</code> 中每个 <code>valuei</code> 都是 <strong>唯一的</strong> 。</li></ul><h2 id="解题思路" tabindex="-1"><a class="header-anchor" href="#解题思路" aria-hidden="true">#</a> 解题思路</h2><p>使用一个 <code>Map</code> 数据结构，可以方便地实现 <code>value</code> 到 <code>weight</code> 的映射，避免了复杂的查找。</p><ol><li>将 <code>items1</code> 的所有条目初始化到 <code>Map</code> 中。</li><li>遍历 <code>items2</code>，将其中的条目合并到 <code>Map</code> 中（累加权重）。</li><li>将 <code>Map</code> 中的条目转化为数组并按 <code>value</code> 升序排序。</li></ol><h4 id="复杂度分析" tabindex="-1"><a class="header-anchor" href="#复杂度分析" aria-hidden="true">#</a> 复杂度分析</h4><ul><li><p><strong>时间复杂度</strong>：<code>O(n + m + k log k)</code></p><ul><li>初始化 <code>Map</code>：<code>O(n)</code>，其中 <code>n</code> 是 <code>items1</code> 的长度。</li><li>遍历 <code>items2</code>：<code>O(m)</code>，其中 <code>m</code> 是 <code>items2</code> 的长度。</li><li>排序：<code>O(k log k)</code>，其中 <code>k</code> 是合并后的不同 <code>value</code> 的数量。</li><li>总体复杂度：<code>O(n + m + k log k)</code>。</li></ul></li><li><p><strong>空间复杂度</strong>：<code>O(k)</code>，其中 <code>k</code> 是最终结果中不同 <code>value</code> 的数量，<code>Map</code> 存储合并后的条目。</p></li></ul><h2 id="代码" tabindex="-1"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span> <span class="token parameter">items1</span>
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span> <span class="token parameter">items2</span>
 * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span>
 */</span>
<span class="token keyword">var</span> <span class="token function-variable function">mergeSimilarItems</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">items1<span class="token punctuation">,</span> items2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">// 初始化 Map，存储 items1 的条目</span>
	<span class="token keyword">let</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span>items1<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token comment">// 遍历 items2，将权重累加到 Map 中</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> <span class="token punctuation">[</span>value<span class="token punctuation">,</span> weight<span class="token punctuation">]</span> <span class="token keyword">of</span> items2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		map<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> <span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> weight<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token comment">// 将 Map 转化为数组并按 value 升序排序</span>
	<span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token operator">...</span>map<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">-</span> b<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="相关题目" tabindex="-1"><a class="header-anchor" href="#相关题目" aria-hidden="true">#</a> 相关题目</h2>`,34),q=e("thead",null,[e("tr",null,[e("th",{style:{"text-align":"center"}},"题号"),e("th",{style:{"text-align":"left"}},"标题"),e("th",{style:{"text-align":"center"}},"题解"),e("th",{style:{"text-align":"left"}},"标签"),e("th",{style:{"text-align":"center"}},"难度"),e("th",{style:{"text-align":"center"}},"力扣")])],-1),T=e("td",{style:{"text-align":"center"}},"2570",-1),E=e("td",{style:{"text-align":"left"}},"合并两个二维数组 - 求和法",-1),M={style:{"text-align":"center"}},O={style:{"text-align":"left"}},I=e("code",null,"数组",-1),N=e("code",null,"哈希表",-1),C=e("code",null,"双指针",-1),L=e("td",{style:{"text-align":"center"}},"🟢",-1),V={style:{"text-align":"center"}},j={href:"https://leetcode.cn/problems/merge-two-2d-arrays-by-summing-values",target:"_blank",rel:"noopener noreferrer"},B={href:"https://leetcode.com/problems/merge-two-2d-arrays-by-summing-values",target:"_blank",rel:"noopener noreferrer"};function R(D,S){const c=i("font"),a=i("RouterLink"),o=i("ExternalLinkIcon");return l(),r("div",null,[m,e("p",null,[t("🟢 "),n(c,{color:"#15bd66"},{default:s(()=>[t("Easy")]),_:1}),t("  🔖  "),n(a,{to:"/tag/array.html"},{default:s(()=>[g]),_:1}),t(),n(a,{to:"/tag/hash-table.html"},{default:s(()=>[k]),_:1}),t(),n(a,{to:"/tag/ordered-set.html"},{default:s(()=>[w]),_:1}),t(),n(a,{to:"/tag/sorting.html"},{default:s(()=>[v]),_:1}),t("  🔗 "),e("a",_,[b,n(o)]),t(),e("a",f,[y,n(o)])]),x,d(" prettier-ignore "),e("table",null,[q,e("tbody",null,[e("tr",null,[T,E,e("td",M,[n(a,{to:"/problem/2570.html"},{default:s(()=>[t("[✓]")]),_:1})]),e("td",O,[n(a,{to:"/tag/array.html"},{default:s(()=>[I]),_:1}),t(),n(a,{to:"/tag/hash-table.html"},{default:s(()=>[N]),_:1}),t(),n(a,{to:"/tag/two-pointers.html"},{default:s(()=>[C]),_:1})]),L,e("td",V,[e("a",j,[t("🀄️"),n(o)]),t(),e("a",B,[t("🔗"),n(o)])])])])])])}const z=p(h,[["render",R],["__file","2363.html.vue"]]);export{z as default};
