import{_ as i,r as l,o as r,c as p,a as t,b as n,d as e,w as s,f as d,e as u}from"./app-fBVbqwGY.js";const h={},_=t("h1",{id:"_125-验证回文串",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#_125-验证回文串","aria-hidden":"true"},"#"),n(" 125. 验证回文串")],-1),m=t("code",null,"双指针",-1),k=t("code",null,"字符串",-1),g={href:"https://leetcode.cn/problems/valid-palindrome",target:"_blank",rel:"noopener noreferrer"},f=t("code",null,"力扣",-1),b={href:"https://leetcode.com/problems/valid-palindrome",target:"_blank",rel:"noopener noreferrer"},v=t("code",null,"LeetCode",-1),y=u(`<h2 id="题目" tabindex="-1"><a class="header-anchor" href="#题目" aria-hidden="true">#</a> 题目</h2><p>A phrase is a <strong>palindrome</strong> if, after converting all uppercase letters into lowercase letters and removing all non-alphanumeric characters, it reads the same forward and backward. Alphanumeric characters include letters and numbers.</p><p>Given a string <code>s</code>, return <code>true</code> if it is a <strong>palindrome</strong> , or <code>false</code> <em>otherwise</em>.</p><p><strong>Example 1:</strong></p><blockquote><p>Input: s = &quot;A man, a plan, a canal: Panama&quot;</p><p>Output: true</p><p>Explanation: &quot;amanaplanacanalpanama&quot; is a palindrome.</p></blockquote><p><strong>Example 2:</strong></p><blockquote><p>Input: s = &quot;race a car&quot;</p><p>Output: false</p><p>Explanation: &quot;raceacar&quot; is not a palindrome.</p></blockquote><p><strong>Example 3:</strong></p><blockquote><p>Input: s = &quot; &quot;</p><p>Output: true</p><p>Explanation: s is an empty string &quot;&quot; after removing non-alphanumeric characters.</p><p>Since an empty string reads the same forward and backward, it is a palindrome.</p></blockquote><p><strong>Constraints:</strong></p><ul><li><code>1 &lt;= s.length &lt;= 2 * 105</code></li><li><code>s</code> consists only of printable ASCII characters.</li></ul><h2 id="题目大意" tabindex="-1"><a class="header-anchor" href="#题目大意" aria-hidden="true">#</a> 题目大意</h2><p>如果在将所有大写字符转换为小写字符、并移除所有非字母数字字符之后，短语正着读和反着读都一样。则可以认为该短语是一个 <strong>回文串</strong> 。</p><p>字母和数字都属于字母数字字符。</p><p>给你一个字符串 <code>s</code>，如果它是 <strong>回文串</strong> ，返回 <code>true</code>；否则，返回 <code>false</code>。</p><h2 id="解题思路" tabindex="-1"><a class="header-anchor" href="#解题思路" aria-hidden="true">#</a> 解题思路</h2><ol><li><strong>字符串预处理</strong>： <ul><li>首先将字符串 <code>s</code> 转换为小写，忽略大小写敏感性。</li></ul></li><li><strong>双指针法</strong>： <ul><li>定义两个指针 <code>left</code> 和 <code>right</code>，分别指向字符串的头部和尾部。通过这两个指针向中间靠拢，同时进行判断。</li></ul></li><li><strong>跳过非字母和数字字符</strong>： <ul><li>如果 <code>left</code> 指向的字符不是字母或数字，左指针 <code>left</code> 右移一位。</li><li>如果 <code>right</code> 指向的字符不是字母或数字，右指针 <code>right</code> 左移一位。</li></ul></li><li><strong>比较字符</strong>： <ul><li>如果当前 <code>left</code> 和 <code>right</code> 指向的字符不相等，则字符串不是回文，返回 <code>false</code>。</li><li>如果字符相等，继续移动指针，<code>left</code> 向右移动，<code>right</code> 向左移动。</li></ul></li><li><strong>结束条件</strong>： <ul><li>当 <code>left</code> 大于 <code>right</code> 时，说明所有字符已经被成功比较且相等，字符串是回文，返回 <code>true</code>。</li></ul></li></ol><h4 id="复杂度分析" tabindex="-1"><a class="header-anchor" href="#复杂度分析" aria-hidden="true">#</a> 复杂度分析</h4><ul><li><strong>时间复杂度</strong>：<code>O(n)</code>，其中 <code>n</code> 是字符串的长度。 <ul><li>将字符串 <code>s</code> 转换为小写的操作（<code>s.toLowerCase()</code>）需要遍历整个字符串，时间复杂度为 <code>O(n)</code>；</li><li>双指针遍历，每个字符最多被访问两次（一次由左指针，一次由右指针），遍历的总时间复杂度为 <code>O(n)</code>；</li></ul></li><li><strong>空间复杂度</strong>：<code>O(1)</code>，因为只使用了常数空间的指针和变量。</li></ul><h2 id="代码" tabindex="-1"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>string<span class="token punctuation">}</span></span> <span class="token parameter">s</span>
 * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>boolean<span class="token punctuation">}</span></span>
 */</span>
<span class="token keyword">var</span> <span class="token function-variable function">isPalindrome</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">s</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">// 将字符串转换为小写，忽略大小写</span>
	s <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">let</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">let</span> right <span class="token operator">=</span> s<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>

	<span class="token comment">// 使用双指针法</span>
	<span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;=</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token comment">// 如果左指针指向的不是字母或数字，则跳过</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isChar</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			left<span class="token operator">++</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		<span class="token comment">// 如果右指针指向的不是字母或数字，则跳过</span>
		<span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isChar</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			right<span class="token operator">--</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		<span class="token comment">// 如果左右字符不相等，则不是回文</span>
		<span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">!==</span> s<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		<span class="token comment">// 如果相等，继续比较下一个字符</span>
		<span class="token keyword">else</span> <span class="token punctuation">{</span>
			left<span class="token operator">++</span><span class="token punctuation">;</span>
			right<span class="token operator">--</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment">// 所有字符比较相等，是回文</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// 辅助函数：判断是否是字母或数字</span>
<span class="token keyword">var</span> <span class="token function-variable function">isChar</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">i</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> <span class="token punctuation">(</span>i <span class="token operator">&gt;=</span> <span class="token string">&#39;a&#39;</span> <span class="token operator">&amp;&amp;</span> i <span class="token operator">&lt;=</span> <span class="token string">&#39;z&#39;</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>i <span class="token operator">&gt;=</span> <span class="token string">&#39;0&#39;</span> <span class="token operator">&amp;&amp;</span> i <span class="token operator">&lt;=</span> <span class="token string">&#39;9&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="相关题目" tabindex="-1"><a class="header-anchor" href="#相关题目" aria-hidden="true">#</a> 相关题目</h2>`,22),x=t("thead",null,[t("tr",null,[t("th",{style:{"text-align":"center"}},"题号"),t("th",{style:{"text-align":"left"}},"标题"),t("th",{style:{"text-align":"center"}},"题解"),t("th",{style:{"text-align":"left"}},"标签"),t("th",{style:{"text-align":"center"}},"难度"),t("th",{style:{"text-align":"center"}},"力扣")])],-1),w=t("td",{style:{"text-align":"center"}},"234",-1),q=t("td",{style:{"text-align":"left"}},"回文链表",-1),C={style:{"text-align":"center"}},E={style:{"text-align":"left"}},I=t("code",null,"栈",-1),L=t("code",null,"递归",-1),O=t("code",null,"链表",-1),V=t("code",null,"1+",-1),N=t("td",{style:{"text-align":"center"}},"🟢",-1),A={style:{"text-align":"center"}},j={href:"https://leetcode.cn/problems/palindrome-linked-list",target:"_blank",rel:"noopener noreferrer"},B={href:"https://leetcode.com/problems/palindrome-linked-list",target:"_blank",rel:"noopener noreferrer"},S=t("td",{style:{"text-align":"center"}},"680",-1),P=t("td",{style:{"text-align":"left"}},"验证回文串 II",-1),R={style:{"text-align":"center"}},z={style:{"text-align":"left"}},G=t("code",null,"贪心",-1),T=t("code",null,"双指针",-1),D=t("code",null,"字符串",-1),F=t("td",{style:{"text-align":"center"}},"🟢",-1),H={style:{"text-align":"center"}},J={href:"https://leetcode.cn/problems/valid-palindrome-ii",target:"_blank",rel:"noopener noreferrer"},K={href:"https://leetcode.com/problems/valid-palindrome-ii",target:"_blank",rel:"noopener noreferrer"},M=t("td",{style:{"text-align":"center"}},"2002",-1),Q=t("td",{style:{"text-align":"left"}},"两个回文子序列长度的最大乘积",-1),U=t("td",{style:{"text-align":"center"}},null,-1),W={style:{"text-align":"left"}},X=t("code",null,"位运算",-1),Y=t("code",null,"字符串",-1),Z=t("code",null,"动态规划",-1),$=t("code",null,"2+",-1),tt=t("td",{style:{"text-align":"center"}},"🟠",-1),nt={style:{"text-align":"center"}},et={href:"https://leetcode.cn/problems/maximum-product-of-the-length-of-two-palindromic-subsequences",target:"_blank",rel:"noopener noreferrer"},st={href:"https://leetcode.com/problems/maximum-product-of-the-length-of-two-palindromic-subsequences",target:"_blank",rel:"noopener noreferrer"},at=t("td",{style:{"text-align":"center"}},"2108",-1),ot=t("td",{style:{"text-align":"left"}},"找出数组中的第一个回文字符串",-1),lt={style:{"text-align":"center"}},ct={style:{"text-align":"left"}},it=t("code",null,"数组",-1),rt=t("code",null,"双指针",-1),pt=t("code",null,"字符串",-1),dt=t("td",{style:{"text-align":"center"}},"🟢",-1),ut={style:{"text-align":"center"}},ht={href:"https://leetcode.cn/problems/find-first-palindromic-string-in-the-array",target:"_blank",rel:"noopener noreferrer"},_t={href:"https://leetcode.com/problems/find-first-palindromic-string-in-the-array",target:"_blank",rel:"noopener noreferrer"},mt=t("td",{style:{"text-align":"center"}},"2330",-1),kt=t("td",{style:{"text-align":"left"}},"验证回文串 IV 🔒",-1),gt=t("td",{style:{"text-align":"center"}},null,-1),ft={style:{"text-align":"left"}},bt=t("code",null,"双指针",-1),vt=t("code",null,"字符串",-1),yt=t("td",{style:{"text-align":"center"}},"🟠",-1),xt={style:{"text-align":"center"}},wt={href:"https://leetcode.cn/problems/valid-palindrome-iv",target:"_blank",rel:"noopener noreferrer"},qt={href:"https://leetcode.com/problems/valid-palindrome-iv",target:"_blank",rel:"noopener noreferrer"},Ct=t("td",{style:{"text-align":"center"}},"3035",-1),Et=t("td",{style:{"text-align":"left"}},"回文字符串的最大数量",-1),It=t("td",{style:{"text-align":"center"}},null,-1),Lt={style:{"text-align":"left"}},Ot=t("code",null,"贪心",-1),Vt=t("code",null,"数组",-1),Nt=t("code",null,"哈希表",-1),At=t("code",null,"3+",-1),jt=t("td",{style:{"text-align":"center"}},"🟠",-1),Bt={style:{"text-align":"center"}},St={href:"https://leetcode.cn/problems/maximum-palindromes-after-operations",target:"_blank",rel:"noopener noreferrer"},Pt={href:"https://leetcode.com/problems/maximum-palindromes-after-operations",target:"_blank",rel:"noopener noreferrer"};function Rt(zt,Gt){const c=l("font"),a=l("RouterLink"),o=l("ExternalLinkIcon");return r(),p("div",null,[_,t("p",null,[n("🟢 "),e(c,{color:"#15bd66"},{default:s(()=>[n("Easy")]),_:1}),n("  🔖  "),e(a,{to:"/tag/two-pointers.html"},{default:s(()=>[m]),_:1}),n(),e(a,{to:"/tag/string.html"},{default:s(()=>[k]),_:1}),n("  🔗 "),t("a",g,[f,e(o)]),n(),t("a",b,[v,e(o)])]),y,d(" prettier-ignore "),t("table",null,[x,t("tbody",null,[t("tr",null,[w,q,t("td",C,[e(a,{to:"/problem/0234.html"},{default:s(()=>[n("[✓]")]),_:1})]),t("td",E,[e(a,{to:"/tag/stack.html"},{default:s(()=>[I]),_:1}),n(),e(a,{to:"/tag/recursion.html"},{default:s(()=>[L]),_:1}),n(),e(a,{to:"/tag/linked-list.html"},{default:s(()=>[O]),_:1}),n(),V]),N,t("td",A,[t("a",j,[n("🀄️"),e(o)]),n(),t("a",B,[n("🔗"),e(o)])])]),t("tr",null,[S,P,t("td",R,[e(a,{to:"/problem/0680.html"},{default:s(()=>[n("[✓]")]),_:1})]),t("td",z,[e(a,{to:"/tag/greedy.html"},{default:s(()=>[G]),_:1}),n(),e(a,{to:"/tag/two-pointers.html"},{default:s(()=>[T]),_:1}),n(),e(a,{to:"/tag/string.html"},{default:s(()=>[D]),_:1})]),F,t("td",H,[t("a",J,[n("🀄️"),e(o)]),n(),t("a",K,[n("🔗"),e(o)])])]),t("tr",null,[M,Q,U,t("td",W,[e(a,{to:"/tag/bit-manipulation.html"},{default:s(()=>[X]),_:1}),n(),e(a,{to:"/tag/string.html"},{default:s(()=>[Y]),_:1}),n(),e(a,{to:"/tag/dynamic-programming.html"},{default:s(()=>[Z]),_:1}),n(),$]),tt,t("td",nt,[t("a",et,[n("🀄️"),e(o)]),n(),t("a",st,[n("🔗"),e(o)])])]),t("tr",null,[at,ot,t("td",lt,[e(a,{to:"/problem/2108.html"},{default:s(()=>[n("[✓]")]),_:1})]),t("td",ct,[e(a,{to:"/tag/array.html"},{default:s(()=>[it]),_:1}),n(),e(a,{to:"/tag/two-pointers.html"},{default:s(()=>[rt]),_:1}),n(),e(a,{to:"/tag/string.html"},{default:s(()=>[pt]),_:1})]),dt,t("td",ut,[t("a",ht,[n("🀄️"),e(o)]),n(),t("a",_t,[n("🔗"),e(o)])])]),t("tr",null,[mt,kt,gt,t("td",ft,[e(a,{to:"/tag/two-pointers.html"},{default:s(()=>[bt]),_:1}),n(),e(a,{to:"/tag/string.html"},{default:s(()=>[vt]),_:1})]),yt,t("td",xt,[t("a",wt,[n("🀄️"),e(o)]),n(),t("a",qt,[n("🔗"),e(o)])])]),t("tr",null,[Ct,Et,It,t("td",Lt,[e(a,{to:"/tag/greedy.html"},{default:s(()=>[Ot]),_:1}),n(),e(a,{to:"/tag/array.html"},{default:s(()=>[Vt]),_:1}),n(),e(a,{to:"/tag/hash-table.html"},{default:s(()=>[Nt]),_:1}),n(),At]),jt,t("td",Bt,[t("a",St,[n("🀄️"),e(o)]),n(),t("a",Pt,[n("🔗"),e(o)])])])])])])}const Dt=i(h,[["render",Rt],["__file","0125.html.vue"]]);export{Dt as default};
