import{_ as r,r as c,o as i,c as p,a as e,b as t,d as n,w as a,f as d,e as u}from"./app-fBVbqwGY.js";const h={},b=e("h1",{id:"_717-1-比特与-2-比特字符",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#_717-1-比特与-2-比特字符","aria-hidden":"true"},"#"),t(" 717. 1 比特与 2 比特字符")],-1),k=e("code",null,"数组",-1),_={href:"https://leetcode.cn/problems/1-bit-and-2-bit-characters",target:"_blank",rel:"noopener noreferrer"},m=e("code",null,"力扣",-1),g={href:"https://leetcode.com/problems/1-bit-and-2-bit-characters",target:"_blank",rel:"noopener noreferrer"},f=e("code",null,"LeetCode",-1),v=u(`<h2 id="题目" tabindex="-1"><a class="header-anchor" href="#题目" aria-hidden="true">#</a> 题目</h2><p>We have two special characters:</p><ul><li>The first character can be represented by one bit <code>0</code>.</li><li>The second character can be represented by two bits (<code>10</code> or <code>11</code>).</li></ul><p>Given a binary array <code>bits</code> that ends with <code>0</code>, return <code>true</code> if the last character must be a one-bit character.</p><p><strong>Example 1:</strong></p><blockquote><p>Input: bits = [1,0,0]</p><p>Output: true</p><p>Explanation: The only way to decode it is two-bit character and one-bit character.</p><p>So the last character is one-bit character.</p></blockquote><p><strong>Example 2:</strong></p><blockquote><p>Input: bits = [1,1,1,0]</p><p>Output: false</p><p>Explanation: The only way to decode it is two-bit character and two-bit character.</p><p>So the last character is not one-bit character.</p></blockquote><p><strong>Constraints:</strong></p><ul><li><code>1 &lt;= bits.length &lt;= 1000</code></li><li><code>bits[i]</code> is either <code>0</code> or <code>1</code>.</li></ul><h2 id="题目大意" tabindex="-1"><a class="header-anchor" href="#题目大意" aria-hidden="true">#</a> 题目大意</h2><p>有两种特殊字符：</p><ul><li>第一种字符可以用一比特 <code>0</code> 表示</li><li>第二种字符可以用两比特（<code>10</code> 或 <code>11</code>）表示</li></ul><p>给你一个以 <code>0</code> 结尾的二进制数组 <code>bits</code> ，如果最后一个字符必须是一个一比特字符，则返回 <code>true</code> 。</p><p><strong>示例 1:</strong></p><blockquote><p><strong>输入:</strong> bits = [1, 0, 0]</p><p><strong>输出:</strong> true</p><p><strong>解释:</strong> 唯一的解码方式是将其解析为一个两比特字符和一个一比特字符。</p><p>所以最后一个字符是一比特字符。</p></blockquote><p><strong>示例 2:</strong></p><blockquote><p><strong>输入：</strong> bits = [1,1,1,0]</p><p><strong>输出：</strong> false</p><p><strong>解释：</strong> 唯一的解码方式是将其解析为两比特字符和两比特字符。</p><p>所以最后一个字符不是一比特字符。</p></blockquote><p><strong>提示:</strong></p><ul><li><code>1 &lt;= bits.length &lt;= 1000</code></li><li><code>bits[i]</code> 为 <code>0</code> 或 <code>1</code></li></ul><h2 id="解题思路" tabindex="-1"><a class="header-anchor" href="#解题思路" aria-hidden="true">#</a> 解题思路</h2><p>利用贪心思想逐步遍历字符：</p><ol><li>从数组起始位置开始，读取当前字符： <ul><li>如果是 <code>1</code>，则表示当前字符是 2 比特字符，需要跳过当前字符及其后一个字符（<code>i += 2</code>）。</li><li>如果是 <code>0</code>，则表示当前字符是 1 比特字符，只需跳过当前字符（<code>i += 1</code>）。</li><li>循环结束条件是 <code>i &lt; bits.length - 1</code>，保证不越界，并且在判断是否为 1 比特字符之前结束循环。</li></ul></li><li>最终遍历结束时，若指针停留在数组倒数第二位之前，则继续跳过；若正好停留在最后一位，则表示最后一个字符是 1 比特字符。</li></ol><h4 id="复杂度分析" tabindex="-1"><a class="header-anchor" href="#复杂度分析" aria-hidden="true">#</a> 复杂度分析</h4><ul><li><strong>时间复杂度</strong>：<code>O(n)</code>，其中 <code>n</code> 为数组 <code>bits</code> 的长度。每次跳跃一个或两个字符，整体只需遍历一次。</li><li><strong>空间复杂度</strong>：<code>O(1)</code>，只使用了常数额外空间。</li></ul><h2 id="代码" tabindex="-1"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span> <span class="token parameter">bits</span>
 * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>boolean<span class="token punctuation">}</span></span>
 */</span>
<span class="token keyword">var</span> <span class="token function-variable function">isOneBitCharacter</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">bits</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> bits<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token comment">// 遍历至倒数第二位</span>
		i <span class="token operator">+=</span> bits<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 根据当前位值跳过对应的比特字符</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> i <span class="token operator">==</span> bits<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 是否停留在最后一位</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="相关题目" tabindex="-1"><a class="header-anchor" href="#相关题目" aria-hidden="true">#</a> 相关题目</h2>`,28),y=e("thead",null,[e("tr",null,[e("th",{style:{"text-align":"center"}},"题号"),e("th",{style:{"text-align":"left"}},"标题"),e("th",{style:{"text-align":"center"}},"题解"),e("th",{style:{"text-align":"left"}},"标签"),e("th",{style:{"text-align":"center"}},"难度"),e("th",{style:{"text-align":"center"}},"力扣")])],-1),x=e("td",{style:{"text-align":"center"}},"89",-1),w=e("td",{style:{"text-align":"left"}},"格雷编码",-1),q={style:{"text-align":"center"}},E={style:{"text-align":"left"}},C=e("code",null,"位运算",-1),L=e("code",null,"数学",-1),N=e("code",null,"回溯",-1),O=e("td",{style:{"text-align":"center"}},"🟠",-1),T={style:{"text-align":"center"}},V={href:"https://leetcode.cn/problems/gray-code",target:"_blank",rel:"noopener noreferrer"},B={href:"https://leetcode.com/problems/gray-code",target:"_blank",rel:"noopener noreferrer"};function I(j,S){const l=c("font"),s=c("RouterLink"),o=c("ExternalLinkIcon");return i(),p("div",null,[b,e("p",null,[t("🟢 "),n(l,{color:"#15bd66"},{default:a(()=>[t("Easy")]),_:1}),t("  🔖  "),n(s,{to:"/tag/array.html"},{default:a(()=>[k]),_:1}),t("  🔗 "),e("a",_,[m,n(o)]),t(),e("a",g,[f,n(o)])]),v,d(" prettier-ignore "),e("table",null,[y,e("tbody",null,[e("tr",null,[x,w,e("td",q,[n(s,{to:"/problem/0089.html"},{default:a(()=>[t("[✓]")]),_:1})]),e("td",E,[n(s,{to:"/tag/bit-manipulation.html"},{default:a(()=>[C]),_:1}),t(),n(s,{to:"/tag/math.html"},{default:a(()=>[L]),_:1}),t(),n(s,{to:"/tag/backtracking.html"},{default:a(()=>[N]),_:1})]),O,e("td",T,[e("a",V,[t("🀄️"),n(o)]),t(),e("a",B,[t("🔗"),n(o)])])])])])])}const G=r(h,[["render",I],["__file","0717.html.vue"]]);export{G as default};
