import{_ as c,r as a,o as u,c as l,a as t,b as n,d as o,w as s,e as i}from"./app-B5EG-zH0.js";const d={},b=t("h1",{id:"_1967-作为子字符串出现在单词中的字符串数目",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#_1967-作为子字符串出现在单词中的字符串数目","aria-hidden":"true"},"#"),n(" 1967. 作为子字符串出现在单词中的字符串数目")],-1),q=t("code",null,"数组",-1),g=t("code",null,"字符串",-1),k={href:"https://leetcode.cn/problems/number-of-strings-that-appear-as-substrings-in-word",target:"_blank",rel:"noopener noreferrer"},m=t("code",null,"力扣",-1),h={href:"https://leetcode.com/problems/number-of-strings-that-appear-as-substrings-in-word",target:"_blank",rel:"noopener noreferrer"},_=t("code",null,"LeetCode",-1),w=i(`<h2 id="题目" tabindex="-1"><a class="header-anchor" href="#题目" aria-hidden="true">#</a> 题目</h2><p>Given an array of strings <code>patterns</code> and a string <code>word</code>, return _the<strong>number</strong> of strings in _<code>patterns</code> _that exist as a<strong>substring</strong> in _<code>word</code>.</p><p>A <strong>substring</strong> is a contiguous sequence of characters within a string.</p><p><strong>Example 1:</strong></p><blockquote><p>Input: patterns = [&quot;a&quot;,&quot;abc&quot;,&quot;bc&quot;,&quot;d&quot;], word = &quot;abc&quot;</p><p>Output: 3</p><p>Explanation:</p><ul><li>&quot;a&quot; appears as a substring in &quot;<em>a</em> bc&quot;.</li><li>&quot;abc&quot; appears as a substring in &quot;<em>abc</em> &quot;.</li><li>&quot;bc&quot; appears as a substring in &quot;a <em>bc</em> &quot;.</li><li>&quot;d&quot; does not appear as a substring in &quot;abc&quot;.</li></ul><p>3 of the strings in patterns appear as a substring in word.</p></blockquote><p><strong>Example 2:</strong></p><blockquote><p>Input: patterns = [&quot;a&quot;,&quot;b&quot;,&quot;c&quot;], word = &quot;aaaaabbbbb&quot;</p><p>Output: 2</p><p>Explanation:</p><ul><li>&quot;a&quot; appears as a substring in &quot;a <em>a</em> aaabbbbb&quot;.</li><li>&quot;b&quot; appears as a substring in &quot;aaaaabbbb <em>b</em> &quot;.</li><li>&quot;c&quot; does not appear as a substring in &quot;aaaaabbbbb&quot;.</li></ul><p>2 of the strings in patterns appear as a substring in word.</p></blockquote><p><strong>Example 3:</strong></p><blockquote><p>Input: patterns = [&quot;a&quot;,&quot;a&quot;,&quot;a&quot;], word = &quot;ab&quot;</p><p>Output: 3</p><p>Explanation: Each of the patterns appears as a substring in word &quot;<em>a</em> b&quot;.</p></blockquote><p><strong>Constraints:</strong></p><ul><li><code>1 &lt;= patterns.length &lt;= 100</code></li><li><code>1 &lt;= patterns[i].length &lt;= 100</code></li><li><code>1 &lt;= word.length &lt;= 100</code></li><li><code>patterns[i]</code> and <code>word</code> consist of lowercase English letters.</li></ul><h2 id="题目大意" tabindex="-1"><a class="header-anchor" href="#题目大意" aria-hidden="true">#</a> 题目大意</h2><p>给你一个字符串数组 <code>patterns</code> 和一个字符串 <code>word</code> ，统计 <code>patterns</code> 中有多少个字符串是 <code>word</code> 的子字符串。返回字符串数目。</p><p><strong>子字符串</strong> 是字符串中的一个连续字符序列。</p><p><strong>示例 1：</strong></p><blockquote><p><strong>输入：</strong> patterns = [&quot;a&quot;,&quot;abc&quot;,&quot;bc&quot;,&quot;d&quot;], word = &quot;abc&quot;</p><p><strong>输出：</strong> 3</p><p><strong>解释：</strong></p><ul><li>&quot;a&quot; 是 &quot;<em><strong>a</strong></em> bc&quot; 的子字符串。</li><li>&quot;abc&quot; 是 &quot;<em><strong>abc</strong></em> &quot; 的子字符串。</li><li>&quot;bc&quot; 是 &quot;a <em><strong>bc</strong></em> &quot; 的子字符串。</li><li>&quot;d&quot; 不是 &quot;abc&quot; 的子字符串。</li></ul><p>patterns 中有 3 个字符串作为子字符串出现在 word 中。</p></blockquote><p><strong>示例 2：</strong></p><blockquote><p><strong>输入：</strong> patterns = [&quot;a&quot;,&quot;b&quot;,&quot;c&quot;], word = &quot;aaaaabbbbb&quot;</p><p><strong>输出：</strong> 2</p><p><strong>解释：</strong></p><ul><li>&quot;a&quot; 是 &quot;a <em><strong>a</strong></em> aaabbbbb&quot; 的子字符串。</li><li>&quot;b&quot; 是 &quot;aaaaabbbb <em><strong>b</strong></em> &quot; 的子字符串。</li><li>&quot;c&quot; 不是 &quot;aaaaabbbbb&quot; 的字符串。</li></ul><p>patterns 中有 2 个字符串作为子字符串出现在 word 中。</p></blockquote><p><strong>示例 3：</strong></p><blockquote><p><strong>输入：</strong> patterns = [&quot;a&quot;,&quot;a&quot;,&quot;a&quot;], word = &quot;ab&quot;</p><p><strong>输出：</strong> 3</p><p><strong>解释：</strong> patterns 中的每个字符串都作为子字符串出现在 word &quot;<em><strong>a</strong></em> b&quot; 中。</p></blockquote><p><strong>提示：</strong></p><ul><li><code>1 &lt;= patterns.length &lt;= 100</code></li><li><code>1 &lt;= patterns[i].length &lt;= 100</code></li><li><code>1 &lt;= word.length &lt;= 100</code></li><li><code>patterns[i]</code> 和 <code>word</code> 由小写英文字母组成</li></ul><h2 id="解题思路" tabindex="-1"><a class="header-anchor" href="#解题思路" aria-hidden="true">#</a> 解题思路</h2><ol><li>初始化计数器 <code>count</code> 为 0，用于记录符合条件的子串数量。</li><li>遍历 <code>patterns</code> 数组中的每个模式 <code>pattern</code>： <ul><li>如果 <code>word</code> 包含 <code>pattern</code>，将 <code>count</code> 加 1。</li></ul></li><li>遍历结束后，返回 <code>count</code>。</li></ol><h4 id="复杂度分析" tabindex="-1"><a class="header-anchor" href="#复杂度分析" aria-hidden="true">#</a> 复杂度分析</h4><ul><li><p><strong>时间复杂度</strong>：<code>O(m * n)</code></p><ul><li>遍历 <code>patterns</code> 的时间复杂度是 <code>O(m)</code>，其中 <code>m</code> 是 <code>patterns</code> 的长度。</li><li>对每个 <code>pattern</code> 调用 <code>.includes()</code> 方法的时间复杂度为 <code>O(n)</code>，其中 <code>n</code> 是 <code>word</code> 的长度。</li><li>总体时间复杂度为 <code>O(m * n)</code>。</li></ul></li><li><p><strong>空间复杂度</strong>：<code>O(1)</code>，使用了常量空间。</p></li></ul><h2 id="代码" tabindex="-1"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>string<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span> <span class="token parameter">patterns</span>
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>string<span class="token punctuation">}</span></span> <span class="token parameter">word</span>
 * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">}</span></span>
 */</span>
<span class="token keyword">var</span> <span class="token function-variable function">numOfStrings</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">patterns<span class="token punctuation">,</span> word</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> pattern <span class="token keyword">of</span> patterns<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>word<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>pattern<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			count<span class="token operator">++</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> count<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,28);function v(f,x){const r=a("font"),e=a("RouterLink"),p=a("ExternalLinkIcon");return u(),l("div",null,[b,t("p",null,[n("🟢 "),o(r,{color:"#15bd66"},{default:s(()=>[n("Easy")]),_:1}),n("  🔖  "),o(e,{to:"/tag/array.html"},{default:s(()=>[q]),_:1}),n(),o(e,{to:"/tag/string.html"},{default:s(()=>[g]),_:1}),n("  🔗 "),t("a",k,[m,o(p)]),n(),t("a",h,[_,o(p)])]),w])}const E=c(d,[["render",v],["__file","1967.html.vue"]]);export{E as default};
