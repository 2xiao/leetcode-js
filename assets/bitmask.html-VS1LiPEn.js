import{_,r as d,o as r,c as a,a as t,d as o,w as n,b as e,f as i}from"./app-aQeLbVW9.js";const c={},h=t("h1",{id:"状态压缩",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#状态压缩","aria-hidden":"true"},"#"),e(" 状态压缩")],-1),u=t("summary",null,"全部标签",-1),m=t("p",null,[t("strong",null,"数据结构")],-1),g=t("code",null,"数组",-1),f=t("code",null,"矩阵",-1),p=t("code",null,"链表",-1),y=t("code",null,"双向链表",-1),x=t("code",null,"栈",-1),b=t("code",null,"单调栈",-1),k=t("code",null,"队列",-1),w=t("code",null,"单调队列",-1),q=t("code",null,"堆（优先队列）",-1),v=t("code",null,"哈希表",-1),z=t("code",null,"字符串",-1),L=t("code",null,"字符串匹配",-1),C=t("code",null,"树",-1),I=t("code",null,"二叉树",-1),N=t("code",null,"二叉搜索树",-1),E=t("code",null,"最小生成树",-1),P=t("code",null,"图",-1),V=t("code",null,"有序集合",-1),j=t("code",null,"拓扑排序",-1),B=t("code",null,"最短路",-1),R=t("code",null,"强连通分量",-1),H=t("code",null,"欧拉回路",-1),J=t("code",null,"双连通分量",-1),K=t("code",null,"并查集",-1),M=t("code",null,"字典树",-1),T=t("code",null,"线段树",-1),W=t("code",null,"树状数组",-1),A=t("code",null,"后缀数组",-1),D=t("p",null,[t("strong",null,"算法")],-1),F=t("code",null,"枚举",-1),G=t("code",null,"递归",-1),O=t("code",null,"分治",-1),Q=t("code",null,"回溯",-1),S=t("code",null,"贪心",-1),U=t("code",null,"动态规划",-1),X=t("code",null,"排序",-1),Y=t("code",null,"桶排序",-1),Z=t("code",null,"计数排序",-1),$=t("code",null,"基数排序",-1),tt=t("code",null,"归并排序",-1),et=t("code",null,"快速选择",-1),ot=t("code",null,"二分查找",-1),lt=t("code",null,"记忆化搜索",-1),nt=t("code",null,"深度优先搜索",-1),st=t("code",null,"广度优先搜索",-1),dt=t("code",null,"双指针",-1),_t=t("code",null,"位运算",-1),rt=t("code",null,"前缀和",-1),at=t("code",null,"计数",-1),it=t("code",null,"滑动窗口",-1),ct=t("span",{class:"blue"},"状态压缩",-1),ht=t("code",null,"哈希函数",-1),ut=t("code",null,"滚动哈希",-1),mt=t("code",null,"扫描线",-1),gt=t("p",null,[t("strong",null,"其他")],-1),ft=t("code",null,"数学",-1),pt=t("code",null,"数论",-1),yt=t("code",null,"几何",-1),xt=t("code",null,"博弈",-1),bt=t("code",null,"模拟",-1),kt=t("code",null,"组合数学",-1),wt=t("code",null,"随机化",-1),qt=t("code",null,"概率与统计",-1),vt=t("code",null,"水塘抽样",-1),zt=t("code",null,"拒绝采样",-1),Lt=t("code",null,"数据库",-1),Ct=t("code",null,"设计",-1),It=t("code",null,"数据流",-1),Nt=t("code",null,"脑筋急转弯",-1),Et=t("code",null,"交互",-1),Pt=t("code",null,"迭代器",-1),Vt=t("code",null,"多线程",-1),jt=t("hr",null,null,-1),Bt=t("thead",null,[t("tr",null,[t("th",{style:{"text-align":"center"}},"题号"),t("th",{style:{"text-align":"left"}},"标题"),t("th",{style:{"text-align":"center"}},"题解"),t("th",{style:{"text-align":"left"}},"标签"),t("th",{style:{"text-align":"center"}},"难度"),t("th",{style:{"text-align":"center"}},"力扣")])],-1),Rt=t("td",{style:{"text-align":"center"}},"351",-1),Ht=t("td",{style:{"text-align":"left"}},"安卓系统手势解锁 🔒",-1),Jt=t("td",{style:{"text-align":"center"}},null,-1),Kt={style:{"text-align":"left"}},Mt=t("code",null,"位运算",-1),Tt=t("code",null,"动态规划",-1),Wt=t("code",null,"回溯",-1),At=t("code",null,"1+",-1),Dt=t("td",{style:{"text-align":"center"}},"🟠",-1),Ft={style:{"text-align":"center"}},Gt={href:"https://leetcode.cn/problems/android-unlock-patterns",target:"_blank",rel:"noopener noreferrer"},Ot={href:"https://leetcode.com/problems/android-unlock-patterns",target:"_blank",rel:"noopener noreferrer"},Qt=t("td",{style:{"text-align":"center"}},"464",-1),St=t("td",{style:{"text-align":"left"}},"我能赢吗",-1),Ut={style:{"text-align":"center"}},Xt={style:{"text-align":"left"}},Yt=t("code",null,"位运算",-1),Zt=t("code",null,"记忆化搜索",-1),$t=t("code",null,"数学",-1),te=t("code",null,"3+",-1),ee=t("td",{style:{"text-align":"center"}},"🟠",-1),oe={style:{"text-align":"center"}},le={href:"https://leetcode.cn/problems/can-i-win",target:"_blank",rel:"noopener noreferrer"},ne={href:"https://leetcode.com/problems/can-i-win",target:"_blank",rel:"noopener noreferrer"},se=t("td",{style:{"text-align":"center"}},"465",-1),de=t("td",{style:{"text-align":"left"}},"最优账单平衡 🔒",-1),_e=t("td",{style:{"text-align":"center"}},null,-1),re={style:{"text-align":"left"}},ae=t("code",null,"位运算",-1),ie=t("code",null,"数组",-1),ce=t("code",null,"动态规划",-1),he=t("code",null,"2+",-1),ue=t("td",{style:{"text-align":"center"}},"🔴",-1),me={style:{"text-align":"center"}},ge={href:"https://leetcode.cn/problems/optimal-account-balancing",target:"_blank",rel:"noopener noreferrer"},fe={href:"https://leetcode.com/problems/optimal-account-balancing",target:"_blank",rel:"noopener noreferrer"},pe=t("td",{style:{"text-align":"center"}},"473",-1),ye=t("td",{style:{"text-align":"left"}},"火柴拼正方形",-1),xe={style:{"text-align":"center"}},be={style:{"text-align":"left"}},ke=t("code",null,"位运算",-1),we=t("code",null,"数组",-1),qe=t("code",null,"动态规划",-1),ve=t("code",null,"2+",-1),ze=t("td",{style:{"text-align":"center"}},"🟠",-1),Le={style:{"text-align":"center"}},Ce={href:"https://leetcode.cn/problems/matchsticks-to-square",target:"_blank",rel:"noopener noreferrer"},Ie={href:"https://leetcode.com/problems/matchsticks-to-square",target:"_blank",rel:"noopener noreferrer"},Ne=t("td",{style:{"text-align":"center"}},"526",-1),Ee=t("td",{style:{"text-align":"left"}},"优美的排列",-1),Pe={style:{"text-align":"center"}},Ve={style:{"text-align":"left"}},je=t("code",null,"位运算",-1),Be=t("code",null,"数组",-1),Re=t("code",null,"动态规划",-1),He=t("code",null,"2+",-1),Je=t("td",{style:{"text-align":"center"}},"🟠",-1),Ke={style:{"text-align":"center"}},Me={href:"https://leetcode.cn/problems/beautiful-arrangement",target:"_blank",rel:"noopener noreferrer"},Te={href:"https://leetcode.com/problems/beautiful-arrangement",target:"_blank",rel:"noopener noreferrer"},We=t("td",{style:{"text-align":"center"}},"638",-1),Ae=t("td",{style:{"text-align":"left"}},"大礼包",-1),De={style:{"text-align":"center"}},Fe={style:{"text-align":"left"}},Ge=t("code",null,"位运算",-1),Oe=t("code",null,"记忆化搜索",-1),Qe=t("code",null,"数组",-1),Se=t("code",null,"3+",-1),Ue=t("td",{style:{"text-align":"center"}},"🟠",-1),Xe={style:{"text-align":"center"}},Ye={href:"https://leetcode.cn/problems/shopping-offers",target:"_blank",rel:"noopener noreferrer"},Ze={href:"https://leetcode.com/problems/shopping-offers",target:"_blank",rel:"noopener noreferrer"},$e=t("td",{style:{"text-align":"center"}},"691",-1),to=t("td",{style:{"text-align":"left"}},"贴纸拼词",-1),eo=t("td",{style:{"text-align":"center"}},null,-1),oo={style:{"text-align":"left"}},lo=t("code",null,"位运算",-1),no=t("code",null,"数组",-1),so=t("code",null,"字符串",-1),_o=t("code",null,"3+",-1),ro=t("td",{style:{"text-align":"center"}},"🔴",-1),ao={style:{"text-align":"center"}},io={href:"https://leetcode.cn/problems/stickers-to-spell-word",target:"_blank",rel:"noopener noreferrer"},co={href:"https://leetcode.com/problems/stickers-to-spell-word",target:"_blank",rel:"noopener noreferrer"},ho=t("td",{style:{"text-align":"center"}},"698",-1),uo=t("td",{style:{"text-align":"left"}},"划分为k个相等的子集",-1),mo=t("td",{style:{"text-align":"center"}},null,-1),go={style:{"text-align":"left"}},fo=t("code",null,"位运算",-1),po=t("code",null,"记忆化搜索",-1),yo=t("code",null,"数组",-1),xo=t("code",null,"3+",-1),bo=t("td",{style:{"text-align":"center"}},"🟠",-1),ko={style:{"text-align":"center"}},wo={href:"https://leetcode.cn/problems/partition-to-k-equal-sum-subsets",target:"_blank",rel:"noopener noreferrer"},qo={href:"https://leetcode.com/problems/partition-to-k-equal-sum-subsets",target:"_blank",rel:"noopener noreferrer"},vo=t("td",{style:{"text-align":"center"}},"805",-1),zo=t("td",{style:{"text-align":"left"}},"数组的均值分割",-1),Lo=t("td",{style:{"text-align":"center"}},null,-1),Co={style:{"text-align":"left"}},Io=t("code",null,"位运算",-1),No=t("code",null,"数组",-1),Eo=t("code",null,"数学",-1),Po=t("code",null,"2+",-1),Vo=t("td",{style:{"text-align":"center"}},"🔴",-1),jo={style:{"text-align":"center"}},Bo={href:"https://leetcode.cn/problems/split-array-with-same-average",target:"_blank",rel:"noopener noreferrer"},Ro={href:"https://leetcode.com/problems/split-array-with-same-average",target:"_blank",rel:"noopener noreferrer"},Ho=t("td",{style:{"text-align":"center"}},"847",-1),Jo=t("td",{style:{"text-align":"left"}},"访问所有节点的最短路径",-1),Ko=t("td",{style:{"text-align":"center"}},null,-1),Mo={style:{"text-align":"left"}},To=t("code",null,"位运算",-1),Wo=t("code",null,"广度优先搜索",-1),Ao=t("code",null,"图",-1),Do=t("code",null,"2+",-1),Fo=t("td",{style:{"text-align":"center"}},"🔴",-1),Go={style:{"text-align":"center"}},Oo={href:"https://leetcode.cn/problems/shortest-path-visiting-all-nodes",target:"_blank",rel:"noopener noreferrer"},Qo={href:"https://leetcode.com/problems/shortest-path-visiting-all-nodes",target:"_blank",rel:"noopener noreferrer"},So=t("td",{style:{"text-align":"center"}},"943",-1),Uo=t("td",{style:{"text-align":"left"}},"最短超级串",-1),Xo=t("td",{style:{"text-align":"center"}},null,-1),Yo={style:{"text-align":"left"}},Zo=t("code",null,"位运算",-1),$o=t("code",null,"数组",-1),tl=t("code",null,"字符串",-1),el=t("code",null,"2+",-1),ol=t("td",{style:{"text-align":"center"}},"🔴",-1),ll={style:{"text-align":"center"}},nl={href:"https://leetcode.cn/problems/find-the-shortest-superstring",target:"_blank",rel:"noopener noreferrer"},sl={href:"https://leetcode.com/problems/find-the-shortest-superstring",target:"_blank",rel:"noopener noreferrer"},dl=t("td",{style:{"text-align":"center"}},"996",-1),_l=t("td",{style:{"text-align":"left"}},"平方数组的数目",-1),rl=t("td",{style:{"text-align":"center"}},null,-1),al={style:{"text-align":"left"}},il=t("code",null,"位运算",-1),cl=t("code",null,"数组",-1),hl=t("code",null,"哈希表",-1),ul=t("code",null,"4+",-1),ml=t("td",{style:{"text-align":"center"}},"🔴",-1),gl={style:{"text-align":"center"}},fl={href:"https://leetcode.cn/problems/number-of-squareful-arrays",target:"_blank",rel:"noopener noreferrer"},pl={href:"https://leetcode.com/problems/number-of-squareful-arrays",target:"_blank",rel:"noopener noreferrer"},yl=t("td",{style:{"text-align":"center"}},"1066",-1),xl=t("td",{style:{"text-align":"left"}},"校园自行车分配 II 🔒",-1),bl=t("td",{style:{"text-align":"center"}},null,-1),kl={style:{"text-align":"left"}},wl=t("code",null,"位运算",-1),ql=t("code",null,"数组",-1),vl=t("code",null,"动态规划",-1),zl=t("code",null,"2+",-1),Ll=t("td",{style:{"text-align":"center"}},"🟠",-1),Cl={style:{"text-align":"center"}},Il={href:"https://leetcode.cn/problems/campus-bikes-ii",target:"_blank",rel:"noopener noreferrer"},Nl={href:"https://leetcode.com/problems/campus-bikes-ii",target:"_blank",rel:"noopener noreferrer"},El=t("td",{style:{"text-align":"center"}},"1125",-1),Pl=t("td",{style:{"text-align":"left"}},"最小的必要团队",-1),Vl=t("td",{style:{"text-align":"center"}},null,-1),jl={style:{"text-align":"left"}},Bl=t("code",null,"位运算",-1),Rl=t("code",null,"数组",-1),Hl=t("code",null,"动态规划",-1),Jl=t("code",null,"1+",-1),Kl=t("td",{style:{"text-align":"center"}},"🔴",-1),Ml={style:{"text-align":"center"}},Tl={href:"https://leetcode.cn/problems/smallest-sufficient-team",target:"_blank",rel:"noopener noreferrer"},Wl={href:"https://leetcode.com/problems/smallest-sufficient-team",target:"_blank",rel:"noopener noreferrer"},Al=t("td",{style:{"text-align":"center"}},"1255",-1),Dl=t("td",{style:{"text-align":"left"}},"得分最高的单词集合",-1),Fl=t("td",{style:{"text-align":"center"}},null,-1),Gl={style:{"text-align":"left"}},Ol=t("code",null,"位运算",-1),Ql=t("code",null,"数组",-1),Sl=t("code",null,"字符串",-1),Ul=t("code",null,"3+",-1),Xl=t("td",{style:{"text-align":"center"}},"🔴",-1),Yl={style:{"text-align":"center"}},Zl={href:"https://leetcode.cn/problems/maximum-score-words-formed-by-letters",target:"_blank",rel:"noopener noreferrer"},$l={href:"https://leetcode.com/problems/maximum-score-words-formed-by-letters",target:"_blank",rel:"noopener noreferrer"},tn=t("td",{style:{"text-align":"center"}},"1349",-1),en=t("td",{style:{"text-align":"left"}},"参加考试的最大学生数",-1),on=t("td",{style:{"text-align":"center"}},null,-1),ln={style:{"text-align":"left"}},nn=t("code",null,"位运算",-1),sn=t("code",null,"数组",-1),dn=t("code",null,"动态规划",-1),_n=t("code",null,"2+",-1),rn=t("td",{style:{"text-align":"center"}},"🔴",-1),an={style:{"text-align":"center"}},cn={href:"https://leetcode.cn/problems/maximum-students-taking-exam",target:"_blank",rel:"noopener noreferrer"},hn={href:"https://leetcode.com/problems/maximum-students-taking-exam",target:"_blank",rel:"noopener noreferrer"},un=t("td",{style:{"text-align":"center"}},"1434",-1),mn=t("td",{style:{"text-align":"left"}},"每个人戴不同帽子的方案数",-1),gn=t("td",{style:{"text-align":"center"}},null,-1),fn={style:{"text-align":"left"}},pn=t("code",null,"位运算",-1),yn=t("code",null,"数组",-1),xn=t("code",null,"动态规划",-1),bn=t("code",null,"1+",-1),kn=t("td",{style:{"text-align":"center"}},"🔴",-1),wn={style:{"text-align":"center"}},qn={href:"https://leetcode.cn/problems/number-of-ways-to-wear-different-hats-to-each-other",target:"_blank",rel:"noopener noreferrer"},vn={href:"https://leetcode.com/problems/number-of-ways-to-wear-different-hats-to-each-other",target:"_blank",rel:"noopener noreferrer"},zn=t("td",{style:{"text-align":"center"}},"1494",-1),Ln=t("td",{style:{"text-align":"left"}},"并行课程 II",-1),Cn=t("td",{style:{"text-align":"center"}},null,-1),In={style:{"text-align":"left"}},Nn=t("code",null,"位运算",-1),En=t("code",null,"图",-1),Pn=t("code",null,"动态规划",-1),Vn=t("code",null,"1+",-1),jn=t("td",{style:{"text-align":"center"}},"🔴",-1),Bn={style:{"text-align":"center"}},Rn={href:"https://leetcode.cn/problems/parallel-courses-ii",target:"_blank",rel:"noopener noreferrer"},Hn={href:"https://leetcode.com/problems/parallel-courses-ii",target:"_blank",rel:"noopener noreferrer"},Jn=t("td",{style:{"text-align":"center"}},"1595",-1),Kn=t("td",{style:{"text-align":"left"}},"连通两组点的最小成本",-1),Mn=t("td",{style:{"text-align":"center"}},null,-1),Tn={style:{"text-align":"left"}},Wn=t("code",null,"位运算",-1),An=t("code",null,"数组",-1),Dn=t("code",null,"动态规划",-1),Fn=t("code",null,"2+",-1),Gn=t("td",{style:{"text-align":"center"}},"🔴",-1),On={style:{"text-align":"center"}},Qn={href:"https://leetcode.cn/problems/minimum-cost-to-connect-two-groups-of-points",target:"_blank",rel:"noopener noreferrer"},Sn={href:"https://leetcode.com/problems/minimum-cost-to-connect-two-groups-of-points",target:"_blank",rel:"noopener noreferrer"},Un=t("td",{style:{"text-align":"center"}},"1617",-1),Xn=t("td",{style:{"text-align":"left"}},"统计子树中城市之间最大距离",-1),Yn=t("td",{style:{"text-align":"center"}},null,-1),Zn={style:{"text-align":"left"}},$n=t("code",null,"位运算",-1),ts=t("code",null,"树",-1),es=t("code",null,"动态规划",-1),os=t("code",null,"2+",-1),ls=t("td",{style:{"text-align":"center"}},"🔴",-1),ns={style:{"text-align":"center"}},ss={href:"https://leetcode.cn/problems/count-subtrees-with-max-distance-between-cities",target:"_blank",rel:"noopener noreferrer"},ds={href:"https://leetcode.com/problems/count-subtrees-with-max-distance-between-cities",target:"_blank",rel:"noopener noreferrer"},_s=t("td",{style:{"text-align":"center"}},"1655",-1),rs=t("td",{style:{"text-align":"left"}},"分配重复整数",-1),as=t("td",{style:{"text-align":"center"}},null,-1),is={style:{"text-align":"left"}},cs=t("code",null,"位运算",-1),hs=t("code",null,"数组",-1),us=t("code",null,"动态规划",-1),ms=t("code",null,"2+",-1),gs=t("td",{style:{"text-align":"center"}},"🔴",-1),fs={style:{"text-align":"center"}},ps={href:"https://leetcode.cn/problems/distribute-repeating-integers",target:"_blank",rel:"noopener noreferrer"},ys={href:"https://leetcode.com/problems/distribute-repeating-integers",target:"_blank",rel:"noopener noreferrer"},xs=t("td",{style:{"text-align":"center"}},"1659",-1),bs=t("td",{style:{"text-align":"left"}},"最大化网格幸福感",-1),ks=t("td",{style:{"text-align":"center"}},null,-1),ws={style:{"text-align":"left"}},qs=t("code",null,"位运算",-1),vs=t("code",null,"记忆化搜索",-1),zs=t("code",null,"动态规划",-1),Ls=t("code",null,"1+",-1),Cs=t("td",{style:{"text-align":"center"}},"🔴",-1),Is={style:{"text-align":"center"}},Ns={href:"https://leetcode.cn/problems/maximize-grid-happiness",target:"_blank",rel:"noopener noreferrer"},Es={href:"https://leetcode.com/problems/maximize-grid-happiness",target:"_blank",rel:"noopener noreferrer"},Ps=t("td",{style:{"text-align":"center"}},"1681",-1),Vs=t("td",{style:{"text-align":"left"}},"最小不兼容性",-1),js=t("td",{style:{"text-align":"center"}},null,-1),Bs={style:{"text-align":"left"}},Rs=t("code",null,"位运算",-1),Hs=t("code",null,"数组",-1),Js=t("code",null,"动态规划",-1),Ks=t("code",null,"1+",-1),Ms=t("td",{style:{"text-align":"center"}},"🔴",-1),Ts={style:{"text-align":"center"}},Ws={href:"https://leetcode.cn/problems/minimum-incompatibility",target:"_blank",rel:"noopener noreferrer"},As={href:"https://leetcode.com/problems/minimum-incompatibility",target:"_blank",rel:"noopener noreferrer"},Ds=t("td",{style:{"text-align":"center"}},"1723",-1),Fs=t("td",{style:{"text-align":"left"}},"完成所有工作的最短时间",-1),Gs=t("td",{style:{"text-align":"center"}},null,-1),Os={style:{"text-align":"left"}},Qs=t("code",null,"位运算",-1),Ss=t("code",null,"数组",-1),Us=t("code",null,"动态规划",-1),Xs=t("code",null,"2+",-1),Ys=t("td",{style:{"text-align":"center"}},"🔴",-1),Zs={style:{"text-align":"center"}},$s={href:"https://leetcode.cn/problems/find-minimum-time-to-finish-all-jobs",target:"_blank",rel:"noopener noreferrer"},td={href:"https://leetcode.com/problems/find-minimum-time-to-finish-all-jobs",target:"_blank",rel:"noopener noreferrer"},ed=t("td",{style:{"text-align":"center"}},"1755",-1),od=t("td",{style:{"text-align":"left"}},"最接近目标值的子序列和",-1),ld=t("td",{style:{"text-align":"center"}},null,-1),nd={style:{"text-align":"left"}},sd=t("code",null,"位运算",-1),dd=t("code",null,"数组",-1),_d=t("code",null,"双指针",-1),rd=t("code",null,"2+",-1),ad=t("td",{style:{"text-align":"center"}},"🔴",-1),id={style:{"text-align":"center"}},cd={href:"https://leetcode.cn/problems/closest-subsequence-sum",target:"_blank",rel:"noopener noreferrer"},hd={href:"https://leetcode.com/problems/closest-subsequence-sum",target:"_blank",rel:"noopener noreferrer"},ud=t("td",{style:{"text-align":"center"}},"1799",-1),md=t("td",{style:{"text-align":"left"}},"N 次操作后的最大分数和",-1),gd=t("td",{style:{"text-align":"center"}},null,-1),fd={style:{"text-align":"left"}},pd=t("code",null,"位运算",-1),yd=t("code",null,"数组",-1),xd=t("code",null,"数学",-1),bd=t("code",null,"4+",-1),kd=t("td",{style:{"text-align":"center"}},"🔴",-1),wd={style:{"text-align":"center"}},qd={href:"https://leetcode.cn/problems/maximize-score-after-n-operations",target:"_blank",rel:"noopener noreferrer"},vd={href:"https://leetcode.com/problems/maximize-score-after-n-operations",target:"_blank",rel:"noopener noreferrer"},zd=t("td",{style:{"text-align":"center"}},"1815",-1),Ld=t("td",{style:{"text-align":"left"}},"得到新鲜甜甜圈的最多组数",-1),Cd=t("td",{style:{"text-align":"center"}},null,-1),Id={style:{"text-align":"left"}},Nd=t("code",null,"位运算",-1),Ed=t("code",null,"记忆化搜索",-1),Pd=t("code",null,"数组",-1),Vd=t("code",null,"2+",-1),jd=t("td",{style:{"text-align":"center"}},"🔴",-1),Bd={style:{"text-align":"center"}},Rd={href:"https://leetcode.cn/problems/maximum-number-of-groups-getting-fresh-donuts",target:"_blank",rel:"noopener noreferrer"},Hd={href:"https://leetcode.com/problems/maximum-number-of-groups-getting-fresh-donuts",target:"_blank",rel:"noopener noreferrer"},Jd=t("td",{style:{"text-align":"center"}},"1879",-1),Kd=t("td",{style:{"text-align":"left"}},"两个数组最小的异或值之和",-1),Md=t("td",{style:{"text-align":"center"}},null,-1),Td={style:{"text-align":"left"}},Wd=t("code",null,"位运算",-1),Ad=t("code",null,"数组",-1),Dd=t("code",null,"动态规划",-1),Fd=t("code",null,"1+",-1),Gd=t("td",{style:{"text-align":"center"}},"🔴",-1),Od={style:{"text-align":"center"}},Qd={href:"https://leetcode.cn/problems/minimum-xor-sum-of-two-arrays",target:"_blank",rel:"noopener noreferrer"},Sd={href:"https://leetcode.com/problems/minimum-xor-sum-of-two-arrays",target:"_blank",rel:"noopener noreferrer"},Ud=t("td",{style:{"text-align":"center"}},"1947",-1),Xd=t("td",{style:{"text-align":"left"}},"最大兼容性评分和",-1),Yd=t("td",{style:{"text-align":"center"}},null,-1),Zd={style:{"text-align":"left"}},$d=t("code",null,"位运算",-1),t_=t("code",null,"数组",-1),e_=t("code",null,"动态规划",-1),o_=t("code",null,"2+",-1),l_=t("td",{style:{"text-align":"center"}},"🟠",-1),n_={style:{"text-align":"center"}},s_={href:"https://leetcode.cn/problems/maximum-compatibility-score-sum",target:"_blank",rel:"noopener noreferrer"},d_={href:"https://leetcode.com/problems/maximum-compatibility-score-sum",target:"_blank",rel:"noopener noreferrer"},__=t("td",{style:{"text-align":"center"}},"1986",-1),r_=t("td",{style:{"text-align":"left"}},"完成任务的最少工作时间段",-1),a_=t("td",{style:{"text-align":"center"}},null,-1),i_={style:{"text-align":"left"}},c_=t("code",null,"位运算",-1),h_=t("code",null,"数组",-1),u_=t("code",null,"动态规划",-1),m_=t("code",null,"2+",-1),g_=t("td",{style:{"text-align":"center"}},"🟠",-1),f_={style:{"text-align":"center"}},p_={href:"https://leetcode.cn/problems/minimum-number-of-work-sessions-to-finish-the-tasks",target:"_blank",rel:"noopener noreferrer"},y_={href:"https://leetcode.com/problems/minimum-number-of-work-sessions-to-finish-the-tasks",target:"_blank",rel:"noopener noreferrer"},x_=t("td",{style:{"text-align":"center"}},"1994",-1),b_=t("td",{style:{"text-align":"left"}},"好子集的数目",-1),k_=t("td",{style:{"text-align":"center"}},null,-1),w_={style:{"text-align":"left"}},q_=t("code",null,"位运算",-1),v_=t("code",null,"数组",-1),z_=t("code",null,"数学",-1),L_=t("code",null,"2+",-1),C_=t("td",{style:{"text-align":"center"}},"🔴",-1),I_={style:{"text-align":"center"}},N_={href:"https://leetcode.cn/problems/the-number-of-good-subsets",target:"_blank",rel:"noopener noreferrer"},E_={href:"https://leetcode.com/problems/the-number-of-good-subsets",target:"_blank",rel:"noopener noreferrer"},P_=t("td",{style:{"text-align":"center"}},"2002",-1),V_=t("td",{style:{"text-align":"left"}},"两个回文子序列长度的最大乘积",-1),j_=t("td",{style:{"text-align":"center"}},null,-1),B_={style:{"text-align":"left"}},R_=t("code",null,"位运算",-1),H_=t("code",null,"字符串",-1),J_=t("code",null,"动态规划",-1),K_=t("code",null,"2+",-1),M_=t("td",{style:{"text-align":"center"}},"🟠",-1),T_={style:{"text-align":"center"}},W_={href:"https://leetcode.cn/problems/maximum-product-of-the-length-of-two-palindromic-subsequences",target:"_blank",rel:"noopener noreferrer"},A_={href:"https://leetcode.com/problems/maximum-product-of-the-length-of-two-palindromic-subsequences",target:"_blank",rel:"noopener noreferrer"},D_=t("td",{style:{"text-align":"center"}},"2035",-1),F_=t("td",{style:{"text-align":"left"}},"将数组分成两个数组并最小化数组和的差",-1),G_=t("td",{style:{"text-align":"center"}},null,-1),O_={style:{"text-align":"left"}},Q_=t("code",null,"位运算",-1),S_=t("code",null,"数组",-1),U_=t("code",null,"双指针",-1),X_=t("code",null,"4+",-1),Y_=t("td",{style:{"text-align":"center"}},"🔴",-1),Z_={style:{"text-align":"center"}},$_={href:"https://leetcode.cn/problems/partition-array-into-two-arrays-to-minimize-sum-difference",target:"_blank",rel:"noopener noreferrer"},tr={href:"https://leetcode.com/problems/partition-array-into-two-arrays-to-minimize-sum-difference",target:"_blank",rel:"noopener noreferrer"},er=t("td",{style:{"text-align":"center"}},"2152",-1),or=t("td",{style:{"text-align":"left"}},"穿过所有点的所需最少直线数量 🔒",-1),lr=t("td",{style:{"text-align":"center"}},null,-1),nr={style:{"text-align":"left"}},sr=t("code",null,"位运算",-1),dr=t("code",null,"几何",-1),_r=t("code",null,"数组",-1),rr=t("code",null,"5+",-1),ar=t("td",{style:{"text-align":"center"}},"🟠",-1),ir={style:{"text-align":"center"}},cr={href:"https://leetcode.cn/problems/minimum-number-of-lines-to-cover-points",target:"_blank",rel:"noopener noreferrer"},hr={href:"https://leetcode.com/problems/minimum-number-of-lines-to-cover-points",target:"_blank",rel:"noopener noreferrer"},ur=t("td",{style:{"text-align":"center"}},"2172",-1),mr=t("td",{style:{"text-align":"left"}},"数组的最大与和",-1),gr=t("td",{style:{"text-align":"center"}},null,-1),fr={style:{"text-align":"left"}},pr=t("code",null,"位运算",-1),yr=t("code",null,"数组",-1),xr=t("code",null,"动态规划",-1),br=t("code",null,"1+",-1),kr=t("td",{style:{"text-align":"center"}},"🔴",-1),wr={style:{"text-align":"center"}},qr={href:"https://leetcode.cn/problems/maximum-and-sum-of-array",target:"_blank",rel:"noopener noreferrer"},vr={href:"https://leetcode.com/problems/maximum-and-sum-of-array",target:"_blank",rel:"noopener noreferrer"},zr=t("td",{style:{"text-align":"center"}},"2184",-1),Lr=t("td",{style:{"text-align":"left"}},"建造坚实的砖墙的方法数 🔒",-1),Cr=t("td",{style:{"text-align":"center"}},null,-1),Ir={style:{"text-align":"left"}},Nr=t("code",null,"位运算",-1),Er=t("code",null,"数组",-1),Pr=t("code",null,"动态规划",-1),Vr=t("code",null,"1+",-1),jr=t("td",{style:{"text-align":"center"}},"🟠",-1),Br={style:{"text-align":"center"}},Rr={href:"https://leetcode.cn/problems/number-of-ways-to-build-sturdy-brick-wall",target:"_blank",rel:"noopener noreferrer"},Hr={href:"https://leetcode.com/problems/number-of-ways-to-build-sturdy-brick-wall",target:"_blank",rel:"noopener noreferrer"},Jr=t("td",{style:{"text-align":"center"}},"2247",-1),Kr=t("td",{style:{"text-align":"left"}},"K 条高速公路的最大旅行费用 🔒",-1),Mr=t("td",{style:{"text-align":"center"}},null,-1),Tr={style:{"text-align":"left"}},Wr=t("code",null,"位运算",-1),Ar=t("code",null,"图",-1),Dr=t("code",null,"动态规划",-1),Fr=t("code",null,"1+",-1),Gr=t("td",{style:{"text-align":"center"}},"🔴",-1),Or={style:{"text-align":"center"}},Qr={href:"https://leetcode.cn/problems/maximum-cost-of-trip-with-k-highways",target:"_blank",rel:"noopener noreferrer"},Sr={href:"https://leetcode.com/problems/maximum-cost-of-trip-with-k-highways",target:"_blank",rel:"noopener noreferrer"},Ur=t("td",{style:{"text-align":"center"}},"2305",-1),Xr=t("td",{style:{"text-align":"left"}},"公平分发饼干",-1),Yr=t("td",{style:{"text-align":"center"}},null,-1),Zr={style:{"text-align":"left"}},$r=t("code",null,"位运算",-1),ta=t("code",null,"数组",-1),ea=t("code",null,"动态规划",-1),oa=t("code",null,"2+",-1),la=t("td",{style:{"text-align":"center"}},"🟠",-1),na={style:{"text-align":"center"}},sa={href:"https://leetcode.cn/problems/fair-distribution-of-cookies",target:"_blank",rel:"noopener noreferrer"},da={href:"https://leetcode.com/problems/fair-distribution-of-cookies",target:"_blank",rel:"noopener noreferrer"},_a=t("td",{style:{"text-align":"center"}},"2403",-1),ra=t("td",{style:{"text-align":"left"}},"杀死所有怪物的最短时间 🔒",-1),aa=t("td",{style:{"text-align":"center"}},null,-1),ia={style:{"text-align":"left"}},ca=t("code",null,"位运算",-1),ha=t("code",null,"数组",-1),ua=t("code",null,"动态规划",-1),ma=t("code",null,"1+",-1),ga=t("td",{style:{"text-align":"center"}},"🔴",-1),fa={style:{"text-align":"center"}},pa={href:"https://leetcode.cn/problems/minimum-time-to-kill-all-monsters",target:"_blank",rel:"noopener noreferrer"},ya={href:"https://leetcode.com/problems/minimum-time-to-kill-all-monsters",target:"_blank",rel:"noopener noreferrer"},xa=t("td",{style:{"text-align":"center"}},"2572",-1),ba=t("td",{style:{"text-align":"left"}},"无平方子集计数",-1),ka=t("td",{style:{"text-align":"center"}},null,-1),wa={style:{"text-align":"left"}},qa=t("code",null,"位运算",-1),va=t("code",null,"数组",-1),za=t("code",null,"数学",-1),La=t("code",null,"2+",-1),Ca=t("td",{style:{"text-align":"center"}},"🟠",-1),Ia={style:{"text-align":"center"}},Na={href:"https://leetcode.cn/problems/count-the-number-of-square-free-subsets",target:"_blank",rel:"noopener noreferrer"},Ea={href:"https://leetcode.com/problems/count-the-number-of-square-free-subsets",target:"_blank",rel:"noopener noreferrer"},Pa=t("td",{style:{"text-align":"center"}},"2741",-1),Va=t("td",{style:{"text-align":"left"}},"特别的排列",-1),ja=t("td",{style:{"text-align":"center"}},null,-1),Ba={style:{"text-align":"left"}},Ra=t("code",null,"位运算",-1),Ha=t("code",null,"数组",-1),Ja=t("code",null,"动态规划",-1),Ka=t("code",null,"1+",-1),Ma=t("td",{style:{"text-align":"center"}},"🟠",-1),Ta={style:{"text-align":"center"}},Wa={href:"https://leetcode.cn/problems/special-permutations",target:"_blank",rel:"noopener noreferrer"},Aa={href:"https://leetcode.com/problems/special-permutations",target:"_blank",rel:"noopener noreferrer"},Da=t("td",{style:{"text-align":"center"}},"2791",-1),Fa=t("td",{style:{"text-align":"left"}},"树中可以形成回文的路径数",-1),Ga=t("td",{style:{"text-align":"center"}},null,-1),Oa={style:{"text-align":"left"}},Qa=t("code",null,"位运算",-1),Sa=t("code",null,"树",-1),Ua=t("code",null,"深度优先搜索",-1),Xa=t("code",null,"2+",-1),Ya=t("td",{style:{"text-align":"center"}},"🔴",-1),Za={style:{"text-align":"center"}},$a={href:"https://leetcode.cn/problems/count-paths-that-can-form-a-palindrome-in-a-tree",target:"_blank",rel:"noopener noreferrer"},ti={href:"https://leetcode.com/problems/count-paths-that-can-form-a-palindrome-in-a-tree",target:"_blank",rel:"noopener noreferrer"},ei=t("td",{style:{"text-align":"center"}},"2992",-1),oi=t("td",{style:{"text-align":"left"}},"自整除排列的数量 🔒",-1),li=t("td",{style:{"text-align":"center"}},null,-1),ni={style:{"text-align":"left"}},si=t("code",null,"位运算",-1),di=t("code",null,"数组",-1),_i=t("code",null,"动态规划",-1),ri=t("code",null,"2+",-1),ai=t("td",{style:{"text-align":"center"}},"🟠",-1),ii={style:{"text-align":"center"}},ci={href:"https://leetcode.cn/problems/number-of-self-divisible-permutations",target:"_blank",rel:"noopener noreferrer"},hi={href:"https://leetcode.com/problems/number-of-self-divisible-permutations",target:"_blank",rel:"noopener noreferrer"},ui=t("td",{style:{"text-align":"center"}},"3003",-1),mi=t("td",{style:{"text-align":"left"}},"执行操作后的最大分割数量",-1),gi=t("td",{style:{"text-align":"center"}},null,-1),fi={style:{"text-align":"left"}},pi=t("code",null,"位运算",-1),yi=t("code",null,"字符串",-1),xi=t("code",null,"动态规划",-1),bi=t("code",null,"1+",-1),ki=t("td",{style:{"text-align":"center"}},"🔴",-1),wi={style:{"text-align":"center"}},qi={href:"https://leetcode.cn/problems/maximize-the-number-of-partitions-after-operations",target:"_blank",rel:"noopener noreferrer"},vi={href:"https://leetcode.com/problems/maximize-the-number-of-partitions-after-operations",target:"_blank",rel:"noopener noreferrer"},zi=t("td",{style:{"text-align":"center"}},"3149",-1),Li=t("td",{style:{"text-align":"left"}},"找出分数最低的排列",-1),Ci=t("td",{style:{"text-align":"center"}},null,-1),Ii={style:{"text-align":"left"}},Ni=t("code",null,"位运算",-1),Ei=t("code",null,"数组",-1),Pi=t("code",null,"动态规划",-1),Vi=t("code",null,"1+",-1),ji=t("td",{style:{"text-align":"center"}},"🔴",-1),Bi={style:{"text-align":"center"}},Ri={href:"https://leetcode.cn/problems/find-the-minimum-cost-array-permutation",target:"_blank",rel:"noopener noreferrer"},Hi={href:"https://leetcode.com/problems/find-the-minimum-cost-array-permutation",target:"_blank",rel:"noopener noreferrer"},Ji=t("td",{style:{"text-align":"center"}},"3276",-1),Ki=t("td",{style:{"text-align":"left"}},"选择矩阵中单元格的最大得分",-1),Mi=t("td",{style:{"text-align":"center"}},null,-1),Ti={style:{"text-align":"left"}},Wi=t("code",null,"位运算",-1),Ai=t("code",null,"数组",-1),Di=t("code",null,"动态规划",-1),Fi=t("code",null,"2+",-1),Gi=t("td",{style:{"text-align":"center"}},"🔴",-1),Oi={style:{"text-align":"center"}},Qi={href:"https://leetcode.cn/problems/select-cells-in-grid-with-maximum-score",target:"_blank",rel:"noopener noreferrer"},Si={href:"https://leetcode.com/problems/select-cells-in-grid-with-maximum-score",target:"_blank",rel:"noopener noreferrer"},Ui=t("td",{style:{"text-align":"center"}},"3283",-1),Xi=t("td",{style:{"text-align":"left"}},"吃掉所有兵需要的最多移动次数",-1),Yi=t("td",{style:{"text-align":"center"}},null,-1),Zi={style:{"text-align":"left"}},$i=t("code",null,"位运算",-1),tc=t("code",null,"广度优先搜索",-1),ec=t("code",null,"数组",-1),oc=t("code",null,"3+",-1),lc=t("td",{style:{"text-align":"center"}},"🔴",-1),nc={style:{"text-align":"center"}},sc={href:"https://leetcode.cn/problems/maximum-number-of-moves-to-kill-all-pawns",target:"_blank",rel:"noopener noreferrer"},dc={href:"https://leetcode.com/problems/maximum-number-of-moves-to-kill-all-pawns",target:"_blank",rel:"noopener noreferrer"},_c=t("td",{style:{"text-align":"center"}},"3376",-1),rc=t("td",{style:{"text-align":"left"}},"破解锁的最少时间 I",-1),ac=t("td",{style:{"text-align":"center"}},null,-1),ic={style:{"text-align":"left"}},cc=t("code",null,"位运算",-1),hc=t("code",null,"深度优先搜索",-1),uc=t("code",null,"数组",-1),mc=t("code",null,"3+",-1),gc=t("td",{style:{"text-align":"center"}},"🟠",-1),fc={style:{"text-align":"center"}},pc={href:"https://leetcode.cn/problems/minimum-time-to-break-locks-i",target:"_blank",rel:"noopener noreferrer"},yc={href:"https://leetcode.com/problems/minimum-time-to-break-locks-i",target:"_blank",rel:"noopener noreferrer"},xc=t("td",{style:{"text-align":"center"}},"3444",-1),bc=t("td",{style:{"text-align":"left"}},"使数组包含目标值倍数的最少增量",-1),kc=t("td",{style:{"text-align":"center"}},null,-1),wc={style:{"text-align":"left"}},qc=t("code",null,"位运算",-1),vc=t("code",null,"数组",-1),zc=t("code",null,"数学",-1),Lc=t("code",null,"3+",-1),Cc=t("td",{style:{"text-align":"center"}},"🔴",-1),Ic={style:{"text-align":"center"}},Nc={href:"https://leetcode.cn/problems/minimum-increments-for-target-multiples-in-an-array",target:"_blank",rel:"noopener noreferrer"},Ec={href:"https://leetcode.com/problems/minimum-increments-for-target-multiples-in-an-array",target:"_blank",rel:"noopener noreferrer"},Pc=t("td",{style:{"text-align":"center"}},"LCP 04",-1),Vc=t("td",{style:{"text-align":"left"}},"覆盖",-1),jc=t("td",{style:{"text-align":"center"}},null,-1),Bc={style:{"text-align":"left"}},Rc=t("code",null,"位运算",-1),Hc=t("code",null,"图",-1),Jc=t("code",null,"数组",-1),Kc=t("code",null,"2+",-1),Mc=t("td",{style:{"text-align":"center"}},"🔴",-1),Tc={style:{"text-align":"center"}},Wc={href:"https://leetcode.cn/problems/broken-board-dominoes",target:"_blank",rel:"noopener noreferrer"},Ac=t("td",{style:{"text-align":"center"}},"LCP 13",-1),Dc=t("td",{style:{"text-align":"left"}},"寻宝",-1),Fc=t("td",{style:{"text-align":"center"}},null,-1),Gc={style:{"text-align":"left"}},Oc=t("code",null,"位运算",-1),Qc=t("code",null,"广度优先搜索",-1),Sc=t("code",null,"数组",-1),Uc=t("code",null,"3+",-1),Xc=t("td",{style:{"text-align":"center"}},"🔴",-1),Yc={style:{"text-align":"center"}},Zc={href:"https://leetcode.cn/problems/xun-bao",target:"_blank",rel:"noopener noreferrer"},$c=t("td",{style:{"text-align":"center"}},"LCP 53",-1),th=t("td",{style:{"text-align":"left"}},"守护太空城",-1),eh=t("td",{style:{"text-align":"center"}},null,-1),oh={style:{"text-align":"left"}},lh=t("code",null,"位运算",-1),nh=t("code",null,"数组",-1),sh=t("code",null,"动态规划",-1),dh=t("code",null,"1+",-1),_h=t("td",{style:{"text-align":"center"}},"🔴",-1),rh={style:{"text-align":"center"}},ah={href:"https://leetcode.cn/problems/EJvmW4",target:"_blank",rel:"noopener noreferrer"},ih=t("td",{style:{"text-align":"center"}},"LCP 69",-1),ch=t("td",{style:{"text-align":"left"}},"Hello LeetCode!",-1),hh=t("td",{style:{"text-align":"center"}},null,-1),uh={style:{"text-align":"left"}},mh=t("code",null,"位运算",-1),gh=t("code",null,"数组",-1),fh=t("code",null,"字符串",-1),ph=t("code",null,"2+",-1),yh=t("td",{style:{"text-align":"center"}},"🔴",-1),xh={style:{"text-align":"center"}},bh={href:"https://leetcode.cn/problems/rMeRt2",target:"_blank",rel:"noopener noreferrer"};function kh(wh,qh){const l=d("RouterLink"),s=d("ExternalLinkIcon");return r(),a("div",null,[h,t("details",null,[u,m,t("p",null,[o(l,{to:"/tag/array.html"},{default:n(()=>[g]),_:1}),e(),o(l,{to:"/tag/matrix.html"},{default:n(()=>[f]),_:1}),e(),o(l,{to:"/tag/linked-list.html"},{default:n(()=>[p]),_:1}),e(),o(l,{to:"/tag/doubly-linked-list.html"},{default:n(()=>[y]),_:1}),e(),o(l,{to:"/tag/stack.html"},{default:n(()=>[x]),_:1}),e(),o(l,{to:"/tag/monotonic-stack.html"},{default:n(()=>[b]),_:1}),e(),o(l,{to:"/tag/queue.html"},{default:n(()=>[k]),_:1}),e(),o(l,{to:"/tag/monotonic-queue.html"},{default:n(()=>[w]),_:1}),e(),o(l,{to:"/tag/heap-priority-queue.html"},{default:n(()=>[q]),_:1}),e(),o(l,{to:"/tag/hash-table.html"},{default:n(()=>[v]),_:1}),e(),o(l,{to:"/tag/string.html"},{default:n(()=>[z]),_:1}),e(),o(l,{to:"/tag/string-matching.html"},{default:n(()=>[L]),_:1}),e(),o(l,{to:"/tag/tree.html"},{default:n(()=>[C]),_:1}),e(),o(l,{to:"/tag/binary-tree.html"},{default:n(()=>[I]),_:1}),e(),o(l,{to:"/tag/binary-search-tree.html"},{default:n(()=>[N]),_:1}),e(),o(l,{to:"/tag/minimum-spanning-tree.html"},{default:n(()=>[E]),_:1}),e(),o(l,{to:"/tag/graph.html"},{default:n(()=>[P]),_:1}),e(),o(l,{to:"/tag/ordered-set.html"},{default:n(()=>[V]),_:1}),e(),o(l,{to:"/tag/topological-sort.html"},{default:n(()=>[j]),_:1}),e(),o(l,{to:"/tag/shortest-path.html"},{default:n(()=>[B]),_:1}),e(),o(l,{to:"/tag/strongly-connected-component.html"},{default:n(()=>[R]),_:1}),e(),o(l,{to:"/tag/eulerian-circuit.html"},{default:n(()=>[H]),_:1}),e(),o(l,{to:"/tag/biconnected-component.html"},{default:n(()=>[J]),_:1}),e(),o(l,{to:"/tag/union-find.html"},{default:n(()=>[K]),_:1}),e(),o(l,{to:"/tag/trie.html"},{default:n(()=>[M]),_:1}),e(),o(l,{to:"/tag/segment-tree.html"},{default:n(()=>[T]),_:1}),e(),o(l,{to:"/tag/binary-indexed-tree.html"},{default:n(()=>[W]),_:1}),e(),o(l,{to:"/tag/suffix-array.html"},{default:n(()=>[A]),_:1})]),D,t("p",null,[o(l,{to:"/tag/enumeration.html"},{default:n(()=>[F]),_:1}),e(),o(l,{to:"/tag/recursion.html"},{default:n(()=>[G]),_:1}),e(),o(l,{to:"/tag/divide-and-conquer.html"},{default:n(()=>[O]),_:1}),e(),o(l,{to:"/tag/backtracking.html"},{default:n(()=>[Q]),_:1}),e(),o(l,{to:"/tag/greedy.html"},{default:n(()=>[S]),_:1}),e(),o(l,{to:"/tag/dynamic-programming.html"},{default:n(()=>[U]),_:1}),e(),o(l,{to:"/tag/sorting.html"},{default:n(()=>[X]),_:1}),e(),o(l,{to:"/tag/bucket-sort.html"},{default:n(()=>[Y]),_:1}),e(),o(l,{to:"/tag/counting-sort.html"},{default:n(()=>[Z]),_:1}),e(),o(l,{to:"/tag/radix-sort.html"},{default:n(()=>[$]),_:1}),e(),o(l,{to:"/tag/merge-sort.html"},{default:n(()=>[tt]),_:1}),e(),o(l,{to:"/tag/quickselect.html"},{default:n(()=>[et]),_:1}),e(),o(l,{to:"/tag/binary-search.html"},{default:n(()=>[ot]),_:1}),e(),o(l,{to:"/tag/memoization.html"},{default:n(()=>[lt]),_:1}),e(),o(l,{to:"/tag/depth-first-search.html"},{default:n(()=>[nt]),_:1}),e(),o(l,{to:"/tag/breadth-first-search.html"},{default:n(()=>[st]),_:1}),e(),o(l,{to:"/tag/two-pointers.html"},{default:n(()=>[dt]),_:1}),e(),o(l,{to:"/tag/bit-manipulation.html"},{default:n(()=>[_t]),_:1}),e(),o(l,{to:"/tag/prefix-sum.html"},{default:n(()=>[rt]),_:1}),e(),o(l,{to:"/tag/counting.html"},{default:n(()=>[at]),_:1}),e(),o(l,{to:"/tag/sliding-window.html"},{default:n(()=>[it]),_:1}),e(),ct,e(),o(l,{to:"/tag/hash-function.html"},{default:n(()=>[ht]),_:1}),e(),o(l,{to:"/tag/rolling-hash.html"},{default:n(()=>[ut]),_:1}),e(),o(l,{to:"/tag/line-sweep.html"},{default:n(()=>[mt]),_:1})]),gt,t("p",null,[o(l,{to:"/tag/math.html"},{default:n(()=>[ft]),_:1}),e(),o(l,{to:"/tag/number-theory.html"},{default:n(()=>[pt]),_:1}),e(),o(l,{to:"/tag/geometry.html"},{default:n(()=>[yt]),_:1}),e(),o(l,{to:"/tag/game-theory.html"},{default:n(()=>[xt]),_:1}),e(),o(l,{to:"/tag/simulation.html"},{default:n(()=>[bt]),_:1}),e(),o(l,{to:"/tag/combinatorics.html"},{default:n(()=>[kt]),_:1}),e(),o(l,{to:"/tag/randomized.html"},{default:n(()=>[wt]),_:1}),e(),o(l,{to:"/tag/probability-and-statistics.html"},{default:n(()=>[qt]),_:1}),e(),o(l,{to:"/tag/reservoir-sampling.html"},{default:n(()=>[vt]),_:1}),e(),o(l,{to:"/tag/rejection-sampling.html"},{default:n(()=>[zt]),_:1}),e(),o(l,{to:"/tag/database.html"},{default:n(()=>[Lt]),_:1}),e(),o(l,{to:"/tag/design.html"},{default:n(()=>[Ct]),_:1}),e(),o(l,{to:"/tag/data-stream.html"},{default:n(()=>[It]),_:1}),e(),o(l,{to:"/tag/brainteaser.html"},{default:n(()=>[Nt]),_:1}),e(),o(l,{to:"/tag/interactive.html"},{default:n(()=>[Et]),_:1}),e(),o(l,{to:"/tag/iterator.html"},{default:n(()=>[Pt]),_:1}),e(),o(l,{to:"/tag/concurrency.html"},{default:n(()=>[Vt]),_:1})])]),jt,i(" prettier-ignore "),t("table",null,[Bt,t("tbody",null,[t("tr",null,[Rt,Ht,Jt,t("td",Kt,[o(l,{to:"/tag/bit-manipulation.html"},{default:n(()=>[Mt]),_:1}),e(),o(l,{to:"/tag/dynamic-programming.html"},{default:n(()=>[Tt]),_:1}),e(),o(l,{to:"/tag/backtracking.html"},{default:n(()=>[Wt]),_:1}),e(),At]),Dt,t("td",Ft,[t("a",Gt,[e("🀄️"),o(s)]),e(),t("a",Ot,[e("🔗"),o(s)])])]),t("tr",null,[Qt,St,t("td",Ut,[o(l,{to:"/problem/0464.html"},{default:n(()=>[e("[✓]")]),_:1})]),t("td",Xt,[o(l,{to:"/tag/bit-manipulation.html"},{default:n(()=>[Yt]),_:1}),e(),o(l,{to:"/tag/memoization.html"},{default:n(()=>[Zt]),_:1}),e(),o(l,{to:"/tag/math.html"},{default:n(()=>[$t]),_:1}),e(),te]),ee,t("td",oe,[t("a",le,[e("🀄️"),o(s)]),e(),t("a",ne,[e("🔗"),o(s)])])]),t("tr",null,[se,de,_e,t("td",re,[o(l,{to:"/tag/bit-manipulation.html"},{default:n(()=>[ae]),_:1}),e(),o(l,{to:"/tag/array.html"},{default:n(()=>[ie]),_:1}),e(),o(l,{to:"/tag/dynamic-programming.html"},{default:n(()=>[ce]),_:1}),e(),he]),ue,t("td",me,[t("a",ge,[e("🀄️"),o(s)]),e(),t("a",fe,[e("🔗"),o(s)])])]),t("tr",null,[pe,ye,t("td",xe,[o(l,{to:"/problem/0473.html"},{default:n(()=>[e("[✓]")]),_:1})]),t("td",be,[o(l,{to:"/tag/bit-manipulation.html"},{default:n(()=>[ke]),_:1}),e(),o(l,{to:"/tag/array.html"},{default:n(()=>[we]),_:1}),e(),o(l,{to:"/tag/dynamic-programming.html"},{default:n(()=>[qe]),_:1}),e(),ve]),ze,t("td",Le,[t("a",Ce,[e("🀄️"),o(s)]),e(),t("a",Ie,[e("🔗"),o(s)])])]),t("tr",null,[Ne,Ee,t("td",Pe,[o(l,{to:"/problem/0526.html"},{default:n(()=>[e("[✓]")]),_:1})]),t("td",Ve,[o(l,{to:"/tag/bit-manipulation.html"},{default:n(()=>[je]),_:1}),e(),o(l,{to:"/tag/array.html"},{default:n(()=>[Be]),_:1}),e(),o(l,{to:"/tag/dynamic-programming.html"},{default:n(()=>[Re]),_:1}),e(),He]),Je,t("td",Ke,[t("a",Me,[e("🀄️"),o(s)]),e(),t("a",Te,[e("🔗"),o(s)])])]),t("tr",null,[We,Ae,t("td",De,[o(l,{to:"/problem/0638.html"},{default:n(()=>[e("[✓]")]),_:1})]),t("td",Fe,[o(l,{to:"/tag/bit-manipulation.html"},{default:n(()=>[Ge]),_:1}),e(),o(l,{to:"/tag/memoization.html"},{default:n(()=>[Oe]),_:1}),e(),o(l,{to:"/tag/array.html"},{default:n(()=>[Qe]),_:1}),e(),Se]),Ue,t("td",Xe,[t("a",Ye,[e("🀄️"),o(s)]),e(),t("a",Ze,[e("🔗"),o(s)])])]),t("tr",null,[$e,to,eo,t("td",oo,[o(l,{to:"/tag/bit-manipulation.html"},{default:n(()=>[lo]),_:1}),e(),o(l,{to:"/tag/array.html"},{default:n(()=>[no]),_:1}),e(),o(l,{to:"/tag/string.html"},{default:n(()=>[so]),_:1}),e(),_o]),ro,t("td",ao,[t("a",io,[e("🀄️"),o(s)]),e(),t("a",co,[e("🔗"),o(s)])])]),t("tr",null,[ho,uo,mo,t("td",go,[o(l,{to:"/tag/bit-manipulation.html"},{default:n(()=>[fo]),_:1}),e(),o(l,{to:"/tag/memoization.html"},{default:n(()=>[po]),_:1}),e(),o(l,{to:"/tag/array.html"},{default:n(()=>[yo]),_:1}),e(),xo]),bo,t("td",ko,[t("a",wo,[e("🀄️"),o(s)]),e(),t("a",qo,[e("🔗"),o(s)])])]),t("tr",null,[vo,zo,Lo,t("td",Co,[o(l,{to:"/tag/bit-manipulation.html"},{default:n(()=>[Io]),_:1}),e(),o(l,{to:"/tag/array.html"},{default:n(()=>[No]),_:1}),e(),o(l,{to:"/tag/math.html"},{default:n(()=>[Eo]),_:1}),e(),Po]),Vo,t("td",jo,[t("a",Bo,[e("🀄️"),o(s)]),e(),t("a",Ro,[e("🔗"),o(s)])])]),t("tr",null,[Ho,Jo,Ko,t("td",Mo,[o(l,{to:"/tag/bit-manipulation.html"},{default:n(()=>[To]),_:1}),e(),o(l,{to:"/tag/breadth-first-search.html"},{default:n(()=>[Wo]),_:1}),e(),o(l,{to:"/tag/graph.html"},{default:n(()=>[Ao]),_:1}),e(),Do]),Fo,t("td",Go,[t("a",Oo,[e("🀄️"),o(s)]),e(),t("a",Qo,[e("🔗"),o(s)])])]),t("tr",null,[So,Uo,Xo,t("td",Yo,[o(l,{to:"/tag/bit-manipulation.html"},{default:n(()=>[Zo]),_:1}),e(),o(l,{to:"/tag/array.html"},{default:n(()=>[$o]),_:1}),e(),o(l,{to:"/tag/string.html"},{default:n(()=>[tl]),_:1}),e(),el]),ol,t("td",ll,[t("a",nl,[e("🀄️"),o(s)]),e(),t("a",sl,[e("🔗"),o(s)])])]),t("tr",null,[dl,_l,rl,t("td",al,[o(l,{to:"/tag/bit-manipulation.html"},{default:n(()=>[il]),_:1}),e(),o(l,{to:"/tag/array.html"},{default:n(()=>[cl]),_:1}),e(),o(l,{to:"/tag/hash-table.html"},{default:n(()=>[hl]),_:1}),e(),ul]),ml,t("td",gl,[t("a",fl,[e("🀄️"),o(s)]),e(),t("a",pl,[e("🔗"),o(s)])])]),t("tr",null,[yl,xl,bl,t("td",kl,[o(l,{to:"/tag/bit-manipulation.html"},{default:n(()=>[wl]),_:1}),e(),o(l,{to:"/tag/array.html"},{default:n(()=>[ql]),_:1}),e(),o(l,{to:"/tag/dynamic-programming.html"},{default:n(()=>[vl]),_:1}),e(),zl]),Ll,t("td",Cl,[t("a",Il,[e("🀄️"),o(s)]),e(),t("a",Nl,[e("🔗"),o(s)])])]),t("tr",null,[El,Pl,Vl,t("td",jl,[o(l,{to:"/tag/bit-manipulation.html"},{default:n(()=>[Bl]),_:1}),e(),o(l,{to:"/tag/array.html"},{default:n(()=>[Rl]),_:1}),e(),o(l,{to:"/tag/dynamic-programming.html"},{default:n(()=>[Hl]),_:1}),e(),Jl]),Kl,t("td",Ml,[t("a",Tl,[e("🀄️"),o(s)]),e(),t("a",Wl,[e("🔗"),o(s)])])]),t("tr",null,[Al,Dl,Fl,t("td",Gl,[o(l,{to:"/tag/bit-manipulation.html"},{default:n(()=>[Ol]),_:1}),e(),o(l,{to:"/tag/array.html"},{default:n(()=>[Ql]),_:1}),e(),o(l,{to:"/tag/string.html"},{default:n(()=>[Sl]),_:1}),e(),Ul]),Xl,t("td",Yl,[t("a",Zl,[e("🀄️"),o(s)]),e(),t("a",$l,[e("🔗"),o(s)])])]),t("tr",null,[tn,en,on,t("td",ln,[o(l,{to:"/tag/bit-manipulation.html"},{default:n(()=>[nn]),_:1}),e(),o(l,{to:"/tag/array.html"},{default:n(()=>[sn]),_:1}),e(),o(l,{to:"/tag/dynamic-programming.html"},{default:n(()=>[dn]),_:1}),e(),_n]),rn,t("td",an,[t("a",cn,[e("🀄️"),o(s)]),e(),t("a",hn,[e("🔗"),o(s)])])]),t("tr",null,[un,mn,gn,t("td",fn,[o(l,{to:"/tag/bit-manipulation.html"},{default:n(()=>[pn]),_:1}),e(),o(l,{to:"/tag/array.html"},{default:n(()=>[yn]),_:1}),e(),o(l,{to:"/tag/dynamic-programming.html"},{default:n(()=>[xn]),_:1}),e(),bn]),kn,t("td",wn,[t("a",qn,[e("🀄️"),o(s)]),e(),t("a",vn,[e("🔗"),o(s)])])]),t("tr",null,[zn,Ln,Cn,t("td",In,[o(l,{to:"/tag/bit-manipulation.html"},{default:n(()=>[Nn]),_:1}),e(),o(l,{to:"/tag/graph.html"},{default:n(()=>[En]),_:1}),e(),o(l,{to:"/tag/dynamic-programming.html"},{default:n(()=>[Pn]),_:1}),e(),Vn]),jn,t("td",Bn,[t("a",Rn,[e("🀄️"),o(s)]),e(),t("a",Hn,[e("🔗"),o(s)])])]),t("tr",null,[Jn,Kn,Mn,t("td",Tn,[o(l,{to:"/tag/bit-manipulation.html"},{default:n(()=>[Wn]),_:1}),e(),o(l,{to:"/tag/array.html"},{default:n(()=>[An]),_:1}),e(),o(l,{to:"/tag/dynamic-programming.html"},{default:n(()=>[Dn]),_:1}),e(),Fn]),Gn,t("td",On,[t("a",Qn,[e("🀄️"),o(s)]),e(),t("a",Sn,[e("🔗"),o(s)])])]),t("tr",null,[Un,Xn,Yn,t("td",Zn,[o(l,{to:"/tag/bit-manipulation.html"},{default:n(()=>[$n]),_:1}),e(),o(l,{to:"/tag/tree.html"},{default:n(()=>[ts]),_:1}),e(),o(l,{to:"/tag/dynamic-programming.html"},{default:n(()=>[es]),_:1}),e(),os]),ls,t("td",ns,[t("a",ss,[e("🀄️"),o(s)]),e(),t("a",ds,[e("🔗"),o(s)])])]),t("tr",null,[_s,rs,as,t("td",is,[o(l,{to:"/tag/bit-manipulation.html"},{default:n(()=>[cs]),_:1}),e(),o(l,{to:"/tag/array.html"},{default:n(()=>[hs]),_:1}),e(),o(l,{to:"/tag/dynamic-programming.html"},{default:n(()=>[us]),_:1}),e(),ms]),gs,t("td",fs,[t("a",ps,[e("🀄️"),o(s)]),e(),t("a",ys,[e("🔗"),o(s)])])]),t("tr",null,[xs,bs,ks,t("td",ws,[o(l,{to:"/tag/bit-manipulation.html"},{default:n(()=>[qs]),_:1}),e(),o(l,{to:"/tag/memoization.html"},{default:n(()=>[vs]),_:1}),e(),o(l,{to:"/tag/dynamic-programming.html"},{default:n(()=>[zs]),_:1}),e(),Ls]),Cs,t("td",Is,[t("a",Ns,[e("🀄️"),o(s)]),e(),t("a",Es,[e("🔗"),o(s)])])]),t("tr",null,[Ps,Vs,js,t("td",Bs,[o(l,{to:"/tag/bit-manipulation.html"},{default:n(()=>[Rs]),_:1}),e(),o(l,{to:"/tag/array.html"},{default:n(()=>[Hs]),_:1}),e(),o(l,{to:"/tag/dynamic-programming.html"},{default:n(()=>[Js]),_:1}),e(),Ks]),Ms,t("td",Ts,[t("a",Ws,[e("🀄️"),o(s)]),e(),t("a",As,[e("🔗"),o(s)])])]),t("tr",null,[Ds,Fs,Gs,t("td",Os,[o(l,{to:"/tag/bit-manipulation.html"},{default:n(()=>[Qs]),_:1}),e(),o(l,{to:"/tag/array.html"},{default:n(()=>[Ss]),_:1}),e(),o(l,{to:"/tag/dynamic-programming.html"},{default:n(()=>[Us]),_:1}),e(),Xs]),Ys,t("td",Zs,[t("a",$s,[e("🀄️"),o(s)]),e(),t("a",td,[e("🔗"),o(s)])])]),t("tr",null,[ed,od,ld,t("td",nd,[o(l,{to:"/tag/bit-manipulation.html"},{default:n(()=>[sd]),_:1}),e(),o(l,{to:"/tag/array.html"},{default:n(()=>[dd]),_:1}),e(),o(l,{to:"/tag/two-pointers.html"},{default:n(()=>[_d]),_:1}),e(),rd]),ad,t("td",id,[t("a",cd,[e("🀄️"),o(s)]),e(),t("a",hd,[e("🔗"),o(s)])])]),t("tr",null,[ud,md,gd,t("td",fd,[o(l,{to:"/tag/bit-manipulation.html"},{default:n(()=>[pd]),_:1}),e(),o(l,{to:"/tag/array.html"},{default:n(()=>[yd]),_:1}),e(),o(l,{to:"/tag/math.html"},{default:n(()=>[xd]),_:1}),e(),bd]),kd,t("td",wd,[t("a",qd,[e("🀄️"),o(s)]),e(),t("a",vd,[e("🔗"),o(s)])])]),t("tr",null,[zd,Ld,Cd,t("td",Id,[o(l,{to:"/tag/bit-manipulation.html"},{default:n(()=>[Nd]),_:1}),e(),o(l,{to:"/tag/memoization.html"},{default:n(()=>[Ed]),_:1}),e(),o(l,{to:"/tag/array.html"},{default:n(()=>[Pd]),_:1}),e(),Vd]),jd,t("td",Bd,[t("a",Rd,[e("🀄️"),o(s)]),e(),t("a",Hd,[e("🔗"),o(s)])])]),t("tr",null,[Jd,Kd,Md,t("td",Td,[o(l,{to:"/tag/bit-manipulation.html"},{default:n(()=>[Wd]),_:1}),e(),o(l,{to:"/tag/array.html"},{default:n(()=>[Ad]),_:1}),e(),o(l,{to:"/tag/dynamic-programming.html"},{default:n(()=>[Dd]),_:1}),e(),Fd]),Gd,t("td",Od,[t("a",Qd,[e("🀄️"),o(s)]),e(),t("a",Sd,[e("🔗"),o(s)])])]),t("tr",null,[Ud,Xd,Yd,t("td",Zd,[o(l,{to:"/tag/bit-manipulation.html"},{default:n(()=>[$d]),_:1}),e(),o(l,{to:"/tag/array.html"},{default:n(()=>[t_]),_:1}),e(),o(l,{to:"/tag/dynamic-programming.html"},{default:n(()=>[e_]),_:1}),e(),o_]),l_,t("td",n_,[t("a",s_,[e("🀄️"),o(s)]),e(),t("a",d_,[e("🔗"),o(s)])])]),t("tr",null,[__,r_,a_,t("td",i_,[o(l,{to:"/tag/bit-manipulation.html"},{default:n(()=>[c_]),_:1}),e(),o(l,{to:"/tag/array.html"},{default:n(()=>[h_]),_:1}),e(),o(l,{to:"/tag/dynamic-programming.html"},{default:n(()=>[u_]),_:1}),e(),m_]),g_,t("td",f_,[t("a",p_,[e("🀄️"),o(s)]),e(),t("a",y_,[e("🔗"),o(s)])])]),t("tr",null,[x_,b_,k_,t("td",w_,[o(l,{to:"/tag/bit-manipulation.html"},{default:n(()=>[q_]),_:1}),e(),o(l,{to:"/tag/array.html"},{default:n(()=>[v_]),_:1}),e(),o(l,{to:"/tag/math.html"},{default:n(()=>[z_]),_:1}),e(),L_]),C_,t("td",I_,[t("a",N_,[e("🀄️"),o(s)]),e(),t("a",E_,[e("🔗"),o(s)])])]),t("tr",null,[P_,V_,j_,t("td",B_,[o(l,{to:"/tag/bit-manipulation.html"},{default:n(()=>[R_]),_:1}),e(),o(l,{to:"/tag/string.html"},{default:n(()=>[H_]),_:1}),e(),o(l,{to:"/tag/dynamic-programming.html"},{default:n(()=>[J_]),_:1}),e(),K_]),M_,t("td",T_,[t("a",W_,[e("🀄️"),o(s)]),e(),t("a",A_,[e("🔗"),o(s)])])]),t("tr",null,[D_,F_,G_,t("td",O_,[o(l,{to:"/tag/bit-manipulation.html"},{default:n(()=>[Q_]),_:1}),e(),o(l,{to:"/tag/array.html"},{default:n(()=>[S_]),_:1}),e(),o(l,{to:"/tag/two-pointers.html"},{default:n(()=>[U_]),_:1}),e(),X_]),Y_,t("td",Z_,[t("a",$_,[e("🀄️"),o(s)]),e(),t("a",tr,[e("🔗"),o(s)])])]),t("tr",null,[er,or,lr,t("td",nr,[o(l,{to:"/tag/bit-manipulation.html"},{default:n(()=>[sr]),_:1}),e(),o(l,{to:"/tag/geometry.html"},{default:n(()=>[dr]),_:1}),e(),o(l,{to:"/tag/array.html"},{default:n(()=>[_r]),_:1}),e(),rr]),ar,t("td",ir,[t("a",cr,[e("🀄️"),o(s)]),e(),t("a",hr,[e("🔗"),o(s)])])]),t("tr",null,[ur,mr,gr,t("td",fr,[o(l,{to:"/tag/bit-manipulation.html"},{default:n(()=>[pr]),_:1}),e(),o(l,{to:"/tag/array.html"},{default:n(()=>[yr]),_:1}),e(),o(l,{to:"/tag/dynamic-programming.html"},{default:n(()=>[xr]),_:1}),e(),br]),kr,t("td",wr,[t("a",qr,[e("🀄️"),o(s)]),e(),t("a",vr,[e("🔗"),o(s)])])]),t("tr",null,[zr,Lr,Cr,t("td",Ir,[o(l,{to:"/tag/bit-manipulation.html"},{default:n(()=>[Nr]),_:1}),e(),o(l,{to:"/tag/array.html"},{default:n(()=>[Er]),_:1}),e(),o(l,{to:"/tag/dynamic-programming.html"},{default:n(()=>[Pr]),_:1}),e(),Vr]),jr,t("td",Br,[t("a",Rr,[e("🀄️"),o(s)]),e(),t("a",Hr,[e("🔗"),o(s)])])]),t("tr",null,[Jr,Kr,Mr,t("td",Tr,[o(l,{to:"/tag/bit-manipulation.html"},{default:n(()=>[Wr]),_:1}),e(),o(l,{to:"/tag/graph.html"},{default:n(()=>[Ar]),_:1}),e(),o(l,{to:"/tag/dynamic-programming.html"},{default:n(()=>[Dr]),_:1}),e(),Fr]),Gr,t("td",Or,[t("a",Qr,[e("🀄️"),o(s)]),e(),t("a",Sr,[e("🔗"),o(s)])])]),t("tr",null,[Ur,Xr,Yr,t("td",Zr,[o(l,{to:"/tag/bit-manipulation.html"},{default:n(()=>[$r]),_:1}),e(),o(l,{to:"/tag/array.html"},{default:n(()=>[ta]),_:1}),e(),o(l,{to:"/tag/dynamic-programming.html"},{default:n(()=>[ea]),_:1}),e(),oa]),la,t("td",na,[t("a",sa,[e("🀄️"),o(s)]),e(),t("a",da,[e("🔗"),o(s)])])]),t("tr",null,[_a,ra,aa,t("td",ia,[o(l,{to:"/tag/bit-manipulation.html"},{default:n(()=>[ca]),_:1}),e(),o(l,{to:"/tag/array.html"},{default:n(()=>[ha]),_:1}),e(),o(l,{to:"/tag/dynamic-programming.html"},{default:n(()=>[ua]),_:1}),e(),ma]),ga,t("td",fa,[t("a",pa,[e("🀄️"),o(s)]),e(),t("a",ya,[e("🔗"),o(s)])])]),t("tr",null,[xa,ba,ka,t("td",wa,[o(l,{to:"/tag/bit-manipulation.html"},{default:n(()=>[qa]),_:1}),e(),o(l,{to:"/tag/array.html"},{default:n(()=>[va]),_:1}),e(),o(l,{to:"/tag/math.html"},{default:n(()=>[za]),_:1}),e(),La]),Ca,t("td",Ia,[t("a",Na,[e("🀄️"),o(s)]),e(),t("a",Ea,[e("🔗"),o(s)])])]),t("tr",null,[Pa,Va,ja,t("td",Ba,[o(l,{to:"/tag/bit-manipulation.html"},{default:n(()=>[Ra]),_:1}),e(),o(l,{to:"/tag/array.html"},{default:n(()=>[Ha]),_:1}),e(),o(l,{to:"/tag/dynamic-programming.html"},{default:n(()=>[Ja]),_:1}),e(),Ka]),Ma,t("td",Ta,[t("a",Wa,[e("🀄️"),o(s)]),e(),t("a",Aa,[e("🔗"),o(s)])])]),t("tr",null,[Da,Fa,Ga,t("td",Oa,[o(l,{to:"/tag/bit-manipulation.html"},{default:n(()=>[Qa]),_:1}),e(),o(l,{to:"/tag/tree.html"},{default:n(()=>[Sa]),_:1}),e(),o(l,{to:"/tag/depth-first-search.html"},{default:n(()=>[Ua]),_:1}),e(),Xa]),Ya,t("td",Za,[t("a",$a,[e("🀄️"),o(s)]),e(),t("a",ti,[e("🔗"),o(s)])])]),t("tr",null,[ei,oi,li,t("td",ni,[o(l,{to:"/tag/bit-manipulation.html"},{default:n(()=>[si]),_:1}),e(),o(l,{to:"/tag/array.html"},{default:n(()=>[di]),_:1}),e(),o(l,{to:"/tag/dynamic-programming.html"},{default:n(()=>[_i]),_:1}),e(),ri]),ai,t("td",ii,[t("a",ci,[e("🀄️"),o(s)]),e(),t("a",hi,[e("🔗"),o(s)])])]),t("tr",null,[ui,mi,gi,t("td",fi,[o(l,{to:"/tag/bit-manipulation.html"},{default:n(()=>[pi]),_:1}),e(),o(l,{to:"/tag/string.html"},{default:n(()=>[yi]),_:1}),e(),o(l,{to:"/tag/dynamic-programming.html"},{default:n(()=>[xi]),_:1}),e(),bi]),ki,t("td",wi,[t("a",qi,[e("🀄️"),o(s)]),e(),t("a",vi,[e("🔗"),o(s)])])]),t("tr",null,[zi,Li,Ci,t("td",Ii,[o(l,{to:"/tag/bit-manipulation.html"},{default:n(()=>[Ni]),_:1}),e(),o(l,{to:"/tag/array.html"},{default:n(()=>[Ei]),_:1}),e(),o(l,{to:"/tag/dynamic-programming.html"},{default:n(()=>[Pi]),_:1}),e(),Vi]),ji,t("td",Bi,[t("a",Ri,[e("🀄️"),o(s)]),e(),t("a",Hi,[e("🔗"),o(s)])])]),t("tr",null,[Ji,Ki,Mi,t("td",Ti,[o(l,{to:"/tag/bit-manipulation.html"},{default:n(()=>[Wi]),_:1}),e(),o(l,{to:"/tag/array.html"},{default:n(()=>[Ai]),_:1}),e(),o(l,{to:"/tag/dynamic-programming.html"},{default:n(()=>[Di]),_:1}),e(),Fi]),Gi,t("td",Oi,[t("a",Qi,[e("🀄️"),o(s)]),e(),t("a",Si,[e("🔗"),o(s)])])]),t("tr",null,[Ui,Xi,Yi,t("td",Zi,[o(l,{to:"/tag/bit-manipulation.html"},{default:n(()=>[$i]),_:1}),e(),o(l,{to:"/tag/breadth-first-search.html"},{default:n(()=>[tc]),_:1}),e(),o(l,{to:"/tag/array.html"},{default:n(()=>[ec]),_:1}),e(),oc]),lc,t("td",nc,[t("a",sc,[e("🀄️"),o(s)]),e(),t("a",dc,[e("🔗"),o(s)])])]),t("tr",null,[_c,rc,ac,t("td",ic,[o(l,{to:"/tag/bit-manipulation.html"},{default:n(()=>[cc]),_:1}),e(),o(l,{to:"/tag/depth-first-search.html"},{default:n(()=>[hc]),_:1}),e(),o(l,{to:"/tag/array.html"},{default:n(()=>[uc]),_:1}),e(),mc]),gc,t("td",fc,[t("a",pc,[e("🀄️"),o(s)]),e(),t("a",yc,[e("🔗"),o(s)])])]),t("tr",null,[xc,bc,kc,t("td",wc,[o(l,{to:"/tag/bit-manipulation.html"},{default:n(()=>[qc]),_:1}),e(),o(l,{to:"/tag/array.html"},{default:n(()=>[vc]),_:1}),e(),o(l,{to:"/tag/math.html"},{default:n(()=>[zc]),_:1}),e(),Lc]),Cc,t("td",Ic,[t("a",Nc,[e("🀄️"),o(s)]),e(),t("a",Ec,[e("🔗"),o(s)])])]),t("tr",null,[Pc,Vc,jc,t("td",Bc,[o(l,{to:"/tag/bit-manipulation.html"},{default:n(()=>[Rc]),_:1}),e(),o(l,{to:"/tag/graph.html"},{default:n(()=>[Hc]),_:1}),e(),o(l,{to:"/tag/array.html"},{default:n(()=>[Jc]),_:1}),e(),Kc]),Mc,t("td",Tc,[t("a",Wc,[e("🀄️"),o(s)])])]),t("tr",null,[Ac,Dc,Fc,t("td",Gc,[o(l,{to:"/tag/bit-manipulation.html"},{default:n(()=>[Oc]),_:1}),e(),o(l,{to:"/tag/breadth-first-search.html"},{default:n(()=>[Qc]),_:1}),e(),o(l,{to:"/tag/array.html"},{default:n(()=>[Sc]),_:1}),e(),Uc]),Xc,t("td",Yc,[t("a",Zc,[e("🀄️"),o(s)])])]),t("tr",null,[$c,th,eh,t("td",oh,[o(l,{to:"/tag/bit-manipulation.html"},{default:n(()=>[lh]),_:1}),e(),o(l,{to:"/tag/array.html"},{default:n(()=>[nh]),_:1}),e(),o(l,{to:"/tag/dynamic-programming.html"},{default:n(()=>[sh]),_:1}),e(),dh]),_h,t("td",rh,[t("a",ah,[e("🀄️"),o(s)])])]),t("tr",null,[ih,ch,hh,t("td",uh,[o(l,{to:"/tag/bit-manipulation.html"},{default:n(()=>[mh]),_:1}),e(),o(l,{to:"/tag/array.html"},{default:n(()=>[gh]),_:1}),e(),o(l,{to:"/tag/string.html"},{default:n(()=>[fh]),_:1}),e(),ph]),yh,t("td",xh,[t("a",bh,[e("🀄️"),o(s)])])])])])])}const zh=_(c,[["render",kh],["__file","bitmask.html.vue"]]);export{zh as default};
