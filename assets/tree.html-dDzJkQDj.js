import{_ as k}from"./2-6-10-HM7phUUf.js";import{_ as h,r,o as _,c as m,d as s,w as e,a as n,b as t,f as p,e as d}from"./app-B5EG-zH0.js";const b="/leetcode-js/assets/2-6-1-_jJk729L.png",v="/leetcode-js/assets/2-6-2-5v377cba.png",g="/leetcode-js/assets/2-6-3-JRML4jIi.png",f="/leetcode-js/assets/2-6-4-L-oIO-zD.png",y="/leetcode-js/assets/2-6-5-kPEW8S82.png",x="/leetcode-js/assets/2-6-6-3FdOj8Fp.png",w="/leetcode-js/assets/2-6-7-ja3CWOFJ.png",j="/leetcode-js/assets/2-6-8-E2uKRyBr.png",T="/leetcode-js/assets/2-6-9-BHhDWlBL.png",q="/leetcode-js/assets/2-6-11-XdJeF-Sx.png",S="/leetcode-js/assets/2-6-12-XSM2EmPJ.png",A="/leetcode-js/assets/2-6-13-shSbkDov.png",L="/leetcode-js/assets/2-6-14-Ca9Lswd_.png",B={},N=d('<h1 id="_2-6-树" tabindex="-1"><a class="header-anchor" href="#_2-6-树" aria-hidden="true">#</a> 2.6 树</h1><h2 id="树的定义" tabindex="-1"><a class="header-anchor" href="#树的定义" aria-hidden="true">#</a> 树的定义</h2><div class="hint-container info"><p class="hint-container-title">定义</p><p><strong>树（Tree）</strong> 是由 <code>n ≥ 0</code> 个节点与节点之间的关系组成的有限集合。当 <code>n = 0</code> 时称为空树，当 <code>n &gt; 0</code> 时称为非空树。。</p></div><figure><img src="'+b+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>“树”这种数据结构很像现实生活中的“树”，每个元素叫作“<strong>节点</strong>”；用来连线相邻节点之间的关系，叫作“<strong>父子关系</strong>”。</p><p>比如上图中的第三个树，A 节点就是 B 节点的<strong>父节点</strong>，B 节点是 A 节点的<strong>子节点</strong>。B、C、D 这三个节点的父节点是同一个节点，所以它们之间互称为<strong>兄弟节点</strong>。把没有父节点的节点叫作<strong>根节点</strong>，也就是图中的节点 E。把没有子节点的节点叫作<strong>叶子节点</strong>或者叶节点，比如图中的 G、H、I、J、K、L 都是叶子节点。</p><ul><li><strong>节点的高度</strong> ：节点到叶子节点的最长路径（边数）</li><li><strong>节点的深度</strong> ：根节点到这个节点所经历的变得个数</li><li><strong>节点的层数</strong> ：节点的深度 + 1</li><li><strong>节点的度</strong>： 节点所含有的子树个数</li><li><strong>树的高度</strong>：根节点的高度</li></ul><figure><img src="'+v+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="二叉树" tabindex="-1"><a class="header-anchor" href="#二叉树" aria-hidden="true">#</a> 二叉树</h2><div class="hint-container info"><p class="hint-container-title">定义</p><p><strong>二叉树（Binary Tree）</strong> ：每个节点最多有两个子节点的树，称为二叉树。二叉树并不要求每个节点都有两个子节点，有的节点只有左子节点，有的节点只有右子节点。通常树中的分支节点被称为 「左子树」 或 「右子树」，并且两个子树是有序的，不可以互换。</p></div><p>二叉树在逻辑上可以分为 5 种基本形态，如下图所示：</p><figure><img src="'+g+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="满二叉树" tabindex="-1"><a class="header-anchor" href="#满二叉树" aria-hidden="true">#</a> 满二叉树</h3><div class="hint-container info"><p class="hint-container-title">定义</p><p><strong>满二叉树（Full Binary Tree）</strong> ：如果所有分支节点都存在左子树和右子树，并且所有叶子节点都在同一层上，则称该二叉树为满二叉树。</p></div><figure><img src="'+f+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="完全二叉树" tabindex="-1"><a class="header-anchor" href="#完全二叉树" aria-hidden="true">#</a> 完全二叉树</h3><div class="hint-container info"><p class="hint-container-title">定义</p><p><strong>完全二叉树（Complete Binary Tree）</strong> ：如果叶子节点只出现在最下面两层，并且最下层的叶子节点都依次排列在该层最左边的位置上，具有这种特点的二叉树称为完全二叉树。</p></div><figure><img src="'+y+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="二叉树的存储" tabindex="-1"><a class="header-anchor" href="#二叉树的存储" aria-hidden="true">#</a> 二叉树的存储</h2><p>存储一棵二叉树有两种方法，一种是基于指针或者引用的二叉链式存储，一种是基于数组的顺序存储。</p><h3 id="链式存储" tabindex="-1"><a class="header-anchor" href="#链式存储" aria-hidden="true">#</a> 链式存储</h3><p>链式存储中，每个节点有三个字段，其中一个存储数据，另外两个是指向左右子节点的指针。只要拎住根节点，就可以通过左右子节点的指针，把整棵树都串起来。这种存储方式比较常用。大部分二叉树代码都是通过这种结构来实现的。</p><figure><img src="'+x+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="顺序存储" tabindex="-1"><a class="header-anchor" href="#顺序存储" aria-hidden="true">#</a> 顺序存储</h3><p>顺序存储中，把根节点存储在下标 <code>i = 1</code> 的位置，左子节点存储在下标 <code>2 * i = 2</code> 的位置，右子节点存储在 <code>2 * i + 1 = 3</code> 的位置。以此类推，B 节点的左子节点存储在 <code>2 * i = 2 * 2 = 4</code> 的位置，右子节点存储在 <code>2 * i + 1 = 2 * 2 + 1 = 5</code> 的位置。</p><figure><img src="'+w+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>如果节点 <code>X</code> 存储在数组中下标为 <code>i</code> 的位置，下标为 <code>2 * i</code> 的位置存储的就是左子节点，下标为 <code>2 * i + 1</code> 的位置存储的就是右子节点。反过来，下标为 <code>i / 2</code> 的位置存储就是它的父节点。通过这种方式，我们只要知道根节点存储的位置（一般情况下，为了方便计算子节点，根节点会存储在下标为 <code>1</code> 的位置），这样就可以通过下标计算，把整棵树都串起来。</p><p>刚刚举的例子是一棵完全二叉树，所以仅仅“浪费”了一个下标为 <code>0</code> 的存储位置。如果是非完全二叉树，其实会浪费比较多的数组存储空间。</p><p>所以，如果某棵二叉树是一棵完全二叉树，那用数组存储无疑是最节省内存的一种方式。因为数组的存储方式并不需要像链式存储法那样，要存储额外的左右子节点的指针。这也是为什么完全二叉树会单独拎出来的原因，也是为什么完全二叉树要求最后一层的子节点都靠左的原因。</p><p>堆就是一种完全二叉树，最常用的存储方式就是数组。</p><h2 id="二叉树的遍历" tabindex="-1"><a class="header-anchor" href="#二叉树的遍历" aria-hidden="true">#</a> 二叉树的遍历</h2><p>想要将二叉树所有节点都遍历打印出来，经典的方法有三种，前序遍历、中序遍历和后序遍历。其中，前、中、后序，表示的是节点与它的左右子树节点遍历打印的先后顺序。</p><ul><li><p><strong>前序遍历</strong> 是指，对于树中的任意节点来说，先打印这个节点，然后再打印它的左子树，最后打印它的右子树。</p></li><li><p><strong>中序遍历</strong> 是指，对于树中的任意节点来说，先打印它的左子树，然后再打印它本身，最后打印它的右子树。</p></li><li><p><strong>后序遍历</strong> 是指，对于树中的任意节点来说，先打印它的左子树，然后再打印它的右子树，最后打印这个节点本身。</p></li></ul><figure><img src="'+j+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>实际上，二叉树的前、中、后序遍历就是一个递归的过程。写递归代码的关键，就是看能不能写出递推公式，而写递推公式的关键就是，如果要解决问题 A，就假设子问题 B、C 已经解决，然后再来看如何利用 B、C 来解决 A。递推公式如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 前序遍历：</span>
<span class="token function-variable function">preOrder</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">r</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>r <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">preOrder</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">preOrder</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// 中序遍历：</span>
<span class="token function-variable function">inOrder</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">r</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>r <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
	<span class="token function">inOrder</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>
	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">inOrder</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">// 后序遍历：</span>
<span class="token function-variable function">postOrder</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">r</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>r <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
	<span class="token function">postOrder</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">postOrder</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>
	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>二叉树的遍历中，每个节点最多会被访问两次，所以遍历操作的时间复杂度，跟节点的个数 <code>n</code> 成正比，即二叉树遍历的时间复杂度是 <code>O(n)</code> 。</p><h3 id="前序遍历" tabindex="-1"><a class="header-anchor" href="#前序遍历" aria-hidden="true">#</a> 前序遍历</h3>`,38),O={id:"📌-144-二叉树的前序遍历-leetcode",tabindex:"-1"},I=n("a",{class:"header-anchor",href:"#📌-144-二叉树的前序遍历-leetcode","aria-hidden":"true"},"#",-1),R={href:"https://wangfuyou.com/leetcode-js/problem/0144.html",target:"_blank",rel:"noopener noreferrer"},C=n("h4",{id:"💻-题目大意",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#💻-题目大意","aria-hidden":"true"},"#"),t(" 💻 "),n("strong",null,"题目大意")],-1),M=n("p",null,[t("给你二叉树的根节点 "),n("code",null,"root"),t(" ，返回它节点值的 "),n("strong",null,"前序"),t(" 遍历。")],-1),z=n("p",null,[n("strong",null,"进阶"),t("：递归算法很简单，你可以通过迭代算法完成吗？")],-1),F=n("h4",{id:"💡-解题思路",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#💡-解题思路","aria-hidden":"true"},"#"),t(" 💡 "),n("strong",null,"解题思路")],-1),V=n("p",null,"思路一：递归",-1),E=n("p",null,"前序遍历是指，对于树中的任意节点来说，先打印这个节点，然后再打印它的左子树，最后打印它的右子树。而在访问左子树或者右子树的时候，按照同样的方式遍历，直到遍历完整棵树。因此整个遍历过程天然具有递归的性质，可以直接用递归函数来模拟这一过程。",-1),D=n("ul",null,[n("li",null,[t("先将 "),n("code",null,"root"),t(" 节点的值加入答案")]),n("li",null,[t("再递归调用 "),n("code",null,"preorderTraversal(root.left)"),t(" 来遍历 "),n("code",null,"root"),t(" 节点的左子树")]),n("li",null,[t("最后递归调用 "),n("code",null,"preorderTraversal(root.right)"),t(" 来遍历 "),n("code",null,"root"),t(" 节点的右子树即可")]),n("li",null,"递归终止的条件为碰到空节点")],-1),J=n("p",null,"思路二：迭代",-1),K=n("p",null,"也可以用迭代的方式实现思路一的递归函数，两种方式是等价的，区别在于递归的时候隐式地维护了一个栈，而迭代的时候需要显式地将这个栈模拟出来，其余的实现与细节都相同，具体可以参考下面的代码。",-1),P=n("h4",{id:"💎-代码",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#💎-代码","aria-hidden":"true"},"#"),t(" 💎 "),n("strong",null,"代码")],-1),H=n("div",{class:"language-javascript line-numbers-mode","data-ext":"js"},[n("pre",{class:"language-javascript"},[n("code",null,[n("span",{class:"token keyword"},"var"),t(),n("span",{class:"token function-variable function"},"preorderTraversal"),t(),n("span",{class:"token operator"},"="),t(),n("span",{class:"token keyword"},"function"),t(),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"root"),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token punctuation"},"{"),t(`
	`),n("span",{class:"token keyword"},"let"),t(" res "),n("span",{class:"token operator"},"="),t(),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),t(`
	`),n("span",{class:"token keyword"},"if"),t(),n("span",{class:"token punctuation"},"("),t("root "),n("span",{class:"token operator"},"=="),t(),n("span",{class:"token keyword"},"null"),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token keyword"},"return"),t(" res"),n("span",{class:"token punctuation"},";"),t(`
	res`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"push"),n("span",{class:"token punctuation"},"("),t("root"),n("span",{class:"token punctuation"},"."),t("val"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),t(`
	res`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"push"),n("span",{class:"token punctuation"},"("),n("span",{class:"token operator"},"..."),n("span",{class:"token function"},"preorderTraversal"),n("span",{class:"token punctuation"},"("),t("root"),n("span",{class:"token punctuation"},"."),t("left"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),t(`
	res`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"push"),n("span",{class:"token punctuation"},"("),n("span",{class:"token operator"},"..."),n("span",{class:"token function"},"preorderTraversal"),n("span",{class:"token punctuation"},"("),t("root"),n("span",{class:"token punctuation"},"."),t("right"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),t(`
	`),n("span",{class:"token keyword"},"return"),t(" res"),n("span",{class:"token punctuation"},";"),t(`
`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";"),t(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),W=n("div",{class:"language-javascript line-numbers-mode","data-ext":"js"},[n("pre",{class:"language-javascript"},[n("code",null,[n("span",{class:"token keyword"},"var"),t(),n("span",{class:"token function-variable function"},"preorderTraversal"),t(),n("span",{class:"token operator"},"="),t(),n("span",{class:"token keyword"},"function"),t(),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"root"),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token punctuation"},"{"),t(`
	`),n("span",{class:"token keyword"},"let"),t(" res "),n("span",{class:"token operator"},"="),t(),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),t(`
	`),n("span",{class:"token keyword"},"if"),t(),n("span",{class:"token punctuation"},"("),t("root "),n("span",{class:"token operator"},"=="),t(),n("span",{class:"token keyword"},"null"),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token keyword"},"return"),t(" res"),n("span",{class:"token punctuation"},";"),t(`
	`),n("span",{class:"token keyword"},"let"),t(" stack "),n("span",{class:"token operator"},"="),t(),n("span",{class:"token punctuation"},"["),t("root"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),t(`
	`),n("span",{class:"token keyword"},"while"),t(),n("span",{class:"token punctuation"},"("),t("stack"),n("span",{class:"token punctuation"},"."),t("length"),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token punctuation"},"{"),t(`
		`),n("span",{class:"token keyword"},"let"),t(" node "),n("span",{class:"token operator"},"="),t(" stack"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"pop"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),t(`
		res`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"push"),n("span",{class:"token punctuation"},"("),t("node"),n("span",{class:"token punctuation"},"."),t("val"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),t(`
		`),n("span",{class:"token keyword"},"if"),t(),n("span",{class:"token punctuation"},"("),t("node"),n("span",{class:"token punctuation"},"."),t("right"),n("span",{class:"token punctuation"},")"),t(" stack"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"push"),n("span",{class:"token punctuation"},"("),t("node"),n("span",{class:"token punctuation"},"."),t("right"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),t(`
		`),n("span",{class:"token keyword"},"if"),t(),n("span",{class:"token punctuation"},"("),t("node"),n("span",{class:"token punctuation"},"."),t("left"),n("span",{class:"token punctuation"},")"),t(" stack"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"push"),n("span",{class:"token punctuation"},"("),t("node"),n("span",{class:"token punctuation"},"."),t("left"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),t(`
	`),n("span",{class:"token punctuation"},"}"),t(`
	`),n("span",{class:"token keyword"},"return"),t(" res"),n("span",{class:"token punctuation"},";"),t(`
`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";"),t(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),X=n("div",{class:"language-markdown line-numbers-mode","data-ext":"md"},[n("pre",{class:"language-markdown"},[n("code",null,[n("span",{class:"token title important"},[n("span",{class:"token punctuation"},"####"),t(" 📌 [144. 二叉树的前序遍历 - LeetCode](https://wangfuyou.com/leetcode-js/problem/0144.html)")]),t(`

`),n("span",{class:"token title important"},[n("span",{class:"token punctuation"},"####"),t(" 💻 **题目大意**")]),t(`

给你二叉树的根节点 `),n("span",{class:"token code-snippet code keyword"},"`root`"),t(" ，返回它节点值的 "),n("span",{class:"token bold"},[n("span",{class:"token punctuation"},"**"),n("span",{class:"token content"},"前序"),n("span",{class:"token punctuation"},"**")]),t(` 遍历。

`),n("span",{class:"token bold"},[n("span",{class:"token punctuation"},"**"),n("span",{class:"token content"},"进阶"),n("span",{class:"token punctuation"},"**")]),t(`：递归算法很简单，你可以通过迭代算法完成吗？

`),n("span",{class:"token title important"},[n("span",{class:"token punctuation"},"####"),t(" 💡 **解题思路**")]),t(`

思路一：递归

前序遍历是指，对于树中的任意节点来说，先打印这个节点，然后再打印它的左子树，最后打印它的右子树。而在访问左子树或者右子树的时候，按照同样的方式遍历，直到遍历完整棵树。因此整个遍历过程天然具有递归的性质，可以直接用递归函数来模拟这一过程。

`),n("span",{class:"token list punctuation"},"-"),t(" 先将 "),n("span",{class:"token code-snippet code keyword"},"`root`"),t(` 节点的值加入答案
`),n("span",{class:"token list punctuation"},"-"),t(" 再递归调用 "),n("span",{class:"token code-snippet code keyword"},"`preorderTraversal(root.left)`"),t(" 来遍历 "),n("span",{class:"token code-snippet code keyword"},"`root`"),t(` 节点的左子树
`),n("span",{class:"token list punctuation"},"-"),t(" 最后递归调用 "),n("span",{class:"token code-snippet code keyword"},"`preorderTraversal(root.right)`"),t(" 来遍历 "),n("span",{class:"token code-snippet code keyword"},"`root`"),t(` 节点的右子树即可
`),n("span",{class:"token list punctuation"},"-"),t(` 递归终止的条件为碰到空节点

思路二：迭代

也可以用迭代的方式实现思路一的递归函数，两种方式是等价的，区别在于递归的时候隐式地维护了一个栈，而迭代的时候需要显式地将这个栈模拟出来，其余的实现与细节都相同，具体可以参考下面的代码。

`),n("span",{class:"token title important"},[n("span",{class:"token punctuation"},"####"),t(" 💎 **代码**")]),t(`

::: code-tabs
@tab 递归

`),n("span",{class:"token code"},[n("span",{class:"token punctuation"},"```"),n("span",{class:"token code-language"},"javascript"),t(`
`),n("span",{class:"token code-block language-javascript"},[n("span",{class:"token keyword"},"var"),t(),n("span",{class:"token function-variable function"},"preorderTraversal"),t(),n("span",{class:"token operator"},"="),t(),n("span",{class:"token keyword"},"function"),t(),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"root"),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token punctuation"},"{"),t(`
	`),n("span",{class:"token keyword"},"let"),t(" res "),n("span",{class:"token operator"},"="),t(),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),t(`
	`),n("span",{class:"token keyword"},"if"),t(),n("span",{class:"token punctuation"},"("),t("root "),n("span",{class:"token operator"},"=="),t(),n("span",{class:"token keyword"},"null"),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token keyword"},"return"),t(" res"),n("span",{class:"token punctuation"},";"),t(`
	res`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"push"),n("span",{class:"token punctuation"},"("),t("root"),n("span",{class:"token punctuation"},"."),t("val"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),t(`
	res`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"push"),n("span",{class:"token punctuation"},"("),n("span",{class:"token operator"},"..."),n("span",{class:"token function"},"preorderTraversal"),n("span",{class:"token punctuation"},"("),t("root"),n("span",{class:"token punctuation"},"."),t("left"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),t(`
	res`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"push"),n("span",{class:"token punctuation"},"("),n("span",{class:"token operator"},"..."),n("span",{class:"token function"},"preorderTraversal"),n("span",{class:"token punctuation"},"("),t("root"),n("span",{class:"token punctuation"},"."),t("right"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),t(`
	`),n("span",{class:"token keyword"},"return"),t(" res"),n("span",{class:"token punctuation"},";"),t(`
`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";")]),t(`
`),n("span",{class:"token punctuation"},"```")]),t(`

@tab 迭代

`),n("span",{class:"token code"},[n("span",{class:"token punctuation"},"```"),n("span",{class:"token code-language"},"javascript"),t(`
`),n("span",{class:"token code-block language-javascript"},[n("span",{class:"token keyword"},"var"),t(),n("span",{class:"token function-variable function"},"preorderTraversal"),t(),n("span",{class:"token operator"},"="),t(),n("span",{class:"token keyword"},"function"),t(),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"root"),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token punctuation"},"{"),t(`
	`),n("span",{class:"token keyword"},"let"),t(" res "),n("span",{class:"token operator"},"="),t(),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),t(`
	`),n("span",{class:"token keyword"},"if"),t(),n("span",{class:"token punctuation"},"("),t("root "),n("span",{class:"token operator"},"=="),t(),n("span",{class:"token keyword"},"null"),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token keyword"},"return"),t(" res"),n("span",{class:"token punctuation"},";"),t(`
	`),n("span",{class:"token keyword"},"let"),t(" stack "),n("span",{class:"token operator"},"="),t(),n("span",{class:"token punctuation"},"["),t("root"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),t(`
	`),n("span",{class:"token keyword"},"while"),t(),n("span",{class:"token punctuation"},"("),t("stack"),n("span",{class:"token punctuation"},"."),t("length"),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token punctuation"},"{"),t(`
		`),n("span",{class:"token keyword"},"let"),t(" node "),n("span",{class:"token operator"},"="),t(" stack"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"pop"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),t(`
		res`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"push"),n("span",{class:"token punctuation"},"("),t("node"),n("span",{class:"token punctuation"},"."),t("val"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),t(`
		`),n("span",{class:"token keyword"},"if"),t(),n("span",{class:"token punctuation"},"("),t("node"),n("span",{class:"token punctuation"},"."),t("right"),n("span",{class:"token punctuation"},")"),t(" stack"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"push"),n("span",{class:"token punctuation"},"("),t("node"),n("span",{class:"token punctuation"},"."),t("right"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),t(`
		`),n("span",{class:"token keyword"},"if"),t(),n("span",{class:"token punctuation"},"("),t("node"),n("span",{class:"token punctuation"},"."),t("left"),n("span",{class:"token punctuation"},")"),t(" stack"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"push"),n("span",{class:"token punctuation"},"("),t("node"),n("span",{class:"token punctuation"},"."),t("left"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),t(`
	`),n("span",{class:"token punctuation"},"}"),t(`
	`),n("span",{class:"token keyword"},"return"),t(" res"),n("span",{class:"token punctuation"},";"),t(`
`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";")]),t(`
`),n("span",{class:"token punctuation"},"```")]),t(`

:::
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),U=n("h3",{id:"后序遍历",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#后序遍历","aria-hidden":"true"},"#"),t(" 后序遍历")],-1),$={id:"📌-145-二叉树的后序遍历-leetcode",tabindex:"-1"},G=n("a",{class:"header-anchor",href:"#📌-145-二叉树的后序遍历-leetcode","aria-hidden":"true"},"#",-1),Q={href:"https://wangfuyou.com/leetcode-js/problem/0145.html",target:"_blank",rel:"noopener noreferrer"},Y=n("h4",{id:"💻-题目大意-1",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#💻-题目大意-1","aria-hidden":"true"},"#"),t(" 💻 "),n("strong",null,"题目大意")],-1),Z=n("p",null,[t("给你二叉树的根节点 "),n("code",null,"root"),t(" ，返回它节点值的 "),n("strong",null,"后序"),t(" 遍历。")],-1),nn=n("p",null,[n("strong",null,"进阶"),t("：递归算法很简单，你可以通过迭代算法完成吗？")],-1),tn=n("h4",{id:"💡-解题思路-1",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#💡-解题思路-1","aria-hidden":"true"},"#"),t(" 💡 "),n("strong",null,"解题思路")],-1),sn=n("p",null,"思路一：递归",-1),en=n("p",null,"原理和前序遍历一样，前序遍历是中左右，后续遍历是左右中。",-1),an=n("p",null,"思路二：迭代",-1),on=n("p",null,"原理和前序遍历一样，只需要调整一下前序遍历的代码顺序，变成中右左，然后再反转 res 数组，输出的结果顺序就是左右中了。",-1),ln=n("h4",{id:"💎-代码-1",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#💎-代码-1","aria-hidden":"true"},"#"),t(" 💎 "),n("strong",null,"代码")],-1),cn=n("div",{class:"language-javascript line-numbers-mode","data-ext":"js"},[n("pre",{class:"language-javascript"},[n("code",null,[n("span",{class:"token keyword"},"var"),t(),n("span",{class:"token function-variable function"},"postorderTraversal"),t(),n("span",{class:"token operator"},"="),t(),n("span",{class:"token keyword"},"function"),t(),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"root"),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token punctuation"},"{"),t(`
	`),n("span",{class:"token keyword"},"let"),t(" res "),n("span",{class:"token operator"},"="),t(),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),t(`
	`),n("span",{class:"token keyword"},"if"),t(),n("span",{class:"token punctuation"},"("),t("root "),n("span",{class:"token operator"},"=="),t(),n("span",{class:"token keyword"},"null"),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token keyword"},"return"),t(" res"),n("span",{class:"token punctuation"},";"),t(`
	res`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"push"),n("span",{class:"token punctuation"},"("),n("span",{class:"token operator"},"..."),n("span",{class:"token function"},"postorderTraversal"),n("span",{class:"token punctuation"},"("),t("root"),n("span",{class:"token punctuation"},"."),t("left"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),t(`
	res`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"push"),n("span",{class:"token punctuation"},"("),n("span",{class:"token operator"},"..."),n("span",{class:"token function"},"postorderTraversal"),n("span",{class:"token punctuation"},"("),t("root"),n("span",{class:"token punctuation"},"."),t("right"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),t(`
	res`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"push"),n("span",{class:"token punctuation"},"("),t("root"),n("span",{class:"token punctuation"},"."),t("val"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),t(`
	`),n("span",{class:"token keyword"},"return"),t(" res"),n("span",{class:"token punctuation"},";"),t(`
`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";"),t(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),pn=n("div",{class:"language-javascript line-numbers-mode","data-ext":"js"},[n("pre",{class:"language-javascript"},[n("code",null,[n("span",{class:"token keyword"},"var"),t(),n("span",{class:"token function-variable function"},"postorderTraversal"),t(),n("span",{class:"token operator"},"="),t(),n("span",{class:"token keyword"},"function"),t(),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"root"),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token punctuation"},"{"),t(`
	`),n("span",{class:"token keyword"},"let"),t(" res "),n("span",{class:"token operator"},"="),t(),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),t(`
	`),n("span",{class:"token keyword"},"if"),t(),n("span",{class:"token punctuation"},"("),t("root "),n("span",{class:"token operator"},"=="),t(),n("span",{class:"token keyword"},"null"),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token keyword"},"return"),t(" res"),n("span",{class:"token punctuation"},";"),t(`
	`),n("span",{class:"token keyword"},"let"),t(" stack "),n("span",{class:"token operator"},"="),t(),n("span",{class:"token punctuation"},"["),t("root"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),t(`
	`),n("span",{class:"token keyword"},"while"),t(),n("span",{class:"token punctuation"},"("),t("stack"),n("span",{class:"token punctuation"},"."),t("length"),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token punctuation"},"{"),t(`
		`),n("span",{class:"token keyword"},"let"),t(" node "),n("span",{class:"token operator"},"="),t(" stack"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"pop"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),t(`
		res`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"unshift"),n("span",{class:"token punctuation"},"("),t("node"),n("span",{class:"token punctuation"},"."),t("val"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),t(`
		`),n("span",{class:"token keyword"},"if"),t(),n("span",{class:"token punctuation"},"("),t("node"),n("span",{class:"token punctuation"},"."),t("left"),n("span",{class:"token punctuation"},")"),t(" stack"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"push"),n("span",{class:"token punctuation"},"("),t("node"),n("span",{class:"token punctuation"},"."),t("left"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),t(`
		`),n("span",{class:"token keyword"},"if"),t(),n("span",{class:"token punctuation"},"("),t("node"),n("span",{class:"token punctuation"},"."),t("right"),n("span",{class:"token punctuation"},")"),t(" stack"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"push"),n("span",{class:"token punctuation"},"("),t("node"),n("span",{class:"token punctuation"},"."),t("right"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),t(`
	`),n("span",{class:"token punctuation"},"}"),t(`
	`),n("span",{class:"token keyword"},"return"),t(" res"),n("span",{class:"token punctuation"},";"),t(`
`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";"),t(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),un=n("div",{class:"language-markdown line-numbers-mode","data-ext":"md"},[n("pre",{class:"language-markdown"},[n("code",null,[n("span",{class:"token title important"},[n("span",{class:"token punctuation"},"####"),t(" 📌 [145. 二叉树的后序遍历 - LeetCode](https://wangfuyou.com/leetcode-js/problem/0145.html)")]),t(`

`),n("span",{class:"token title important"},[n("span",{class:"token punctuation"},"####"),t(" 💻 **题目大意**")]),t(`

给你二叉树的根节点 `),n("span",{class:"token code-snippet code keyword"},"`root`"),t(" ，返回它节点值的 "),n("span",{class:"token bold"},[n("span",{class:"token punctuation"},"**"),n("span",{class:"token content"},"后序"),n("span",{class:"token punctuation"},"**")]),t(` 遍历。

`),n("span",{class:"token bold"},[n("span",{class:"token punctuation"},"**"),n("span",{class:"token content"},"进阶"),n("span",{class:"token punctuation"},"**")]),t(`：递归算法很简单，你可以通过迭代算法完成吗？

`),n("span",{class:"token title important"},[n("span",{class:"token punctuation"},"####"),t(" 💡 **解题思路**")]),t(`

思路一：递归

原理和前序遍历一样，前序遍历是中左右，后续遍历是左右中。

思路二：迭代

原理和前序遍历一样，只需要调整一下前序遍历的代码顺序，变成中右左，然后再反转 res 数组，输出的结果顺序就是左右中了。

`),n("span",{class:"token title important"},[n("span",{class:"token punctuation"},"####"),t(" 💎 **代码**")]),t(`

::: code-tabs
@tab 递归

`),n("span",{class:"token code"},[n("span",{class:"token punctuation"},"```"),n("span",{class:"token code-language"},"javascript"),t(`
`),n("span",{class:"token code-block language-javascript"},[n("span",{class:"token keyword"},"var"),t(),n("span",{class:"token function-variable function"},"postorderTraversal"),t(),n("span",{class:"token operator"},"="),t(),n("span",{class:"token keyword"},"function"),t(),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"root"),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token punctuation"},"{"),t(`
	`),n("span",{class:"token keyword"},"let"),t(" res "),n("span",{class:"token operator"},"="),t(),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),t(`
	`),n("span",{class:"token keyword"},"if"),t(),n("span",{class:"token punctuation"},"("),t("root "),n("span",{class:"token operator"},"=="),t(),n("span",{class:"token keyword"},"null"),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token keyword"},"return"),t(" res"),n("span",{class:"token punctuation"},";"),t(`
	res`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"push"),n("span",{class:"token punctuation"},"("),n("span",{class:"token operator"},"..."),n("span",{class:"token function"},"postorderTraversal"),n("span",{class:"token punctuation"},"("),t("root"),n("span",{class:"token punctuation"},"."),t("left"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),t(`
	res`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"push"),n("span",{class:"token punctuation"},"("),n("span",{class:"token operator"},"..."),n("span",{class:"token function"},"postorderTraversal"),n("span",{class:"token punctuation"},"("),t("root"),n("span",{class:"token punctuation"},"."),t("right"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),t(`
	res`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"push"),n("span",{class:"token punctuation"},"("),t("root"),n("span",{class:"token punctuation"},"."),t("val"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),t(`
	`),n("span",{class:"token keyword"},"return"),t(" res"),n("span",{class:"token punctuation"},";"),t(`
`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";")]),t(`
`),n("span",{class:"token punctuation"},"```")]),t(`

@tab 迭代

`),n("span",{class:"token code"},[n("span",{class:"token punctuation"},"```"),n("span",{class:"token code-language"},"javascript"),t(`
`),n("span",{class:"token code-block language-javascript"},[n("span",{class:"token keyword"},"var"),t(),n("span",{class:"token function-variable function"},"postorderTraversal"),t(),n("span",{class:"token operator"},"="),t(),n("span",{class:"token keyword"},"function"),t(),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"root"),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token punctuation"},"{"),t(`
	`),n("span",{class:"token keyword"},"let"),t(" res "),n("span",{class:"token operator"},"="),t(),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),t(`
	`),n("span",{class:"token keyword"},"if"),t(),n("span",{class:"token punctuation"},"("),t("root "),n("span",{class:"token operator"},"=="),t(),n("span",{class:"token keyword"},"null"),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token keyword"},"return"),t(" res"),n("span",{class:"token punctuation"},";"),t(`
	`),n("span",{class:"token keyword"},"let"),t(" stack "),n("span",{class:"token operator"},"="),t(),n("span",{class:"token punctuation"},"["),t("root"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),t(`
	`),n("span",{class:"token keyword"},"while"),t(),n("span",{class:"token punctuation"},"("),t("stack"),n("span",{class:"token punctuation"},"."),t("length"),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token punctuation"},"{"),t(`
		`),n("span",{class:"token keyword"},"let"),t(" node "),n("span",{class:"token operator"},"="),t(" stack"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"pop"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),t(`
		res`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"unshift"),n("span",{class:"token punctuation"},"("),t("node"),n("span",{class:"token punctuation"},"."),t("val"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),t(`
		`),n("span",{class:"token keyword"},"if"),t(),n("span",{class:"token punctuation"},"("),t("node"),n("span",{class:"token punctuation"},"."),t("left"),n("span",{class:"token punctuation"},")"),t(" stack"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"push"),n("span",{class:"token punctuation"},"("),t("node"),n("span",{class:"token punctuation"},"."),t("left"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),t(`
		`),n("span",{class:"token keyword"},"if"),t(),n("span",{class:"token punctuation"},"("),t("node"),n("span",{class:"token punctuation"},"."),t("right"),n("span",{class:"token punctuation"},")"),t(" stack"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"push"),n("span",{class:"token punctuation"},"("),t("node"),n("span",{class:"token punctuation"},"."),t("right"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),t(`
	`),n("span",{class:"token punctuation"},"}"),t(`
	`),n("span",{class:"token keyword"},"return"),t(" res"),n("span",{class:"token punctuation"},";"),t(`
`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";")]),t(`
`),n("span",{class:"token punctuation"},"```")]),t(`

:::
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),rn=n("h3",{id:"中序遍历",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#中序遍历","aria-hidden":"true"},"#"),t(" 中序遍历")],-1),dn={id:"📌-94-二叉树的中序遍历-leetcode",tabindex:"-1"},kn=n("a",{class:"header-anchor",href:"#📌-94-二叉树的中序遍历-leetcode","aria-hidden":"true"},"#",-1),hn={href:"https://wangfuyou.com/leetcode-js/problem/0094.html",target:"_blank",rel:"noopener noreferrer"},_n=n("h4",{id:"💻-题目大意-2",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#💻-题目大意-2","aria-hidden":"true"},"#"),t(" 💻 "),n("strong",null,"题目大意")],-1),mn=n("p",null,[t("给你二叉树的根节点 "),n("code",null,"root"),t(" ，返回它节点值的 "),n("strong",null,"中序"),t(" 遍历。")],-1),bn=n("p",null,[n("strong",null,"进阶"),t("：递归算法很简单，你可以通过迭代算法完成吗？")],-1),vn=n("h4",{id:"💡-解题思路-2",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#💡-解题思路-2","aria-hidden":"true"},"#"),t(" 💡 "),n("strong",null,"解题思路")],-1),gn=n("p",null,"思路一：递归",-1),fn=n("p",null,"原理和前序遍历一样，前序遍历是中左右，中续遍历是左中右。",-1),yn=n("p",null,"思路二：迭代",-1),xn=n("p",null,"中序遍历是左中右，先访问的是二叉树顶部的节点，然后一层一层向下访问，直到到达树左面的最底部，再开始处理节点（也就是在把节点的数值放进 res 数组中），这就造成了处理顺序和访问顺序是不一致的。那么在使用迭代法写中序遍历，就需要借用指针的遍历来帮助访问节点，栈则用来处理节点上的元素。",-1),wn=n("h4",{id:"💎-代码-2",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#💎-代码-2","aria-hidden":"true"},"#"),t(" 💎 "),n("strong",null,"代码")],-1),jn=n("div",{class:"language-javascript line-numbers-mode","data-ext":"js"},[n("pre",{class:"language-javascript"},[n("code",null,[n("span",{class:"token keyword"},"var"),t(),n("span",{class:"token function-variable function"},"inorderTraversal"),t(),n("span",{class:"token operator"},"="),t(),n("span",{class:"token keyword"},"function"),t(),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"root"),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token punctuation"},"{"),t(`
	`),n("span",{class:"token keyword"},"let"),t(" res "),n("span",{class:"token operator"},"="),t(),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),t(`
	`),n("span",{class:"token keyword"},"if"),t(),n("span",{class:"token punctuation"},"("),t("root "),n("span",{class:"token operator"},"=="),t(),n("span",{class:"token keyword"},"null"),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token keyword"},"return"),t(" res"),n("span",{class:"token punctuation"},";"),t(`
	res`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"push"),n("span",{class:"token punctuation"},"("),n("span",{class:"token operator"},"..."),n("span",{class:"token function"},"inorderTraversal"),n("span",{class:"token punctuation"},"("),t("root"),n("span",{class:"token punctuation"},"."),t("left"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),t(`
	res`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"push"),n("span",{class:"token punctuation"},"("),t("root"),n("span",{class:"token punctuation"},"."),t("val"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),t(`
	res`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"push"),n("span",{class:"token punctuation"},"("),n("span",{class:"token operator"},"..."),n("span",{class:"token function"},"inorderTraversal"),n("span",{class:"token punctuation"},"("),t("root"),n("span",{class:"token punctuation"},"."),t("right"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),t(`
	`),n("span",{class:"token keyword"},"return"),t(" res"),n("span",{class:"token punctuation"},";"),t(`
`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";"),t(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),Tn=n("div",{class:"language-javascript line-numbers-mode","data-ext":"js"},[n("pre",{class:"language-javascript"},[n("code",null,[n("span",{class:"token keyword"},"var"),t(),n("span",{class:"token function-variable function"},"inorderTraversal"),t(),n("span",{class:"token operator"},"="),t(),n("span",{class:"token keyword"},"function"),t(),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"root"),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token punctuation"},"{"),t(`
	`),n("span",{class:"token keyword"},"let"),t(" res "),n("span",{class:"token operator"},"="),t(),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),t(`
	`),n("span",{class:"token keyword"},"if"),t(),n("span",{class:"token punctuation"},"("),t("root "),n("span",{class:"token operator"},"=="),t(),n("span",{class:"token keyword"},"null"),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token keyword"},"return"),t(" res"),n("span",{class:"token punctuation"},";"),t(`
	`),n("span",{class:"token keyword"},"let"),t(" stack "),n("span",{class:"token operator"},"="),t(),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),t(`
	`),n("span",{class:"token keyword"},"let"),t(" cur "),n("span",{class:"token operator"},"="),t(" root"),n("span",{class:"token punctuation"},";"),t(`
	`),n("span",{class:"token keyword"},"while"),t(),n("span",{class:"token punctuation"},"("),t("cur "),n("span",{class:"token operator"},"!="),t(),n("span",{class:"token keyword"},"null"),t(),n("span",{class:"token operator"},"||"),t(" stack"),n("span",{class:"token punctuation"},"."),t("length"),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token punctuation"},"{"),t(`
		`),n("span",{class:"token keyword"},"if"),t(),n("span",{class:"token punctuation"},"("),t("cur "),n("span",{class:"token operator"},"!="),t(),n("span",{class:"token keyword"},"null"),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token punctuation"},"{"),t(`
			stack`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"push"),n("span",{class:"token punctuation"},"("),t("cur"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),t(`
			cur `),n("span",{class:"token operator"},"="),t(" cur"),n("span",{class:"token punctuation"},"."),t("left"),n("span",{class:"token punctuation"},";"),t(`
		`),n("span",{class:"token punctuation"},"}"),t(),n("span",{class:"token keyword"},"else"),t(),n("span",{class:"token punctuation"},"{"),t(`
			cur `),n("span",{class:"token operator"},"="),t(" stack"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"pop"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),t(`
			res`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"push"),n("span",{class:"token punctuation"},"("),t("cur"),n("span",{class:"token punctuation"},"."),t("val"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),t(`
			cur `),n("span",{class:"token operator"},"="),t(" cur"),n("span",{class:"token punctuation"},"."),t("right"),n("span",{class:"token punctuation"},";"),t(`
		`),n("span",{class:"token punctuation"},"}"),t(`
	`),n("span",{class:"token punctuation"},"}"),t(`
	`),n("span",{class:"token keyword"},"return"),t(" res"),n("span",{class:"token punctuation"},";"),t(`
`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";"),t(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),qn=n("div",{class:"language-markdown line-numbers-mode","data-ext":"md"},[n("pre",{class:"language-markdown"},[n("code",null,[n("span",{class:"token title important"},[n("span",{class:"token punctuation"},"####"),t(" 📌 [94. 二叉树的中序遍历 - LeetCode](https://wangfuyou.com/leetcode-js/problem/0094.html)")]),t(`

`),n("span",{class:"token title important"},[n("span",{class:"token punctuation"},"####"),t(" 💻 **题目大意**")]),t(`

给你二叉树的根节点 `),n("span",{class:"token code-snippet code keyword"},"`root`"),t(" ，返回它节点值的 "),n("span",{class:"token bold"},[n("span",{class:"token punctuation"},"**"),n("span",{class:"token content"},"中序"),n("span",{class:"token punctuation"},"**")]),t(` 遍历。

`),n("span",{class:"token bold"},[n("span",{class:"token punctuation"},"**"),n("span",{class:"token content"},"进阶"),n("span",{class:"token punctuation"},"**")]),t(`：递归算法很简单，你可以通过迭代算法完成吗？

`),n("span",{class:"token title important"},[n("span",{class:"token punctuation"},"####"),t(" 💡 **解题思路**")]),t(`

思路一：递归

原理和前序遍历一样，前序遍历是中左右，中续遍历是左中右。

思路二：迭代

中序遍历是左中右，先访问的是二叉树顶部的节点，然后一层一层向下访问，直到到达树左面的最底部，再开始处理节点（也就是在把节点的数值放进 res 数组中），这就造成了处理顺序和访问顺序是不一致的。那么在使用迭代法写中序遍历，就需要借用指针的遍历来帮助访问节点，栈则用来处理节点上的元素。

`),n("span",{class:"token title important"},[n("span",{class:"token punctuation"},"####"),t(" 💎 **代码**")]),t(`

::: code-tabs
@tab 递归

`),n("span",{class:"token code"},[n("span",{class:"token punctuation"},"```"),n("span",{class:"token code-language"},"javascript"),t(`
`),n("span",{class:"token code-block language-javascript"},[n("span",{class:"token keyword"},"var"),t(),n("span",{class:"token function-variable function"},"inorderTraversal"),t(),n("span",{class:"token operator"},"="),t(),n("span",{class:"token keyword"},"function"),t(),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"root"),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token punctuation"},"{"),t(`
	`),n("span",{class:"token keyword"},"let"),t(" res "),n("span",{class:"token operator"},"="),t(),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),t(`
	`),n("span",{class:"token keyword"},"if"),t(),n("span",{class:"token punctuation"},"("),t("root "),n("span",{class:"token operator"},"=="),t(),n("span",{class:"token keyword"},"null"),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token keyword"},"return"),t(" res"),n("span",{class:"token punctuation"},";"),t(`
	res`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"push"),n("span",{class:"token punctuation"},"("),n("span",{class:"token operator"},"..."),n("span",{class:"token function"},"inorderTraversal"),n("span",{class:"token punctuation"},"("),t("root"),n("span",{class:"token punctuation"},"."),t("left"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),t(`
	res`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"push"),n("span",{class:"token punctuation"},"("),t("root"),n("span",{class:"token punctuation"},"."),t("val"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),t(`
	res`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"push"),n("span",{class:"token punctuation"},"("),n("span",{class:"token operator"},"..."),n("span",{class:"token function"},"inorderTraversal"),n("span",{class:"token punctuation"},"("),t("root"),n("span",{class:"token punctuation"},"."),t("right"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),t(`
	`),n("span",{class:"token keyword"},"return"),t(" res"),n("span",{class:"token punctuation"},";"),t(`
`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";")]),t(`
`),n("span",{class:"token punctuation"},"```")]),t(`

@tab 迭代

`),n("span",{class:"token code"},[n("span",{class:"token punctuation"},"```"),n("span",{class:"token code-language"},"javascript"),t(`
`),n("span",{class:"token code-block language-javascript"},[n("span",{class:"token keyword"},"var"),t(),n("span",{class:"token function-variable function"},"inorderTraversal"),t(),n("span",{class:"token operator"},"="),t(),n("span",{class:"token keyword"},"function"),t(),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"root"),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token punctuation"},"{"),t(`
	`),n("span",{class:"token keyword"},"let"),t(" res "),n("span",{class:"token operator"},"="),t(),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),t(`
	`),n("span",{class:"token keyword"},"if"),t(),n("span",{class:"token punctuation"},"("),t("root "),n("span",{class:"token operator"},"=="),t(),n("span",{class:"token keyword"},"null"),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token keyword"},"return"),t(" res"),n("span",{class:"token punctuation"},";"),t(`
	`),n("span",{class:"token keyword"},"let"),t(" stack "),n("span",{class:"token operator"},"="),t(),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),t(`
	`),n("span",{class:"token keyword"},"let"),t(" cur "),n("span",{class:"token operator"},"="),t(" root"),n("span",{class:"token punctuation"},";"),t(`
	`),n("span",{class:"token keyword"},"while"),t(),n("span",{class:"token punctuation"},"("),t("cur "),n("span",{class:"token operator"},"!="),t(),n("span",{class:"token keyword"},"null"),t(),n("span",{class:"token operator"},"||"),t(" stack"),n("span",{class:"token punctuation"},"."),t("length"),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token punctuation"},"{"),t(`
		`),n("span",{class:"token keyword"},"if"),t(),n("span",{class:"token punctuation"},"("),t("cur "),n("span",{class:"token operator"},"!="),t(),n("span",{class:"token keyword"},"null"),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token punctuation"},"{"),t(`
			stack`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"push"),n("span",{class:"token punctuation"},"("),t("cur"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),t(`
			cur `),n("span",{class:"token operator"},"="),t(" cur"),n("span",{class:"token punctuation"},"."),t("left"),n("span",{class:"token punctuation"},";"),t(`
		`),n("span",{class:"token punctuation"},"}"),t(),n("span",{class:"token keyword"},"else"),t(),n("span",{class:"token punctuation"},"{"),t(`
			cur `),n("span",{class:"token operator"},"="),t(" stack"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"pop"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),t(`
			res`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"push"),n("span",{class:"token punctuation"},"("),t("cur"),n("span",{class:"token punctuation"},"."),t("val"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),t(`
			cur `),n("span",{class:"token operator"},"="),t(" cur"),n("span",{class:"token punctuation"},"."),t("right"),n("span",{class:"token punctuation"},";"),t(`
		`),n("span",{class:"token punctuation"},"}"),t(`
	`),n("span",{class:"token punctuation"},"}"),t(`
	`),n("span",{class:"token keyword"},"return"),t(" res"),n("span",{class:"token punctuation"},";"),t(`
`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";")]),t(`
`),n("span",{class:"token punctuation"},"```")]),t(`

:::
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),Sn=n("h3",{id:"层序遍历",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#层序遍历","aria-hidden":"true"},"#"),t(" 层序遍历")],-1),An={id:"📌-102-二叉树的层序遍历-leetcode",tabindex:"-1"},Ln=n("a",{class:"header-anchor",href:"#📌-102-二叉树的层序遍历-leetcode","aria-hidden":"true"},"#",-1),Bn={href:"https://wangfuyou.com/leetcode-js/problem/0102.html",target:"_blank",rel:"noopener noreferrer"},Nn=n("h4",{id:"💻-题目大意-3",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#💻-题目大意-3","aria-hidden":"true"},"#"),t(" 💻 "),n("strong",null,"题目大意")],-1),On=n("p",null,[t("给你二叉树的根节点 "),n("code",null,"root"),t(" ，返回它节点值的 "),n("strong",null,"层序"),t(" 遍历。（即逐层地，从左到右访问所有节点）。")],-1),In=n("h4",{id:"💡-解题思路-3",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#💡-解题思路-3","aria-hidden":"true"},"#"),t(" 💡 "),n("strong",null,"解题思路")],-1),Rn=n("p",null,"思路一：广度优先遍历(BFS)",-1),Cn=n("p",null,"使用队列实现",-1),Mn=n("ol",null,[n("li",null,"首先将根节点放入队列中；"),n("li",null,[t("更新队列的长度 "),n("code",null,"len"),t(" ，遍历队列的前 "),n("code",null,"len"),t(" 个节点；")]),n("li",null,"如果该节点存在直接子节点，将直接子节点加入队列中，并将节点的值存入一个临时数组中；"),n("li",null,[t("将队列的前 "),n("code",null,"len"),t(" 个节点出队，此时队列中都是下一层的子节点，将临时数组加入返回值中；")]),n("li",null,"重复步骤 2、3、4，直至队列为空；")],-1),zn=n("p",null,"思路二：深度优先遍历(DFS)",-1),Fn=n("ol",null,[n("li",null,"维护一个递归函数，参数为节点和该节点的深度"),n("li",null,"先将根节点与深度 0 传入递归函数"),n("li",null,"将节点放入 index 与深度对应的数组内"),n("li",null,"将节点的左子节点和右子节点分别传入递归函数，深度 +1"),n("li",null,"重复步骤 3、4，直至子节点为空")],-1),Vn=n("h4",{id:"💎-代码-3",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#💎-代码-3","aria-hidden":"true"},"#"),t(" 💎 "),n("strong",null,"代码")],-1),En=n("div",{class:"language-javascript line-numbers-mode","data-ext":"js"},[n("pre",{class:"language-javascript"},[n("code",null,[n("span",{class:"token keyword"},"var"),t(),n("span",{class:"token function-variable function"},"levelOrder"),t(),n("span",{class:"token operator"},"="),t(),n("span",{class:"token keyword"},"function"),t(),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"root"),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token punctuation"},"{"),t(`
	`),n("span",{class:"token keyword"},"let"),t(" res "),n("span",{class:"token operator"},"="),t(),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),t(`
	`),n("span",{class:"token keyword"},"if"),t(),n("span",{class:"token punctuation"},"("),t("root "),n("span",{class:"token operator"},"=="),t(),n("span",{class:"token keyword"},"null"),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token keyword"},"return"),t(" res"),n("span",{class:"token punctuation"},";"),t(`
	`),n("span",{class:"token keyword"},"let"),t(" queue "),n("span",{class:"token operator"},"="),t(),n("span",{class:"token punctuation"},"["),t("root"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),t(`

	`),n("span",{class:"token keyword"},"while"),t(),n("span",{class:"token punctuation"},"("),t("queue"),n("span",{class:"token punctuation"},"."),t("length"),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token punctuation"},"{"),t(`
		`),n("span",{class:"token keyword"},"let"),t(" len "),n("span",{class:"token operator"},"="),t(" queue"),n("span",{class:"token punctuation"},"."),t("length"),n("span",{class:"token punctuation"},";"),t(`
		`),n("span",{class:"token keyword"},"let"),t(" temp "),n("span",{class:"token operator"},"="),t(),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),t(`
		`),n("span",{class:"token keyword"},"for"),t(),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"let"),t(" i "),n("span",{class:"token operator"},"="),t(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},";"),t(" i "),n("span",{class:"token operator"},"<"),t(" len"),n("span",{class:"token punctuation"},";"),t(" i"),n("span",{class:"token operator"},"++"),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token punctuation"},"{"),t(`
			`),n("span",{class:"token keyword"},"if"),t(),n("span",{class:"token punctuation"},"("),t("queue"),n("span",{class:"token punctuation"},"["),t("i"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"."),t("left"),n("span",{class:"token punctuation"},")"),t(" queue"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"push"),n("span",{class:"token punctuation"},"("),t("queue"),n("span",{class:"token punctuation"},"["),t("i"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"."),t("left"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),t(`
			`),n("span",{class:"token keyword"},"if"),t(),n("span",{class:"token punctuation"},"("),t("queue"),n("span",{class:"token punctuation"},"["),t("i"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"."),t("right"),n("span",{class:"token punctuation"},")"),t(" queue"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"push"),n("span",{class:"token punctuation"},"("),t("queue"),n("span",{class:"token punctuation"},"["),t("i"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"."),t("right"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),t(`
			temp`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"push"),n("span",{class:"token punctuation"},"("),t("queue"),n("span",{class:"token punctuation"},"["),t("i"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"."),t("val"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),t(`
		`),n("span",{class:"token punctuation"},"}"),t(`
		queue `),n("span",{class:"token operator"},"="),t(" queue"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"slice"),n("span",{class:"token punctuation"},"("),t("len"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),t(`
		res`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"push"),n("span",{class:"token punctuation"},"("),t("temp"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),t(`
	`),n("span",{class:"token punctuation"},"}"),t(`
	`),n("span",{class:"token keyword"},"return"),t(" res"),n("span",{class:"token punctuation"},";"),t(`
`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";"),t(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),Dn=n("div",{class:"language-javascript line-numbers-mode","data-ext":"js"},[n("pre",{class:"language-javascript"},[n("code",null,[n("span",{class:"token keyword"},"var"),t(),n("span",{class:"token function-variable function"},"levelOrder"),t(),n("span",{class:"token operator"},"="),t(),n("span",{class:"token keyword"},"function"),t(),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"root"),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token punctuation"},"{"),t(`
	`),n("span",{class:"token keyword"},"let"),t(" res "),n("span",{class:"token operator"},"="),t(),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),t(`
	`),n("span",{class:"token keyword"},"const"),t(),n("span",{class:"token function-variable function"},"traverse"),t(),n("span",{class:"token operator"},"="),t(),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},[t("node"),n("span",{class:"token punctuation"},","),t(" deep")]),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token operator"},"=>"),t(),n("span",{class:"token punctuation"},"{"),t(`
		`),n("span",{class:"token keyword"},"if"),t(),n("span",{class:"token punctuation"},"("),t("node "),n("span",{class:"token operator"},"=="),t(),n("span",{class:"token keyword"},"null"),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token keyword"},"return"),n("span",{class:"token punctuation"},";"),t(`
		`),n("span",{class:"token keyword"},"if"),t(),n("span",{class:"token punctuation"},"("),t("res"),n("span",{class:"token punctuation"},"."),t("length "),n("span",{class:"token operator"},"=="),t(" deep"),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token punctuation"},"{"),t(`
			res`),n("span",{class:"token punctuation"},"["),t("deep"),n("span",{class:"token punctuation"},"]"),t(),n("span",{class:"token operator"},"="),t(),n("span",{class:"token punctuation"},"["),t("node"),n("span",{class:"token punctuation"},"."),t("val"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),t(`
		`),n("span",{class:"token punctuation"},"}"),t(),n("span",{class:"token keyword"},"else"),t(),n("span",{class:"token punctuation"},"{"),t(`
			res`),n("span",{class:"token punctuation"},"["),t("deep"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"push"),n("span",{class:"token punctuation"},"("),t("node"),n("span",{class:"token punctuation"},"."),t("val"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),t(`
		`),n("span",{class:"token punctuation"},"}"),t(`
		`),n("span",{class:"token function"},"traverse"),n("span",{class:"token punctuation"},"("),t("node"),n("span",{class:"token punctuation"},"."),t("left"),n("span",{class:"token punctuation"},","),t(" deep "),n("span",{class:"token operator"},"+"),t(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),t(`
		`),n("span",{class:"token function"},"traverse"),n("span",{class:"token punctuation"},"("),t("node"),n("span",{class:"token punctuation"},"."),t("right"),n("span",{class:"token punctuation"},","),t(" deep "),n("span",{class:"token operator"},"+"),t(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),t(`
	`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";"),t(`
	`),n("span",{class:"token function"},"traverse"),n("span",{class:"token punctuation"},"("),t("root"),n("span",{class:"token punctuation"},","),t(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),t(`
	`),n("span",{class:"token keyword"},"return"),t(" res"),n("span",{class:"token punctuation"},";"),t(`
`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";"),t(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),Jn=n("div",{class:"language-markdown line-numbers-mode","data-ext":"md"},[n("pre",{class:"language-markdown"},[n("code",null,[n("span",{class:"token title important"},[n("span",{class:"token punctuation"},"####"),t(" 📌 [102. 二叉树的层序遍历 - LeetCode](https://wangfuyou.com/leetcode-js/problem/0102.html)")]),t(`

`),n("span",{class:"token title important"},[n("span",{class:"token punctuation"},"####"),t(" 💻 **题目大意**")]),t(`

给你二叉树的根节点 `),n("span",{class:"token code-snippet code keyword"},"`root`"),t(" ，返回它节点值的 "),n("span",{class:"token bold"},[n("span",{class:"token punctuation"},"**"),n("span",{class:"token content"},"层序"),n("span",{class:"token punctuation"},"**")]),t(` 遍历。（即逐层地，从左到右访问所有节点）。

`),n("span",{class:"token title important"},[n("span",{class:"token punctuation"},"####"),t(" 💡 **解题思路**")]),t(`

思路一：广度优先遍历(BFS)

使用队列实现

`),n("span",{class:"token list punctuation"},"1."),t(` 首先将根节点放入队列中；
`),n("span",{class:"token list punctuation"},"2."),t(" 更新队列的长度 "),n("span",{class:"token code-snippet code keyword"},"`len`"),t(" ，遍历队列的前 "),n("span",{class:"token code-snippet code keyword"},"`len`"),t(` 个节点；
`),n("span",{class:"token list punctuation"},"3."),t(` 如果该节点存在直接子节点，将直接子节点加入队列中，并将节点的值存入一个临时数组中；
`),n("span",{class:"token list punctuation"},"4."),t(" 将队列的前 "),n("span",{class:"token code-snippet code keyword"},"`len`"),t(` 个节点出队，此时队列中都是下一层的子节点，将临时数组加入返回值中；
`),n("span",{class:"token list punctuation"},"5."),t(` 重复步骤 2、3、4，直至队列为空；

思路二：深度优先遍历(DFS)

`),n("span",{class:"token list punctuation"},"1."),t(` 维护一个递归函数，参数为节点和该节点的深度
`),n("span",{class:"token list punctuation"},"2."),t(` 先将根节点与深度 0 传入递归函数
`),n("span",{class:"token list punctuation"},"3."),t(` 将节点放入 index 与深度对应的数组内
`),n("span",{class:"token list punctuation"},"4."),t(` 将节点的左子节点和右子节点分别传入递归函数，深度 +1
`),n("span",{class:"token list punctuation"},"5."),t(` 重复步骤 3、4，直至子节点为空

`),n("span",{class:"token title important"},[n("span",{class:"token punctuation"},"####"),t(" 💎 **代码**")]),t(`

::: code-tabs
@tab 广度优先遍历(BFS)

`),n("span",{class:"token code"},[n("span",{class:"token punctuation"},"```"),n("span",{class:"token code-language"},"javascript"),t(`
`),n("span",{class:"token code-block language-javascript"},[n("span",{class:"token keyword"},"var"),t(),n("span",{class:"token function-variable function"},"levelOrder"),t(),n("span",{class:"token operator"},"="),t(),n("span",{class:"token keyword"},"function"),t(),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"root"),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token punctuation"},"{"),t(`
	`),n("span",{class:"token keyword"},"let"),t(" res "),n("span",{class:"token operator"},"="),t(),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),t(`
	`),n("span",{class:"token keyword"},"if"),t(),n("span",{class:"token punctuation"},"("),t("root "),n("span",{class:"token operator"},"=="),t(),n("span",{class:"token keyword"},"null"),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token keyword"},"return"),t(" res"),n("span",{class:"token punctuation"},";"),t(`
	`),n("span",{class:"token keyword"},"let"),t(" queue "),n("span",{class:"token operator"},"="),t(),n("span",{class:"token punctuation"},"["),t("root"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),t(`

	`),n("span",{class:"token keyword"},"while"),t(),n("span",{class:"token punctuation"},"("),t("queue"),n("span",{class:"token punctuation"},"."),t("length"),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token punctuation"},"{"),t(`
		`),n("span",{class:"token keyword"},"let"),t(" len "),n("span",{class:"token operator"},"="),t(" queue"),n("span",{class:"token punctuation"},"."),t("length"),n("span",{class:"token punctuation"},";"),t(`
		`),n("span",{class:"token keyword"},"let"),t(" temp "),n("span",{class:"token operator"},"="),t(),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),t(`
		`),n("span",{class:"token keyword"},"for"),t(),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"let"),t(" i "),n("span",{class:"token operator"},"="),t(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},";"),t(" i "),n("span",{class:"token operator"},"<"),t(" len"),n("span",{class:"token punctuation"},";"),t(" i"),n("span",{class:"token operator"},"++"),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token punctuation"},"{"),t(`
			`),n("span",{class:"token keyword"},"if"),t(),n("span",{class:"token punctuation"},"("),t("queue"),n("span",{class:"token punctuation"},"["),t("i"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"."),t("left"),n("span",{class:"token punctuation"},")"),t(" queue"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"push"),n("span",{class:"token punctuation"},"("),t("queue"),n("span",{class:"token punctuation"},"["),t("i"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"."),t("left"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),t(`
			`),n("span",{class:"token keyword"},"if"),t(),n("span",{class:"token punctuation"},"("),t("queue"),n("span",{class:"token punctuation"},"["),t("i"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"."),t("right"),n("span",{class:"token punctuation"},")"),t(" queue"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"push"),n("span",{class:"token punctuation"},"("),t("queue"),n("span",{class:"token punctuation"},"["),t("i"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"."),t("right"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),t(`
			temp`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"push"),n("span",{class:"token punctuation"},"("),t("queue"),n("span",{class:"token punctuation"},"["),t("i"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"."),t("val"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),t(`
		`),n("span",{class:"token punctuation"},"}"),t(`
		queue `),n("span",{class:"token operator"},"="),t(" queue"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"slice"),n("span",{class:"token punctuation"},"("),t("len"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),t(`
		res`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"push"),n("span",{class:"token punctuation"},"("),t("temp"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),t(`
	`),n("span",{class:"token punctuation"},"}"),t(`
	`),n("span",{class:"token keyword"},"return"),t(" res"),n("span",{class:"token punctuation"},";"),t(`
`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";")]),t(`
`),n("span",{class:"token punctuation"},"```")]),t(`

@tab 深度优先遍历(DFS)

`),n("span",{class:"token code"},[n("span",{class:"token punctuation"},"```"),n("span",{class:"token code-language"},"javascript"),t(`
`),n("span",{class:"token code-block language-javascript"},[n("span",{class:"token keyword"},"var"),t(),n("span",{class:"token function-variable function"},"levelOrder"),t(),n("span",{class:"token operator"},"="),t(),n("span",{class:"token keyword"},"function"),t(),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"root"),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token punctuation"},"{"),t(`
	`),n("span",{class:"token keyword"},"let"),t(" res "),n("span",{class:"token operator"},"="),t(),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),t(`
	`),n("span",{class:"token keyword"},"const"),t(),n("span",{class:"token function-variable function"},"traverse"),t(),n("span",{class:"token operator"},"="),t(),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},[t("node"),n("span",{class:"token punctuation"},","),t(" deep")]),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token operator"},"=>"),t(),n("span",{class:"token punctuation"},"{"),t(`
		`),n("span",{class:"token keyword"},"if"),t(),n("span",{class:"token punctuation"},"("),t("node "),n("span",{class:"token operator"},"=="),t(),n("span",{class:"token keyword"},"null"),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token keyword"},"return"),n("span",{class:"token punctuation"},";"),t(`
		`),n("span",{class:"token keyword"},"if"),t(),n("span",{class:"token punctuation"},"("),t("res"),n("span",{class:"token punctuation"},"."),t("length "),n("span",{class:"token operator"},"=="),t(" deep"),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token punctuation"},"{"),t(`
			res`),n("span",{class:"token punctuation"},"["),t("deep"),n("span",{class:"token punctuation"},"]"),t(),n("span",{class:"token operator"},"="),t(),n("span",{class:"token punctuation"},"["),t("node"),n("span",{class:"token punctuation"},"."),t("val"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),t(`
		`),n("span",{class:"token punctuation"},"}"),t(),n("span",{class:"token keyword"},"else"),t(),n("span",{class:"token punctuation"},"{"),t(`
			res`),n("span",{class:"token punctuation"},"["),t("deep"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"push"),n("span",{class:"token punctuation"},"("),t("node"),n("span",{class:"token punctuation"},"."),t("val"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),t(`
		`),n("span",{class:"token punctuation"},"}"),t(`
		`),n("span",{class:"token function"},"traverse"),n("span",{class:"token punctuation"},"("),t("node"),n("span",{class:"token punctuation"},"."),t("left"),n("span",{class:"token punctuation"},","),t(" deep "),n("span",{class:"token operator"},"+"),t(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),t(`
		`),n("span",{class:"token function"},"traverse"),n("span",{class:"token punctuation"},"("),t("node"),n("span",{class:"token punctuation"},"."),t("right"),n("span",{class:"token punctuation"},","),t(" deep "),n("span",{class:"token operator"},"+"),t(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),t(`
	`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";"),t(`
	`),n("span",{class:"token function"},"traverse"),n("span",{class:"token punctuation"},"("),t("root"),n("span",{class:"token punctuation"},","),t(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),t(`
	`),n("span",{class:"token keyword"},"return"),t(" res"),n("span",{class:"token punctuation"},";"),t(`
`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";")]),t(`
`),n("span",{class:"token punctuation"},"```")]),t(`

:::
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),Kn=d('<h2 id="二叉树的还原" tabindex="-1"><a class="header-anchor" href="#二叉树的还原" aria-hidden="true">#</a> 二叉树的还原</h2><p>二叉树的还原：指的是通过二叉树的遍历序列，还原出对应的二叉树。</p><p>单凭 前序遍历序列 或 后序遍历序列 或 中序遍历序列 是 <strong>无法</strong> 恢复一棵二叉树的。</p><p>但是，如果已知一棵二叉树的<strong>前序序列和中序序列，可以唯一地确定</strong>这棵二叉树；如果已知一棵二叉树的<strong>中序序列和后序序列，可以唯一地确定</strong>这棵二叉树。</p><p>需要注意的是：如果已知二叉树的<strong>前序序列和后序序列，不能唯一地确定</strong>一棵二叉树。这是因为没有中序遍历序列无法确定左右部分，也就无法进行子序列的分割。</p><p>二叉树的构造问题一般都是使用「分解问题」的思路：<strong>构造整棵树 = 根节点 + 构造左子树 + 构造右子树</strong>。</p>',6),Pn={id:"📌-105-从前序与中序遍历序列构造二叉树-leetcode",tabindex:"-1"},Hn=n("a",{class:"header-anchor",href:"#📌-105-从前序与中序遍历序列构造二叉树-leetcode","aria-hidden":"true"},"#",-1),Wn={href:"https://wangfuyou.com/leetcode-js/problem/0105.html",target:"_blank",rel:"noopener noreferrer"},Xn=n("h4",{id:"💻-题目大意-4",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#💻-题目大意-4","aria-hidden":"true"},"#"),t(" 💻 "),n("strong",null,"题目大意")],-1),Un=n("p",null,"根据一棵树的前序遍历与中序遍历构造二叉树。你可以假设树中没有重复的元素。",-1),$n=n("h4",{id:"💡-解题思路-4",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#💡-解题思路-4","aria-hidden":"true"},"#"),t(" 💡 "),n("strong",null,"解题思路")],-1),Gn=n("p",null,"构造二叉树，第一件事一定是找根节点，然后想办法构造左右子树。",-1),Qn=n("p",null,"前序遍历结果第一个就是根节点的值，然后再根据中序遍历结果确定左右子树的节点。",-1),Yn=n("figure",null,[n("img",{src:k,alt:"",tabindex:"0",loading:"lazy"}),n("figcaption")],-1),Zn=n("p",null,"不断的递归直到所有的树都生成完成。",-1),nt=n("p",null,"递归时直接传入需要的 slice 范围作为输入, 可以避免申请对应 inorder 索引的内存。",-1),tt=n("h4",{id:"💎-代码-4",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#💎-代码-4","aria-hidden":"true"},"#"),t(" 💎 "),n("strong",null,"代码")],-1),st=n("div",{class:"language-javascript line-numbers-mode","data-ext":"js"},[n("pre",{class:"language-javascript"},[n("code",null,[n("span",{class:"token keyword"},"var"),t(),n("span",{class:"token function-variable function"},"buildTree"),t(),n("span",{class:"token operator"},"="),t(),n("span",{class:"token keyword"},"function"),t(),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},[t("preorder"),n("span",{class:"token punctuation"},","),t(" inorder")]),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token punctuation"},"{"),t(`
	`),n("span",{class:"token keyword"},"if"),t(),n("span",{class:"token punctuation"},"("),t("preorder"),n("span",{class:"token punctuation"},"."),t("length "),n("span",{class:"token operator"},"=="),t(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token keyword"},"return"),t(),n("span",{class:"token keyword"},"null"),n("span",{class:"token punctuation"},";"),t(`
	`),n("span",{class:"token keyword"},"let"),t(" root "),n("span",{class:"token operator"},"="),t(),n("span",{class:"token keyword"},"new"),t(),n("span",{class:"token class-name"},"TreeNode"),n("span",{class:"token punctuation"},"("),t("preorder"),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),t(`
	`),n("span",{class:"token keyword"},"for"),t(),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"let"),t(" i "),n("span",{class:"token operator"},"="),t(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},";"),t(" i "),n("span",{class:"token operator"},"<"),t(" preorder"),n("span",{class:"token punctuation"},"."),t("length"),n("span",{class:"token punctuation"},";"),t(" i"),n("span",{class:"token operator"},"++"),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token punctuation"},"{"),t(`
		`),n("span",{class:"token keyword"},"if"),t(),n("span",{class:"token punctuation"},"("),t("inorder"),n("span",{class:"token punctuation"},"["),t("i"),n("span",{class:"token punctuation"},"]"),t(),n("span",{class:"token operator"},"==="),t(" root"),n("span",{class:"token punctuation"},"."),t("val"),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token punctuation"},"{"),t(`
			root`),n("span",{class:"token punctuation"},"."),t("left "),n("span",{class:"token operator"},"="),t(),n("span",{class:"token function"},"buildTree"),n("span",{class:"token punctuation"},"("),t("preorder"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"slice"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},","),t(" i "),n("span",{class:"token operator"},"+"),t(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},","),t(" inorder"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"slice"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},","),t(" i"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),t(`
			root`),n("span",{class:"token punctuation"},"."),t("right "),n("span",{class:"token operator"},"="),t(),n("span",{class:"token function"},"buildTree"),n("span",{class:"token punctuation"},"("),t("preorder"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"slice"),n("span",{class:"token punctuation"},"("),t("i "),n("span",{class:"token operator"},"+"),t(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},","),t(" inorder"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"slice"),n("span",{class:"token punctuation"},"("),t("i "),n("span",{class:"token operator"},"+"),t(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),t(`
			`),n("span",{class:"token keyword"},"break"),n("span",{class:"token punctuation"},";"),t(`
		`),n("span",{class:"token punctuation"},"}"),t(`
	`),n("span",{class:"token punctuation"},"}"),t(`
	`),n("span",{class:"token keyword"},"return"),t(" root"),n("span",{class:"token punctuation"},";"),t(`
`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";"),t(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),et={href:"https://wangfuyou.com/leetcode-js/problem/0106.html",target:"_blank",rel:"noopener noreferrer"},at={href:"https://wangfuyou.com/leetcode-js/problem/0889.html",target:"_blank",rel:"noopener noreferrer"},ot=n("div",{class:"language-markdown line-numbers-mode","data-ext":"md"},[n("pre",{class:"language-markdown"},[n("code",null,[n("span",{class:"token title important"},[n("span",{class:"token punctuation"},"####"),t(" 📌 [105. 从前序与中序遍历序列构造二叉树 - LeetCode](https://wangfuyou.com/leetcode-js/problem/0105.html)")]),t(`

`),n("span",{class:"token title important"},[n("span",{class:"token punctuation"},"####"),t(" 💻 **题目大意**")]),t(`

根据一棵树的前序遍历与中序遍历构造二叉树。你可以假设树中没有重复的元素。

`),n("span",{class:"token title important"},[n("span",{class:"token punctuation"},"####"),t(" 💡 **解题思路**")]),t(`

构造二叉树，第一件事一定是找根节点，然后想办法构造左右子树。

前序遍历结果第一个就是根节点的值，然后再根据中序遍历结果确定左右子树的节点。

![](../image/2-6-10.png)

不断的递归直到所有的树都生成完成。

递归时直接传入需要的 slice 范围作为输入, 可以避免申请对应 inorder 索引的内存。

`),n("span",{class:"token title important"},[n("span",{class:"token punctuation"},"####"),t(" 💎 **代码**")]),t(`

`),n("span",{class:"token code"},[n("span",{class:"token punctuation"},"```"),n("span",{class:"token code-language"},"javascript"),t(`
`),n("span",{class:"token code-block language-javascript"},[n("span",{class:"token keyword"},"var"),t(),n("span",{class:"token function-variable function"},"buildTree"),t(),n("span",{class:"token operator"},"="),t(),n("span",{class:"token keyword"},"function"),t(),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},[t("preorder"),n("span",{class:"token punctuation"},","),t(" inorder")]),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token punctuation"},"{"),t(`
	`),n("span",{class:"token keyword"},"if"),t(),n("span",{class:"token punctuation"},"("),t("preorder"),n("span",{class:"token punctuation"},"."),t("length "),n("span",{class:"token operator"},"=="),t(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token keyword"},"return"),t(),n("span",{class:"token keyword"},"null"),n("span",{class:"token punctuation"},";"),t(`
	`),n("span",{class:"token keyword"},"let"),t(" root "),n("span",{class:"token operator"},"="),t(),n("span",{class:"token keyword"},"new"),t(),n("span",{class:"token class-name"},"TreeNode"),n("span",{class:"token punctuation"},"("),t("preorder"),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),t(`
	`),n("span",{class:"token keyword"},"for"),t(),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"let"),t(" i "),n("span",{class:"token operator"},"="),t(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},";"),t(" i "),n("span",{class:"token operator"},"<"),t(" preorder"),n("span",{class:"token punctuation"},"."),t("length"),n("span",{class:"token punctuation"},";"),t(" i"),n("span",{class:"token operator"},"++"),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token punctuation"},"{"),t(`
		`),n("span",{class:"token keyword"},"if"),t(),n("span",{class:"token punctuation"},"("),t("inorder"),n("span",{class:"token punctuation"},"["),t("i"),n("span",{class:"token punctuation"},"]"),t(),n("span",{class:"token operator"},"==="),t(" root"),n("span",{class:"token punctuation"},"."),t("val"),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token punctuation"},"{"),t(`
			root`),n("span",{class:"token punctuation"},"."),t("left "),n("span",{class:"token operator"},"="),t(),n("span",{class:"token function"},"buildTree"),n("span",{class:"token punctuation"},"("),t("preorder"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"slice"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},","),t(" i "),n("span",{class:"token operator"},"+"),t(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},","),t(" inorder"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"slice"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},","),t(" i"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),t(`
			root`),n("span",{class:"token punctuation"},"."),t("right "),n("span",{class:"token operator"},"="),t(),n("span",{class:"token function"},"buildTree"),n("span",{class:"token punctuation"},"("),t("preorder"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"slice"),n("span",{class:"token punctuation"},"("),t("i "),n("span",{class:"token operator"},"+"),t(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},","),t(" inorder"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"slice"),n("span",{class:"token punctuation"},"("),t("i "),n("span",{class:"token operator"},"+"),t(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),t(`
			`),n("span",{class:"token keyword"},"break"),n("span",{class:"token punctuation"},";"),t(`
		`),n("span",{class:"token punctuation"},"}"),t(`
	`),n("span",{class:"token punctuation"},"}"),t(`
	`),n("span",{class:"token keyword"},"return"),t(" root"),n("span",{class:"token punctuation"},";"),t(`
`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";")]),t(`
`),n("span",{class:"token punctuation"},"```")]),t(`

类似的题目还有 `),n("span",{class:"token url"},[t("["),n("span",{class:"token content"},"106. 从中序与后序遍历序列构造二叉树 - LeetCode"),t("]("),n("span",{class:"token url"},"https://wangfuyou.com/leetcode-js/problem/0106.html"),t(")")]),t(" 和 "),n("span",{class:"token url"},[t("["),n("span",{class:"token content"},"889. 根据前序和后序遍历构造二叉树 - LeetCode"),t("]("),n("span",{class:"token url"},"https://wangfuyou.com/leetcode-js/problem/0889.html"),t(")")]),t(`，原理类似，详见题解。
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),lt={id:"📌-654-最大二叉树-leetcode",tabindex:"-1"},ct=n("a",{class:"header-anchor",href:"#📌-654-最大二叉树-leetcode","aria-hidden":"true"},"#",-1),pt={href:"https://wangfuyou.com/leetcode-js/problem/0654.html",target:"_blank",rel:"noopener noreferrer"},it=n("h4",{id:"💻-题目大意-5",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#💻-题目大意-5","aria-hidden":"true"},"#"),t(" 💻 "),n("strong",null,"题目大意")],-1),ut=n("p",null,[t("给定一个不重复的整数数组 "),n("code",null,"nums"),t(" 。 最大二叉树 可以用下面的算法从 "),n("code",null,"nums"),t(" 递归地构建:")],-1),rt=n("ol",null,[n("li",null,[t("创建一个根节点，其值为 "),n("code",null,"nums"),t(" 中的最大值。")]),n("li",null,"递归地在最大值 左边 的 子数组前缀上 构建左子树。"),n("li",null,"递归地在最大值 右边 的 子数组后缀上 构建右子树。")],-1),dt=n("p",null,[t("返回 "),n("code",null,"nums"),t(" 构建的 最大二叉树 。")],-1),kt=n("p",null,[n("strong",null,"示例 1"),t("：")],-1),ht=n("div",{class:"language-text line-numbers-mode","data-ext":"text"},[n("pre",{class:"language-text"},[n("code",null,`输入：nums = [3,2,1,6,0,5]
输出：[6,3,5,null,2,0,null,null,1]
`)]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),_t=n("p",null,[n("strong",null,"解释"),t("：递归调用如下所示：")],-1),mt=n("ul",null,[n("li",null,[t("[3,2,1,6,0,5] 中的最大值是 6 ，左边部分是 [3,2,1] ，右边部分是 [0,5] 。 "),n("ul",null,[n("li",null,[t("[3,2,1] 中的最大值是 3 ，左边部分是 [] ，右边部分是 [2,1] 。 "),n("ul",null,[n("li",null,"空数组，无子节点。"),n("li",null,[t("[2,1] 中的最大值是 2 ，左边部分是 [] ，右边部分是 [1] 。 "),n("ul",null,[n("li",null,"空数组，无子节点。"),n("li",null,"只有一个元素，所以子节点是一个值为 1 的节点。")])])])]),n("li",null,[t("[0,5] 中的最大值是 5 ，左边部分是 [0] ，右边部分是 [] 。 "),n("ul",null,[n("li",null,"只有一个元素，所以子节点是一个值为 0 的节点。"),n("li",null,"空数组，无子节点。")])])])])],-1),bt=n("p",null,[n("strong",null,"示例 2"),t("：")],-1),vt=n("div",{class:"language-text line-numbers-mode","data-ext":"text"},[n("pre",{class:"language-text"},[n("code",null,`输入：nums = [3,2,1]
输出：[3,null,2,null,1]
`)]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),gt=n("h4",{id:"💡-解题思路-5",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#💡-解题思路-5","aria-hidden":"true"},"#"),t(" 💡 "),n("strong",null,"解题思路")],-1),ft=n("p",null,"每个二叉树节点都可以认为是一棵子树的根节点，对于根节点，首先要做的当然是把想办法把自己先构造出来，然后想办法构造自己的左右子树。",-1),yt=n("p",null,[t("所以，我们要遍历数组把找到最大值 "),n("code",null,"max"),t("，从而把根节点 "),n("code",null,"root"),t(" 做出来，然后对 "),n("code",null,"max"),t(" 左边的数组和右边的数组进行递归构建，作为 "),n("code",null,"root"),t(" 的左右子树。")],-1),xt=n("h4",{id:"💎-代码-5",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#💎-代码-5","aria-hidden":"true"},"#"),t(" 💎 "),n("strong",null,"代码")],-1),wt=n("div",{class:"language-javascript line-numbers-mode","data-ext":"js"},[n("pre",{class:"language-javascript"},[n("code",null,[n("span",{class:"token keyword"},"var"),t(),n("span",{class:"token function-variable function"},"constructMaximumBinaryTree"),t(),n("span",{class:"token operator"},"="),t(),n("span",{class:"token keyword"},"function"),t(),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"nums"),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token punctuation"},"{"),t(`
	`),n("span",{class:"token keyword"},"if"),t(),n("span",{class:"token punctuation"},"("),t("nums"),n("span",{class:"token punctuation"},"."),t("length "),n("span",{class:"token operator"},"=="),t(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token keyword"},"return"),t(),n("span",{class:"token keyword"},"null"),n("span",{class:"token punctuation"},";"),t(`
	`),n("span",{class:"token keyword"},"let"),t(" max "),n("span",{class:"token operator"},"="),t(" nums"),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),t(`
	`),n("span",{class:"token keyword"},"let"),t(" maxIndex "),n("span",{class:"token operator"},"="),t(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},";"),t(`
	`),n("span",{class:"token keyword"},"for"),t(),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"let"),t(" i "),n("span",{class:"token operator"},"="),t(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},";"),t(" i "),n("span",{class:"token operator"},"<"),t(" nums"),n("span",{class:"token punctuation"},"."),t("length"),n("span",{class:"token punctuation"},";"),t(" i"),n("span",{class:"token operator"},"++"),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token punctuation"},"{"),t(`
		`),n("span",{class:"token keyword"},"if"),t(),n("span",{class:"token punctuation"},"("),t("nums"),n("span",{class:"token punctuation"},"["),t("i"),n("span",{class:"token punctuation"},"]"),t(),n("span",{class:"token operator"},">"),t(" max"),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token punctuation"},"{"),t(`
			max `),n("span",{class:"token operator"},"="),t(" nums"),n("span",{class:"token punctuation"},"["),t("i"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),t(`
			maxIndex `),n("span",{class:"token operator"},"="),t(" i"),n("span",{class:"token punctuation"},";"),t(`
		`),n("span",{class:"token punctuation"},"}"),t(`
	`),n("span",{class:"token punctuation"},"}"),t(`
	`),n("span",{class:"token keyword"},"let"),t(" root "),n("span",{class:"token operator"},"="),t(),n("span",{class:"token keyword"},"new"),t(),n("span",{class:"token class-name"},"TreeNode"),n("span",{class:"token punctuation"},"("),t("max"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),t(`
	root`),n("span",{class:"token punctuation"},"."),t("left "),n("span",{class:"token operator"},"="),t(),n("span",{class:"token function"},"constructMaximumBinaryTree"),n("span",{class:"token punctuation"},"("),t("nums"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"slice"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},","),t(" maxIndex"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),t(`
	root`),n("span",{class:"token punctuation"},"."),t("right "),n("span",{class:"token operator"},"="),t(),n("span",{class:"token function"},"constructMaximumBinaryTree"),n("span",{class:"token punctuation"},"("),t("nums"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"slice"),n("span",{class:"token punctuation"},"("),t("maxIndex "),n("span",{class:"token operator"},"+"),t(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),t(`
	`),n("span",{class:"token keyword"},"return"),t(" root"),n("span",{class:"token punctuation"},";"),t(`
`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";"),t(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),jt=n("div",{class:"language-markdown line-numbers-mode","data-ext":"md"},[n("pre",{class:"language-markdown"},[n("code",null,[n("span",{class:"token title important"},[n("span",{class:"token punctuation"},"####"),t(" 📌 [654. 最大二叉树 - LeetCode](https://wangfuyou.com/leetcode-js/problem/0654.html)")]),t(`

`),n("span",{class:"token title important"},[n("span",{class:"token punctuation"},"####"),t(" 💻 **题目大意**")]),t(`

给定一个不重复的整数数组 `),n("span",{class:"token code-snippet code keyword"},"`nums`"),t(" 。 最大二叉树 可以用下面的算法从 "),n("span",{class:"token code-snippet code keyword"},"`nums`"),t(` 递归地构建:

`),n("span",{class:"token list punctuation"},"1."),t(" 创建一个根节点，其值为 "),n("span",{class:"token code-snippet code keyword"},"`nums`"),t(` 中的最大值。
`),n("span",{class:"token list punctuation"},"2."),t(` 递归地在最大值 左边 的 子数组前缀上 构建左子树。
`),n("span",{class:"token list punctuation"},"3."),t(` 递归地在最大值 右边 的 子数组后缀上 构建右子树。

返回 `),n("span",{class:"token code-snippet code keyword"},"`nums`"),t(` 构建的 最大二叉树 。

`),n("span",{class:"token bold"},[n("span",{class:"token punctuation"},"**"),n("span",{class:"token content"},"示例 1"),n("span",{class:"token punctuation"},"**")]),t(`：

`),n("span",{class:"token code"},[n("span",{class:"token punctuation"},"```"),t(`
`),n("span",{class:"token code-block"},`输入：nums = [3,2,1,6,0,5]
输出：[6,3,5,null,2,0,null,null,1]`),t(`
`),n("span",{class:"token punctuation"},"```")]),t(`

`),n("span",{class:"token bold"},[n("span",{class:"token punctuation"},"**"),n("span",{class:"token content"},"解释"),n("span",{class:"token punctuation"},"**")]),t(`：递归调用如下所示：

`),n("span",{class:"token list punctuation"},"-"),t(` [3,2,1,6,0,5] 中的最大值是 6 ，左边部分是 [3,2,1] ，右边部分是 [0,5] 。
  `),n("span",{class:"token list punctuation"},"-"),t(` [3,2,1] 中的最大值是 3 ，左边部分是 [] ，右边部分是 [2,1] 。
    `),n("span",{class:"token list punctuation"},"-"),t(` 空数组，无子节点。
    `),n("span",{class:"token list punctuation"},"-"),t(` [2,1] 中的最大值是 2 ，左边部分是 [] ，右边部分是 [1] 。
      `),n("span",{class:"token list punctuation"},"-"),t(` 空数组，无子节点。
      `),n("span",{class:"token list punctuation"},"-"),t(` 只有一个元素，所以子节点是一个值为 1 的节点。
  `),n("span",{class:"token list punctuation"},"-"),t(` [0,5] 中的最大值是 5 ，左边部分是 [0] ，右边部分是 [] 。
    `),n("span",{class:"token list punctuation"},"-"),t(` 只有一个元素，所以子节点是一个值为 0 的节点。
    `),n("span",{class:"token list punctuation"},"-"),t(` 空数组，无子节点。

`),n("span",{class:"token bold"},[n("span",{class:"token punctuation"},"**"),n("span",{class:"token content"},"示例 2"),n("span",{class:"token punctuation"},"**")]),t(`：

`),n("span",{class:"token code"},[n("span",{class:"token punctuation"},"```"),t(`
`),n("span",{class:"token code-block"},`输入：nums = [3,2,1]
输出：[3,null,2,null,1]`),t(`
`),n("span",{class:"token punctuation"},"```")]),t(`

`),n("span",{class:"token title important"},[n("span",{class:"token punctuation"},"####"),t(" 💡 **解题思路**")]),t(`

每个二叉树节点都可以认为是一棵子树的根节点，对于根节点，首先要做的当然是把想办法把自己先构造出来，然后想办法构造自己的左右子树。

所以，我们要遍历数组把找到最大值 `),n("span",{class:"token code-snippet code keyword"},"`max`"),t("，从而把根节点 "),n("span",{class:"token code-snippet code keyword"},"`root`"),t(" 做出来，然后对 "),n("span",{class:"token code-snippet code keyword"},"`max`"),t(" 左边的数组和右边的数组进行递归构建，作为 "),n("span",{class:"token code-snippet code keyword"},"`root`"),t(` 的左右子树。

`),n("span",{class:"token title important"},[n("span",{class:"token punctuation"},"####"),t(" 💎 **代码**")]),t(`

`),n("span",{class:"token code"},[n("span",{class:"token punctuation"},"```"),n("span",{class:"token code-language"},"javascript"),t(`
`),n("span",{class:"token code-block language-javascript"},[n("span",{class:"token keyword"},"var"),t(),n("span",{class:"token function-variable function"},"constructMaximumBinaryTree"),t(),n("span",{class:"token operator"},"="),t(),n("span",{class:"token keyword"},"function"),t(),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"nums"),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token punctuation"},"{"),t(`
	`),n("span",{class:"token keyword"},"if"),t(),n("span",{class:"token punctuation"},"("),t("nums"),n("span",{class:"token punctuation"},"."),t("length "),n("span",{class:"token operator"},"=="),t(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token keyword"},"return"),t(),n("span",{class:"token keyword"},"null"),n("span",{class:"token punctuation"},";"),t(`
	`),n("span",{class:"token keyword"},"let"),t(" max "),n("span",{class:"token operator"},"="),t(" nums"),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),t(`
	`),n("span",{class:"token keyword"},"let"),t(" maxIndex "),n("span",{class:"token operator"},"="),t(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},";"),t(`
	`),n("span",{class:"token keyword"},"for"),t(),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"let"),t(" i "),n("span",{class:"token operator"},"="),t(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},";"),t(" i "),n("span",{class:"token operator"},"<"),t(" nums"),n("span",{class:"token punctuation"},"."),t("length"),n("span",{class:"token punctuation"},";"),t(" i"),n("span",{class:"token operator"},"++"),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token punctuation"},"{"),t(`
		`),n("span",{class:"token keyword"},"if"),t(),n("span",{class:"token punctuation"},"("),t("nums"),n("span",{class:"token punctuation"},"["),t("i"),n("span",{class:"token punctuation"},"]"),t(),n("span",{class:"token operator"},">"),t(" max"),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token punctuation"},"{"),t(`
			max `),n("span",{class:"token operator"},"="),t(" nums"),n("span",{class:"token punctuation"},"["),t("i"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),t(`
			maxIndex `),n("span",{class:"token operator"},"="),t(" i"),n("span",{class:"token punctuation"},";"),t(`
		`),n("span",{class:"token punctuation"},"}"),t(`
	`),n("span",{class:"token punctuation"},"}"),t(`
	`),n("span",{class:"token keyword"},"let"),t(" root "),n("span",{class:"token operator"},"="),t(),n("span",{class:"token keyword"},"new"),t(),n("span",{class:"token class-name"},"TreeNode"),n("span",{class:"token punctuation"},"("),t("max"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),t(`
	root`),n("span",{class:"token punctuation"},"."),t("left "),n("span",{class:"token operator"},"="),t(),n("span",{class:"token function"},"constructMaximumBinaryTree"),n("span",{class:"token punctuation"},"("),t("nums"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"slice"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},","),t(" maxIndex"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),t(`
	root`),n("span",{class:"token punctuation"},"."),t("right "),n("span",{class:"token operator"},"="),t(),n("span",{class:"token function"},"constructMaximumBinaryTree"),n("span",{class:"token punctuation"},"("),t("nums"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"slice"),n("span",{class:"token punctuation"},"("),t("maxIndex "),n("span",{class:"token operator"},"+"),t(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),t(`
	`),n("span",{class:"token keyword"},"return"),t(" root"),n("span",{class:"token punctuation"},";"),t(`
`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";")]),t(`
`),n("span",{class:"token punctuation"},"```")]),t(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),Tt=d('<h2 id="二叉查找树" tabindex="-1"><a class="header-anchor" href="#二叉查找树" aria-hidden="true">#</a> 二叉查找树</h2><div class="hint-container info"><p class="hint-container-title">定义</p><p><strong>二叉查找树（Binary Search Tree）</strong> ：也叫二叉搜索树，在二叉查找树中，每个节点的左子树节点值都小于该节点的值，而右子树节点值都大于该节点的值。</p></div><p>下图是几个二叉查找树的例子：</p><figure><img src="'+T+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>二叉查找树（BST）是二叉树中最常用的一种类型。二叉查找树最大的特点就是，支持动态数据集合的快速插入、删除、查找操作。在实际应用中常用于快速查找和有序插入的场景，具有良好的平均时间复杂度。</p><p>下面我们来看下，这些操作是如何实现的。</p><p>首先，我们需要定义二叉查找树的节点：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">TreeNode</span> <span class="token punctuation">{</span>
	<span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里，<code>TreeNode</code> 类代表了二叉查找树中的一个节点，包括节点的值、左子树和右子树。</p><p>接下来，我们创建一个 <code>BinarySearchTree</code> 类，用于实现二叉查找树的基本操作：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">BinarySearchTree</span> <span class="token punctuation">{</span>
	<span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span>root <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token comment">// ...(各种操作方法)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-插入操作" tabindex="-1"><a class="header-anchor" href="#_1-插入操作" aria-hidden="true">#</a> 1. 插入操作</h3><p>插入操作是向二叉查找树中插入新值的过程，通常涉及递归，因为我们需要找到新节点应该放置的位置。以下是增加节点的原理：</p><ol><li>如果树为空（即根节点为 <code>null</code>），则新节点将成为树的根。</li><li>如果树不为空，我们从树的根节点开始，比较新节点的值与当前节点的值。 <ul><li>如果新节点的值小于当前节点的值，则递归地将新节点插入到当前节点的左子树中。</li><li>如果新节点的值大于当前节点的值，则递归地将新节点插入到当前节点的右子树中。</li><li>如果新节点的值等于当前节点的值，通常可以选择将新节点丢弃，或者将其放在左子树或右子树中，取决于具体的实现策略。</li></ul></li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">BinarySearchTree</span> <span class="token punctuation">{</span>
	<span class="token comment">// ...（之前的代码）</span>

	<span class="token function">insert</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span>root <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_insert</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>root<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token function">_insert</span><span class="token punctuation">(</span><span class="token parameter">node<span class="token punctuation">,</span> value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>node<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>

		<span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">&lt;</span> node<span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			node<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_insert</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">&gt;</span> node<span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			node<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_insert</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>

		<span class="token keyword">return</span> node<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-查找操作" tabindex="-1"><a class="header-anchor" href="#_2-查找操作" aria-hidden="true">#</a> 2. 查找操作</h3><p>查找操作是在二叉查找树中搜索特定值的过程。它是通过递归地比较节点的值和目标值来实现的。以下是查找节点的原理：</p><ol><li><p>从根节点开始，比较目标值与当前节点的值。</p><ul><li>如果目标值小于当前节点的值，则在左子树中继续查找。</li><li>如果目标值大于当前节点的值，则在右子树中继续查找。</li><li>如果目标值等于当前节点的值，找到了目标节点。</li></ul></li><li><p>重复上述步骤，直到找到目标节点或达到叶子节点（节点没有左子树和右子树）为止。</p></li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">BinarySearchTree</span> <span class="token punctuation">{</span>
	<span class="token comment">// ...（之前的代码）</span>

	<span class="token function">search</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_search</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>root<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token function">_search</span><span class="token punctuation">(</span><span class="token parameter">node<span class="token punctuation">,</span> value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>node <span class="token operator">||</span> node<span class="token punctuation">.</span>value <span class="token operator">===</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> node<span class="token punctuation">;</span>
		<span class="token punctuation">}</span>

		<span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">&lt;</span> node<span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_search</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_search</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这两个基本操作是二叉查找树的核心。通过递归的方式，我们能够有效地在树中进行插入和查找操作。</p><h3 id="_3-删除操作" tabindex="-1"><a class="header-anchor" href="#_3-删除操作" aria-hidden="true">#</a> 3. 删除操作</h3><p>为了删除一个节点，我们需要分几种情况讨论：</p><ol><li>如果节点是叶子节点（没有左子树和右子树），直接删除即可。</li><li>如果节点只有一个子节点，将该节点替换为其子节点。</li><li>如果节点有两个子节点，找到右子树中的最小值节点，用该节点的值替换要删除的节点的值，然后递归地删除右子树中的最小值节点。</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">BinarySearchTree</span> <span class="token punctuation">{</span>
	<span class="token comment">// ...（之前的代码）</span>

	<span class="token keyword">delete</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span>root <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_delete</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>root<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token function">_delete</span><span class="token punctuation">(</span><span class="token parameter">node<span class="token punctuation">,</span> value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>node<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>

		<span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">&lt;</span> node<span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			node<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_delete</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">&gt;</span> node<span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			node<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_delete</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
			<span class="token comment">// Node to be deleted found</span>

			<span class="token comment">// Case 1 &amp; 2: No child or one child</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span> <span class="token punctuation">{</span>
				<span class="token keyword">return</span> node<span class="token punctuation">.</span>right<span class="token punctuation">;</span>
			<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span> <span class="token punctuation">{</span>
				<span class="token keyword">return</span> node<span class="token punctuation">.</span>left<span class="token punctuation">;</span>
			<span class="token punctuation">}</span>

			<span class="token comment">// Case 3: Two children</span>
			<span class="token keyword">const</span> minRight <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_findMin</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>
			node<span class="token punctuation">.</span>value <span class="token operator">=</span> minRight<span class="token punctuation">.</span>value<span class="token punctuation">;</span>
			node<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_delete</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">,</span> minRight<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>

		<span class="token keyword">return</span> node<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token function">_findMin</span><span class="token punctuation">(</span><span class="token parameter">node</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">while</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			node <span class="token operator">=</span> node<span class="token punctuation">.</span>left<span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">return</span> node<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-遍历操作" tabindex="-1"><a class="header-anchor" href="#_4-遍历操作" aria-hidden="true">#</a> 4. 遍历操作</h3><p>二叉查找树的遍历操作包括前序遍历、中序遍历和后序遍历，每一种遍历方式都有其特定的应用场景。</p><p>中序遍历是二叉查找树最常用的遍历方式。它按照从小到大的顺序遍历树中的节点，<strong>输出结果是有序的，时间复杂度是 O(n)，非常高效</strong> 。因此，二叉查找树也叫作二叉排序树。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">BinarySearchTree</span> <span class="token punctuation">{</span>
	<span class="token comment">// ...（之前的代码）</span>

	<span class="token function">inOrderTraversal</span><span class="token punctuation">(</span><span class="token parameter">callback</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_inOrderTraversal</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>root<span class="token punctuation">,</span> callback<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token function">_inOrderTraversal</span><span class="token punctuation">(</span><span class="token parameter">node<span class="token punctuation">,</span> callback</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_inOrderTraversal</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">,</span> callback<span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token function">callback</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_inOrderTraversal</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">,</span> callback<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>遍历的时间复杂度是 <code>O(n)</code>，其中 <code>n</code> 是树中节点的数量，这是因为遍历需要访问所有节点。</p><details><summary>👉 查看代码测试 👈</summary><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 创建二叉查找树</span>
<span class="token keyword">const</span> bst <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BinarySearchTree</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 插入节点</span>
bst<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
bst<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
bst<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
bst<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
bst<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
bst<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
bst<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 查找节点</span>
<span class="token keyword">const</span> searchResult <span class="token operator">=</span> bst<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>searchResult <span class="token operator">?</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Found: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>searchResult<span class="token punctuation">.</span>value<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span> <span class="token operator">:</span> <span class="token string">&#39;Not Found&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 中序遍历</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;\\nIn-order traversal:&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
bst<span class="token punctuation">.</span><span class="token function">inOrderTraversal</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 删除节点</span>
bst<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 中序遍历查看删除后的结果</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;\\nIn-order traversal after deletion:&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
bst<span class="token punctuation">.</span><span class="token function">inOrderTraversal</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 运行结果：</span>
<span class="token comment">// Found: 4</span>

<span class="token comment">// In-order traversal:</span>
<span class="token comment">// 2</span>
<span class="token comment">// 4</span>
<span class="token comment">// 5</span>
<span class="token comment">// 6</span>
<span class="token comment">// 7</span>
<span class="token comment">// 8</span>

<span class="token comment">// In-order traversal after deletion:</span>
<span class="token comment">// 2</span>
<span class="token comment">// 4</span>
<span class="token comment">// 5</span>
<span class="token comment">// 6</span>
<span class="token comment">// 7</span>
<span class="token comment">// 8</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><p>除了插入、删除、查找、遍历操作之外，二叉查找树还可以支持快速地查找最大节点和最小节点、前驱节点和后继节点。</p><h3 id="复杂度分析" tabindex="-1"><a class="header-anchor" href="#复杂度分析" aria-hidden="true">#</a> 复杂度分析</h3><ul><li>平均情况下，二叉查找树的插入、查找和删除操作的时间复杂度是 <code>O(log n)</code>。</li><li>最坏情况下，如果树是非平衡的，这些操作的时间复杂度会退化到 <code>O(n)</code>。</li><li>遍历操作的时间复杂度始终为 <code>O(n)</code>，因为需要访问所有节点。</li></ul><p>因此，保持二叉查找树的平衡对于维护高效性能是非常重要的。平衡二叉查找树的实现（如 AVL 树或红黑树）确保了在各种操作中都能保持较小的树高度，从而提供了可靠的性能。</p><h2 id="平衡二叉查找树" tabindex="-1"><a class="header-anchor" href="#平衡二叉查找树" aria-hidden="true">#</a> 平衡二叉查找树</h2><div class="hint-container info"><p class="hint-container-title">定义</p><p><strong>平衡二叉查找树（Balanced Binary Search Tree）</strong> ：是一种特殊的二叉查找树，其所有节点满足以下平衡性质：对于树中的每个节点，其左子树和右子树的高度差不超过 <code>1</code> 。</p></div><figure><img src="`+q+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>在非平衡的二叉查找树中，最坏情况下可能会导致树的高度接近线性，使得查找、插入和删除等操作的时间复杂度变为 <code>O(n)</code> 。而平衡二叉查找树能够保持较小的高度，确保这些操作的平均时间复杂度保持在 <code>O(log n)</code> 水平，提高了性能。</p><p>通过自动保持树的平衡性，确保在各种操作中具有较低的时间复杂度。常见的平衡二叉查找树实现包括 AVL 树和红黑树。</p><p>学习 AVL 树和红黑树的关键在于理解它们的平衡性质、平衡因子以及插入、删除等操作时的调整策略。</p><h3 id="avl-树" tabindex="-1"><a class="header-anchor" href="#avl-树" aria-hidden="true">#</a> AVL 树</h3><p>AVL 树是一种自平衡二叉查找树，由两位前苏联的数学家 Adelson-Velsky 和 Landis 在 1962 年提出。AVL 树通过在每次插入或删除操作后进行旋转操作，保持了树的平衡性。</p><h4 id="平衡因子" tabindex="-1"><a class="header-anchor" href="#平衡因子" aria-hidden="true">#</a> 平衡因子</h4><p>在 AVL 树中，每个节点都有一个平衡因子（Balance Factor），定义为其左子树的高度减去右子树的高度。平衡因子的值只能是 <code>-1</code>、<code>0</code> 或 <code>1</code>。平衡因子的目标是保持所有节点的平衡因子在这个范围内。通过旋转操作，AVL 树确保所有节点的平衡因子在这个范围内，从而保持平衡。</p><h4 id="插入操作" tabindex="-1"><a class="header-anchor" href="#插入操作" aria-hidden="true">#</a> 插入操作</h4><p>在插入新节点时，需要逐级更新从插入点到树根的所有节点的平衡因子，并检查是否破坏了 AVL 树的平衡性。如果发现某个节点的平衡因子超出了范围，就需要通过旋转操作来修复。</p><h4 id="旋转操作" tabindex="-1"><a class="header-anchor" href="#旋转操作" aria-hidden="true">#</a> 旋转操作</h4><p>AVL 树通过四种基本的旋转操作来维护平衡：</p><ol><li><strong>左旋（Left Rotation）：</strong> 将一个节点的右子树提升为新的根，原根成为新根的左子树。</li><li><strong>右旋（Right Rotation）：</strong> 将一个节点的左子树提升为新的根，原根成为新根的右子树。</li><li><strong>左-右旋转（Left-Right Rotation）：</strong> 先对左子树进行左旋，然后再对根节点进行右旋。</li><li><strong>右-左旋转（Right-Left Rotation）：</strong> 先对右子树进行右旋，然后再对根节点进行左旋。</li></ol><p>通过这些旋转操作，AVL 树能够在插入节点后保持平衡。</p><h3 id="红黑树" tabindex="-1"><a class="header-anchor" href="#红黑树" aria-hidden="true">#</a> 红黑树</h3><p>红黑树（Red-Black Tree）简称 R-B Tree，是另一种自平衡二叉查找树，它引入了颜色标记来确保平衡性，每个节点都被标记为红色或黑色。红黑树的平衡性质主要通过以下几点来维护：</p><ol><li><strong>根节点是黑色的。</strong></li><li><strong>所有叶子节点（NIL 节点）都是黑色的。</strong></li><li><strong>如果一个节点是红色的，则它的两个子节点都是黑色的。</strong></li><li><strong>从任意节点到其每个叶子的路径都包含相同数量的黑色节点。</strong></li></ol><figure><img src="'+S+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="插入操作-1" tabindex="-1"><a class="header-anchor" href="#插入操作-1" aria-hidden="true">#</a> 插入操作</h4><p>在红黑树中，插入节点时，首先按照二叉查找树的方式插入节点，然后通过一系列的颜色调整和旋转来保持红黑树的性质。</p><h4 id="旋转操作-1" tabindex="-1"><a class="header-anchor" href="#旋转操作-1" aria-hidden="true">#</a> 旋转操作</h4><p>红黑树的旋转操作包括左旋和右旋，与 AVL 树相似。旋转操作的目的是通过重新组织树的结构来保持平衡性。</p><figure><img src="'+A+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>红黑树相对于 AVL 树的优势在于，由于不需要保持严格的平衡，红黑树的旋转操作较少，插入和删除节点时的性能更为稳定。</p><p>红黑树的高度近似 <code>2log n</code>，所以它是近似平衡，插入、删除、查找操作的时间复杂度都是 <code>O(log n)</code>。</p><h2 id="线段树" tabindex="-1"><a class="header-anchor" href="#线段树" aria-hidden="true">#</a> 线段树</h2><div class="hint-container info"><p class="hint-container-title">定义</p><p><strong>线段树（Segment Tree）</strong> ：是一种解决范围查询问题的数据结构，主要用于处理数组中的子区间问题，如范围和、最小值、最大值等。</p></div><p>线段树是一种高效的数据结构，特别适用于需要频繁进行范围查询操作的场景。</p><figure><img src="'+L+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="构建线段树" tabindex="-1"><a class="header-anchor" href="#构建线段树" aria-hidden="true">#</a> 构建线段树</h3><p>线段树的节点通常包含以下信息：</p><ul><li><code>start</code>：表示节点对应区间的起始位置。</li><li><code>end</code>：表示节点对应区间的结束位置。</li><li><code>sum</code>、<code>min</code>、<code>max</code> 等：表示节点对应区间的信息。</li></ul><p>以下是一个简单的线段树节点的 JavaScript 实现：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">SegmentTreeNode</span> <span class="token punctuation">{</span>
	<span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">start<span class="token punctuation">,</span> end</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span>start <span class="token operator">=</span> start<span class="token punctuation">;</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span>end <span class="token operator">=</span> end<span class="token punctuation">;</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span>sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// 例如，表示区间和</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>构建线段树的过程涉及将数组划分为不同的区间，并在每个节点上存储对应区间的信息。</p><p>线段树通常被构造为满二叉树，它的高度是对数级别的，从而使得范围查询的时间复杂度保持在 <code>O(log n)</code> 的水平，其中 <code>n</code> 是待处理区间的长度。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">buildSegmentTree</span><span class="token punctuation">(</span><span class="token parameter">nums<span class="token punctuation">,</span> start<span class="token punctuation">,</span> end</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>start <span class="token operator">===</span> end<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SegmentTreeNode</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">const</span> mid <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token punctuation">(</span>start <span class="token operator">+</span> end<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">const</span> left <span class="token operator">=</span> <span class="token function">buildSegmentTree</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> start<span class="token punctuation">,</span> mid<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">const</span> right <span class="token operator">=</span> <span class="token function">buildSegmentTree</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">const</span> root <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SegmentTreeNode</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">;</span>
	root<span class="token punctuation">.</span>left <span class="token operator">=</span> left<span class="token punctuation">;</span>
	root<span class="token punctuation">.</span>right <span class="token operator">=</span> right<span class="token punctuation">;</span>

	<span class="token comment">// 根据具体问题更新根节点的信息</span>
	root<span class="token punctuation">.</span>sum <span class="token operator">=</span> left<span class="token punctuation">.</span>sum <span class="token operator">+</span> right<span class="token punctuation">.</span>sum<span class="token punctuation">;</span>

	<span class="token keyword">return</span> root<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="更新操作" tabindex="-1"><a class="header-anchor" href="#更新操作" aria-hidden="true">#</a> 更新操作</h3><p>更新操作用于修改原始数组的值，并相应地更新线段树节点的信息。通常使用递归实现。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token parameter">root<span class="token punctuation">,</span> index<span class="token punctuation">,</span> val</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token punctuation">.</span>start <span class="token operator">===</span> root<span class="token punctuation">.</span>end<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		root<span class="token punctuation">.</span>sum <span class="token operator">=</span> val<span class="token punctuation">;</span> <span class="token comment">// 例如，表示区间和</span>
		<span class="token keyword">return</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">const</span> mid <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>start <span class="token operator">+</span> root<span class="token punctuation">.</span>end<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&lt;=</span> mid<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token function">update</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span> index<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
		<span class="token function">update</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">,</span> index<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token comment">// 更新根节点的信息</span>
	root<span class="token punctuation">.</span>sum <span class="token operator">=</span> root<span class="token punctuation">.</span>left<span class="token punctuation">.</span>sum <span class="token operator">+</span> root<span class="token punctuation">.</span>right<span class="token punctuation">.</span>sum<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="查询操作" tabindex="-1"><a class="header-anchor" href="#查询操作" aria-hidden="true">#</a> 查询操作</h3><p>查询操作用于获取数组某个范围内的信息，比如求和、最小值、最大值等。同样使用递归实现。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token parameter">root<span class="token punctuation">,</span> queryStart<span class="token punctuation">,</span> queryEnd</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token punctuation">.</span>end <span class="token operator">&lt;</span> queryStart <span class="token operator">||</span> root<span class="token punctuation">.</span>start <span class="token operator">&gt;</span> queryEnd<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// 例如，表示区间和</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token punctuation">.</span>start <span class="token operator">&gt;=</span> queryStart <span class="token operator">&amp;&amp;</span> root<span class="token punctuation">.</span>end <span class="token operator">&lt;=</span> queryEnd<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> root<span class="token punctuation">.</span>sum<span class="token punctuation">;</span> <span class="token comment">// 例如，表示区间和</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">const</span> mid <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>start <span class="token operator">+</span> root<span class="token punctuation">.</span>end<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">const</span> leftSum <span class="token operator">=</span> <span class="token function">query</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span> queryStart<span class="token punctuation">,</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>mid<span class="token punctuation">,</span> queryEnd<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">const</span> rightSum <span class="token operator">=</span> <span class="token function">query</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">,</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> queryStart<span class="token punctuation">)</span><span class="token punctuation">,</span> queryEnd<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">return</span> leftSum <span class="token operator">+</span> rightSum<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,79),qt={id:"📌-307-区域和检索-数组可修改-leetcode",tabindex:"-1"},St=n("a",{class:"header-anchor",href:"#📌-307-区域和检索-数组可修改-leetcode","aria-hidden":"true"},"#",-1),At={href:"https://wangfuyou.com/leetcode-js/problem/0307.html",target:"_blank",rel:"noopener noreferrer"},Lt=n("h4",{id:"💻-题目大意-6",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#💻-题目大意-6","aria-hidden":"true"},"#"),t(" 💻 "),n("strong",null,"题目大意")],-1),Bt=n("p",null,[t("给定一个整数数组 "),n("code",null,"nums"),t("，请你完成两类查询：")],-1),Nt=n("ol",null,[n("li",null,[n("strong",null,"更新"),t(" 数组 "),n("code",null,"nums"),t(" 下标对应的值")]),n("li",null,[t("返回数组 "),n("code",null,"nums"),t(" 中索引 "),n("code",null,"left"),t(" 和 "),n("code",null,"right"),t(" （包含 "),n("code",null,"left"),t(" 和 "),n("code",null,"right"),t("）之间的 "),n("code",null,"nums"),t(" 元素的 "),n("strong",null,"和"),t(" ，其中 "),n("code",null,"left <= right")])],-1),Ot=n("p",null,[t("实现 "),n("code",null,"NumArray"),t(" 类：")],-1),It=n("ul",null,[n("li",null,[n("code",null,"NumArray(int[] nums)"),t(" 使用数组 "),n("code",null,"nums"),t(" 初始化对象")]),n("li",null,[n("code",null,"void update(int index, int val)"),t(" 将 "),n("code",null,"nums[index]"),t(" 的值 "),n("strong",null,"更新"),t(" 为 "),n("code",null,"val")]),n("li",null,[n("code",null,"int sumRange(int i, int j)"),t(" 返回数组 "),n("code",null,"nums"),t(" 中索引 "),n("code",null,"left"),t(" 和 "),n("code",null,"right"),t(" 之间的元素的 总和 ，包含 "),n("code",null,"left"),t(" 和 "),n("code",null,"right"),t(" 两点（也就是 "),n("code",null,"nums[left] + nums[left + 1] + ... + nums[right]"),t(" ）")])],-1),Rt=n("p",null,[n("strong",null,"示例 ：")],-1),Ct=n("blockquote",null,[n("p",null,"输入："),n("p",null,'["NumArray", "sumRange", "update", "sumRange"]'),n("p",null,"[[[1, 3, 5]], [0, 2], [1, 2], [0, 2]]"),n("p",null,"输出："),n("p",null,"[null, 9, null, 8]"),n("p",null,"解释："),n("p",null,"NumArray numArray = new NumArray([1, 3, 5]);"),n("p",null,"numArray.sumRange(0, 2); // 返回 1 + 3 + 5 = 9"),n("p",null,"numArray.update(1, 2); // nums = [1,2,5]"),n("p",null,"numArray.sumRange(0, 2); // 返回 1 + 2 + 5 = 8")],-1),Mt=n("h4",{id:"💡-解题思路-6",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#💡-解题思路-6","aria-hidden":"true"},"#"),t(" 💡 "),n("strong",null,"解题思路")],-1),zt=n("p",null,"可以通过线段树来解决：",-1),Ft=n("ol",null,[n("li",null,[n("p",null,[n("strong",null,"初始化："),t(" 在 "),n("code",null,"NumArray"),t(" 类的构造函数中，首先将输入的数组 "),n("code",null,"nums"),t(" 存储起来，并构建一个线段树，表示整个数组的和。每个线段树节点包含一个区间的起始位置、结束位置和该区间的和。")])]),n("li",null,[n("p",null,[n("strong",null,"更新操作："),t(" 当调用 "),n("code",null,"update"),t(" 方法时，根据给定的索引和新的值，更新数组 "),n("code",null,"nums"),t(" 对应位置的值，并在线段树中更新对应的节点的值。这个更新过程是通过递归地向下更新线段树节点实现的。")])]),n("li",null,[n("p",null,[n("strong",null,"区间和查询："),t(" 当调用 "),n("code",null,"sumRange"),t(" 方法时，需要查询数组中指定区间 "),n("code",null,"[i, j]"),t(" 的和。在线段树中，可以通过递归地查询左右子树来获得区间 "),n("code",null,"[i, j]"),t(" 的和：")]),n("ul",null,[n("li",null,[t("如果当前节点的区间完全包含在 "),n("code",null,"[i, j]"),t(" 中，则直接返回该节点的和。")]),n("li",null,[t("否则，根据当前节点的中点将查询区间 "),n("code",null,"[i, j]"),t(" 分为左右两部分，递归地查询左右子树，并将两部分的和相加。")])])])],-1),Vt=n("h4",{id:"💎-代码-6",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#💎-代码-6","aria-hidden":"true"},"#"),t(" 💎 "),n("strong",null,"代码")],-1),Et=n("div",{class:"language-javascript line-numbers-mode","data-ext":"js"},[n("pre",{class:"language-javascript"},[n("code",null,[n("span",{class:"token keyword"},"class"),t(),n("span",{class:"token class-name"},"NumArray"),t(),n("span",{class:"token punctuation"},"{"),t(`
	`),n("span",{class:"token comment"},"// @param {number[]} nums"),t(`
	`),n("span",{class:"token function"},"constructor"),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"nums"),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token punctuation"},"{"),t(`
		`),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),t("nums "),n("span",{class:"token operator"},"="),t(" nums"),n("span",{class:"token punctuation"},";"),t(`
		`),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),t("segmentTree "),n("span",{class:"token operator"},"="),t(),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"buildSegmentTree"),n("span",{class:"token punctuation"},"("),t("nums"),n("span",{class:"token punctuation"},","),t(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},","),t(" nums"),n("span",{class:"token punctuation"},"."),t("length "),n("span",{class:"token operator"},"-"),t(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),t(`
	`),n("span",{class:"token punctuation"},"}"),t(`
	`),n("span",{class:"token comment"},"// @param {number[]} nums"),t(`
	`),n("span",{class:"token comment"},"// @param {number} start"),t(`
	`),n("span",{class:"token comment"},"// @param {number} end"),t(`
	`),n("span",{class:"token function"},"buildSegmentTree"),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},[t("nums"),n("span",{class:"token punctuation"},","),t(" start"),n("span",{class:"token punctuation"},","),t(" end")]),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token punctuation"},"{"),t(`
		`),n("span",{class:"token keyword"},"if"),t(),n("span",{class:"token punctuation"},"("),t("start "),n("span",{class:"token operator"},"=="),t(" end"),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token punctuation"},"{"),t(`
			`),n("span",{class:"token keyword"},"return"),t(),n("span",{class:"token punctuation"},"{"),t(" start"),n("span",{class:"token punctuation"},","),t(" end"),n("span",{class:"token punctuation"},","),t(),n("span",{class:"token literal-property property"},"left"),n("span",{class:"token operator"},":"),t(),n("span",{class:"token keyword"},"null"),n("span",{class:"token punctuation"},","),t(),n("span",{class:"token literal-property property"},"right"),n("span",{class:"token operator"},":"),t(),n("span",{class:"token keyword"},"null"),n("span",{class:"token punctuation"},","),t(),n("span",{class:"token literal-property property"},"sum"),n("span",{class:"token operator"},":"),t(" nums"),n("span",{class:"token punctuation"},"["),t("start"),n("span",{class:"token punctuation"},"]"),t(),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";"),t(`
		`),n("span",{class:"token punctuation"},"}"),t(`
		`),n("span",{class:"token keyword"},"const"),t(" mid "),n("span",{class:"token operator"},"="),t(" Math"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"floor"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"("),t("start "),n("span",{class:"token operator"},"+"),t(" end"),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token operator"},"/"),t(),n("span",{class:"token number"},"2"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),t(`
		`),n("span",{class:"token keyword"},"const"),t(" left "),n("span",{class:"token operator"},"="),t(),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"buildSegmentTree"),n("span",{class:"token punctuation"},"("),t("nums"),n("span",{class:"token punctuation"},","),t(" start"),n("span",{class:"token punctuation"},","),t(" mid"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),t(`
		`),n("span",{class:"token keyword"},"const"),t(" right "),n("span",{class:"token operator"},"="),t(),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"buildSegmentTree"),n("span",{class:"token punctuation"},"("),t("nums"),n("span",{class:"token punctuation"},","),t(" mid "),n("span",{class:"token operator"},"+"),t(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},","),t(" end"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),t(`
		`),n("span",{class:"token keyword"},"const"),t(" sum "),n("span",{class:"token operator"},"="),t(" left"),n("span",{class:"token punctuation"},"."),t("sum "),n("span",{class:"token operator"},"+"),t(" right"),n("span",{class:"token punctuation"},"."),t("sum"),n("span",{class:"token punctuation"},";"),t(`
		`),n("span",{class:"token keyword"},"return"),t(),n("span",{class:"token punctuation"},"{"),t(" start"),n("span",{class:"token punctuation"},","),t(" end"),n("span",{class:"token punctuation"},","),t(" left"),n("span",{class:"token punctuation"},","),t(" right"),n("span",{class:"token punctuation"},","),t(" sum "),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";"),t(`
	`),n("span",{class:"token punctuation"},"}"),t(`

	`),n("span",{class:"token comment"},"// @param {number} index"),t(`
	`),n("span",{class:"token comment"},"// @param {number} val"),t(`
	`),n("span",{class:"token comment"},"// @return {void}"),t(`
	`),n("span",{class:"token function"},"update"),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},[t("index"),n("span",{class:"token punctuation"},","),t(" val")]),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token punctuation"},"{"),t(`
		`),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"updateSegmentTree"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),t("segmentTree"),n("span",{class:"token punctuation"},","),t(" index"),n("span",{class:"token punctuation"},","),t(" val"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),t(`
	`),n("span",{class:"token punctuation"},"}"),t(`

	`),n("span",{class:"token function"},"updateSegmentTree"),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},[t("root"),n("span",{class:"token punctuation"},","),t(" index"),n("span",{class:"token punctuation"},","),t(" val")]),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token punctuation"},"{"),t(`
		`),n("span",{class:"token keyword"},"if"),t(),n("span",{class:"token punctuation"},"("),t("root"),n("span",{class:"token punctuation"},"."),t("start "),n("span",{class:"token operator"},"=="),t(" root"),n("span",{class:"token punctuation"},"."),t("end"),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token punctuation"},"{"),t(`
			root`),n("span",{class:"token punctuation"},"."),t("sum "),n("span",{class:"token operator"},"="),t(" val"),n("span",{class:"token punctuation"},";"),t(`
			`),n("span",{class:"token keyword"},"return"),n("span",{class:"token punctuation"},";"),t(`
		`),n("span",{class:"token punctuation"},"}"),t(`
		`),n("span",{class:"token keyword"},"const"),t(" mid "),n("span",{class:"token operator"},"="),t(" Math"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"floor"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"("),t("root"),n("span",{class:"token punctuation"},"."),t("start "),n("span",{class:"token operator"},"+"),t(" root"),n("span",{class:"token punctuation"},"."),t("end"),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token operator"},"/"),t(),n("span",{class:"token number"},"2"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),t(`
		`),n("span",{class:"token keyword"},"if"),t(),n("span",{class:"token punctuation"},"("),t("index "),n("span",{class:"token operator"},"<="),t(" mid"),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token punctuation"},"{"),t(`
			`),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"updateSegmentTree"),n("span",{class:"token punctuation"},"("),t("root"),n("span",{class:"token punctuation"},"."),t("left"),n("span",{class:"token punctuation"},","),t(" index"),n("span",{class:"token punctuation"},","),t(" val"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),t(`
		`),n("span",{class:"token punctuation"},"}"),t(),n("span",{class:"token keyword"},"else"),t(),n("span",{class:"token punctuation"},"{"),t(`
			`),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"updateSegmentTree"),n("span",{class:"token punctuation"},"("),t("root"),n("span",{class:"token punctuation"},"."),t("right"),n("span",{class:"token punctuation"},","),t(" index"),n("span",{class:"token punctuation"},","),t(" val"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),t(`
		`),n("span",{class:"token punctuation"},"}"),t(`
		root`),n("span",{class:"token punctuation"},"."),t("sum "),n("span",{class:"token operator"},"="),t(`
			`),n("span",{class:"token punctuation"},"("),t("root"),n("span",{class:"token punctuation"},"."),t("left "),n("span",{class:"token operator"},"?"),t(" root"),n("span",{class:"token punctuation"},"."),t("left"),n("span",{class:"token punctuation"},"."),t("sum "),n("span",{class:"token operator"},":"),t(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token operator"},"+"),t(),n("span",{class:"token punctuation"},"("),t("root"),n("span",{class:"token punctuation"},"."),t("right "),n("span",{class:"token operator"},"?"),t(" root"),n("span",{class:"token punctuation"},"."),t("right"),n("span",{class:"token punctuation"},"."),t("sum "),n("span",{class:"token operator"},":"),t(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),t(`
	`),n("span",{class:"token punctuation"},"}"),t(`

	`),n("span",{class:"token comment"},"// @param {number} left"),t(`
	`),n("span",{class:"token comment"},"// @param {number} right"),t(`
	`),n("span",{class:"token comment"},"// @return {number}"),t(`
	`),n("span",{class:"token function"},"sumRange"),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},[t("left"),n("span",{class:"token punctuation"},","),t(" right")]),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token punctuation"},"{"),t(`
		`),n("span",{class:"token keyword"},"return"),t(),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"querySegmentTree"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),t("segmentTree"),n("span",{class:"token punctuation"},","),t(" left"),n("span",{class:"token punctuation"},","),t(" right"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),t(`
	`),n("span",{class:"token punctuation"},"}"),t(`

	`),n("span",{class:"token function"},"querySegmentTree"),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},[t("root"),n("span",{class:"token punctuation"},","),t(" start"),n("span",{class:"token punctuation"},","),t(" end")]),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token punctuation"},"{"),t(`
		`),n("span",{class:"token keyword"},"if"),t(),n("span",{class:"token punctuation"},"("),t("root"),n("span",{class:"token punctuation"},"."),t("start "),n("span",{class:"token operator"},">"),t(" end "),n("span",{class:"token operator"},"||"),t(" root"),n("span",{class:"token punctuation"},"."),t("end "),n("span",{class:"token operator"},"<"),t(" start"),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token keyword"},"return"),t(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},";"),t(`
		`),n("span",{class:"token keyword"},"if"),t(),n("span",{class:"token punctuation"},"("),t("root"),n("span",{class:"token punctuation"},"."),t("start "),n("span",{class:"token operator"},">="),t(" start "),n("span",{class:"token operator"},"&&"),t(" root"),n("span",{class:"token punctuation"},"."),t("end "),n("span",{class:"token operator"},"<="),t(" end"),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token keyword"},"return"),t(" root"),n("span",{class:"token punctuation"},"."),t("sum"),n("span",{class:"token punctuation"},";"),t(`

		`),n("span",{class:"token keyword"},"const"),t(" mid "),n("span",{class:"token operator"},"="),t(" Math"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"floor"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"("),t("root"),n("span",{class:"token punctuation"},"."),t("start "),n("span",{class:"token operator"},"+"),t(" root"),n("span",{class:"token punctuation"},"."),t("end"),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token operator"},"/"),t(),n("span",{class:"token number"},"2"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),t(`
		`),n("span",{class:"token keyword"},"const"),t(" leftSum "),n("span",{class:"token operator"},"="),t(),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"querySegmentTree"),n("span",{class:"token punctuation"},"("),t("root"),n("span",{class:"token punctuation"},"."),t("left"),n("span",{class:"token punctuation"},","),t(" start"),n("span",{class:"token punctuation"},","),t(" Math"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"min"),n("span",{class:"token punctuation"},"("),t("mid"),n("span",{class:"token punctuation"},","),t(" end"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),t(`
		`),n("span",{class:"token keyword"},"const"),t(" rightSum "),n("span",{class:"token operator"},"="),t(),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"querySegmentTree"),n("span",{class:"token punctuation"},"("),t(`
			root`),n("span",{class:"token punctuation"},"."),t("right"),n("span",{class:"token punctuation"},","),t(`
			Math`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"max"),n("span",{class:"token punctuation"},"("),t("mid "),n("span",{class:"token operator"},"+"),t(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},","),t(" start"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},","),t(`
			end
		`),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),t(`
		`),n("span",{class:"token keyword"},"return"),t(" leftSum "),n("span",{class:"token operator"},"+"),t(" rightSum"),n("span",{class:"token punctuation"},";"),t(`
	`),n("span",{class:"token punctuation"},"}"),t(`
`),n("span",{class:"token punctuation"},"}"),t(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),Dt=n("div",{class:"language-markdown line-numbers-mode","data-ext":"md"},[n("pre",{class:"language-markdown"},[n("code",null,[n("span",{class:"token title important"},[n("span",{class:"token punctuation"},"####"),t(" 📌 [307. 区域和检索 - 数组可修改 - LeetCode](https://wangfuyou.com/leetcode-js/problem/0307.html)")]),t(`

`),n("span",{class:"token title important"},[n("span",{class:"token punctuation"},"####"),t(" 💻 **题目大意**")]),t(`

给定一个整数数组 `),n("span",{class:"token code-snippet code keyword"},"`nums`"),t(`，请你完成两类查询：

`),n("span",{class:"token list punctuation"},"1."),t(),n("span",{class:"token bold"},[n("span",{class:"token punctuation"},"**"),n("span",{class:"token content"},"更新"),n("span",{class:"token punctuation"},"**")]),t(" 数组 "),n("span",{class:"token code-snippet code keyword"},"`nums`"),t(` 下标对应的值
`),n("span",{class:"token list punctuation"},"2."),t(" 返回数组 "),n("span",{class:"token code-snippet code keyword"},"`nums`"),t(" 中索引 "),n("span",{class:"token code-snippet code keyword"},"`left`"),t(" 和 "),n("span",{class:"token code-snippet code keyword"},"`right`"),t(" （包含 "),n("span",{class:"token code-snippet code keyword"},"`left`"),t(" 和 "),n("span",{class:"token code-snippet code keyword"},"`right`"),t("）之间的 "),n("span",{class:"token code-snippet code keyword"},"`nums`"),t(" 元素的 "),n("span",{class:"token bold"},[n("span",{class:"token punctuation"},"**"),n("span",{class:"token content"},"和"),n("span",{class:"token punctuation"},"**")]),t(" ，其中 "),n("span",{class:"token code-snippet code keyword"},"`left <= right`"),t(`

实现 `),n("span",{class:"token code-snippet code keyword"},"`NumArray`"),t(` 类：

`),n("span",{class:"token list punctuation"},"-"),t(),n("span",{class:"token code-snippet code keyword"},"`NumArray(int[] nums)`"),t(" 使用数组 "),n("span",{class:"token code-snippet code keyword"},"`nums`"),t(` 初始化对象
`),n("span",{class:"token list punctuation"},"-"),t(),n("span",{class:"token code-snippet code keyword"},"`void update(int index, int val)`"),t(" 将 "),n("span",{class:"token code-snippet code keyword"},"`nums[index]`"),t(" 的值 "),n("span",{class:"token bold"},[n("span",{class:"token punctuation"},"**"),n("span",{class:"token content"},"更新"),n("span",{class:"token punctuation"},"**")]),t(" 为 "),n("span",{class:"token code-snippet code keyword"},"`val`"),t(`
`),n("span",{class:"token list punctuation"},"-"),t(),n("span",{class:"token code-snippet code keyword"},"`int sumRange(int i, int j)`"),t(" 返回数组 "),n("span",{class:"token code-snippet code keyword"},"`nums`"),t(" 中索引 "),n("span",{class:"token code-snippet code keyword"},"`left`"),t(" 和 "),n("span",{class:"token code-snippet code keyword"},"`right`"),t(" 之间的元素的 总和 ，包含 "),n("span",{class:"token code-snippet code keyword"},"`left`"),t(" 和 "),n("span",{class:"token code-snippet code keyword"},"`right`"),t(" 两点（也就是 "),n("span",{class:"token code-snippet code keyword"},"`nums[left] + nums[left + 1] + ... + nums[right]`"),t(` ）

`),n("span",{class:"token bold"},[n("span",{class:"token punctuation"},"**"),n("span",{class:"token content"},"示例 ："),n("span",{class:"token punctuation"},"**")]),t(`

`),n("span",{class:"token blockquote punctuation"},">"),t(` 输入：
`),n("span",{class:"token blockquote punctuation"},">"),t(`
`),n("span",{class:"token blockquote punctuation"},">"),t(` ["NumArray", "sumRange", "update", "sumRange"]
`),n("span",{class:"token blockquote punctuation"},">"),t(`
`),n("span",{class:"token blockquote punctuation"},">"),t(` [[[1, 3, 5]], [0, 2], [1, 2], [0, 2]]
`),n("span",{class:"token blockquote punctuation"},">"),t(`
`),n("span",{class:"token blockquote punctuation"},">"),t(` 输出：
`),n("span",{class:"token blockquote punctuation"},">"),t(`
`),n("span",{class:"token blockquote punctuation"},">"),t(` [null, 9, null, 8]
`),n("span",{class:"token blockquote punctuation"},">"),t(`
`),n("span",{class:"token blockquote punctuation"},">"),t(` 解释：
`),n("span",{class:"token blockquote punctuation"},">"),t(`
`),n("span",{class:"token blockquote punctuation"},">"),t(` NumArray numArray = new NumArray([1, 3, 5]);
`),n("span",{class:"token blockquote punctuation"},">"),t(`
`),n("span",{class:"token blockquote punctuation"},">"),t(` numArray.sumRange(0, 2); // 返回 1 + 3 + 5 = 9
`),n("span",{class:"token blockquote punctuation"},">"),t(`
`),n("span",{class:"token blockquote punctuation"},">"),t(` numArray.update(1, 2); // nums = [1,2,5]
`),n("span",{class:"token blockquote punctuation"},">"),t(`
`),n("span",{class:"token blockquote punctuation"},">"),t(` numArray.sumRange(0, 2); // 返回 1 + 2 + 5 = 8

`),n("span",{class:"token title important"},[n("span",{class:"token punctuation"},"####"),t(" 💡 **解题思路**")]),t(`

可以通过线段树来解决：

`),n("span",{class:"token list punctuation"},"1."),t(),n("span",{class:"token bold"},[n("span",{class:"token punctuation"},"**"),n("span",{class:"token content"},"初始化："),n("span",{class:"token punctuation"},"**")]),t(" 在 "),n("span",{class:"token code-snippet code keyword"},"`NumArray`"),t(" 类的构造函数中，首先将输入的数组 "),n("span",{class:"token code-snippet code keyword"},"`nums`"),t(` 存储起来，并构建一个线段树，表示整个数组的和。每个线段树节点包含一个区间的起始位置、结束位置和该区间的和。

`),n("span",{class:"token list punctuation"},"2."),t(),n("span",{class:"token bold"},[n("span",{class:"token punctuation"},"**"),n("span",{class:"token content"},"更新操作："),n("span",{class:"token punctuation"},"**")]),t(" 当调用 "),n("span",{class:"token code-snippet code keyword"},"`update`"),t(" 方法时，根据给定的索引和新的值，更新数组 "),n("span",{class:"token code-snippet code keyword"},"`nums`"),t(` 对应位置的值，并在线段树中更新对应的节点的值。这个更新过程是通过递归地向下更新线段树节点实现的。

`),n("span",{class:"token list punctuation"},"3."),t(),n("span",{class:"token bold"},[n("span",{class:"token punctuation"},"**"),n("span",{class:"token content"},"区间和查询："),n("span",{class:"token punctuation"},"**")]),t(" 当调用 "),n("span",{class:"token code-snippet code keyword"},"`sumRange`"),t(" 方法时，需要查询数组中指定区间 "),n("span",{class:"token code-snippet code keyword"},"`[i, j]`"),t(" 的和。在线段树中，可以通过递归地查询左右子树来获得区间 "),n("span",{class:"token code-snippet code keyword"},"`[i, j]`"),t(` 的和：
   `),n("span",{class:"token list punctuation"},"-"),t(" 如果当前节点的区间完全包含在 "),n("span",{class:"token code-snippet code keyword"},"`[i, j]`"),t(` 中，则直接返回该节点的和。
   `),n("span",{class:"token list punctuation"},"-"),t(" 否则，根据当前节点的中点将查询区间 "),n("span",{class:"token code-snippet code keyword"},"`[i, j]`"),t(` 分为左右两部分，递归地查询左右子树，并将两部分的和相加。

`),n("span",{class:"token title important"},[n("span",{class:"token punctuation"},"####"),t(" 💎 **代码**")]),t(`

`),n("span",{class:"token code"},[n("span",{class:"token punctuation"},"```"),n("span",{class:"token code-language"},"javascript"),t(`
`),n("span",{class:"token code-block language-javascript"},[n("span",{class:"token keyword"},"class"),t(),n("span",{class:"token class-name"},"NumArray"),t(),n("span",{class:"token punctuation"},"{"),t(`
	`),n("span",{class:"token comment"},"// @param {number[]} nums"),t(`
	`),n("span",{class:"token function"},"constructor"),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"nums"),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token punctuation"},"{"),t(`
		`),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),t("nums "),n("span",{class:"token operator"},"="),t(" nums"),n("span",{class:"token punctuation"},";"),t(`
		`),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),t("segmentTree "),n("span",{class:"token operator"},"="),t(),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"buildSegmentTree"),n("span",{class:"token punctuation"},"("),t("nums"),n("span",{class:"token punctuation"},","),t(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},","),t(" nums"),n("span",{class:"token punctuation"},"."),t("length "),n("span",{class:"token operator"},"-"),t(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),t(`
	`),n("span",{class:"token punctuation"},"}"),t(`
	`),n("span",{class:"token comment"},"// @param {number[]} nums"),t(`
	`),n("span",{class:"token comment"},"// @param {number} start"),t(`
	`),n("span",{class:"token comment"},"// @param {number} end"),t(`
	`),n("span",{class:"token function"},"buildSegmentTree"),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},[t("nums"),n("span",{class:"token punctuation"},","),t(" start"),n("span",{class:"token punctuation"},","),t(" end")]),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token punctuation"},"{"),t(`
		`),n("span",{class:"token keyword"},"if"),t(),n("span",{class:"token punctuation"},"("),t("start "),n("span",{class:"token operator"},"=="),t(" end"),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token punctuation"},"{"),t(`
			`),n("span",{class:"token keyword"},"return"),t(),n("span",{class:"token punctuation"},"{"),t(" start"),n("span",{class:"token punctuation"},","),t(" end"),n("span",{class:"token punctuation"},","),t(),n("span",{class:"token literal-property property"},"left"),n("span",{class:"token operator"},":"),t(),n("span",{class:"token keyword"},"null"),n("span",{class:"token punctuation"},","),t(),n("span",{class:"token literal-property property"},"right"),n("span",{class:"token operator"},":"),t(),n("span",{class:"token keyword"},"null"),n("span",{class:"token punctuation"},","),t(),n("span",{class:"token literal-property property"},"sum"),n("span",{class:"token operator"},":"),t(" nums"),n("span",{class:"token punctuation"},"["),t("start"),n("span",{class:"token punctuation"},"]"),t(),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";"),t(`
		`),n("span",{class:"token punctuation"},"}"),t(`
		`),n("span",{class:"token keyword"},"const"),t(" mid "),n("span",{class:"token operator"},"="),t(" Math"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"floor"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"("),t("start "),n("span",{class:"token operator"},"+"),t(" end"),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token operator"},"/"),t(),n("span",{class:"token number"},"2"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),t(`
		`),n("span",{class:"token keyword"},"const"),t(" left "),n("span",{class:"token operator"},"="),t(),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"buildSegmentTree"),n("span",{class:"token punctuation"},"("),t("nums"),n("span",{class:"token punctuation"},","),t(" start"),n("span",{class:"token punctuation"},","),t(" mid"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),t(`
		`),n("span",{class:"token keyword"},"const"),t(" right "),n("span",{class:"token operator"},"="),t(),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"buildSegmentTree"),n("span",{class:"token punctuation"},"("),t("nums"),n("span",{class:"token punctuation"},","),t(" mid "),n("span",{class:"token operator"},"+"),t(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},","),t(" end"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),t(`
		`),n("span",{class:"token keyword"},"const"),t(" sum "),n("span",{class:"token operator"},"="),t(" left"),n("span",{class:"token punctuation"},"."),t("sum "),n("span",{class:"token operator"},"+"),t(" right"),n("span",{class:"token punctuation"},"."),t("sum"),n("span",{class:"token punctuation"},";"),t(`
		`),n("span",{class:"token keyword"},"return"),t(),n("span",{class:"token punctuation"},"{"),t(" start"),n("span",{class:"token punctuation"},","),t(" end"),n("span",{class:"token punctuation"},","),t(" left"),n("span",{class:"token punctuation"},","),t(" right"),n("span",{class:"token punctuation"},","),t(" sum "),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";"),t(`
	`),n("span",{class:"token punctuation"},"}"),t(`

	`),n("span",{class:"token comment"},"// @param {number} index"),t(`
	`),n("span",{class:"token comment"},"// @param {number} val"),t(`
	`),n("span",{class:"token comment"},"// @return {void}"),t(`
	`),n("span",{class:"token function"},"update"),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},[t("index"),n("span",{class:"token punctuation"},","),t(" val")]),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token punctuation"},"{"),t(`
		`),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"updateSegmentTree"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),t("segmentTree"),n("span",{class:"token punctuation"},","),t(" index"),n("span",{class:"token punctuation"},","),t(" val"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),t(`
	`),n("span",{class:"token punctuation"},"}"),t(`

	`),n("span",{class:"token function"},"updateSegmentTree"),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},[t("root"),n("span",{class:"token punctuation"},","),t(" index"),n("span",{class:"token punctuation"},","),t(" val")]),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token punctuation"},"{"),t(`
		`),n("span",{class:"token keyword"},"if"),t(),n("span",{class:"token punctuation"},"("),t("root"),n("span",{class:"token punctuation"},"."),t("start "),n("span",{class:"token operator"},"=="),t(" root"),n("span",{class:"token punctuation"},"."),t("end"),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token punctuation"},"{"),t(`
			root`),n("span",{class:"token punctuation"},"."),t("sum "),n("span",{class:"token operator"},"="),t(" val"),n("span",{class:"token punctuation"},";"),t(`
			`),n("span",{class:"token keyword"},"return"),n("span",{class:"token punctuation"},";"),t(`
		`),n("span",{class:"token punctuation"},"}"),t(`
		`),n("span",{class:"token keyword"},"const"),t(" mid "),n("span",{class:"token operator"},"="),t(" Math"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"floor"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"("),t("root"),n("span",{class:"token punctuation"},"."),t("start "),n("span",{class:"token operator"},"+"),t(" root"),n("span",{class:"token punctuation"},"."),t("end"),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token operator"},"/"),t(),n("span",{class:"token number"},"2"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),t(`
		`),n("span",{class:"token keyword"},"if"),t(),n("span",{class:"token punctuation"},"("),t("index "),n("span",{class:"token operator"},"<="),t(" mid"),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token punctuation"},"{"),t(`
			`),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"updateSegmentTree"),n("span",{class:"token punctuation"},"("),t("root"),n("span",{class:"token punctuation"},"."),t("left"),n("span",{class:"token punctuation"},","),t(" index"),n("span",{class:"token punctuation"},","),t(" val"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),t(`
		`),n("span",{class:"token punctuation"},"}"),t(),n("span",{class:"token keyword"},"else"),t(),n("span",{class:"token punctuation"},"{"),t(`
			`),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"updateSegmentTree"),n("span",{class:"token punctuation"},"("),t("root"),n("span",{class:"token punctuation"},"."),t("right"),n("span",{class:"token punctuation"},","),t(" index"),n("span",{class:"token punctuation"},","),t(" val"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),t(`
		`),n("span",{class:"token punctuation"},"}"),t(`
		root`),n("span",{class:"token punctuation"},"."),t("sum "),n("span",{class:"token operator"},"="),t(`
			`),n("span",{class:"token punctuation"},"("),t("root"),n("span",{class:"token punctuation"},"."),t("left "),n("span",{class:"token operator"},"?"),t(" root"),n("span",{class:"token punctuation"},"."),t("left"),n("span",{class:"token punctuation"},"."),t("sum "),n("span",{class:"token operator"},":"),t(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token operator"},"+"),t(),n("span",{class:"token punctuation"},"("),t("root"),n("span",{class:"token punctuation"},"."),t("right "),n("span",{class:"token operator"},"?"),t(" root"),n("span",{class:"token punctuation"},"."),t("right"),n("span",{class:"token punctuation"},"."),t("sum "),n("span",{class:"token operator"},":"),t(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),t(`
	`),n("span",{class:"token punctuation"},"}"),t(`

	`),n("span",{class:"token comment"},"// @param {number} left"),t(`
	`),n("span",{class:"token comment"},"// @param {number} right"),t(`
	`),n("span",{class:"token comment"},"// @return {number}"),t(`
	`),n("span",{class:"token function"},"sumRange"),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},[t("left"),n("span",{class:"token punctuation"},","),t(" right")]),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token punctuation"},"{"),t(`
		`),n("span",{class:"token keyword"},"return"),t(),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"querySegmentTree"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),t("segmentTree"),n("span",{class:"token punctuation"},","),t(" left"),n("span",{class:"token punctuation"},","),t(" right"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),t(`
	`),n("span",{class:"token punctuation"},"}"),t(`

	`),n("span",{class:"token function"},"querySegmentTree"),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},[t("root"),n("span",{class:"token punctuation"},","),t(" start"),n("span",{class:"token punctuation"},","),t(" end")]),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token punctuation"},"{"),t(`
		`),n("span",{class:"token keyword"},"if"),t(),n("span",{class:"token punctuation"},"("),t("root"),n("span",{class:"token punctuation"},"."),t("start "),n("span",{class:"token operator"},">"),t(" end "),n("span",{class:"token operator"},"||"),t(" root"),n("span",{class:"token punctuation"},"."),t("end "),n("span",{class:"token operator"},"<"),t(" start"),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token keyword"},"return"),t(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},";"),t(`
		`),n("span",{class:"token keyword"},"if"),t(),n("span",{class:"token punctuation"},"("),t("root"),n("span",{class:"token punctuation"},"."),t("start "),n("span",{class:"token operator"},">="),t(" start "),n("span",{class:"token operator"},"&&"),t(" root"),n("span",{class:"token punctuation"},"."),t("end "),n("span",{class:"token operator"},"<="),t(" end"),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token keyword"},"return"),t(" root"),n("span",{class:"token punctuation"},"."),t("sum"),n("span",{class:"token punctuation"},";"),t(`

		`),n("span",{class:"token keyword"},"const"),t(" mid "),n("span",{class:"token operator"},"="),t(" Math"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"floor"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"("),t("root"),n("span",{class:"token punctuation"},"."),t("start "),n("span",{class:"token operator"},"+"),t(" root"),n("span",{class:"token punctuation"},"."),t("end"),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token operator"},"/"),t(),n("span",{class:"token number"},"2"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),t(`
		`),n("span",{class:"token keyword"},"const"),t(" leftSum "),n("span",{class:"token operator"},"="),t(),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"querySegmentTree"),n("span",{class:"token punctuation"},"("),t("root"),n("span",{class:"token punctuation"},"."),t("left"),n("span",{class:"token punctuation"},","),t(" start"),n("span",{class:"token punctuation"},","),t(" Math"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"min"),n("span",{class:"token punctuation"},"("),t("mid"),n("span",{class:"token punctuation"},","),t(" end"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),t(`
		`),n("span",{class:"token keyword"},"const"),t(" rightSum "),n("span",{class:"token operator"},"="),t(),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"querySegmentTree"),n("span",{class:"token punctuation"},"("),t(`
			root`),n("span",{class:"token punctuation"},"."),t("right"),n("span",{class:"token punctuation"},","),t(`
			Math`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"max"),n("span",{class:"token punctuation"},"("),t("mid "),n("span",{class:"token operator"},"+"),t(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},","),t(" start"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},","),t(`
			end
		`),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),t(`
		`),n("span",{class:"token keyword"},"return"),t(" leftSum "),n("span",{class:"token operator"},"+"),t(" rightSum"),n("span",{class:"token punctuation"},";"),t(`
	`),n("span",{class:"token punctuation"},"}"),t(`
`),n("span",{class:"token punctuation"},"}")]),t(`
`),n("span",{class:"token punctuation"},"```")]),t(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),Jt=n("h2",{id:"相关题目",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#相关题目","aria-hidden":"true"},"#"),t(" 相关题目")],-1),Kt=n("h4",{id:"二叉树的遍历-1",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#二叉树的遍历-1","aria-hidden":"true"},"#"),t(" 二叉树的遍历")],-1),Pt=n("thead",null,[n("tr",null,[n("th",{style:{"text-align":"center"}},"题号"),n("th",{style:{"text-align":"left"}},"标题"),n("th",{style:{"text-align":"center"}},"题解"),n("th",{style:{"text-align":"left"}},"标签"),n("th",{style:{"text-align":"center"}},"难度"),n("th",{style:{"text-align":"center"}},"力扣")])],-1),Ht=n("td",{style:{"text-align":"center"}},"144",-1),Wt=n("td",{style:{"text-align":"left"}},"二叉树的前序遍历",-1),Xt={style:{"text-align":"center"}},Ut={style:{"text-align":"left"}},$t=n("code",null,"栈",-1),Gt=n("code",null,"树",-1),Qt=n("code",null,"深度优先搜索",-1),Yt=n("code",null,"1+",-1),Zt=n("td",{style:{"text-align":"center"}},"🟢",-1),ns={style:{"text-align":"center"}},ts={href:"https://leetcode.cn/problems/binary-tree-preorder-traversal",target:"_blank",rel:"noopener noreferrer"},ss={href:"https://leetcode.com/problems/binary-tree-preorder-traversal",target:"_blank",rel:"noopener noreferrer"},es=n("td",{style:{"text-align":"center"}},"94",-1),as=n("td",{style:{"text-align":"left"}},"二叉树的中序遍历",-1),os={style:{"text-align":"center"}},ls={style:{"text-align":"left"}},cs=n("code",null,"栈",-1),ps=n("code",null,"树",-1),is=n("code",null,"深度优先搜索",-1),us=n("code",null,"1+",-1),rs=n("td",{style:{"text-align":"center"}},"🟢",-1),ds={style:{"text-align":"center"}},ks={href:"https://leetcode.cn/problems/binary-tree-inorder-traversal",target:"_blank",rel:"noopener noreferrer"},hs={href:"https://leetcode.com/problems/binary-tree-inorder-traversal",target:"_blank",rel:"noopener noreferrer"},_s=n("td",{style:{"text-align":"center"}},"145",-1),ms=n("td",{style:{"text-align":"left"}},"二叉树的后序遍历",-1),bs={style:{"text-align":"center"}},vs={style:{"text-align":"left"}},gs=n("code",null,"栈",-1),fs=n("code",null,"树",-1),ys=n("code",null,"深度优先搜索",-1),xs=n("code",null,"1+",-1),ws=n("td",{style:{"text-align":"center"}},"🟢",-1),js={style:{"text-align":"center"}},Ts={href:"https://leetcode.cn/problems/binary-tree-postorder-traversal",target:"_blank",rel:"noopener noreferrer"},qs={href:"https://leetcode.com/problems/binary-tree-postorder-traversal",target:"_blank",rel:"noopener noreferrer"},Ss=n("td",{style:{"text-align":"center"}},"102",-1),As=n("td",{style:{"text-align":"left"}},"二叉树的层序遍历",-1),Ls={style:{"text-align":"center"}},Bs={style:{"text-align":"left"}},Ns=n("code",null,"树",-1),Os=n("code",null,"广度优先搜索",-1),Is=n("code",null,"二叉树",-1),Rs=n("td",{style:{"text-align":"center"}},"🟠",-1),Cs={style:{"text-align":"center"}},Ms={href:"https://leetcode.cn/problems/binary-tree-level-order-traversal",target:"_blank",rel:"noopener noreferrer"},zs={href:"https://leetcode.com/problems/binary-tree-level-order-traversal",target:"_blank",rel:"noopener noreferrer"},Fs=n("td",{style:{"text-align":"center"}},"103",-1),Vs=n("td",{style:{"text-align":"left"}},"二叉树的锯齿形层序遍历",-1),Es={style:{"text-align":"center"}},Ds={style:{"text-align":"left"}},Js=n("code",null,"树",-1),Ks=n("code",null,"广度优先搜索",-1),Ps=n("code",null,"二叉树",-1),Hs=n("td",{style:{"text-align":"center"}},"🟠",-1),Ws={style:{"text-align":"center"}},Xs={href:"https://leetcode.cn/problems/binary-tree-zigzag-level-order-traversal",target:"_blank",rel:"noopener noreferrer"},Us={href:"https://leetcode.com/problems/binary-tree-zigzag-level-order-traversal",target:"_blank",rel:"noopener noreferrer"},$s=n("td",{style:{"text-align":"center"}},"107",-1),Gs=n("td",{style:{"text-align":"left"}},"二叉树的层序遍历 II",-1),Qs={style:{"text-align":"center"}},Ys={style:{"text-align":"left"}},Zs=n("code",null,"树",-1),ne=n("code",null,"广度优先搜索",-1),te=n("code",null,"二叉树",-1),se=n("td",{style:{"text-align":"center"}},"🟠",-1),ee={style:{"text-align":"center"}},ae={href:"https://leetcode.cn/problems/binary-tree-level-order-traversal-ii",target:"_blank",rel:"noopener noreferrer"},oe={href:"https://leetcode.com/problems/binary-tree-level-order-traversal-ii",target:"_blank",rel:"noopener noreferrer"},le=n("td",{style:{"text-align":"center"}},"104",-1),ce=n("td",{style:{"text-align":"left"}},"二叉树的最大深度",-1),pe={style:{"text-align":"center"}},ie={style:{"text-align":"left"}},ue=n("code",null,"树",-1),re=n("code",null,"深度优先搜索",-1),de=n("code",null,"广度优先搜索",-1),ke=n("code",null,"1+",-1),he=n("td",{style:{"text-align":"center"}},"🟢",-1),_e={style:{"text-align":"center"}},me={href:"https://leetcode.cn/problems/maximum-depth-of-binary-tree",target:"_blank",rel:"noopener noreferrer"},be={href:"https://leetcode.com/problems/maximum-depth-of-binary-tree",target:"_blank",rel:"noopener noreferrer"},ve=n("td",{style:{"text-align":"center"}},"111",-1),ge=n("td",{style:{"text-align":"left"}},"二叉树的最小深度",-1),fe={style:{"text-align":"center"}},ye={style:{"text-align":"left"}},xe=n("code",null,"树",-1),we=n("code",null,"深度优先搜索",-1),je=n("code",null,"广度优先搜索",-1),Te=n("code",null,"1+",-1),qe=n("td",{style:{"text-align":"center"}},"🟢",-1),Se={style:{"text-align":"center"}},Ae={href:"https://leetcode.cn/problems/minimum-depth-of-binary-tree",target:"_blank",rel:"noopener noreferrer"},Le={href:"https://leetcode.com/problems/minimum-depth-of-binary-tree",target:"_blank",rel:"noopener noreferrer"},Be=n("td",{style:{"text-align":"center"}},"124",-1),Ne=n("td",{style:{"text-align":"left"}},"二叉树中的最大路径和",-1),Oe={style:{"text-align":"center"}},Ie={style:{"text-align":"left"}},Re=n("code",null,"树",-1),Ce=n("code",null,"深度优先搜索",-1),Me=n("code",null,"动态规划",-1),ze=n("code",null,"1+",-1),Fe=n("td",{style:{"text-align":"center"}},"🔴",-1),Ve={style:{"text-align":"center"}},Ee={href:"https://leetcode.cn/problems/binary-tree-maximum-path-sum",target:"_blank",rel:"noopener noreferrer"},De={href:"https://leetcode.com/problems/binary-tree-maximum-path-sum",target:"_blank",rel:"noopener noreferrer"},Je=n("td",{style:{"text-align":"center"}},"101",-1),Ke=n("td",{style:{"text-align":"left"}},"对称二叉树",-1),Pe={style:{"text-align":"center"}},He={style:{"text-align":"left"}},We=n("code",null,"树",-1),Xe=n("code",null,"深度优先搜索",-1),Ue=n("code",null,"广度优先搜索",-1),$e=n("code",null,"1+",-1),Ge=n("td",{style:{"text-align":"center"}},"🟢",-1),Qe={style:{"text-align":"center"}},Ye={href:"https://leetcode.cn/problems/symmetric-tree",target:"_blank",rel:"noopener noreferrer"},Ze={href:"https://leetcode.com/problems/symmetric-tree",target:"_blank",rel:"noopener noreferrer"},na=n("td",{style:{"text-align":"center"}},"112",-1),ta=n("td",{style:{"text-align":"left"}},"路径总和",-1),sa={style:{"text-align":"center"}},ea={style:{"text-align":"left"}},aa=n("code",null,"树",-1),oa=n("code",null,"深度优先搜索",-1),la=n("code",null,"广度优先搜索",-1),ca=n("code",null,"1+",-1),pa=n("td",{style:{"text-align":"center"}},"🟢",-1),ia={style:{"text-align":"center"}},ua={href:"https://leetcode.cn/problems/path-sum",target:"_blank",rel:"noopener noreferrer"},ra={href:"https://leetcode.com/problems/path-sum",target:"_blank",rel:"noopener noreferrer"},da=n("td",{style:{"text-align":"center"}},"113",-1),ka=n("td",{style:{"text-align":"left"}},"路径总和 II",-1),ha={style:{"text-align":"center"}},_a={style:{"text-align":"left"}},ma=n("code",null,"树",-1),ba=n("code",null,"深度优先搜索",-1),va=n("code",null,"回溯",-1),ga=n("code",null,"1+",-1),fa=n("td",{style:{"text-align":"center"}},"🟠",-1),ya={style:{"text-align":"center"}},xa={href:"https://leetcode.cn/problems/path-sum-ii",target:"_blank",rel:"noopener noreferrer"},wa={href:"https://leetcode.com/problems/path-sum-ii",target:"_blank",rel:"noopener noreferrer"},ja=n("td",{style:{"text-align":"center"}},"236",-1),Ta=n("td",{style:{"text-align":"left"}},"二叉树的最近公共祖先",-1),qa={style:{"text-align":"center"}},Sa={style:{"text-align":"left"}},Aa=n("code",null,"树",-1),La=n("code",null,"深度优先搜索",-1),Ba=n("code",null,"二叉树",-1),Na=n("td",{style:{"text-align":"center"}},"🟠",-1),Oa={style:{"text-align":"center"}},Ia={href:"https://leetcode.cn/problems/lowest-common-ancestor-of-a-binary-tree",target:"_blank",rel:"noopener noreferrer"},Ra={href:"https://leetcode.com/problems/lowest-common-ancestor-of-a-binary-tree",target:"_blank",rel:"noopener noreferrer"},Ca=n("td",{style:{"text-align":"center"}},"199",-1),Ma=n("td",{style:{"text-align":"left"}},"二叉树的右视图",-1),za={style:{"text-align":"center"}},Fa={style:{"text-align":"left"}},Va=n("code",null,"树",-1),Ea=n("code",null,"深度优先搜索",-1),Da=n("code",null,"广度优先搜索",-1),Ja=n("code",null,"1+",-1),Ka=n("td",{style:{"text-align":"center"}},"🟠",-1),Pa={style:{"text-align":"center"}},Ha={href:"https://leetcode.cn/problems/binary-tree-right-side-view",target:"_blank",rel:"noopener noreferrer"},Wa={href:"https://leetcode.com/problems/binary-tree-right-side-view",target:"_blank",rel:"noopener noreferrer"},Xa=n("td",{style:{"text-align":"center"}},"226",-1),Ua=n("td",{style:{"text-align":"left"}},"翻转二叉树",-1),$a={style:{"text-align":"center"}},Ga={style:{"text-align":"left"}},Qa=n("code",null,"树",-1),Ya=n("code",null,"深度优先搜索",-1),Za=n("code",null,"广度优先搜索",-1),no=n("code",null,"1+",-1),to=n("td",{style:{"text-align":"center"}},"🟢",-1),so={style:{"text-align":"center"}},eo={href:"https://leetcode.cn/problems/invert-binary-tree",target:"_blank",rel:"noopener noreferrer"},ao={href:"https://leetcode.com/problems/invert-binary-tree",target:"_blank",rel:"noopener noreferrer"},oo=n("td",{style:{"text-align":"center"}},"958",-1),lo=n("td",{style:{"text-align":"left"}},"二叉树的完全性检验",-1),co={style:{"text-align":"center"}},po={style:{"text-align":"left"}},io=n("code",null,"树",-1),uo=n("code",null,"广度优先搜索",-1),ro=n("code",null,"二叉树",-1),ko=n("td",{style:{"text-align":"center"}},"🟠",-1),ho={style:{"text-align":"center"}},_o={href:"https://leetcode.cn/problems/check-completeness-of-a-binary-tree",target:"_blank",rel:"noopener noreferrer"},mo={href:"https://leetcode.com/problems/check-completeness-of-a-binary-tree",target:"_blank",rel:"noopener noreferrer"},bo=n("td",{style:{"text-align":"center"}},"572",-1),vo=n("td",{style:{"text-align":"left"}},"另一棵树的子树",-1),go={style:{"text-align":"center"}},fo={style:{"text-align":"left"}},yo=n("code",null,"树",-1),xo=n("code",null,"深度优先搜索",-1),wo=n("code",null,"二叉树",-1),jo=n("code",null,"2+",-1),To=n("td",{style:{"text-align":"center"}},"🟢",-1),qo={style:{"text-align":"center"}},So={href:"https://leetcode.cn/problems/subtree-of-another-tree",target:"_blank",rel:"noopener noreferrer"},Ao={href:"https://leetcode.com/problems/subtree-of-another-tree",target:"_blank",rel:"noopener noreferrer"},Lo=n("td",{style:{"text-align":"center"}},"100",-1),Bo=n("td",{style:{"text-align":"left"}},"相同的树",-1),No={style:{"text-align":"center"}},Oo={style:{"text-align":"left"}},Io=n("code",null,"树",-1),Ro=n("code",null,"深度优先搜索",-1),Co=n("code",null,"广度优先搜索",-1),Mo=n("code",null,"1+",-1),zo=n("td",{style:{"text-align":"center"}},"🟢",-1),Fo={style:{"text-align":"center"}},Vo={href:"https://leetcode.cn/problems/same-tree",target:"_blank",rel:"noopener noreferrer"},Eo={href:"https://leetcode.com/problems/same-tree",target:"_blank",rel:"noopener noreferrer"},Do=n("td",{style:{"text-align":"center"}},"116",-1),Jo=n("td",{style:{"text-align":"left"}},"填充每个节点的下一个右侧节点指针",-1),Ko={style:{"text-align":"center"}},Po={style:{"text-align":"left"}},Ho=n("code",null,"树",-1),Wo=n("code",null,"深度优先搜索",-1),Xo=n("code",null,"广度优先搜索",-1),Uo=n("code",null,"2+",-1),$o=n("td",{style:{"text-align":"center"}},"🟠",-1),Go={style:{"text-align":"center"}},Qo={href:"https://leetcode.cn/problems/populating-next-right-pointers-in-each-node",target:"_blank",rel:"noopener noreferrer"},Yo={href:"https://leetcode.com/problems/populating-next-right-pointers-in-each-node",target:"_blank",rel:"noopener noreferrer"},Zo=n("td",{style:{"text-align":"center"}},"117",-1),nl=n("td",{style:{"text-align":"left"}},"填充每个节点的下一个右侧节点指针 II",-1),tl={style:{"text-align":"center"}},sl={style:{"text-align":"left"}},el=n("code",null,"树",-1),al=n("code",null,"深度优先搜索",-1),ol=n("code",null,"广度优先搜索",-1),ll=n("code",null,"2+",-1),cl=n("td",{style:{"text-align":"center"}},"🟠",-1),pl={style:{"text-align":"center"}},il={href:"https://leetcode.cn/problems/populating-next-right-pointers-in-each-node-ii",target:"_blank",rel:"noopener noreferrer"},ul={href:"https://leetcode.com/problems/populating-next-right-pointers-in-each-node-ii",target:"_blank",rel:"noopener noreferrer"},rl=n("td",{style:{"text-align":"center"}},"297",-1),dl=n("td",{style:{"text-align":"left"}},"二叉树的序列化与反序列化",-1),kl={style:{"text-align":"center"}},hl={style:{"text-align":"left"}},_l=n("code",null,"树",-1),ml=n("code",null,"深度优先搜索",-1),bl=n("code",null,"广度优先搜索",-1),vl=n("code",null,"3+",-1),gl=n("td",{style:{"text-align":"center"}},"🔴",-1),fl={style:{"text-align":"center"}},yl={href:"https://leetcode.cn/problems/serialize-and-deserialize-binary-tree",target:"_blank",rel:"noopener noreferrer"},xl={href:"https://leetcode.com/problems/serialize-and-deserialize-binary-tree",target:"_blank",rel:"noopener noreferrer"},wl=n("td",{style:{"text-align":"center"}},"114",-1),jl=n("td",{style:{"text-align":"left"}},"二叉树展开为链表",-1),Tl={style:{"text-align":"center"}},ql={style:{"text-align":"left"}},Sl=n("code",null,"栈",-1),Al=n("code",null,"树",-1),Ll=n("code",null,"深度优先搜索",-1),Bl=n("code",null,"2+",-1),Nl=n("td",{style:{"text-align":"center"}},"🟠",-1),Ol={style:{"text-align":"center"}},Il={href:"https://leetcode.cn/problems/flatten-binary-tree-to-linked-list",target:"_blank",rel:"noopener noreferrer"},Rl={href:"https://leetcode.com/problems/flatten-binary-tree-to-linked-list",target:"_blank",rel:"noopener noreferrer"},Cl=n("h4",{id:"二叉树的还原-1",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#二叉树的还原-1","aria-hidden":"true"},"#"),t(" 二叉树的还原")],-1),Ml=n("thead",null,[n("tr",null,[n("th",{style:{"text-align":"center"}},"题号"),n("th",{style:{"text-align":"left"}},"标题"),n("th",{style:{"text-align":"center"}},"题解"),n("th",{style:{"text-align":"left"}},"标签"),n("th",{style:{"text-align":"center"}},"难度"),n("th",{style:{"text-align":"center"}},"力扣")])],-1),zl=n("td",{style:{"text-align":"center"}},"105",-1),Fl=n("td",{style:{"text-align":"left"}},"从前序与中序遍历序列构造二叉树",-1),Vl={style:{"text-align":"center"}},El={style:{"text-align":"left"}},Dl=n("code",null,"树",-1),Jl=n("code",null,"数组",-1),Kl=n("code",null,"哈希表",-1),Pl=n("code",null,"2+",-1),Hl=n("td",{style:{"text-align":"center"}},"🟠",-1),Wl={style:{"text-align":"center"}},Xl={href:"https://leetcode.cn/problems/construct-binary-tree-from-preorder-and-inorder-traversal",target:"_blank",rel:"noopener noreferrer"},Ul={href:"https://leetcode.com/problems/construct-binary-tree-from-preorder-and-inorder-traversal",target:"_blank",rel:"noopener noreferrer"},$l=n("td",{style:{"text-align":"center"}},"106",-1),Gl=n("td",{style:{"text-align":"left"}},"从中序与后序遍历序列构造二叉树",-1),Ql={style:{"text-align":"center"}},Yl={style:{"text-align":"left"}},Zl=n("code",null,"树",-1),nc=n("code",null,"数组",-1),tc=n("code",null,"哈希表",-1),sc=n("code",null,"2+",-1),ec=n("td",{style:{"text-align":"center"}},"🟠",-1),ac={style:{"text-align":"center"}},oc={href:"https://leetcode.cn/problems/construct-binary-tree-from-inorder-and-postorder-traversal",target:"_blank",rel:"noopener noreferrer"},lc={href:"https://leetcode.com/problems/construct-binary-tree-from-inorder-and-postorder-traversal",target:"_blank",rel:"noopener noreferrer"},cc=n("td",{style:{"text-align":"center"}},"889",-1),pc=n("td",{style:{"text-align":"left"}},"根据前序和后序遍历构造二叉树",-1),ic={style:{"text-align":"center"}},uc={style:{"text-align":"left"}},rc=n("code",null,"树",-1),dc=n("code",null,"数组",-1),kc=n("code",null,"哈希表",-1),hc=n("code",null,"2+",-1),_c=n("td",{style:{"text-align":"center"}},"🟠",-1),mc={style:{"text-align":"center"}},bc={href:"https://leetcode.cn/problems/construct-binary-tree-from-preorder-and-postorder-traversal",target:"_blank",rel:"noopener noreferrer"},vc={href:"https://leetcode.com/problems/construct-binary-tree-from-preorder-and-postorder-traversal",target:"_blank",rel:"noopener noreferrer"},gc=n("h4",{id:"二叉搜索树",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#二叉搜索树","aria-hidden":"true"},"#"),t(" 二叉搜索树")],-1),fc=n("thead",null,[n("tr",null,[n("th",{style:{"text-align":"center"}},"题号"),n("th",{style:{"text-align":"left"}},"标题"),n("th",{style:{"text-align":"center"}},"题解"),n("th",{style:{"text-align":"left"}},"标签"),n("th",{style:{"text-align":"center"}},"难度"),n("th",{style:{"text-align":"center"}},"力扣")])],-1),yc=n("td",{style:{"text-align":"center"}},"98",-1),xc=n("td",{style:{"text-align":"left"}},"验证二叉搜索树",-1),wc={style:{"text-align":"center"}},jc={style:{"text-align":"left"}},Tc=n("code",null,"树",-1),qc=n("code",null,"深度优先搜索",-1),Sc=n("code",null,"二叉搜索树",-1),Ac=n("code",null,"1+",-1),Lc=n("td",{style:{"text-align":"center"}},"🟠",-1),Bc={style:{"text-align":"center"}},Nc={href:"https://leetcode.cn/problems/validate-binary-search-tree",target:"_blank",rel:"noopener noreferrer"},Oc={href:"https://leetcode.com/problems/validate-binary-search-tree",target:"_blank",rel:"noopener noreferrer"},Ic=n("td",{style:{"text-align":"center"}},"173",-1),Rc=n("td",{style:{"text-align":"left"}},"二叉搜索树迭代器",-1),Cc={style:{"text-align":"center"}},Mc={style:{"text-align":"left"}},zc=n("code",null,"栈",-1),Fc=n("code",null,"树",-1),Vc=n("code",null,"设计",-1),Ec=n("code",null,"3+",-1),Dc=n("td",{style:{"text-align":"center"}},"🟠",-1),Jc={style:{"text-align":"center"}},Kc={href:"https://leetcode.cn/problems/binary-search-tree-iterator",target:"_blank",rel:"noopener noreferrer"},Pc={href:"https://leetcode.com/problems/binary-search-tree-iterator",target:"_blank",rel:"noopener noreferrer"},Hc=n("td",{style:{"text-align":"center"}},"700",-1),Wc=n("td",{style:{"text-align":"left"}},"二叉搜索树中的搜索",-1),Xc={style:{"text-align":"center"}},Uc={style:{"text-align":"left"}},$c=n("code",null,"树",-1),Gc=n("code",null,"二叉搜索树",-1),Qc=n("code",null,"二叉树",-1),Yc=n("td",{style:{"text-align":"center"}},"🟢",-1),Zc={style:{"text-align":"center"}},np={href:"https://leetcode.cn/problems/search-in-a-binary-search-tree",target:"_blank",rel:"noopener noreferrer"},tp={href:"https://leetcode.com/problems/search-in-a-binary-search-tree",target:"_blank",rel:"noopener noreferrer"},sp=n("td",{style:{"text-align":"center"}},"701",-1),ep=n("td",{style:{"text-align":"left"}},"二叉搜索树中的插入操作",-1),ap={style:{"text-align":"center"}},op={style:{"text-align":"left"}},lp=n("code",null,"树",-1),cp=n("code",null,"二叉搜索树",-1),pp=n("code",null,"二叉树",-1),ip=n("td",{style:{"text-align":"center"}},"🟠",-1),up={style:{"text-align":"center"}},rp={href:"https://leetcode.cn/problems/insert-into-a-binary-search-tree",target:"_blank",rel:"noopener noreferrer"},dp={href:"https://leetcode.com/problems/insert-into-a-binary-search-tree",target:"_blank",rel:"noopener noreferrer"},kp=n("td",{style:{"text-align":"center"}},"450",-1),hp=n("td",{style:{"text-align":"left"}},"删除二叉搜索树中的节点",-1),_p={style:{"text-align":"center"}},mp={style:{"text-align":"left"}},bp=n("code",null,"树",-1),vp=n("code",null,"二叉搜索树",-1),gp=n("code",null,"二叉树",-1),fp=n("td",{style:{"text-align":"center"}},"🟠",-1),yp={style:{"text-align":"center"}},xp={href:"https://leetcode.cn/problems/delete-node-in-a-bst",target:"_blank",rel:"noopener noreferrer"},wp={href:"https://leetcode.com/problems/delete-node-in-a-bst",target:"_blank",rel:"noopener noreferrer"},jp=n("td",{style:{"text-align":"center"}},"703",-1),Tp=n("td",{style:{"text-align":"left"}},"数据流中的第 K 大元素",-1),qp={style:{"text-align":"center"}},Sp={style:{"text-align":"left"}},Ap=n("code",null,"树",-1),Lp=n("code",null,"设计",-1),Bp=n("code",null,"二叉搜索树",-1),Np=n("code",null,"3+",-1),Op=n("td",{style:{"text-align":"center"}},"🟢",-1),Ip={style:{"text-align":"center"}},Rp={href:"https://leetcode.cn/problems/kth-largest-element-in-a-stream",target:"_blank",rel:"noopener noreferrer"},Cp={href:"https://leetcode.com/problems/kth-largest-element-in-a-stream",target:"_blank",rel:"noopener noreferrer"},Mp=n("td",{style:{"text-align":"center"}},"剑指 Offer 54",-1),zp=n("td",{style:{"text-align":"left"}},"二叉搜索树的第k大节点",-1),Fp={style:{"text-align":"center"}},Vp={style:{"text-align":"left"}},Ep=n("code",null,"树",-1),Dp=n("code",null,"深度优先搜索",-1),Jp=n("code",null,"二叉搜索树",-1),Kp=n("code",null,"1+",-1),Pp=n("td",{style:{"text-align":"center"}},"🟢",-1),Hp={style:{"text-align":"center"}},Wp={href:"https://leetcode.cn/problems/er-cha-sou-suo-shu-de-di-kda-jie-dian-lcof",target:"_blank",rel:"noopener noreferrer"},Xp=n("td",{style:{"text-align":"center"}},"230",-1),Up=n("td",{style:{"text-align":"left"}},"二叉搜索树中第 K 小的元素",-1),$p={style:{"text-align":"center"}},Gp={style:{"text-align":"left"}},Qp=n("code",null,"树",-1),Yp=n("code",null,"深度优先搜索",-1),Zp=n("code",null,"二叉搜索树",-1),ni=n("code",null,"1+",-1),ti=n("td",{style:{"text-align":"center"}},"🟠",-1),si={style:{"text-align":"center"}},ei={href:"https://leetcode.cn/problems/kth-smallest-element-in-a-bst",target:"_blank",rel:"noopener noreferrer"},ai={href:"https://leetcode.com/problems/kth-smallest-element-in-a-bst",target:"_blank",rel:"noopener noreferrer"},oi=n("td",{style:{"text-align":"center"}},"235",-1),li=n("td",{style:{"text-align":"left"}},"二叉搜索树的最近公共祖先",-1),ci={style:{"text-align":"center"}},pi={style:{"text-align":"left"}},ii=n("code",null,"树",-1),ui=n("code",null,"深度优先搜索",-1),ri=n("code",null,"二叉搜索树",-1),di=n("code",null,"1+",-1),ki=n("td",{style:{"text-align":"center"}},"🟠",-1),hi={style:{"text-align":"center"}},_i={href:"https://leetcode.cn/problems/lowest-common-ancestor-of-a-binary-search-tree",target:"_blank",rel:"noopener noreferrer"},mi={href:"https://leetcode.com/problems/lowest-common-ancestor-of-a-binary-search-tree",target:"_blank",rel:"noopener noreferrer"},bi=n("td",{style:{"text-align":"center"}},"426",-1),vi=n("td",{style:{"text-align":"left"}},"将二叉搜索树转化为排序的双向链表 🔒",-1),gi={style:{"text-align":"center"}},fi={style:{"text-align":"left"}},yi=n("code",null,"栈",-1),xi=n("code",null,"树",-1),wi=n("code",null,"深度优先搜索",-1),ji=n("code",null,"4+",-1),Ti=n("td",{style:{"text-align":"center"}},"🟠",-1),qi={style:{"text-align":"center"}},Si={href:"https://leetcode.cn/problems/convert-binary-search-tree-to-sorted-doubly-linked-list",target:"_blank",rel:"noopener noreferrer"},Ai={href:"https://leetcode.com/problems/convert-binary-search-tree-to-sorted-doubly-linked-list",target:"_blank",rel:"noopener noreferrer"},Li=n("td",{style:{"text-align":"center"}},"108",-1),Bi=n("td",{style:{"text-align":"left"}},"将有序数组转换为二叉搜索树",-1),Ni={style:{"text-align":"center"}},Oi={style:{"text-align":"left"}},Ii=n("code",null,"树",-1),Ri=n("code",null,"二叉搜索树",-1),Ci=n("code",null,"数组",-1),Mi=n("code",null,"2+",-1),zi=n("td",{style:{"text-align":"center"}},"🟢",-1),Fi={style:{"text-align":"center"}},Vi={href:"https://leetcode.cn/problems/convert-sorted-array-to-binary-search-tree",target:"_blank",rel:"noopener noreferrer"},Ei={href:"https://leetcode.com/problems/convert-sorted-array-to-binary-search-tree",target:"_blank",rel:"noopener noreferrer"},Di=n("td",{style:{"text-align":"center"}},"110",-1),Ji=n("td",{style:{"text-align":"left"}},"平衡二叉树",-1),Ki={style:{"text-align":"center"}},Pi={style:{"text-align":"left"}},Hi=n("code",null,"树",-1),Wi=n("code",null,"深度优先搜索",-1),Xi=n("code",null,"二叉树",-1),Ui=n("td",{style:{"text-align":"center"}},"🟢",-1),$i={style:{"text-align":"center"}},Gi={href:"https://leetcode.cn/problems/balanced-binary-tree",target:"_blank",rel:"noopener noreferrer"},Qi={href:"https://leetcode.com/problems/balanced-binary-tree",target:"_blank",rel:"noopener noreferrer"},Yi=n("h4",{id:"线段树-1",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#线段树-1","aria-hidden":"true"},"#"),t(" 线段树")],-1),Zi=n("ul",null,[n("li",null,"单点更新")],-1),nu=n("thead",null,[n("tr",null,[n("th",{style:{"text-align":"center"}},"题号"),n("th",{style:{"text-align":"left"}},"标题"),n("th",{style:{"text-align":"center"}},"题解"),n("th",{style:{"text-align":"left"}},"标签"),n("th",{style:{"text-align":"center"}},"难度"),n("th",{style:{"text-align":"center"}},"力扣")])],-1),tu=n("td",{style:{"text-align":"center"}},"303",-1),su=n("td",{style:{"text-align":"left"}},"区域和检索 - 数组不可变",-1),eu={style:{"text-align":"center"}},au={style:{"text-align":"left"}},ou=n("code",null,"设计",-1),lu=n("code",null,"数组",-1),cu=n("code",null,"前缀和",-1),pu=n("td",{style:{"text-align":"center"}},"🟢",-1),iu={style:{"text-align":"center"}},uu={href:"https://leetcode.cn/problems/range-sum-query-immutable",target:"_blank",rel:"noopener noreferrer"},ru={href:"https://leetcode.com/problems/range-sum-query-immutable",target:"_blank",rel:"noopener noreferrer"},du=n("td",{style:{"text-align":"center"}},"307",-1),ku=n("td",{style:{"text-align":"left"}},"区域和检索 - 数组可修改",-1),hu={style:{"text-align":"center"}},_u={style:{"text-align":"left"}},mu=n("code",null,"设计",-1),bu=n("code",null,"树状数组",-1),vu=n("code",null,"线段树",-1),gu=n("code",null,"1+",-1),fu=n("td",{style:{"text-align":"center"}},"🟠",-1),yu={style:{"text-align":"center"}},xu={href:"https://leetcode.cn/problems/range-sum-query-mutable",target:"_blank",rel:"noopener noreferrer"},wu={href:"https://leetcode.com/problems/range-sum-query-mutable",target:"_blank",rel:"noopener noreferrer"},ju=n("td",{style:{"text-align":"center"}},"354",-1),Tu=n("td",{style:{"text-align":"left"}},"俄罗斯套娃信封问题",-1),qu={style:{"text-align":"center"}},Su={style:{"text-align":"left"}},Au=n("code",null,"数组",-1),Lu=n("code",null,"二分查找",-1),Bu=n("code",null,"动态规划",-1),Nu=n("code",null,"1+",-1),Ou=n("td",{style:{"text-align":"center"}},"🔴",-1),Iu={style:{"text-align":"center"}},Ru={href:"https://leetcode.cn/problems/russian-doll-envelopes",target:"_blank",rel:"noopener noreferrer"},Cu={href:"https://leetcode.com/problems/russian-doll-envelopes",target:"_blank",rel:"noopener noreferrer"},Mu=n("ul",null,[n("li",null,"区间更新")],-1),zu=n("thead",null,[n("tr",null,[n("th",{style:{"text-align":"center"}},"题号"),n("th",{style:{"text-align":"left"}},"标题"),n("th",{style:{"text-align":"center"}},"题解"),n("th",{style:{"text-align":"left"}},"标签"),n("th",{style:{"text-align":"center"}},"难度"),n("th",{style:{"text-align":"center"}},"力扣")])],-1),Fu=n("td",{style:{"text-align":"center"}},"370",-1),Vu=n("td",{style:{"text-align":"left"}},"区间加法 🔒",-1),Eu=n("td",{style:{"text-align":"center"}},null,-1),Du={style:{"text-align":"left"}},Ju=n("code",null,"数组",-1),Ku=n("code",null,"前缀和",-1),Pu=n("td",{style:{"text-align":"center"}},"🟠",-1),Hu={style:{"text-align":"center"}},Wu={href:"https://leetcode.cn/problems/range-addition",target:"_blank",rel:"noopener noreferrer"},Xu={href:"https://leetcode.com/problems/range-addition",target:"_blank",rel:"noopener noreferrer"},Uu=n("td",{style:{"text-align":"center"}},"1109",-1),$u=n("td",{style:{"text-align":"left"}},"航班预订统计",-1),Gu=n("td",{style:{"text-align":"center"}},null,-1),Qu={style:{"text-align":"left"}},Yu=n("code",null,"数组",-1),Zu=n("code",null,"前缀和",-1),nr=n("td",{style:{"text-align":"center"}},"🟠",-1),tr={style:{"text-align":"center"}},sr={href:"https://leetcode.cn/problems/corporate-flight-bookings",target:"_blank",rel:"noopener noreferrer"},er={href:"https://leetcode.com/problems/corporate-flight-bookings",target:"_blank",rel:"noopener noreferrer"},ar=n("td",{style:{"text-align":"center"}},"1450",-1),or=n("td",{style:{"text-align":"left"}},"在既定时间做作业的学生人数",-1),lr={style:{"text-align":"center"}},cr={style:{"text-align":"left"}},pr=n("code",null,"数组",-1),ir=n("td",{style:{"text-align":"center"}},"🟢",-1),ur={style:{"text-align":"center"}},rr={href:"https://leetcode.cn/problems/number-of-students-doing-homework-at-a-given-time",target:"_blank",rel:"noopener noreferrer"},dr={href:"https://leetcode.com/problems/number-of-students-doing-homework-at-a-given-time",target:"_blank",rel:"noopener noreferrer"},kr=n("td",{style:{"text-align":"center"}},"673",-1),hr=n("td",{style:{"text-align":"left"}},"最长递增子序列的个数",-1),_r={style:{"text-align":"center"}},mr={style:{"text-align":"left"}},br=n("code",null,"树状数组",-1),vr=n("code",null,"线段树",-1),gr=n("code",null,"数组",-1),fr=n("code",null,"1+",-1),yr=n("td",{style:{"text-align":"center"}},"🟠",-1),xr={style:{"text-align":"center"}},wr={href:"https://leetcode.cn/problems/number-of-longest-increasing-subsequence",target:"_blank",rel:"noopener noreferrer"},jr={href:"https://leetcode.com/problems/number-of-longest-increasing-subsequence",target:"_blank",rel:"noopener noreferrer"},Tr=n("td",{style:{"text-align":"center"}},"1310",-1),qr=n("td",{style:{"text-align":"left"}},"子数组异或查询",-1),Sr=n("td",{style:{"text-align":"center"}},null,-1),Ar={style:{"text-align":"left"}},Lr=n("code",null,"位运算",-1),Br=n("code",null,"数组",-1),Nr=n("code",null,"前缀和",-1),Or=n("td",{style:{"text-align":"center"}},"🟠",-1),Ir={style:{"text-align":"center"}},Rr={href:"https://leetcode.cn/problems/xor-queries-of-a-subarray",target:"_blank",rel:"noopener noreferrer"},Cr={href:"https://leetcode.com/problems/xor-queries-of-a-subarray",target:"_blank",rel:"noopener noreferrer"},Mr=n("td",{style:{"text-align":"center"}},"1851",-1),zr=n("td",{style:{"text-align":"left"}},"包含每个查询的最小区间",-1),Fr=n("td",{style:{"text-align":"center"}},null,-1),Vr={style:{"text-align":"left"}},Er=n("code",null,"数组",-1),Dr=n("code",null,"二分查找",-1),Jr=n("code",null,"排序",-1),Kr=n("code",null,"2+",-1),Pr=n("td",{style:{"text-align":"center"}},"🔴",-1),Hr={style:{"text-align":"center"}},Wr={href:"https://leetcode.cn/problems/minimum-interval-to-include-each-query",target:"_blank",rel:"noopener noreferrer"},Xr={href:"https://leetcode.com/problems/minimum-interval-to-include-each-query",target:"_blank",rel:"noopener noreferrer"},Ur=n("ul",null,[n("li",null,"区间合并")],-1),$r=n("thead",null,[n("tr",null,[n("th",{style:{"text-align":"center"}},"题号"),n("th",{style:{"text-align":"left"}},"标题"),n("th",{style:{"text-align":"center"}},"题解"),n("th",{style:{"text-align":"left"}},"标签"),n("th",{style:{"text-align":"center"}},"难度"),n("th",{style:{"text-align":"center"}},"力扣")])],-1),Gr=n("td",{style:{"text-align":"center"}},"729",-1),Qr=n("td",{style:{"text-align":"left"}},"我的日程安排表 I",-1),Yr={style:{"text-align":"center"}},Zr={style:{"text-align":"left"}},nd=n("code",null,"设计",-1),td=n("code",null,"线段树",-1),sd=n("code",null,"数组",-1),ed=n("code",null,"2+",-1),ad=n("td",{style:{"text-align":"center"}},"🟠",-1),od={style:{"text-align":"center"}},ld={href:"https://leetcode.cn/problems/my-calendar-i",target:"_blank",rel:"noopener noreferrer"},cd={href:"https://leetcode.com/problems/my-calendar-i",target:"_blank",rel:"noopener noreferrer"},pd=n("td",{style:{"text-align":"center"}},"731",-1),id=n("td",{style:{"text-align":"left"}},"我的日程安排表 II",-1),ud={style:{"text-align":"center"}},rd={style:{"text-align":"left"}},dd=n("code",null,"设计",-1),kd=n("code",null,"线段树",-1),hd=n("code",null,"数组",-1),_d=n("code",null,"3+",-1),md=n("td",{style:{"text-align":"center"}},"🟠",-1),bd={style:{"text-align":"center"}},vd={href:"https://leetcode.cn/problems/my-calendar-ii",target:"_blank",rel:"noopener noreferrer"},gd={href:"https://leetcode.com/problems/my-calendar-ii",target:"_blank",rel:"noopener noreferrer"},fd=n("td",{style:{"text-align":"center"}},"732",-1),yd=n("td",{style:{"text-align":"left"}},"我的日程安排表 III",-1),xd=n("td",{style:{"text-align":"center"}},null,-1),wd={style:{"text-align":"left"}},jd=n("code",null,"设计",-1),Td=n("code",null,"线段树",-1),qd=n("code",null,"二分查找",-1),Sd=n("code",null,"2+",-1),Ad=n("td",{style:{"text-align":"center"}},"🔴",-1),Ld={style:{"text-align":"center"}},Bd={href:"https://leetcode.cn/problems/my-calendar-iii",target:"_blank",rel:"noopener noreferrer"},Nd={href:"https://leetcode.com/problems/my-calendar-iii",target:"_blank",rel:"noopener noreferrer"},Od=n("ul",null,[n("li",null,"扫描线问题")],-1),Id=n("thead",null,[n("tr",null,[n("th",{style:{"text-align":"center"}},"题号"),n("th",{style:{"text-align":"left"}},"标题"),n("th",{style:{"text-align":"center"}},"题解"),n("th",{style:{"text-align":"left"}},"标签"),n("th",{style:{"text-align":"center"}},"难度"),n("th",{style:{"text-align":"center"}},"力扣")])],-1),Rd=n("td",{style:{"text-align":"center"}},"218",-1),Cd=n("td",{style:{"text-align":"left"}},"天际线问题",-1),Md=n("td",{style:{"text-align":"center"}},null,-1),zd={style:{"text-align":"left"}},Fd=n("code",null,"树状数组",-1),Vd=n("code",null,"线段树",-1),Ed=n("code",null,"数组",-1),Dd=n("code",null,"4+",-1),Jd=n("td",{style:{"text-align":"center"}},"🔴",-1),Kd={style:{"text-align":"center"}},Pd={href:"https://leetcode.cn/problems/the-skyline-problem",target:"_blank",rel:"noopener noreferrer"},Hd={href:"https://leetcode.com/problems/the-skyline-problem",target:"_blank",rel:"noopener noreferrer"},Wd=n("td",{style:{"text-align":"center"}},"391",-1),Xd=n("td",{style:{"text-align":"left"}},"完美矩形",-1),Ud=n("td",{style:{"text-align":"center"}},null,-1),$d={style:{"text-align":"left"}},Gd=n("code",null,"数组",-1),Qd=n("code",null,"扫描线",-1),Yd=n("td",{style:{"text-align":"center"}},"🔴",-1),Zd={style:{"text-align":"center"}},nk={href:"https://leetcode.cn/problems/perfect-rectangle",target:"_blank",rel:"noopener noreferrer"},tk={href:"https://leetcode.com/problems/perfect-rectangle",target:"_blank",rel:"noopener noreferrer"},sk=n("td",{style:{"text-align":"center"}},"850",-1),ek=n("td",{style:{"text-align":"left"}},"矩形面积 II",-1),ak=n("td",{style:{"text-align":"center"}},null,-1),ok={style:{"text-align":"left"}},lk=n("code",null,"线段树",-1),ck=n("code",null,"数组",-1),pk=n("code",null,"有序集合",-1),ik=n("code",null,"1+",-1),uk=n("td",{style:{"text-align":"center"}},"🔴",-1),rk={style:{"text-align":"center"}},dk={href:"https://leetcode.cn/problems/rectangle-area-ii",target:"_blank",rel:"noopener noreferrer"},kk={href:"https://leetcode.com/problems/rectangle-area-ii",target:"_blank",rel:"noopener noreferrer"},hk=n("h4",{id:"树状数组",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#树状数组","aria-hidden":"true"},"#"),t(" 树状数组")],-1),_k=n("thead",null,[n("tr",null,[n("th",{style:{"text-align":"center"}},"题号"),n("th",{style:{"text-align":"left"}},"标题"),n("th",{style:{"text-align":"center"}},"题解"),n("th",{style:{"text-align":"left"}},"标签"),n("th",{style:{"text-align":"center"}},"难度"),n("th",{style:{"text-align":"center"}},"力扣")])],-1),mk=n("td",{style:{"text-align":"center"}},"303",-1),bk=n("td",{style:{"text-align":"left"}},"区域和检索 - 数组不可变",-1),vk={style:{"text-align":"center"}},gk={style:{"text-align":"left"}},fk=n("code",null,"设计",-1),yk=n("code",null,"数组",-1),xk=n("code",null,"前缀和",-1),wk=n("td",{style:{"text-align":"center"}},"🟢",-1),jk={style:{"text-align":"center"}},Tk={href:"https://leetcode.cn/problems/range-sum-query-immutable",target:"_blank",rel:"noopener noreferrer"},qk={href:"https://leetcode.com/problems/range-sum-query-immutable",target:"_blank",rel:"noopener noreferrer"},Sk=n("td",{style:{"text-align":"center"}},"307",-1),Ak=n("td",{style:{"text-align":"left"}},"区域和检索 - 数组可修改",-1),Lk={style:{"text-align":"center"}},Bk={style:{"text-align":"left"}},Nk=n("code",null,"设计",-1),Ok=n("code",null,"树状数组",-1),Ik=n("code",null,"线段树",-1),Rk=n("code",null,"1+",-1),Ck=n("td",{style:{"text-align":"center"}},"🟠",-1),Mk={style:{"text-align":"center"}},zk={href:"https://leetcode.cn/problems/range-sum-query-mutable",target:"_blank",rel:"noopener noreferrer"},Fk={href:"https://leetcode.com/problems/range-sum-query-mutable",target:"_blank",rel:"noopener noreferrer"},Vk=n("td",{style:{"text-align":"center"}},"315",-1),Ek=n("td",{style:{"text-align":"left"}},"计算右侧小于当前元素的个数",-1),Dk=n("td",{style:{"text-align":"center"}},null,-1),Jk={style:{"text-align":"left"}},Kk=n("code",null,"树状数组",-1),Pk=n("code",null,"线段树",-1),Hk=n("code",null,"数组",-1),Wk=n("code",null,"4+",-1),Xk=n("td",{style:{"text-align":"center"}},"🔴",-1),Uk={style:{"text-align":"center"}},$k={href:"https://leetcode.cn/problems/count-of-smaller-numbers-after-self",target:"_blank",rel:"noopener noreferrer"},Gk={href:"https://leetcode.com/problems/count-of-smaller-numbers-after-self",target:"_blank",rel:"noopener noreferrer"},Qk=n("td",{style:{"text-align":"center"}},"1450",-1),Yk=n("td",{style:{"text-align":"left"}},"在既定时间做作业的学生人数",-1),Zk={style:{"text-align":"center"}},nh={style:{"text-align":"left"}},th=n("code",null,"数组",-1),sh=n("td",{style:{"text-align":"center"}},"🟢",-1),eh={style:{"text-align":"center"}},ah={href:"https://leetcode.cn/problems/number-of-students-doing-homework-at-a-given-time",target:"_blank",rel:"noopener noreferrer"},oh={href:"https://leetcode.com/problems/number-of-students-doing-homework-at-a-given-time",target:"_blank",rel:"noopener noreferrer"},lh=n("td",{style:{"text-align":"center"}},"354",-1),ch=n("td",{style:{"text-align":"left"}},"俄罗斯套娃信封问题",-1),ph={style:{"text-align":"center"}},ih={style:{"text-align":"left"}},uh=n("code",null,"数组",-1),rh=n("code",null,"二分查找",-1),dh=n("code",null,"动态规划",-1),kh=n("code",null,"1+",-1),hh=n("td",{style:{"text-align":"center"}},"🔴",-1),_h={style:{"text-align":"center"}},mh={href:"https://leetcode.cn/problems/russian-doll-envelopes",target:"_blank",rel:"noopener noreferrer"},bh={href:"https://leetcode.com/problems/russian-doll-envelopes",target:"_blank",rel:"noopener noreferrer"},vh=n("td",{style:{"text-align":"center"}},"673",-1),gh=n("td",{style:{"text-align":"left"}},"最长递增子序列的个数",-1),fh={style:{"text-align":"center"}},yh={style:{"text-align":"left"}},xh=n("code",null,"树状数组",-1),wh=n("code",null,"线段树",-1),jh=n("code",null,"数组",-1),Th=n("code",null,"1+",-1),qh=n("td",{style:{"text-align":"center"}},"🟠",-1),Sh={style:{"text-align":"center"}},Ah={href:"https://leetcode.cn/problems/number-of-longest-increasing-subsequence",target:"_blank",rel:"noopener noreferrer"},Lh={href:"https://leetcode.com/problems/number-of-longest-increasing-subsequence",target:"_blank",rel:"noopener noreferrer"},Bh=n("td",{style:{"text-align":"center"}},"1310",-1),Nh=n("td",{style:{"text-align":"left"}},"子数组异或查询",-1),Oh=n("td",{style:{"text-align":"center"}},null,-1),Ih={style:{"text-align":"left"}},Rh=n("code",null,"位运算",-1),Ch=n("code",null,"数组",-1),Mh=n("code",null,"前缀和",-1),zh=n("td",{style:{"text-align":"center"}},"🟠",-1),Fh={style:{"text-align":"center"}},Vh={href:"https://leetcode.cn/problems/xor-queries-of-a-subarray",target:"_blank",rel:"noopener noreferrer"},Eh={href:"https://leetcode.com/problems/xor-queries-of-a-subarray",target:"_blank",rel:"noopener noreferrer"},Dh=n("td",{style:{"text-align":"center"}},"1893",-1),Jh=n("td",{style:{"text-align":"left"}},"检查是否区域内所有整数都被覆盖",-1),Kh={style:{"text-align":"center"}},Ph={style:{"text-align":"left"}},Hh=n("code",null,"数组",-1),Wh=n("code",null,"哈希表",-1),Xh=n("code",null,"前缀和",-1),Uh=n("td",{style:{"text-align":"center"}},"🟢",-1),$h={style:{"text-align":"center"}},Gh={href:"https://leetcode.cn/problems/check-if-all-the-integers-in-a-range-are-covered",target:"_blank",rel:"noopener noreferrer"},Qh={href:"https://leetcode.com/problems/check-if-all-the-integers-in-a-range-are-covered",target:"_blank",rel:"noopener noreferrer"},Yh=n("h4",{id:"并查集",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#并查集","aria-hidden":"true"},"#"),t(" 并查集")],-1),Zh=n("thead",null,[n("tr",null,[n("th",{style:{"text-align":"center"}},"题号"),n("th",{style:{"text-align":"left"}},"标题"),n("th",{style:{"text-align":"center"}},"题解"),n("th",{style:{"text-align":"left"}},"标签"),n("th",{style:{"text-align":"center"}},"难度"),n("th",{style:{"text-align":"center"}},"力扣")])],-1),n_=n("td",{style:{"text-align":"center"}},"990",-1),t_=n("td",{style:{"text-align":"left"}},"等式方程的可满足性",-1),s_=n("td",{style:{"text-align":"center"}},null,-1),e_={style:{"text-align":"left"}},a_=n("code",null,"并查集",-1),o_=n("code",null,"图",-1),l_=n("code",null,"数组",-1),c_=n("code",null,"1+",-1),p_=n("td",{style:{"text-align":"center"}},"🟠",-1),i_={style:{"text-align":"center"}},u_={href:"https://leetcode.cn/problems/satisfiability-of-equality-equations",target:"_blank",rel:"noopener noreferrer"},r_={href:"https://leetcode.com/problems/satisfiability-of-equality-equations",target:"_blank",rel:"noopener noreferrer"},d_=n("td",{style:{"text-align":"center"}},"547",-1),k_=n("td",{style:{"text-align":"left"}},"省份数量",-1),h_={style:{"text-align":"center"}},__={style:{"text-align":"left"}},m_=n("code",null,"深度优先搜索",-1),b_=n("code",null,"广度优先搜索",-1),v_=n("code",null,"并查集",-1),g_=n("code",null,"1+",-1),f_=n("td",{style:{"text-align":"center"}},"🟠",-1),y_={style:{"text-align":"center"}},x_={href:"https://leetcode.cn/problems/number-of-provinces",target:"_blank",rel:"noopener noreferrer"},w_={href:"https://leetcode.com/problems/number-of-provinces",target:"_blank",rel:"noopener noreferrer"},j_=n("td",{style:{"text-align":"center"}},"684",-1),T_=n("td",{style:{"text-align":"left"}},"冗余连接",-1),q_={style:{"text-align":"center"}},S_={style:{"text-align":"left"}},A_=n("code",null,"深度优先搜索",-1),L_=n("code",null,"广度优先搜索",-1),B_=n("code",null,"并查集",-1),N_=n("code",null,"1+",-1),O_=n("td",{style:{"text-align":"center"}},"🟠",-1),I_={style:{"text-align":"center"}},R_={href:"https://leetcode.cn/problems/redundant-connection",target:"_blank",rel:"noopener noreferrer"},C_={href:"https://leetcode.com/problems/redundant-connection",target:"_blank",rel:"noopener noreferrer"},M_=n("td",{style:{"text-align":"center"}},"1319",-1),z_=n("td",{style:{"text-align":"left"}},"连通网络的操作次数",-1),F_=n("td",{style:{"text-align":"center"}},null,-1),V_={style:{"text-align":"left"}},E_=n("code",null,"深度优先搜索",-1),D_=n("code",null,"广度优先搜索",-1),J_=n("code",null,"并查集",-1),K_=n("code",null,"1+",-1),P_=n("td",{style:{"text-align":"center"}},"🟠",-1),H_={style:{"text-align":"center"}},W_={href:"https://leetcode.cn/problems/number-of-operations-to-make-network-connected",target:"_blank",rel:"noopener noreferrer"},X_={href:"https://leetcode.com/problems/number-of-operations-to-make-network-connected",target:"_blank",rel:"noopener noreferrer"},U_=n("td",{style:{"text-align":"center"}},"765",-1),$_=n("td",{style:{"text-align":"left"}},"情侣牵手",-1),G_=n("td",{style:{"text-align":"center"}},null,-1),Q_={style:{"text-align":"left"}},Y_=n("code",null,"贪心",-1),Z_=n("code",null,"深度优先搜索",-1),nm=n("code",null,"广度优先搜索",-1),tm=n("code",null,"2+",-1),sm=n("td",{style:{"text-align":"center"}},"🔴",-1),em={style:{"text-align":"center"}},am={href:"https://leetcode.cn/problems/couples-holding-hands",target:"_blank",rel:"noopener noreferrer"},om={href:"https://leetcode.com/problems/couples-holding-hands",target:"_blank",rel:"noopener noreferrer"},lm=n("td",{style:{"text-align":"center"}},"399",-1),cm=n("td",{style:{"text-align":"left"}},"除法求值",-1),pm={style:{"text-align":"center"}},im={style:{"text-align":"left"}},um=n("code",null,"深度优先搜索",-1),rm=n("code",null,"广度优先搜索",-1),dm=n("code",null,"并查集",-1),km=n("code",null,"4+",-1),hm=n("td",{style:{"text-align":"center"}},"🟠",-1),_m={style:{"text-align":"center"}},mm={href:"https://leetcode.cn/problems/evaluate-division",target:"_blank",rel:"noopener noreferrer"},bm={href:"https://leetcode.com/problems/evaluate-division",target:"_blank",rel:"noopener noreferrer"},vm=n("td",{style:{"text-align":"center"}},"959",-1),gm=n("td",{style:{"text-align":"left"}},"由斜杠划分区域",-1),fm=n("td",{style:{"text-align":"center"}},null,-1),ym={style:{"text-align":"left"}},xm=n("code",null,"深度优先搜索",-1),wm=n("code",null,"广度优先搜索",-1),jm=n("code",null,"并查集",-1),Tm=n("code",null,"3+",-1),qm=n("td",{style:{"text-align":"center"}},"🟠",-1),Sm={style:{"text-align":"center"}},Am={href:"https://leetcode.cn/problems/regions-cut-by-slashes",target:"_blank",rel:"noopener noreferrer"},Lm={href:"https://leetcode.com/problems/regions-cut-by-slashes",target:"_blank",rel:"noopener noreferrer"},Bm=n("td",{style:{"text-align":"center"}},"1631",-1),Nm=n("td",{style:{"text-align":"left"}},"最小体力消耗路径",-1),Om=n("td",{style:{"text-align":"center"}},null,-1),Im={style:{"text-align":"left"}},Rm=n("code",null,"深度优先搜索",-1),Cm=n("code",null,"广度优先搜索",-1),Mm=n("code",null,"并查集",-1),zm=n("code",null,"4+",-1),Fm=n("td",{style:{"text-align":"center"}},"🟠",-1),Vm={style:{"text-align":"center"}},Em={href:"https://leetcode.cn/problems/path-with-minimum-effort",target:"_blank",rel:"noopener noreferrer"},Dm={href:"https://leetcode.com/problems/path-with-minimum-effort",target:"_blank",rel:"noopener noreferrer"},Jm=n("td",{style:{"text-align":"center"}},"778",-1),Km=n("td",{style:{"text-align":"left"}},"水位上升的泳池中游泳",-1),Pm=n("td",{style:{"text-align":"center"}},null,-1),Hm={style:{"text-align":"left"}},Wm=n("code",null,"深度优先搜索",-1),Xm=n("code",null,"广度优先搜索",-1),Um=n("code",null,"并查集",-1),$m=n("code",null,"4+",-1),Gm=n("td",{style:{"text-align":"center"}},"🔴",-1),Qm={style:{"text-align":"center"}},Ym={href:"https://leetcode.cn/problems/swim-in-rising-water",target:"_blank",rel:"noopener noreferrer"},Zm={href:"https://leetcode.com/problems/swim-in-rising-water",target:"_blank",rel:"noopener noreferrer"},nb=n("td",{style:{"text-align":"center"}},"1202",-1),tb=n("td",{style:{"text-align":"left"}},"交换字符串中的元素",-1),sb=n("td",{style:{"text-align":"center"}},null,-1),eb={style:{"text-align":"left"}},ab=n("code",null,"深度优先搜索",-1),ob=n("code",null,"广度优先搜索",-1),lb=n("code",null,"并查集",-1),cb=n("code",null,"4+",-1),pb=n("td",{style:{"text-align":"center"}},"🟠",-1),ib={style:{"text-align":"center"}},ub={href:"https://leetcode.cn/problems/smallest-string-with-swaps",target:"_blank",rel:"noopener noreferrer"},rb={href:"https://leetcode.com/problems/smallest-string-with-swaps",target:"_blank",rel:"noopener noreferrer"},db=n("td",{style:{"text-align":"center"}},"947",-1),kb=n("td",{style:{"text-align":"left"}},"移除最多的同行或同列石头",-1),hb=n("td",{style:{"text-align":"center"}},null,-1),_b={style:{"text-align":"left"}},mb=n("code",null,"深度优先搜索",-1),bb=n("code",null,"并查集",-1),vb=n("code",null,"图",-1),gb=n("code",null,"1+",-1),fb=n("td",{style:{"text-align":"center"}},"🟠",-1),yb={style:{"text-align":"center"}},xb={href:"https://leetcode.cn/problems/most-stones-removed-with-same-row-or-column",target:"_blank",rel:"noopener noreferrer"},wb={href:"https://leetcode.com/problems/most-stones-removed-with-same-row-or-column",target:"_blank",rel:"noopener noreferrer"},jb=n("td",{style:{"text-align":"center"}},"803",-1),Tb=n("td",{style:{"text-align":"left"}},"打砖块",-1),qb=n("td",{style:{"text-align":"center"}},null,-1),Sb={style:{"text-align":"left"}},Ab=n("code",null,"并查集",-1),Lb=n("code",null,"数组",-1),Bb=n("code",null,"矩阵",-1),Nb=n("td",{style:{"text-align":"center"}},"🔴",-1),Ob={style:{"text-align":"center"}},Ib={href:"https://leetcode.cn/problems/bricks-falling-when-hit",target:"_blank",rel:"noopener noreferrer"},Rb={href:"https://leetcode.com/problems/bricks-falling-when-hit",target:"_blank",rel:"noopener noreferrer"},Cb=n("td",{style:{"text-align":"center"}},"128",-1),Mb=n("td",{style:{"text-align":"left"}},"最长连续序列",-1),zb={style:{"text-align":"center"}},Fb={style:{"text-align":"left"}},Vb=n("code",null,"并查集",-1),Eb=n("code",null,"数组",-1),Db=n("code",null,"哈希表",-1),Jb=n("td",{style:{"text-align":"center"}},"🟠",-1),Kb={style:{"text-align":"center"}},Pb={href:"https://leetcode.cn/problems/longest-consecutive-sequence",target:"_blank",rel:"noopener noreferrer"},Hb={href:"https://leetcode.com/problems/longest-consecutive-sequence",target:"_blank",rel:"noopener noreferrer"};function Wb(Xb,Ub){const o=r("ExternalLinkIcon"),u=r("CodeTabs"),i=r("MdDemo"),a=r("RouterLink");return _(),m("div",null,[N,s(i,{title:"相关题目",id:"md-demo-158"},{default:e(()=>[n("h4",O,[I,t(" 📌 "),n("a",R,[t("144. 二叉树的前序遍历 - LeetCode"),s(o)])]),C,M,z,F,V,E,D,J,K,P,s(u,{id:"211",data:[{id:"递归"},{id:"迭代"}]},{title0:e(({value:l,isActive:c})=>[t("递归")]),title1:e(({value:l,isActive:c})=>[t("迭代")]),tab0:e(({value:l,isActive:c})=>[H]),tab1:e(({value:l,isActive:c})=>[W]),_:1})]),code:e(()=>[X]),_:1}),U,s(i,{title:"相关题目",id:"md-demo-224"},{default:e(()=>[n("h4",$,[G,t(" 📌 "),n("a",Q,[t("145. 二叉树的后序遍历 - LeetCode"),s(o)])]),Y,Z,nn,tn,sn,en,an,on,ln,s(u,{id:"255",data:[{id:"递归"},{id:"迭代"}]},{title0:e(({value:l,isActive:c})=>[t("递归")]),title1:e(({value:l,isActive:c})=>[t("迭代")]),tab0:e(({value:l,isActive:c})=>[cn]),tab1:e(({value:l,isActive:c})=>[pn]),_:1})]),code:e(()=>[un]),_:1}),rn,s(i,{title:"相关题目",id:"md-demo-268"},{default:e(()=>[n("h4",dn,[kn,t(" 📌 "),n("a",hn,[t("94. 二叉树的中序遍历 - LeetCode"),s(o)])]),_n,mn,bn,vn,gn,fn,yn,xn,wn,s(u,{id:"299",data:[{id:"递归"},{id:"迭代"}]},{title0:e(({value:l,isActive:c})=>[t("递归")]),title1:e(({value:l,isActive:c})=>[t("迭代")]),tab0:e(({value:l,isActive:c})=>[jn]),tab1:e(({value:l,isActive:c})=>[Tn]),_:1})]),code:e(()=>[qn]),_:1}),Sn,s(i,{title:"相关题目",id:"md-demo-312"},{default:e(()=>[n("h4",An,[Ln,t(" 📌 "),n("a",Bn,[t("102. 二叉树的层序遍历 - LeetCode"),s(o)])]),Nn,On,In,Rn,Cn,Mn,zn,Fn,Vn,s(u,{id:"391",data:[{id:"广度优先遍历(BFS)"},{id:"深度优先遍历(DFS)"}]},{title0:e(({value:l,isActive:c})=>[t("广度优先遍历(BFS)")]),title1:e(({value:l,isActive:c})=>[t("深度优先遍历(DFS)")]),tab0:e(({value:l,isActive:c})=>[En]),tab1:e(({value:l,isActive:c})=>[Dn]),_:1})]),code:e(()=>[Jn]),_:1}),Kn,s(i,{title:"相关题目",id:"md-demo-419"},{default:e(()=>[n("h4",Pn,[Hn,t(" 📌 "),n("a",Wn,[t("105. 从前序与中序遍历序列构造二叉树 - LeetCode"),s(o)])]),Xn,Un,$n,Gn,Qn,Yn,Zn,nt,tt,st,n("p",null,[t("类似的题目还有 "),n("a",et,[t("106. 从中序与后序遍历序列构造二叉树 - LeetCode"),s(o)]),t(" 和 "),n("a",at,[t("889. 根据前序和后序遍历构造二叉树 - LeetCode"),s(o)]),t("，原理类似，详见题解。")])]),code:e(()=>[ot]),_:1}),s(i,{title:"相关题目",id:"md-demo-456"},{default:e(()=>[n("h4",lt,[ct,t(" 📌 "),n("a",pt,[t("654. 最大二叉树 - LeetCode"),s(o)])]),it,ut,rt,dt,kt,ht,_t,mt,bt,vt,gt,ft,yt,xt,wt]),code:e(()=>[jt]),_:1}),Tt,s(i,{title:"相关题目",id:"md-demo-922"},{default:e(()=>[n("h4",qt,[St,t(" 📌 "),n("a",At,[t("307. 区域和检索 - 数组可修改 - LeetCode"),s(o)])]),Lt,Bt,Nt,Ot,It,Rt,Ct,Mt,zt,Ft,Vt,Et]),code:e(()=>[Dt]),_:1}),p(" START TABLE "),p(" Please keep comment here to allow auto update "),p(" DON'T EDIT THIS SECTION, INSTEAD RE-RUN `npm run lc` TO UPDATE "),Jt,Kt,p(" prettier-ignore "),n("table",null,[Pt,n("tbody",null,[n("tr",null,[Ht,Wt,n("td",Xt,[s(a,{to:"/problem/0144.html"},{default:e(()=>[t("[✓]")]),_:1})]),n("td",Ut,[s(a,{to:"/tag/stack.html"},{default:e(()=>[$t]),_:1}),t(),s(a,{to:"/tag/tree.html"},{default:e(()=>[Gt]),_:1}),t(),s(a,{to:"/tag/depth-first-search.html"},{default:e(()=>[Qt]),_:1}),t(),Yt]),Zt,n("td",ns,[n("a",ts,[t("🀄️"),s(o)]),t(),n("a",ss,[t("🔗"),s(o)])])]),n("tr",null,[es,as,n("td",os,[s(a,{to:"/problem/0094.html"},{default:e(()=>[t("[✓]")]),_:1})]),n("td",ls,[s(a,{to:"/tag/stack.html"},{default:e(()=>[cs]),_:1}),t(),s(a,{to:"/tag/tree.html"},{default:e(()=>[ps]),_:1}),t(),s(a,{to:"/tag/depth-first-search.html"},{default:e(()=>[is]),_:1}),t(),us]),rs,n("td",ds,[n("a",ks,[t("🀄️"),s(o)]),t(),n("a",hs,[t("🔗"),s(o)])])]),n("tr",null,[_s,ms,n("td",bs,[s(a,{to:"/problem/0145.html"},{default:e(()=>[t("[✓]")]),_:1})]),n("td",vs,[s(a,{to:"/tag/stack.html"},{default:e(()=>[gs]),_:1}),t(),s(a,{to:"/tag/tree.html"},{default:e(()=>[fs]),_:1}),t(),s(a,{to:"/tag/depth-first-search.html"},{default:e(()=>[ys]),_:1}),t(),xs]),ws,n("td",js,[n("a",Ts,[t("🀄️"),s(o)]),t(),n("a",qs,[t("🔗"),s(o)])])]),n("tr",null,[Ss,As,n("td",Ls,[s(a,{to:"/problem/0102.html"},{default:e(()=>[t("[✓]")]),_:1})]),n("td",Bs,[s(a,{to:"/tag/tree.html"},{default:e(()=>[Ns]),_:1}),t(),s(a,{to:"/tag/breadth-first-search.html"},{default:e(()=>[Os]),_:1}),t(),s(a,{to:"/tag/binary-tree.html"},{default:e(()=>[Is]),_:1})]),Rs,n("td",Cs,[n("a",Ms,[t("🀄️"),s(o)]),t(),n("a",zs,[t("🔗"),s(o)])])]),n("tr",null,[Fs,Vs,n("td",Es,[s(a,{to:"/problem/0103.html"},{default:e(()=>[t("[✓]")]),_:1})]),n("td",Ds,[s(a,{to:"/tag/tree.html"},{default:e(()=>[Js]),_:1}),t(),s(a,{to:"/tag/breadth-first-search.html"},{default:e(()=>[Ks]),_:1}),t(),s(a,{to:"/tag/binary-tree.html"},{default:e(()=>[Ps]),_:1})]),Hs,n("td",Ws,[n("a",Xs,[t("🀄️"),s(o)]),t(),n("a",Us,[t("🔗"),s(o)])])]),n("tr",null,[$s,Gs,n("td",Qs,[s(a,{to:"/problem/0107.html"},{default:e(()=>[t("[✓]")]),_:1})]),n("td",Ys,[s(a,{to:"/tag/tree.html"},{default:e(()=>[Zs]),_:1}),t(),s(a,{to:"/tag/breadth-first-search.html"},{default:e(()=>[ne]),_:1}),t(),s(a,{to:"/tag/binary-tree.html"},{default:e(()=>[te]),_:1})]),se,n("td",ee,[n("a",ae,[t("🀄️"),s(o)]),t(),n("a",oe,[t("🔗"),s(o)])])]),n("tr",null,[le,ce,n("td",pe,[s(a,{to:"/problem/0104.html"},{default:e(()=>[t("[✓]")]),_:1})]),n("td",ie,[s(a,{to:"/tag/tree.html"},{default:e(()=>[ue]),_:1}),t(),s(a,{to:"/tag/depth-first-search.html"},{default:e(()=>[re]),_:1}),t(),s(a,{to:"/tag/breadth-first-search.html"},{default:e(()=>[de]),_:1}),t(),ke]),he,n("td",_e,[n("a",me,[t("🀄️"),s(o)]),t(),n("a",be,[t("🔗"),s(o)])])]),n("tr",null,[ve,ge,n("td",fe,[s(a,{to:"/problem/0111.html"},{default:e(()=>[t("[✓]")]),_:1})]),n("td",ye,[s(a,{to:"/tag/tree.html"},{default:e(()=>[xe]),_:1}),t(),s(a,{to:"/tag/depth-first-search.html"},{default:e(()=>[we]),_:1}),t(),s(a,{to:"/tag/breadth-first-search.html"},{default:e(()=>[je]),_:1}),t(),Te]),qe,n("td",Se,[n("a",Ae,[t("🀄️"),s(o)]),t(),n("a",Le,[t("🔗"),s(o)])])]),n("tr",null,[Be,Ne,n("td",Oe,[s(a,{to:"/problem/0124.html"},{default:e(()=>[t("[✓]")]),_:1})]),n("td",Ie,[s(a,{to:"/tag/tree.html"},{default:e(()=>[Re]),_:1}),t(),s(a,{to:"/tag/depth-first-search.html"},{default:e(()=>[Ce]),_:1}),t(),s(a,{to:"/tag/dynamic-programming.html"},{default:e(()=>[Me]),_:1}),t(),ze]),Fe,n("td",Ve,[n("a",Ee,[t("🀄️"),s(o)]),t(),n("a",De,[t("🔗"),s(o)])])]),n("tr",null,[Je,Ke,n("td",Pe,[s(a,{to:"/problem/0101.html"},{default:e(()=>[t("[✓]")]),_:1})]),n("td",He,[s(a,{to:"/tag/tree.html"},{default:e(()=>[We]),_:1}),t(),s(a,{to:"/tag/depth-first-search.html"},{default:e(()=>[Xe]),_:1}),t(),s(a,{to:"/tag/breadth-first-search.html"},{default:e(()=>[Ue]),_:1}),t(),$e]),Ge,n("td",Qe,[n("a",Ye,[t("🀄️"),s(o)]),t(),n("a",Ze,[t("🔗"),s(o)])])]),n("tr",null,[na,ta,n("td",sa,[s(a,{to:"/problem/0112.html"},{default:e(()=>[t("[✓]")]),_:1})]),n("td",ea,[s(a,{to:"/tag/tree.html"},{default:e(()=>[aa]),_:1}),t(),s(a,{to:"/tag/depth-first-search.html"},{default:e(()=>[oa]),_:1}),t(),s(a,{to:"/tag/breadth-first-search.html"},{default:e(()=>[la]),_:1}),t(),ca]),pa,n("td",ia,[n("a",ua,[t("🀄️"),s(o)]),t(),n("a",ra,[t("🔗"),s(o)])])]),n("tr",null,[da,ka,n("td",ha,[s(a,{to:"/problem/0113.html"},{default:e(()=>[t("[✓]")]),_:1})]),n("td",_a,[s(a,{to:"/tag/tree.html"},{default:e(()=>[ma]),_:1}),t(),s(a,{to:"/tag/depth-first-search.html"},{default:e(()=>[ba]),_:1}),t(),s(a,{to:"/tag/backtracking.html"},{default:e(()=>[va]),_:1}),t(),ga]),fa,n("td",ya,[n("a",xa,[t("🀄️"),s(o)]),t(),n("a",wa,[t("🔗"),s(o)])])]),n("tr",null,[ja,Ta,n("td",qa,[s(a,{to:"/problem/0236.html"},{default:e(()=>[t("[✓]")]),_:1})]),n("td",Sa,[s(a,{to:"/tag/tree.html"},{default:e(()=>[Aa]),_:1}),t(),s(a,{to:"/tag/depth-first-search.html"},{default:e(()=>[La]),_:1}),t(),s(a,{to:"/tag/binary-tree.html"},{default:e(()=>[Ba]),_:1})]),Na,n("td",Oa,[n("a",Ia,[t("🀄️"),s(o)]),t(),n("a",Ra,[t("🔗"),s(o)])])]),n("tr",null,[Ca,Ma,n("td",za,[s(a,{to:"/problem/0199.html"},{default:e(()=>[t("[✓]")]),_:1})]),n("td",Fa,[s(a,{to:"/tag/tree.html"},{default:e(()=>[Va]),_:1}),t(),s(a,{to:"/tag/depth-first-search.html"},{default:e(()=>[Ea]),_:1}),t(),s(a,{to:"/tag/breadth-first-search.html"},{default:e(()=>[Da]),_:1}),t(),Ja]),Ka,n("td",Pa,[n("a",Ha,[t("🀄️"),s(o)]),t(),n("a",Wa,[t("🔗"),s(o)])])]),n("tr",null,[Xa,Ua,n("td",$a,[s(a,{to:"/problem/0226.html"},{default:e(()=>[t("[✓]")]),_:1})]),n("td",Ga,[s(a,{to:"/tag/tree.html"},{default:e(()=>[Qa]),_:1}),t(),s(a,{to:"/tag/depth-first-search.html"},{default:e(()=>[Ya]),_:1}),t(),s(a,{to:"/tag/breadth-first-search.html"},{default:e(()=>[Za]),_:1}),t(),no]),to,n("td",so,[n("a",eo,[t("🀄️"),s(o)]),t(),n("a",ao,[t("🔗"),s(o)])])]),n("tr",null,[oo,lo,n("td",co,[s(a,{to:"/problem/0958.html"},{default:e(()=>[t("[✓]")]),_:1})]),n("td",po,[s(a,{to:"/tag/tree.html"},{default:e(()=>[io]),_:1}),t(),s(a,{to:"/tag/breadth-first-search.html"},{default:e(()=>[uo]),_:1}),t(),s(a,{to:"/tag/binary-tree.html"},{default:e(()=>[ro]),_:1})]),ko,n("td",ho,[n("a",_o,[t("🀄️"),s(o)]),t(),n("a",mo,[t("🔗"),s(o)])])]),n("tr",null,[bo,vo,n("td",go,[s(a,{to:"/problem/0572.html"},{default:e(()=>[t("[✓]")]),_:1})]),n("td",fo,[s(a,{to:"/tag/tree.html"},{default:e(()=>[yo]),_:1}),t(),s(a,{to:"/tag/depth-first-search.html"},{default:e(()=>[xo]),_:1}),t(),s(a,{to:"/tag/binary-tree.html"},{default:e(()=>[wo]),_:1}),t(),jo]),To,n("td",qo,[n("a",So,[t("🀄️"),s(o)]),t(),n("a",Ao,[t("🔗"),s(o)])])]),n("tr",null,[Lo,Bo,n("td",No,[s(a,{to:"/problem/0100.html"},{default:e(()=>[t("[✓]")]),_:1})]),n("td",Oo,[s(a,{to:"/tag/tree.html"},{default:e(()=>[Io]),_:1}),t(),s(a,{to:"/tag/depth-first-search.html"},{default:e(()=>[Ro]),_:1}),t(),s(a,{to:"/tag/breadth-first-search.html"},{default:e(()=>[Co]),_:1}),t(),Mo]),zo,n("td",Fo,[n("a",Vo,[t("🀄️"),s(o)]),t(),n("a",Eo,[t("🔗"),s(o)])])]),n("tr",null,[Do,Jo,n("td",Ko,[s(a,{to:"/problem/0116.html"},{default:e(()=>[t("[✓]")]),_:1})]),n("td",Po,[s(a,{to:"/tag/tree.html"},{default:e(()=>[Ho]),_:1}),t(),s(a,{to:"/tag/depth-first-search.html"},{default:e(()=>[Wo]),_:1}),t(),s(a,{to:"/tag/breadth-first-search.html"},{default:e(()=>[Xo]),_:1}),t(),Uo]),$o,n("td",Go,[n("a",Qo,[t("🀄️"),s(o)]),t(),n("a",Yo,[t("🔗"),s(o)])])]),n("tr",null,[Zo,nl,n("td",tl,[s(a,{to:"/problem/0117.html"},{default:e(()=>[t("[✓]")]),_:1})]),n("td",sl,[s(a,{to:"/tag/tree.html"},{default:e(()=>[el]),_:1}),t(),s(a,{to:"/tag/depth-first-search.html"},{default:e(()=>[al]),_:1}),t(),s(a,{to:"/tag/breadth-first-search.html"},{default:e(()=>[ol]),_:1}),t(),ll]),cl,n("td",pl,[n("a",il,[t("🀄️"),s(o)]),t(),n("a",ul,[t("🔗"),s(o)])])]),n("tr",null,[rl,dl,n("td",kl,[s(a,{to:"/problem/0297.html"},{default:e(()=>[t("[✓]")]),_:1})]),n("td",hl,[s(a,{to:"/tag/tree.html"},{default:e(()=>[_l]),_:1}),t(),s(a,{to:"/tag/depth-first-search.html"},{default:e(()=>[ml]),_:1}),t(),s(a,{to:"/tag/breadth-first-search.html"},{default:e(()=>[bl]),_:1}),t(),vl]),gl,n("td",fl,[n("a",yl,[t("🀄️"),s(o)]),t(),n("a",xl,[t("🔗"),s(o)])])]),n("tr",null,[wl,jl,n("td",Tl,[s(a,{to:"/problem/0114.html"},{default:e(()=>[t("[✓]")]),_:1})]),n("td",ql,[s(a,{to:"/tag/stack.html"},{default:e(()=>[Sl]),_:1}),t(),s(a,{to:"/tag/tree.html"},{default:e(()=>[Al]),_:1}),t(),s(a,{to:"/tag/depth-first-search.html"},{default:e(()=>[Ll]),_:1}),t(),Bl]),Nl,n("td",Ol,[n("a",Il,[t("🀄️"),s(o)]),t(),n("a",Rl,[t("🔗"),s(o)])])])])]),Cl,p(" prettier-ignore "),n("table",null,[Ml,n("tbody",null,[n("tr",null,[zl,Fl,n("td",Vl,[s(a,{to:"/problem/0105.html"},{default:e(()=>[t("[✓]")]),_:1})]),n("td",El,[s(a,{to:"/tag/tree.html"},{default:e(()=>[Dl]),_:1}),t(),s(a,{to:"/tag/array.html"},{default:e(()=>[Jl]),_:1}),t(),s(a,{to:"/tag/hash-table.html"},{default:e(()=>[Kl]),_:1}),t(),Pl]),Hl,n("td",Wl,[n("a",Xl,[t("🀄️"),s(o)]),t(),n("a",Ul,[t("🔗"),s(o)])])]),n("tr",null,[$l,Gl,n("td",Ql,[s(a,{to:"/problem/0106.html"},{default:e(()=>[t("[✓]")]),_:1})]),n("td",Yl,[s(a,{to:"/tag/tree.html"},{default:e(()=>[Zl]),_:1}),t(),s(a,{to:"/tag/array.html"},{default:e(()=>[nc]),_:1}),t(),s(a,{to:"/tag/hash-table.html"},{default:e(()=>[tc]),_:1}),t(),sc]),ec,n("td",ac,[n("a",oc,[t("🀄️"),s(o)]),t(),n("a",lc,[t("🔗"),s(o)])])]),n("tr",null,[cc,pc,n("td",ic,[s(a,{to:"/problem/0889.html"},{default:e(()=>[t("[✓]")]),_:1})]),n("td",uc,[s(a,{to:"/tag/tree.html"},{default:e(()=>[rc]),_:1}),t(),s(a,{to:"/tag/array.html"},{default:e(()=>[dc]),_:1}),t(),s(a,{to:"/tag/hash-table.html"},{default:e(()=>[kc]),_:1}),t(),hc]),_c,n("td",mc,[n("a",bc,[t("🀄️"),s(o)]),t(),n("a",vc,[t("🔗"),s(o)])])])])]),gc,p(" prettier-ignore "),n("table",null,[fc,n("tbody",null,[n("tr",null,[yc,xc,n("td",wc,[s(a,{to:"/problem/0098.html"},{default:e(()=>[t("[✓]")]),_:1})]),n("td",jc,[s(a,{to:"/tag/tree.html"},{default:e(()=>[Tc]),_:1}),t(),s(a,{to:"/tag/depth-first-search.html"},{default:e(()=>[qc]),_:1}),t(),s(a,{to:"/tag/binary-search-tree.html"},{default:e(()=>[Sc]),_:1}),t(),Ac]),Lc,n("td",Bc,[n("a",Nc,[t("🀄️"),s(o)]),t(),n("a",Oc,[t("🔗"),s(o)])])]),n("tr",null,[Ic,Rc,n("td",Cc,[s(a,{to:"/problem/0173.html"},{default:e(()=>[t("[✓]")]),_:1})]),n("td",Mc,[s(a,{to:"/tag/stack.html"},{default:e(()=>[zc]),_:1}),t(),s(a,{to:"/tag/tree.html"},{default:e(()=>[Fc]),_:1}),t(),s(a,{to:"/tag/design.html"},{default:e(()=>[Vc]),_:1}),t(),Ec]),Dc,n("td",Jc,[n("a",Kc,[t("🀄️"),s(o)]),t(),n("a",Pc,[t("🔗"),s(o)])])]),n("tr",null,[Hc,Wc,n("td",Xc,[s(a,{to:"/problem/0700.html"},{default:e(()=>[t("[✓]")]),_:1})]),n("td",Uc,[s(a,{to:"/tag/tree.html"},{default:e(()=>[$c]),_:1}),t(),s(a,{to:"/tag/binary-search-tree.html"},{default:e(()=>[Gc]),_:1}),t(),s(a,{to:"/tag/binary-tree.html"},{default:e(()=>[Qc]),_:1})]),Yc,n("td",Zc,[n("a",np,[t("🀄️"),s(o)]),t(),n("a",tp,[t("🔗"),s(o)])])]),n("tr",null,[sp,ep,n("td",ap,[s(a,{to:"/problem/0701.html"},{default:e(()=>[t("[✓]")]),_:1})]),n("td",op,[s(a,{to:"/tag/tree.html"},{default:e(()=>[lp]),_:1}),t(),s(a,{to:"/tag/binary-search-tree.html"},{default:e(()=>[cp]),_:1}),t(),s(a,{to:"/tag/binary-tree.html"},{default:e(()=>[pp]),_:1})]),ip,n("td",up,[n("a",rp,[t("🀄️"),s(o)]),t(),n("a",dp,[t("🔗"),s(o)])])]),n("tr",null,[kp,hp,n("td",_p,[s(a,{to:"/problem/0450.html"},{default:e(()=>[t("[✓]")]),_:1})]),n("td",mp,[s(a,{to:"/tag/tree.html"},{default:e(()=>[bp]),_:1}),t(),s(a,{to:"/tag/binary-search-tree.html"},{default:e(()=>[vp]),_:1}),t(),s(a,{to:"/tag/binary-tree.html"},{default:e(()=>[gp]),_:1})]),fp,n("td",yp,[n("a",xp,[t("🀄️"),s(o)]),t(),n("a",wp,[t("🔗"),s(o)])])]),n("tr",null,[jp,Tp,n("td",qp,[s(a,{to:"/problem/0703.html"},{default:e(()=>[t("[✓]")]),_:1})]),n("td",Sp,[s(a,{to:"/tag/tree.html"},{default:e(()=>[Ap]),_:1}),t(),s(a,{to:"/tag/design.html"},{default:e(()=>[Lp]),_:1}),t(),s(a,{to:"/tag/binary-search-tree.html"},{default:e(()=>[Bp]),_:1}),t(),Np]),Op,n("td",Ip,[n("a",Rp,[t("🀄️"),s(o)]),t(),n("a",Cp,[t("🔗"),s(o)])])]),n("tr",null,[Mp,zp,n("td",Fp,[s(a,{to:"/offer/jz_offer_54_1.html"},{default:e(()=>[t("[✓]")]),_:1})]),n("td",Vp,[s(a,{to:"/tag/tree.html"},{default:e(()=>[Ep]),_:1}),t(),s(a,{to:"/tag/depth-first-search.html"},{default:e(()=>[Dp]),_:1}),t(),s(a,{to:"/tag/binary-search-tree.html"},{default:e(()=>[Jp]),_:1}),t(),Kp]),Pp,n("td",Hp,[n("a",Wp,[t("🀄️"),s(o)])])]),n("tr",null,[Xp,Up,n("td",$p,[s(a,{to:"/problem/0230.html"},{default:e(()=>[t("[✓]")]),_:1})]),n("td",Gp,[s(a,{to:"/tag/tree.html"},{default:e(()=>[Qp]),_:1}),t(),s(a,{to:"/tag/depth-first-search.html"},{default:e(()=>[Yp]),_:1}),t(),s(a,{to:"/tag/binary-search-tree.html"},{default:e(()=>[Zp]),_:1}),t(),ni]),ti,n("td",si,[n("a",ei,[t("🀄️"),s(o)]),t(),n("a",ai,[t("🔗"),s(o)])])]),n("tr",null,[oi,li,n("td",ci,[s(a,{to:"/problem/0235.html"},{default:e(()=>[t("[✓]")]),_:1})]),n("td",pi,[s(a,{to:"/tag/tree.html"},{default:e(()=>[ii]),_:1}),t(),s(a,{to:"/tag/depth-first-search.html"},{default:e(()=>[ui]),_:1}),t(),s(a,{to:"/tag/binary-search-tree.html"},{default:e(()=>[ri]),_:1}),t(),di]),ki,n("td",hi,[n("a",_i,[t("🀄️"),s(o)]),t(),n("a",mi,[t("🔗"),s(o)])])]),n("tr",null,[bi,vi,n("td",gi,[s(a,{to:"/problem/0426.html"},{default:e(()=>[t("[✓]")]),_:1})]),n("td",fi,[s(a,{to:"/tag/stack.html"},{default:e(()=>[yi]),_:1}),t(),s(a,{to:"/tag/tree.html"},{default:e(()=>[xi]),_:1}),t(),s(a,{to:"/tag/depth-first-search.html"},{default:e(()=>[wi]),_:1}),t(),ji]),Ti,n("td",qi,[n("a",Si,[t("🀄️"),s(o)]),t(),n("a",Ai,[t("🔗"),s(o)])])]),n("tr",null,[Li,Bi,n("td",Ni,[s(a,{to:"/problem/0108.html"},{default:e(()=>[t("[✓]")]),_:1})]),n("td",Oi,[s(a,{to:"/tag/tree.html"},{default:e(()=>[Ii]),_:1}),t(),s(a,{to:"/tag/binary-search-tree.html"},{default:e(()=>[Ri]),_:1}),t(),s(a,{to:"/tag/array.html"},{default:e(()=>[Ci]),_:1}),t(),Mi]),zi,n("td",Fi,[n("a",Vi,[t("🀄️"),s(o)]),t(),n("a",Ei,[t("🔗"),s(o)])])]),n("tr",null,[Di,Ji,n("td",Ki,[s(a,{to:"/problem/0110.html"},{default:e(()=>[t("[✓]")]),_:1})]),n("td",Pi,[s(a,{to:"/tag/tree.html"},{default:e(()=>[Hi]),_:1}),t(),s(a,{to:"/tag/depth-first-search.html"},{default:e(()=>[Wi]),_:1}),t(),s(a,{to:"/tag/binary-tree.html"},{default:e(()=>[Xi]),_:1})]),Ui,n("td",$i,[n("a",Gi,[t("🀄️"),s(o)]),t(),n("a",Qi,[t("🔗"),s(o)])])])])]),Yi,Zi,p(" prettier-ignore "),n("table",null,[nu,n("tbody",null,[n("tr",null,[tu,su,n("td",eu,[s(a,{to:"/problem/0303.html"},{default:e(()=>[t("[✓]")]),_:1})]),n("td",au,[s(a,{to:"/tag/design.html"},{default:e(()=>[ou]),_:1}),t(),s(a,{to:"/tag/array.html"},{default:e(()=>[lu]),_:1}),t(),s(a,{to:"/tag/prefix-sum.html"},{default:e(()=>[cu]),_:1})]),pu,n("td",iu,[n("a",uu,[t("🀄️"),s(o)]),t(),n("a",ru,[t("🔗"),s(o)])])]),n("tr",null,[du,ku,n("td",hu,[s(a,{to:"/problem/0307.html"},{default:e(()=>[t("[✓]")]),_:1})]),n("td",_u,[s(a,{to:"/tag/design.html"},{default:e(()=>[mu]),_:1}),t(),s(a,{to:"/tag/binary-indexed-tree.html"},{default:e(()=>[bu]),_:1}),t(),s(a,{to:"/tag/segment-tree.html"},{default:e(()=>[vu]),_:1}),t(),gu]),fu,n("td",yu,[n("a",xu,[t("🀄️"),s(o)]),t(),n("a",wu,[t("🔗"),s(o)])])]),n("tr",null,[ju,Tu,n("td",qu,[s(a,{to:"/problem/0354.html"},{default:e(()=>[t("[✓]")]),_:1})]),n("td",Su,[s(a,{to:"/tag/array.html"},{default:e(()=>[Au]),_:1}),t(),s(a,{to:"/tag/binary-search.html"},{default:e(()=>[Lu]),_:1}),t(),s(a,{to:"/tag/dynamic-programming.html"},{default:e(()=>[Bu]),_:1}),t(),Nu]),Ou,n("td",Iu,[n("a",Ru,[t("🀄️"),s(o)]),t(),n("a",Cu,[t("🔗"),s(o)])])])])]),Mu,p(" prettier-ignore "),n("table",null,[zu,n("tbody",null,[n("tr",null,[Fu,Vu,Eu,n("td",Du,[s(a,{to:"/tag/array.html"},{default:e(()=>[Ju]),_:1}),t(),s(a,{to:"/tag/prefix-sum.html"},{default:e(()=>[Ku]),_:1})]),Pu,n("td",Hu,[n("a",Wu,[t("🀄️"),s(o)]),t(),n("a",Xu,[t("🔗"),s(o)])])]),n("tr",null,[Uu,$u,Gu,n("td",Qu,[s(a,{to:"/tag/array.html"},{default:e(()=>[Yu]),_:1}),t(),s(a,{to:"/tag/prefix-sum.html"},{default:e(()=>[Zu]),_:1})]),nr,n("td",tr,[n("a",sr,[t("🀄️"),s(o)]),t(),n("a",er,[t("🔗"),s(o)])])]),n("tr",null,[ar,or,n("td",lr,[s(a,{to:"/problem/1450.html"},{default:e(()=>[t("[✓]")]),_:1})]),n("td",cr,[s(a,{to:"/tag/array.html"},{default:e(()=>[pr]),_:1})]),ir,n("td",ur,[n("a",rr,[t("🀄️"),s(o)]),t(),n("a",dr,[t("🔗"),s(o)])])]),n("tr",null,[kr,hr,n("td",_r,[s(a,{to:"/problem/0673.html"},{default:e(()=>[t("[✓]")]),_:1})]),n("td",mr,[s(a,{to:"/tag/binary-indexed-tree.html"},{default:e(()=>[br]),_:1}),t(),s(a,{to:"/tag/segment-tree.html"},{default:e(()=>[vr]),_:1}),t(),s(a,{to:"/tag/array.html"},{default:e(()=>[gr]),_:1}),t(),fr]),yr,n("td",xr,[n("a",wr,[t("🀄️"),s(o)]),t(),n("a",jr,[t("🔗"),s(o)])])]),n("tr",null,[Tr,qr,Sr,n("td",Ar,[s(a,{to:"/tag/bit-manipulation.html"},{default:e(()=>[Lr]),_:1}),t(),s(a,{to:"/tag/array.html"},{default:e(()=>[Br]),_:1}),t(),s(a,{to:"/tag/prefix-sum.html"},{default:e(()=>[Nr]),_:1})]),Or,n("td",Ir,[n("a",Rr,[t("🀄️"),s(o)]),t(),n("a",Cr,[t("🔗"),s(o)])])]),n("tr",null,[Mr,zr,Fr,n("td",Vr,[s(a,{to:"/tag/array.html"},{default:e(()=>[Er]),_:1}),t(),s(a,{to:"/tag/binary-search.html"},{default:e(()=>[Dr]),_:1}),t(),s(a,{to:"/tag/sorting.html"},{default:e(()=>[Jr]),_:1}),t(),Kr]),Pr,n("td",Hr,[n("a",Wr,[t("🀄️"),s(o)]),t(),n("a",Xr,[t("🔗"),s(o)])])])])]),Ur,p(" prettier-ignore "),n("table",null,[$r,n("tbody",null,[n("tr",null,[Gr,Qr,n("td",Yr,[s(a,{to:"/problem/0729.html"},{default:e(()=>[t("[✓]")]),_:1})]),n("td",Zr,[s(a,{to:"/tag/design.html"},{default:e(()=>[nd]),_:1}),t(),s(a,{to:"/tag/segment-tree.html"},{default:e(()=>[td]),_:1}),t(),s(a,{to:"/tag/array.html"},{default:e(()=>[sd]),_:1}),t(),ed]),ad,n("td",od,[n("a",ld,[t("🀄️"),s(o)]),t(),n("a",cd,[t("🔗"),s(o)])])]),n("tr",null,[pd,id,n("td",ud,[s(a,{to:"/problem/0731.html"},{default:e(()=>[t("[✓]")]),_:1})]),n("td",rd,[s(a,{to:"/tag/design.html"},{default:e(()=>[dd]),_:1}),t(),s(a,{to:"/tag/segment-tree.html"},{default:e(()=>[kd]),_:1}),t(),s(a,{to:"/tag/array.html"},{default:e(()=>[hd]),_:1}),t(),_d]),md,n("td",bd,[n("a",vd,[t("🀄️"),s(o)]),t(),n("a",gd,[t("🔗"),s(o)])])]),n("tr",null,[fd,yd,xd,n("td",wd,[s(a,{to:"/tag/design.html"},{default:e(()=>[jd]),_:1}),t(),s(a,{to:"/tag/segment-tree.html"},{default:e(()=>[Td]),_:1}),t(),s(a,{to:"/tag/binary-search.html"},{default:e(()=>[qd]),_:1}),t(),Sd]),Ad,n("td",Ld,[n("a",Bd,[t("🀄️"),s(o)]),t(),n("a",Nd,[t("🔗"),s(o)])])])])]),Od,p(" prettier-ignore "),n("table",null,[Id,n("tbody",null,[n("tr",null,[Rd,Cd,Md,n("td",zd,[s(a,{to:"/tag/binary-indexed-tree.html"},{default:e(()=>[Fd]),_:1}),t(),s(a,{to:"/tag/segment-tree.html"},{default:e(()=>[Vd]),_:1}),t(),s(a,{to:"/tag/array.html"},{default:e(()=>[Ed]),_:1}),t(),Dd]),Jd,n("td",Kd,[n("a",Pd,[t("🀄️"),s(o)]),t(),n("a",Hd,[t("🔗"),s(o)])])]),n("tr",null,[Wd,Xd,Ud,n("td",$d,[s(a,{to:"/tag/array.html"},{default:e(()=>[Gd]),_:1}),t(),s(a,{to:"/tag/line-sweep.html"},{default:e(()=>[Qd]),_:1})]),Yd,n("td",Zd,[n("a",nk,[t("🀄️"),s(o)]),t(),n("a",tk,[t("🔗"),s(o)])])]),n("tr",null,[sk,ek,ak,n("td",ok,[s(a,{to:"/tag/segment-tree.html"},{default:e(()=>[lk]),_:1}),t(),s(a,{to:"/tag/array.html"},{default:e(()=>[ck]),_:1}),t(),s(a,{to:"/tag/ordered-set.html"},{default:e(()=>[pk]),_:1}),t(),ik]),uk,n("td",rk,[n("a",dk,[t("🀄️"),s(o)]),t(),n("a",kk,[t("🔗"),s(o)])])])])]),hk,p(" prettier-ignore "),n("table",null,[_k,n("tbody",null,[n("tr",null,[mk,bk,n("td",vk,[s(a,{to:"/problem/0303.html"},{default:e(()=>[t("[✓]")]),_:1})]),n("td",gk,[s(a,{to:"/tag/design.html"},{default:e(()=>[fk]),_:1}),t(),s(a,{to:"/tag/array.html"},{default:e(()=>[yk]),_:1}),t(),s(a,{to:"/tag/prefix-sum.html"},{default:e(()=>[xk]),_:1})]),wk,n("td",jk,[n("a",Tk,[t("🀄️"),s(o)]),t(),n("a",qk,[t("🔗"),s(o)])])]),n("tr",null,[Sk,Ak,n("td",Lk,[s(a,{to:"/problem/0307.html"},{default:e(()=>[t("[✓]")]),_:1})]),n("td",Bk,[s(a,{to:"/tag/design.html"},{default:e(()=>[Nk]),_:1}),t(),s(a,{to:"/tag/binary-indexed-tree.html"},{default:e(()=>[Ok]),_:1}),t(),s(a,{to:"/tag/segment-tree.html"},{default:e(()=>[Ik]),_:1}),t(),Rk]),Ck,n("td",Mk,[n("a",zk,[t("🀄️"),s(o)]),t(),n("a",Fk,[t("🔗"),s(o)])])]),n("tr",null,[Vk,Ek,Dk,n("td",Jk,[s(a,{to:"/tag/binary-indexed-tree.html"},{default:e(()=>[Kk]),_:1}),t(),s(a,{to:"/tag/segment-tree.html"},{default:e(()=>[Pk]),_:1}),t(),s(a,{to:"/tag/array.html"},{default:e(()=>[Hk]),_:1}),t(),Wk]),Xk,n("td",Uk,[n("a",$k,[t("🀄️"),s(o)]),t(),n("a",Gk,[t("🔗"),s(o)])])]),n("tr",null,[Qk,Yk,n("td",Zk,[s(a,{to:"/problem/1450.html"},{default:e(()=>[t("[✓]")]),_:1})]),n("td",nh,[s(a,{to:"/tag/array.html"},{default:e(()=>[th]),_:1})]),sh,n("td",eh,[n("a",ah,[t("🀄️"),s(o)]),t(),n("a",oh,[t("🔗"),s(o)])])]),n("tr",null,[lh,ch,n("td",ph,[s(a,{to:"/problem/0354.html"},{default:e(()=>[t("[✓]")]),_:1})]),n("td",ih,[s(a,{to:"/tag/array.html"},{default:e(()=>[uh]),_:1}),t(),s(a,{to:"/tag/binary-search.html"},{default:e(()=>[rh]),_:1}),t(),s(a,{to:"/tag/dynamic-programming.html"},{default:e(()=>[dh]),_:1}),t(),kh]),hh,n("td",_h,[n("a",mh,[t("🀄️"),s(o)]),t(),n("a",bh,[t("🔗"),s(o)])])]),n("tr",null,[vh,gh,n("td",fh,[s(a,{to:"/problem/0673.html"},{default:e(()=>[t("[✓]")]),_:1})]),n("td",yh,[s(a,{to:"/tag/binary-indexed-tree.html"},{default:e(()=>[xh]),_:1}),t(),s(a,{to:"/tag/segment-tree.html"},{default:e(()=>[wh]),_:1}),t(),s(a,{to:"/tag/array.html"},{default:e(()=>[jh]),_:1}),t(),Th]),qh,n("td",Sh,[n("a",Ah,[t("🀄️"),s(o)]),t(),n("a",Lh,[t("🔗"),s(o)])])]),n("tr",null,[Bh,Nh,Oh,n("td",Ih,[s(a,{to:"/tag/bit-manipulation.html"},{default:e(()=>[Rh]),_:1}),t(),s(a,{to:"/tag/array.html"},{default:e(()=>[Ch]),_:1}),t(),s(a,{to:"/tag/prefix-sum.html"},{default:e(()=>[Mh]),_:1})]),zh,n("td",Fh,[n("a",Vh,[t("🀄️"),s(o)]),t(),n("a",Eh,[t("🔗"),s(o)])])]),n("tr",null,[Dh,Jh,n("td",Kh,[s(a,{to:"/problem/1893.html"},{default:e(()=>[t("[✓]")]),_:1})]),n("td",Ph,[s(a,{to:"/tag/array.html"},{default:e(()=>[Hh]),_:1}),t(),s(a,{to:"/tag/hash-table.html"},{default:e(()=>[Wh]),_:1}),t(),s(a,{to:"/tag/prefix-sum.html"},{default:e(()=>[Xh]),_:1})]),Uh,n("td",$h,[n("a",Gh,[t("🀄️"),s(o)]),t(),n("a",Qh,[t("🔗"),s(o)])])])])]),Yh,p(" prettier-ignore "),n("table",null,[Zh,n("tbody",null,[n("tr",null,[n_,t_,s_,n("td",e_,[s(a,{to:"/tag/union-find.html"},{default:e(()=>[a_]),_:1}),t(),s(a,{to:"/tag/graph.html"},{default:e(()=>[o_]),_:1}),t(),s(a,{to:"/tag/array.html"},{default:e(()=>[l_]),_:1}),t(),c_]),p_,n("td",i_,[n("a",u_,[t("🀄️"),s(o)]),t(),n("a",r_,[t("🔗"),s(o)])])]),n("tr",null,[d_,k_,n("td",h_,[s(a,{to:"/problem/0547.html"},{default:e(()=>[t("[✓]")]),_:1})]),n("td",__,[s(a,{to:"/tag/depth-first-search.html"},{default:e(()=>[m_]),_:1}),t(),s(a,{to:"/tag/breadth-first-search.html"},{default:e(()=>[b_]),_:1}),t(),s(a,{to:"/tag/union-find.html"},{default:e(()=>[v_]),_:1}),t(),g_]),f_,n("td",y_,[n("a",x_,[t("🀄️"),s(o)]),t(),n("a",w_,[t("🔗"),s(o)])])]),n("tr",null,[j_,T_,n("td",q_,[s(a,{to:"/problem/0684.html"},{default:e(()=>[t("[✓]")]),_:1})]),n("td",S_,[s(a,{to:"/tag/depth-first-search.html"},{default:e(()=>[A_]),_:1}),t(),s(a,{to:"/tag/breadth-first-search.html"},{default:e(()=>[L_]),_:1}),t(),s(a,{to:"/tag/union-find.html"},{default:e(()=>[B_]),_:1}),t(),N_]),O_,n("td",I_,[n("a",R_,[t("🀄️"),s(o)]),t(),n("a",C_,[t("🔗"),s(o)])])]),n("tr",null,[M_,z_,F_,n("td",V_,[s(a,{to:"/tag/depth-first-search.html"},{default:e(()=>[E_]),_:1}),t(),s(a,{to:"/tag/breadth-first-search.html"},{default:e(()=>[D_]),_:1}),t(),s(a,{to:"/tag/union-find.html"},{default:e(()=>[J_]),_:1}),t(),K_]),P_,n("td",H_,[n("a",W_,[t("🀄️"),s(o)]),t(),n("a",X_,[t("🔗"),s(o)])])]),n("tr",null,[U_,$_,G_,n("td",Q_,[s(a,{to:"/tag/greedy.html"},{default:e(()=>[Y_]),_:1}),t(),s(a,{to:"/tag/depth-first-search.html"},{default:e(()=>[Z_]),_:1}),t(),s(a,{to:"/tag/breadth-first-search.html"},{default:e(()=>[nm]),_:1}),t(),tm]),sm,n("td",em,[n("a",am,[t("🀄️"),s(o)]),t(),n("a",om,[t("🔗"),s(o)])])]),n("tr",null,[lm,cm,n("td",pm,[s(a,{to:"/problem/0399.html"},{default:e(()=>[t("[✓]")]),_:1})]),n("td",im,[s(a,{to:"/tag/depth-first-search.html"},{default:e(()=>[um]),_:1}),t(),s(a,{to:"/tag/breadth-first-search.html"},{default:e(()=>[rm]),_:1}),t(),s(a,{to:"/tag/union-find.html"},{default:e(()=>[dm]),_:1}),t(),km]),hm,n("td",_m,[n("a",mm,[t("🀄️"),s(o)]),t(),n("a",bm,[t("🔗"),s(o)])])]),n("tr",null,[vm,gm,fm,n("td",ym,[s(a,{to:"/tag/depth-first-search.html"},{default:e(()=>[xm]),_:1}),t(),s(a,{to:"/tag/breadth-first-search.html"},{default:e(()=>[wm]),_:1}),t(),s(a,{to:"/tag/union-find.html"},{default:e(()=>[jm]),_:1}),t(),Tm]),qm,n("td",Sm,[n("a",Am,[t("🀄️"),s(o)]),t(),n("a",Lm,[t("🔗"),s(o)])])]),n("tr",null,[Bm,Nm,Om,n("td",Im,[s(a,{to:"/tag/depth-first-search.html"},{default:e(()=>[Rm]),_:1}),t(),s(a,{to:"/tag/breadth-first-search.html"},{default:e(()=>[Cm]),_:1}),t(),s(a,{to:"/tag/union-find.html"},{default:e(()=>[Mm]),_:1}),t(),zm]),Fm,n("td",Vm,[n("a",Em,[t("🀄️"),s(o)]),t(),n("a",Dm,[t("🔗"),s(o)])])]),n("tr",null,[Jm,Km,Pm,n("td",Hm,[s(a,{to:"/tag/depth-first-search.html"},{default:e(()=>[Wm]),_:1}),t(),s(a,{to:"/tag/breadth-first-search.html"},{default:e(()=>[Xm]),_:1}),t(),s(a,{to:"/tag/union-find.html"},{default:e(()=>[Um]),_:1}),t(),$m]),Gm,n("td",Qm,[n("a",Ym,[t("🀄️"),s(o)]),t(),n("a",Zm,[t("🔗"),s(o)])])]),n("tr",null,[nb,tb,sb,n("td",eb,[s(a,{to:"/tag/depth-first-search.html"},{default:e(()=>[ab]),_:1}),t(),s(a,{to:"/tag/breadth-first-search.html"},{default:e(()=>[ob]),_:1}),t(),s(a,{to:"/tag/union-find.html"},{default:e(()=>[lb]),_:1}),t(),cb]),pb,n("td",ib,[n("a",ub,[t("🀄️"),s(o)]),t(),n("a",rb,[t("🔗"),s(o)])])]),n("tr",null,[db,kb,hb,n("td",_b,[s(a,{to:"/tag/depth-first-search.html"},{default:e(()=>[mb]),_:1}),t(),s(a,{to:"/tag/union-find.html"},{default:e(()=>[bb]),_:1}),t(),s(a,{to:"/tag/graph.html"},{default:e(()=>[vb]),_:1}),t(),gb]),fb,n("td",yb,[n("a",xb,[t("🀄️"),s(o)]),t(),n("a",wb,[t("🔗"),s(o)])])]),n("tr",null,[jb,Tb,qb,n("td",Sb,[s(a,{to:"/tag/union-find.html"},{default:e(()=>[Ab]),_:1}),t(),s(a,{to:"/tag/array.html"},{default:e(()=>[Lb]),_:1}),t(),s(a,{to:"/tag/matrix.html"},{default:e(()=>[Bb]),_:1})]),Nb,n("td",Ob,[n("a",Ib,[t("🀄️"),s(o)]),t(),n("a",Rb,[t("🔗"),s(o)])])]),n("tr",null,[Cb,Mb,n("td",zb,[s(a,{to:"/problem/0128.html"},{default:e(()=>[t("[✓]")]),_:1})]),n("td",Fb,[s(a,{to:"/tag/union-find.html"},{default:e(()=>[Vb]),_:1}),t(),s(a,{to:"/tag/array.html"},{default:e(()=>[Eb]),_:1}),t(),s(a,{to:"/tag/hash-table.html"},{default:e(()=>[Db]),_:1})]),Jb,n("td",Kb,[n("a",Pb,[t("🀄️"),s(o)]),t(),n("a",Hb,[t("🔗"),s(o)])])])])])])}const Qb=h(B,[["render",Wb],["__file","tree.html.vue"]]);export{Qb as default};
