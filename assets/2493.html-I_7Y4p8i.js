import{_ as l,r as p,o as i,c as u,a as n,b as s,d as a,w as t,f as r,e as d}from"./app-B5EG-zH0.js";const k={},h=n("h1",{id:"_2493-将节点分成尽可能多的组",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_2493-将节点分成尽可能多的组","aria-hidden":"true"},"#"),s(" 2493. 将节点分成尽可能多的组")],-1),m=n("code",null,"广度优先搜索",-1),g=n("code",null,"并查集",-1),b=n("code",null,"图",-1),v={href:"https://leetcode.cn/problems/divide-nodes-into-the-maximum-number-of-groups",target:"_blank",rel:"noopener noreferrer"},f=n("code",null,"力扣",-1),_={href:"https://leetcode.com/problems/divide-nodes-into-the-maximum-number-of-groups",target:"_blank",rel:"noopener noreferrer"},y=n("code",null,"LeetCode",-1),w=d(`<h2 id="题目" tabindex="-1"><a class="header-anchor" href="#题目" aria-hidden="true">#</a> 题目</h2><p>You are given a positive integer <code>n</code> representing the number of nodes in an <strong>undirected</strong> graph. The nodes are labeled from <code>1</code> to <code>n</code>.</p><p>You are also given a 2D integer array <code>edges</code>, where <code>edges[i] = [ai, bi]</code> indicates that there is a <strong>bidirectional</strong> edge between nodes <code>ai</code> and <code>bi</code>. <strong>Notice</strong> that the given graph may be disconnected.</p><p>Divide the nodes of the graph into <code>m</code> groups (<strong>1-indexed</strong>) such that:</p><ul><li>Each node in the graph belongs to exactly one group.</li><li>For every pair of nodes in the graph that are connected by an edge <code>[ai, bi]</code>, if <code>ai</code> belongs to the group with index <code>x</code>, and <code>bi</code> belongs to the group with index <code>y</code>, then <code>|y - x| = 1</code>.</li></ul><p>Return <em>the maximum number of groups (i.e., maximum</em><code>m</code> <em>) into which you can divide the nodes</em>. Return <code>-1</code> <em>if it is impossible to group the nodes with the given conditions</em>.</p><p><strong>Example 1:</strong></p><figure><img src="https://assets.leetcode.com/uploads/2022/10/13/example1.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><blockquote><p>Input: n = 6, edges = [[1,2],[1,4],[1,5],[2,6],[2,3],[4,6]]</p><p>Output: 4</p><p>Explanation: As shown in the image we:</p><ul><li>Add node 5 to the first group.</li><li>Add node 1 to the second group.</li><li>Add nodes 2 and 4 to the third group.</li><li>Add nodes 3 and 6 to the fourth group.</li></ul><p>We can see that every edge is satisfied.</p><p>It can be shown that that if we create a fifth group and move any node from the third or fourth group to it, at least on of the edges will not be satisfied.</p></blockquote><p><strong>Example 2:</strong></p><blockquote><p>Input: n = 3, edges = [[1,2],[2,3],[3,1]]</p><p>Output: -1</p><p>Explanation: If we add node 1 to the first group, node 2 to the second group, and node 3 to the third group to satisfy the first two edges, we can see that the third edge will not be satisfied.</p><p>It can be shown that no grouping is possible.</p></blockquote><p><strong>Constraints:</strong></p><ul><li><code>1 &lt;= n &lt;= 500</code></li><li><code>1 &lt;= edges.length &lt;= 10^4</code></li><li><code>edges[i].length == 2</code></li><li><code>1 &lt;= ai, bi &lt;= n</code></li><li><code>ai != bi</code></li><li>There is at most one edge between any pair of vertices.</li></ul><h2 id="题目大意" tabindex="-1"><a class="header-anchor" href="#题目大意" aria-hidden="true">#</a> 题目大意</h2><p>给你一个正整数 <code>n</code> ，表示一个 <strong>无向</strong> 图中的节点数目，节点编号从 <code>1</code> 到 <code>n</code> 。</p><p>同时给你一个二维整数数组 <code>edges</code> ，其中 <code>edges[i] = [ai, bi]</code> 表示节点 <code>ai</code> 和 <code>bi</code> 之间有一条 <strong>双向</strong> 边。注意给定的图可能是不连通的。</p><p>请你将图划分为 <code>m</code> 个组（编号从 <strong>1</strong> 开始），满足以下要求：</p><ul><li>图中每个节点都只属于一个组。</li><li>图中每条边连接的两个点 <code>[ai, bi]</code> ，如果 <code>ai</code> 属于编号为 <code>x</code> 的组，<code>bi</code> 属于编号为 <code>y</code> 的组，那么 <code>|y - x| = 1</code> 。</li></ul><p>请你返回最多可以将节点分为多少个组（也就是最大的 <code>m</code> ）。如果没办法在给定条件下分组，请你返回 <code>-1</code> 。</p><p><strong>示例 1：</strong></p><figure><img src="https://assets.leetcode.com/uploads/2022/10/13/example1.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><blockquote><p><strong>输入：</strong> n = 6, edges = [[1,2],[1,4],[1,5],[2,6],[2,3],[4,6]]</p><p><strong>输出：</strong> 4</p><p><strong>解释：</strong> 如上图所示，</p><ul><li>节点 5 在第一个组。</li><li>节点 1 在第二个组。</li><li>节点 2 和节点 4 在第三个组。</li><li>节点 3 和节点 6 在第四个组。</li></ul><p>所有边都满足题目要求。</p><p>如果我们创建第五个组，将第三个组或者第四个组中任何一个节点放到第五个组，至少有一条边连接的两个节点所属的组编号不符合题目要求。</p></blockquote><p><strong>示例 2：</strong></p><blockquote><p><strong>输入：</strong> n = 3, edges = [[1,2],[2,3],[3,1]]</p><p><strong>输出：</strong> -1</p><p><strong>解释：</strong> 如果我们将节点 1 放入第一个组，节点 2 放入第二个组，节点 3 放入第三个组，前两条边满足题目要求，但第三条边不满足题目要求。</p><p>没有任何符合题目要求的分组方式。</p></blockquote><p><strong>提示：</strong></p><ul><li><code>1 &lt;= n &lt;= 500</code></li><li><code>1 &lt;= edges.length &lt;= 10^4</code></li><li><code>edges[i].length == 2</code></li><li><code>1 &lt;= ai, bi &lt;= n</code></li><li><code>ai != bi</code></li><li>两个点之间至多只有一条边。</li></ul><h2 id="解题思路" tabindex="-1"><a class="header-anchor" href="#解题思路" aria-hidden="true">#</a> 解题思路</h2><ol><li><p><strong>构建邻接表</strong>：<br> 使用邻接表存储图结构，方便快速遍历邻居节点。</p></li><li><p><strong>BFS 检测奇环</strong>：</p><ul><li>使用 <code>BFS</code> 遍历每个连通分量，记录节点到根节点的深度。</li><li>如果遍历过程中发现 <strong>相邻节点深度之差为奇数</strong>，说明存在奇数环，不符合要求，直接返回 <code>-1</code>。</li></ul></li><li><p><strong>计算最大组数</strong>：</p><ul><li>对于每个连通分量，选取不同的起点进行 <code>BFS</code>，记录最大深度。</li><li>连通分量的最大深度即为当前分量的组数，累加到结果中。</li></ul></li><li><p><strong>返回结果</strong>：<br> 输出所有连通分量的最大可能分组数量。</p></li></ol><h4 id="复杂度分析" tabindex="-1"><a class="header-anchor" href="#复杂度分析" aria-hidden="true">#</a> 复杂度分析</h4><ul><li><strong>时间复杂度</strong>：<code>O(n + m)</code>，其中 <code>n</code> 为节点数，<code>m</code> 为边数。构建邻接表 + 遍历所有连通分量 + BFS 检查节点。</li><li><strong>空间复杂度</strong>：<code>O(n + m)</code>，存储邻接表、访问标记和节点深度。</li></ul><h2 id="代码" tabindex="-1"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">}</span></span> <span class="token parameter">n</span>
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span> <span class="token parameter">edges</span>
 * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">}</span></span>
 */</span>
<span class="token keyword">var</span> <span class="token function-variable function">magnificentSets</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">n<span class="token punctuation">,</span> edges</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">// 构建邻接表</span>
	<span class="token keyword">const</span> graph <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">length</span><span class="token operator">:</span> n <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token punctuation">[</span>u<span class="token punctuation">,</span> v<span class="token punctuation">]</span> <span class="token keyword">of</span> edges<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		graph<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>
		graph<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">const</span> visited <span class="token operator">=</span> <span class="token function">Array</span><span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">let</span> maxGroups <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

	<span class="token comment">// BFS 检查是否有奇环，同时计算深度</span>
	<span class="token keyword">const</span> <span class="token function-variable function">bfs</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">start</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
		<span class="token keyword">const</span> queue <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>start<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
		<span class="token keyword">const</span> nodeDepths <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">let</span> maxDepth <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>

		<span class="token keyword">while</span> <span class="token punctuation">(</span>queue<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">const</span> <span class="token punctuation">[</span>node<span class="token punctuation">,</span> depth<span class="token punctuation">]</span> <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span>nodeDepths<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
				<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>nodeDepths<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span> <span class="token operator">-</span> depth<span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">!==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 奇环</span>
				<span class="token keyword">continue</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span>
			nodeDepths<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> depth<span class="token punctuation">)</span><span class="token punctuation">;</span>
			maxDepth <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>maxDepth<span class="token punctuation">,</span> depth<span class="token punctuation">)</span><span class="token punctuation">;</span>

			<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> neighbor <span class="token keyword">of</span> graph<span class="token punctuation">[</span>node<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
				<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>nodeDepths<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>neighbor<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
					queue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">[</span>neighbor<span class="token punctuation">,</span> depth <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
				<span class="token punctuation">}</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">return</span> maxDepth<span class="token punctuation">;</span>
	<span class="token punctuation">}</span><span class="token punctuation">;</span>

	<span class="token comment">// 遍历所有连通分量</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>visited<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">const</span> componentNodes <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
			<span class="token keyword">const</span> queue <span class="token operator">=</span> <span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
			visited<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>

			<span class="token comment">// 获取连通分量中的所有节点</span>
			<span class="token keyword">while</span> <span class="token punctuation">(</span>queue<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
				<span class="token keyword">const</span> node <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
				componentNodes<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>
				<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> neighbor <span class="token keyword">of</span> graph<span class="token punctuation">[</span>node<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
					<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>visited<span class="token punctuation">[</span>neighbor<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
						visited<span class="token punctuation">[</span>neighbor<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
						queue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>neighbor<span class="token punctuation">)</span><span class="token punctuation">;</span>
					<span class="token punctuation">}</span>
				<span class="token punctuation">}</span>
			<span class="token punctuation">}</span>

			<span class="token keyword">let</span> bestDepth <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
			<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> node <span class="token keyword">of</span> componentNodes<span class="token punctuation">)</span> <span class="token punctuation">{</span>
				<span class="token keyword">const</span> depth <span class="token operator">=</span> <span class="token function">bfs</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>
				<span class="token keyword">if</span> <span class="token punctuation">(</span>depth <span class="token operator">===</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
				bestDepth <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>bestDepth<span class="token punctuation">,</span> depth<span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span>
			maxGroups <span class="token operator">+=</span> bestDepth<span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">return</span> maxGroups<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="相关题目" tabindex="-1"><a class="header-anchor" href="#相关题目" aria-hidden="true">#</a> 相关题目</h2>`,33),x=n("thead",null,[n("tr",null,[n("th",{style:{"text-align":"center"}},"题号"),n("th",{style:{"text-align":"left"}},"标题"),n("th",{style:{"text-align":"center"}},"题解"),n("th",{style:{"text-align":"left"}},"标签"),n("th",{style:{"text-align":"center"}},"难度"),n("th",{style:{"text-align":"center"}},"力扣")])],-1),q=n("td",{style:{"text-align":"center"}},"102",-1),D=n("td",{style:{"text-align":"left"}},"二叉树的层序遍历",-1),N={style:{"text-align":"center"}},B={style:{"text-align":"left"}},E=n("code",null,"树",-1),A=n("code",null,"广度优先搜索",-1),I=n("code",null,"二叉树",-1),S=n("td",{style:{"text-align":"center"}},"🟠",-1),F={style:{"text-align":"center"}},C={href:"https://leetcode.cn/problems/binary-tree-level-order-traversal",target:"_blank",rel:"noopener noreferrer"},L={href:"https://leetcode.com/problems/binary-tree-level-order-traversal",target:"_blank",rel:"noopener noreferrer"},V=n("td",{style:{"text-align":"center"}},"785",-1),O=n("td",{style:{"text-align":"left"}},"判断二分图",-1),R=n("td",{style:{"text-align":"center"}},null,-1),j={style:{"text-align":"left"}},G=n("code",null,"深度优先搜索",-1),M=n("code",null,"广度优先搜索",-1),T=n("code",null,"并查集",-1),z=n("code",null,"1+",-1),Y=n("td",{style:{"text-align":"center"}},"🟠",-1),H={style:{"text-align":"center"}},W={href:"https://leetcode.cn/problems/is-graph-bipartite",target:"_blank",rel:"noopener noreferrer"},J={href:"https://leetcode.com/problems/is-graph-bipartite",target:"_blank",rel:"noopener noreferrer"},K=n("td",{style:{"text-align":"center"}},"2608",-1),P=n("td",{style:{"text-align":"left"}},"图中的最短环",-1),Q=n("td",{style:{"text-align":"center"}},null,-1),U={style:{"text-align":"left"}},X=n("code",null,"广度优先搜索",-1),Z=n("code",null,"图",-1),$=n("td",{style:{"text-align":"center"}},"🔴",-1),nn={style:{"text-align":"center"}},sn={href:"https://leetcode.cn/problems/shortest-cycle-in-a-graph",target:"_blank",rel:"noopener noreferrer"},an={href:"https://leetcode.com/problems/shortest-cycle-in-a-graph",target:"_blank",rel:"noopener noreferrer"};function tn(en,on){const c=p("font"),e=p("RouterLink"),o=p("ExternalLinkIcon");return i(),u("div",null,[h,n("p",null,[s("🔴 "),a(c,{color:"#ff334b"},{default:t(()=>[s("Hard")]),_:1}),s("  🔖  "),a(e,{to:"/tag/breadth-first-search.html"},{default:t(()=>[m]),_:1}),s(),a(e,{to:"/tag/union-find.html"},{default:t(()=>[g]),_:1}),s(),a(e,{to:"/tag/graph.html"},{default:t(()=>[b]),_:1}),s("  🔗 "),n("a",v,[f,a(o)]),s(),n("a",_,[y,a(o)])]),w,r(" prettier-ignore "),n("table",null,[x,n("tbody",null,[n("tr",null,[q,D,n("td",N,[a(e,{to:"/problem/0102.html"},{default:t(()=>[s("[✓]")]),_:1})]),n("td",B,[a(e,{to:"/tag/tree.html"},{default:t(()=>[E]),_:1}),s(),a(e,{to:"/tag/breadth-first-search.html"},{default:t(()=>[A]),_:1}),s(),a(e,{to:"/tag/binary-tree.html"},{default:t(()=>[I]),_:1})]),S,n("td",F,[n("a",C,[s("🀄️"),a(o)]),s(),n("a",L,[s("🔗"),a(o)])])]),n("tr",null,[V,O,R,n("td",j,[a(e,{to:"/tag/depth-first-search.html"},{default:t(()=>[G]),_:1}),s(),a(e,{to:"/tag/breadth-first-search.html"},{default:t(()=>[M]),_:1}),s(),a(e,{to:"/tag/union-find.html"},{default:t(()=>[T]),_:1}),s(),z]),Y,n("td",H,[n("a",W,[s("🀄️"),a(o)]),s(),n("a",J,[s("🔗"),a(o)])])]),n("tr",null,[K,P,Q,n("td",U,[a(e,{to:"/tag/breadth-first-search.html"},{default:t(()=>[X]),_:1}),s(),a(e,{to:"/tag/graph.html"},{default:t(()=>[Z]),_:1})]),$,n("td",nn,[n("a",sn,[s("🀄️"),a(o)]),s(),n("a",an,[s("🔗"),a(o)])])])])])])}const cn=l(k,[["render",tn],["__file","2493.html.vue"]]);export{cn as default};
