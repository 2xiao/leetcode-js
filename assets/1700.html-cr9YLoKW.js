import{_ as d,r as c,o as p,c as i,a as n,b as s,d as e,w as t,f as r,e as u}from"./app-fBVbqwGY.js";const h={},k=n("h1",{id:"_1700-无法吃午餐的学生数量",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_1700-无法吃午餐的学生数量","aria-hidden":"true"},"#"),s(" 1700. 无法吃午餐的学生数量")],-1),m=n("code",null,"栈",-1),f=n("code",null,"队列",-1),g=n("code",null,"数组",-1),b=n("code",null,"模拟",-1),_={href:"https://leetcode.cn/problems/number-of-students-unable-to-eat-lunch",target:"_blank",rel:"noopener noreferrer"},w=n("code",null,"力扣",-1),v={href:"https://leetcode.com/problems/number-of-students-unable-to-eat-lunch",target:"_blank",rel:"noopener noreferrer"},y=n("code",null,"LeetCode",-1),x=u(`<h2 id="题目" tabindex="-1"><a class="header-anchor" href="#题目" aria-hidden="true">#</a> 题目</h2><p>The school cafeteria offers circular and square sandwiches at lunch break, referred to by numbers <code>0</code> and <code>1</code> respectively. All students stand in a queue. Each student either prefers square or circular sandwiches.</p><p>The number of sandwiches in the cafeteria is equal to the number of students. The sandwiches are placed in a <strong>stack</strong>. At each step:</p><ul><li>If the student at the front of the queue <strong>prefers</strong> the sandwich on the top of the stack, they will <strong>take it</strong> and leave the queue.</li><li>Otherwise, they will <strong>leave it</strong> and go to the queue&#39;s end.</li></ul><p>This continues until none of the queue students want to take the top sandwich and are thus unable to eat.</p><p>You are given two integer arrays <code>students</code> and <code>sandwiches</code> where <code>sandwiches[i]</code> is the type of the <code>i​​​​​​th</code> sandwich in the stack (<code>i = 0</code> is the top of the stack) and <code>students[j]</code> is the preference of the <code>j​​​​​​th</code> student in the initial queue (<code>j = 0</code> is the front of the queue). Return <em>the number of students that are unable to eat.</em></p><p><strong>Example 1:</strong></p><blockquote><p>Input: students = [1,1,0,0], sandwiches = [0,1,0,1]</p><p>Output: 0<strong>Explanation:</strong></p><ul><li>Front student leaves the top sandwich and returns to the end of the line making students = [1,0,0,1].</li><li>Front student leaves the top sandwich and returns to the end of the line making students = [0,0,1,1].</li><li>Front student takes the top sandwich and leaves the line making students = [0,1,1] and sandwiches = [1,0,1].</li><li>Front student leaves the top sandwich and returns to the end of the line making students = [1,1,0].</li><li>Front student takes the top sandwich and leaves the line making students = [1,0] and sandwiches = [0,1].</li><li>Front student leaves the top sandwich and returns to the end of the line making students = [0,1].</li><li>Front student takes the top sandwich and leaves the line making students = [1] and sandwiches = [1].</li><li>Front student takes the top sandwich and leaves the line making students = [] and sandwiches = [].</li></ul><p>Hence all students are able to eat.</p></blockquote><p><strong>Example 2:</strong></p><blockquote><p>Input: students = [1,1,1,0,0,1], sandwiches = [1,0,0,0,1,1]</p><p>Output: 3</p></blockquote><p><strong>Constraints:</strong></p><ul><li><code>1 &lt;= students.length, sandwiches.length &lt;= 100</code></li><li><code>students.length == sandwiches.length</code></li><li><code>sandwiches[i]</code> is <code>0</code> or <code>1</code>.</li><li><code>students[i]</code> is <code>0</code> or <code>1</code>.</li></ul><h2 id="题目大意" tabindex="-1"><a class="header-anchor" href="#题目大意" aria-hidden="true">#</a> 题目大意</h2><p>学校的自助午餐提供圆形和方形的三明治，分别用数字 <code>0</code> 和 <code>1</code> 表示。所有学生站在一个队列里，每个学生要么喜欢圆形的要么喜欢方形的。<br> 餐厅里三明治的数量与学生的数量相同。所有三明治都放在一个 <strong>栈</strong> 里，每一轮：</p><ul><li>如果队列最前面的学生 <strong>喜欢</strong> 栈顶的三明治，那么会 <strong>拿走它</strong> 并离开队列。</li><li>否则，这名学生会 <strong>放弃这个三明治</strong> 并回到队列的尾部。</li></ul><p>这个过程会一直持续到队列里所有学生都不喜欢栈顶的三明治为止。</p><p>给你两个整数数组 <code>students</code> 和 <code>sandwiches</code> ，其中 <code>sandwiches[i]</code> 是栈里面第 <code>i​​​​​​</code> 个三明治的类型（<code>i = 0</code> 是栈的顶部）， <code>students[j]</code> 是初始队列里第 <code>j​​​​​​</code> 名学生对三明治的喜好（<code>j = 0</code> 是队列的最开始位置）。请你返回无法吃午餐的学生数量。</p><p><strong>示例 1：</strong></p><blockquote><p><strong>输入：</strong> students = [1,1,0,0], sandwiches = [0,1,0,1]</p><p><strong>输出：</strong> 0</p><p><strong>解释：</strong></p><ul><li>最前面的学生放弃最顶上的三明治，并回到队列的末尾，学生队列变为 students = [1,0,0,1]。</li><li>最前面的学生放弃最顶上的三明治，并回到队列的末尾，学生队列变为 students = [0,0,1,1]。</li><li>最前面的学生拿走最顶上的三明治，剩余学生队列为 students = [0,1,1]，三明治栈为 sandwiches = [1,0,1]。</li><li>最前面的学生放弃最顶上的三明治，并回到队列的末尾，学生队列变为 students = [1,1,0]。</li><li>最前面的学生拿走最顶上的三明治，剩余学生队列为 students = [1,0]，三明治栈为 sandwiches = [0,1]。</li><li>最前面的学生放弃最顶上的三明治，并回到队列的末尾，学生队列变为 students = [0,1]。</li><li>最前面的学生拿走最顶上的三明治，剩余学生队列为 students = [1]，三明治栈为 sandwiches = [1]。</li><li>最前面的学生拿走最顶上的三明治，剩余学生队列为 students = []，三明治栈为 sandwiches = []。</li></ul><p>所以所有学生都有三明治吃。</p></blockquote><p><strong>示例 2：</strong></p><blockquote><p><strong>输入：</strong> students = [1,1,1,0,0,1], sandwiches = [1,0,0,0,1,1]</p><p><strong>输出：</strong> 3</p></blockquote><p><strong>提示：</strong></p><ul><li><code>1 &lt;= students.length, sandwiches.length &lt;= 100</code></li><li><code>students.length == sandwiches.length</code></li><li><code>sandwiches[i]</code> 要么是 <code>0</code> ，要么是 <code>1</code> 。</li><li><code>students[i]</code> 要么是 <code>0</code> ，要么是 <code>1</code> 。</li></ul><h2 id="解题思路" tabindex="-1"><a class="header-anchor" href="#解题思路" aria-hidden="true">#</a> 解题思路</h2><p>传统解法可能会模拟学生排队，复杂度较高。此解法通过统计 <code>0</code> 和 <code>1</code> 的数量直接计算结果：</p><ol><li><p><strong>统计总需求</strong>：</p><ul><li>统计 <code>students</code> 中 <code>1</code> 的需求总数，记为 <code>stuCount</code>。</li><li>统计 <code>sandwiches</code> 中 <code>1</code> 的供应总数，记为 <code>sandCount</code>。</li><li>计算二者的差，记为 <code>diff = sandCount - stuCount</code>。</li></ul></li><li><p><strong>判断差异</strong>：</p><ul><li>如果 <code>diff = 0</code>，说明 <code>sandwiches</code> 中 <code>0, 1</code> 的数量与 <code>students</code> 中 <code>0, 1</code> 的需求完全匹配，所有学生可以吃到三明治，返回 <code>0</code>。</li><li>如果 <code>diff &lt; 0</code>，说明 <code>sandwiches</code> 中 <code>1</code> 的数量不够，同时 <code>0</code> 的数量多了。</li><li>如果 <code>diff &gt; 0</code>，说明 <code>sandwiches</code> 中 <code>1</code> 的数量多了，同时 <code>0</code> 的数量不够。</li></ul></li><li><p><strong>返回结果</strong>：</p><ul><li>从后往前遍历 <code>sandwiches</code>，根据 <code>diff</code> 来判断无法吃午餐的学生数量。</li><li>如果 <code>diff &lt; 0</code>， 从后往前遍历 <code>sandwiches</code>，统计到第 <code>|diff|</code> 个 <code>0</code> 时，这之后的所有人都没有午饭吃。</li><li>如果 <code>diff &gt; 0</code>， 从后往前遍历 <code>sandwiches</code>，统计到第 <code>|diff|</code> 个 <code>1</code> 时，这之后的所有人都没有午饭吃。</li></ul></li></ol><h4 id="复杂度分析" tabindex="-1"><a class="header-anchor" href="#复杂度分析" aria-hidden="true">#</a> 复杂度分析</h4><ul><li><strong>时间复杂度</strong>：<code>O(n)</code>，需要遍历三明治数组。</li><li><strong>空间复杂度</strong>：<code>O(1)</code>，只使用常数额外空间。</li></ul><h2 id="代码" tabindex="-1"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> <span class="token function-variable function">countStudents</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">students<span class="token punctuation">,</span> sandwiches</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">const</span> n <span class="token operator">=</span> sandwiches<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
	<span class="token comment">// 统计学生和三明治的需求</span>
	<span class="token keyword">const</span> sandCount <span class="token operator">=</span> sandwiches<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">acc<span class="token punctuation">,</span> cur</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> acc <span class="token operator">+</span> cur<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 三明治中 1 的数量</span>
	<span class="token keyword">const</span> stuCount <span class="token operator">=</span> students<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">acc<span class="token punctuation">,</span> cur</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> acc <span class="token operator">+</span> cur<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 学生中 1 的需求数量</span>

	<span class="token keyword">const</span> diff <span class="token operator">=</span> sandCount <span class="token operator">-</span> stuCount<span class="token punctuation">;</span> <span class="token comment">// 不同种类需求差异</span>

	<span class="token comment">// 如果需求完全满足</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>diff <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>

	<span class="token comment">// 统计未满足的学生</span>
	<span class="token keyword">let</span> zeroCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">let</span> oneCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>sandwiches<span class="token punctuation">[</span>n <span class="token operator">-</span> i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			oneCount<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment">// 当前为 1 的三明治</span>
		<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
			zeroCount<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment">// 当前为 0 的三明治</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>diff <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> zeroCount <span class="token operator">+</span> diff <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> i<span class="token punctuation">;</span> <span class="token comment">// 0 的需求无法满足</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>diff <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> oneCount <span class="token operator">-</span> diff <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> i<span class="token punctuation">;</span> <span class="token comment">// 1 的需求无法满足</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="相关题目" tabindex="-1"><a class="header-anchor" href="#相关题目" aria-hidden="true">#</a> 相关题目</h2>`,31),q=n("thead",null,[n("tr",null,[n("th",{style:{"text-align":"center"}},"题号"),n("th",{style:{"text-align":"left"}},"标题"),n("th",{style:{"text-align":"center"}},"题解"),n("th",{style:{"text-align":"left"}},"标签"),n("th",{style:{"text-align":"center"}},"难度"),n("th",{style:{"text-align":"center"}},"力扣")])],-1),C=n("td",{style:{"text-align":"center"}},"2073",-1),j=n("td",{style:{"text-align":"left"}},"买票需要的时间",-1),E={style:{"text-align":"center"}},F={style:{"text-align":"left"}},I=n("code",null,"队列",-1),L=n("code",null,"数组",-1),N=n("code",null,"模拟",-1),O=n("td",{style:{"text-align":"center"}},"🟢",-1),T={style:{"text-align":"center"}},V={href:"https://leetcode.cn/problems/time-needed-to-buy-tickets",target:"_blank",rel:"noopener noreferrer"},z={href:"https://leetcode.com/problems/time-needed-to-buy-tickets",target:"_blank",rel:"noopener noreferrer"};function B(R,A){const l=c("font"),a=c("RouterLink"),o=c("ExternalLinkIcon");return p(),i("div",null,[k,n("p",null,[s("🟢 "),e(l,{color:"#15bd66"},{default:t(()=>[s("Easy")]),_:1}),s("  🔖  "),e(a,{to:"/tag/stack.html"},{default:t(()=>[m]),_:1}),s(),e(a,{to:"/tag/queue.html"},{default:t(()=>[f]),_:1}),s(),e(a,{to:"/tag/array.html"},{default:t(()=>[g]),_:1}),s(),e(a,{to:"/tag/simulation.html"},{default:t(()=>[b]),_:1}),s("  🔗 "),n("a",_,[w,e(o)]),s(),n("a",v,[y,e(o)])]),x,r(" prettier-ignore "),n("table",null,[q,n("tbody",null,[n("tr",null,[C,j,n("td",E,[e(a,{to:"/problem/2073.html"},{default:t(()=>[s("[✓]")]),_:1})]),n("td",F,[e(a,{to:"/tag/queue.html"},{default:t(()=>[I]),_:1}),s(),e(a,{to:"/tag/array.html"},{default:t(()=>[L]),_:1}),s(),e(a,{to:"/tag/simulation.html"},{default:t(()=>[N]),_:1})]),O,n("td",T,[n("a",V,[s("🀄️"),e(o)]),s(),n("a",z,[s("🔗"),e(o)])])])])])])}const H=d(h,[["render",B],["__file","1700.html.vue"]]);export{H as default};
