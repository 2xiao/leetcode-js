import{_ as i,r as c,o as r,c as d,a as n,b as t,d as s,w as e,f as u,e as l}from"./app-B5EG-zH0.js";const k={},h=n("h1",{id:"_394-字符串解码",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_394-字符串解码","aria-hidden":"true"},"#"),t(" 394. 字符串解码")],-1),_=n("code",null,"栈",-1),m=n("code",null,"递归",-1),g=n("code",null,"字符串",-1),b={href:"https://leetcode.cn/problems/decode-string",target:"_blank",rel:"noopener noreferrer"},f=n("code",null,"力扣",-1),v={href:"https://leetcode.com/problems/decode-string",target:"_blank",rel:"noopener noreferrer"},y=n("code",null,"LeetCode",-1),x=l('<h2 id="题目" tabindex="-1"><a class="header-anchor" href="#题目" aria-hidden="true">#</a> 题目</h2><p>Given an encoded string, return its decoded string.</p><p>The encoding rule is: <code>k[encoded_string]</code>, where the <code>encoded_string</code> inside the square brackets is being repeated exactly <code>k</code> times. Note that <code>k</code> is guaranteed to be a positive integer.</p><p>You may assume that the input string is always valid; there are no extra white spaces, square brackets are well-formed, etc. Furthermore, you may assume that the original data does not contain any digits and that digits are only for those repeat numbers, <code>k</code>. For example, there will not be input like <code>3a</code> or <code>2[4]</code>.</p><p>The test cases are generated so that the length of the output will never exceed <code>105</code>.</p><p><strong>Example 1:</strong></p><blockquote><p>Input: s = &quot;3[a]2[bc]&quot;</p><p>Output: &quot;aaabcbc&quot;</p></blockquote><p><strong>Example 2:</strong></p><blockquote><p>Input: s = &quot;3[a2[c]]&quot;</p><p>Output: &quot;accaccacc&quot;</p></blockquote><p><strong>Example 3:</strong></p><blockquote><p>Input: s = &quot;2[abc]3[cd]ef&quot;</p><p>Output: &quot;abcabccdcdcdef&quot;</p></blockquote><p><strong>Constraints:</strong></p><ul><li><code>1 &lt;= s.length &lt;= 30</code></li><li><code>s</code> consists of lowercase English letters, digits, and square brackets <code>&#39;[]&#39;</code>.</li><li><code>s</code> is guaranteed to be <strong>a valid</strong> input.</li><li>All the integers in <code>s</code> are in the range <code>[1, 300]</code>.</li></ul><h2 id="题目大意" tabindex="-1"><a class="header-anchor" href="#题目大意" aria-hidden="true">#</a> 题目大意</h2><p>给定一个经过编码的字符串，返回它解码后的字符串。</p><p>编码规则为: <code>k[encoded_string]</code>，表示其中方括号内部的 <code>encoded_string</code> 正好重复 <code>k</code> 次。注意 <code>k</code> 保证为正整数。</p><p>你可以认为输入字符串总是有效的；输入字符串中没有额外的空格，且输入的方括号总是符合格式要求的。</p><p>此外，你可以认为原始数据不包含数字，所有的数字只表示重复的次数 <code>k</code> ，例如不会出现像 <code>3a</code> 或 <code>2[4]</code> 的输入。</p><h2 id="解题思路" tabindex="-1"><a class="header-anchor" href="#解题思路" aria-hidden="true">#</a> 解题思路</h2>',19),w=n("code",null,"2[a2[bc]]",-1),q=n("code",null,"2[abcbc]",-1),N=n("code",null,"abcbcabcbc",-1),S=n("strong",null,"栈",-1),E=l(`<ol><li>初始化一个栈，用于保存未处理完的嵌套结构。</li><li>使用两个变量： <ul><li><code>curStr</code>：存储当前层的字符串。</li><li><code>curNum</code>：存储当前层的重复次数。</li></ul></li><li>遍历字符串，依次处理每个字符： <ul><li>如果是数字，更新 <code>curNum</code>，可能是多位数，将数字完整读取。</li><li>如果是字母，累加到当前构建的字符串 <code>curStr</code>。</li><li>如果是 <code>[</code>，表示新的一层嵌套，将当前的字符串和重复次数 <code>[curStr, curNum]</code> 压入栈中，准备处理嵌套部分。</li><li>如果是 <code>]</code>，表示嵌套结束，从栈中弹出上层的字符串和重复次数，将当前层的解码结果拼接到之前的结果中。</li></ul></li><li>遍历结束后，栈中的最终结果即为解码后的字符串。</li></ol><h4 id="复杂度分析" tabindex="-1"><a class="header-anchor" href="#复杂度分析" aria-hidden="true">#</a> 复杂度分析</h4><ul><li><strong>时间复杂度</strong>: <code>O(n)</code>，每个字符只被处理一次。</li><li><strong>空间复杂度</strong>: <code>O(d)</code>，<code>d</code> 为嵌套深度。</li></ul><h2 id="代码" tabindex="-1"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>string<span class="token punctuation">}</span></span> <span class="token parameter">s</span>
 * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>string<span class="token punctuation">}</span></span>
 */</span>
<span class="token keyword">var</span> <span class="token function-variable function">decodeString</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">s</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">let</span> stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token keyword">let</span> curStr <span class="token operator">=</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">;</span> <span class="token comment">// 当前层的字符串</span>
	<span class="token keyword">let</span> curNum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// 当前层的数字</span>

	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> char <span class="token keyword">of</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isNaN</span><span class="token punctuation">(</span>char<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token comment">// 当前字符是数字</span>
			curNum <span class="token operator">=</span> curNum <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>char<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>char <span class="token operator">===</span> <span class="token string">&#39;[&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token comment">// 遇到左括号，将当前状态保存到栈中</span>
			stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">[</span>curStr<span class="token punctuation">,</span> curNum<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			curStr <span class="token operator">=</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">;</span> <span class="token comment">// 重置当前字符串</span>
			curNum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// 重置当前数字</span>
		<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>char <span class="token operator">===</span> <span class="token string">&#39;]&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token comment">// 遇到右括号，处理嵌套结束</span>
			<span class="token keyword">let</span> <span class="token punctuation">[</span>prevStr<span class="token punctuation">,</span> num<span class="token punctuation">]</span> <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			curStr <span class="token operator">=</span> prevStr <span class="token operator">+</span> curStr<span class="token punctuation">.</span><span class="token function">repeat</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
			<span class="token comment">// 当前字符是普通字母</span>
			curStr <span class="token operator">+=</span> char<span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">return</span> curStr<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="相关题目" tabindex="-1"><a class="header-anchor" href="#相关题目" aria-hidden="true">#</a> 相关题目</h2>`,6),I=n("thead",null,[n("tr",null,[n("th",{style:{"text-align":"center"}},"题号"),n("th",{style:{"text-align":"left"}},"标题"),n("th",{style:{"text-align":"center"}},"题解"),n("th",{style:{"text-align":"left"}},"标签"),n("th",{style:{"text-align":"center"}},"难度"),n("th",{style:{"text-align":"center"}},"力扣")])],-1),C=n("td",{style:{"text-align":"center"}},"471",-1),L=n("td",{style:{"text-align":"left"}},"编码最短长度的字符串 🔒",-1),O=n("td",{style:{"text-align":"center"}},null,-1),V={style:{"text-align":"left"}},j=n("code",null,"字符串",-1),B=n("code",null,"动态规划",-1),T=n("td",{style:{"text-align":"center"}},"🔴",-1),F={style:{"text-align":"center"}},R={href:"https://leetcode.cn/problems/encode-string-with-shortest-length",target:"_blank",rel:"noopener noreferrer"},A={href:"https://leetcode.com/problems/encode-string-with-shortest-length",target:"_blank",rel:"noopener noreferrer"},G=n("td",{style:{"text-align":"center"}},"726",-1),M=n("td",{style:{"text-align":"left"}},"原子的数量",-1),Y=n("td",{style:{"text-align":"center"}},null,-1),z={style:{"text-align":"left"}},D=n("code",null,"栈",-1),H=n("code",null,"哈希表",-1),J=n("code",null,"字符串",-1),K=n("code",null,"1+",-1),P=n("td",{style:{"text-align":"center"}},"🔴",-1),Q={style:{"text-align":"center"}},U={href:"https://leetcode.cn/problems/number-of-atoms",target:"_blank",rel:"noopener noreferrer"},W={href:"https://leetcode.com/problems/number-of-atoms",target:"_blank",rel:"noopener noreferrer"},X=n("td",{style:{"text-align":"center"}},"1087",-1),Z=n("td",{style:{"text-align":"left"}},"花括号展开 🔒",-1),$=n("td",{style:{"text-align":"center"}},null,-1),nn={style:{"text-align":"left"}},tn=n("code",null,"广度优先搜索",-1),sn=n("code",null,"字符串",-1),en=n("code",null,"回溯",-1),an=n("td",{style:{"text-align":"center"}},"🟠",-1),on={style:{"text-align":"center"}},cn={href:"https://leetcode.cn/problems/brace-expansion",target:"_blank",rel:"noopener noreferrer"},ln={href:"https://leetcode.com/problems/brace-expansion",target:"_blank",rel:"noopener noreferrer"};function pn(rn,dn){const p=c("font"),a=c("RouterLink"),o=c("ExternalLinkIcon");return r(),d("div",null,[h,n("p",null,[t("🟠 "),s(p,{color:"#ffb800"},{default:e(()=>[t("Medium")]),_:1}),t("  🔖  "),s(a,{to:"/tag/stack.html"},{default:e(()=>[_]),_:1}),t(),s(a,{to:"/tag/recursion.html"},{default:e(()=>[m]),_:1}),t(),s(a,{to:"/tag/string.html"},{default:e(()=>[g]),_:1}),t("  🔗 "),n("a",b,[f,s(o)]),t(),n("a",v,[y,s(o)])]),x,n("p",null,[t("本题和 "),s(a,{to:"/problem/0880.html"},{default:e(()=>[t("第 880 题")]),_:1}),t(" 类似。需要注意，本题中可能出现括号嵌套的情况，比如 "),w,t("，这种情况下可以先转化成 "),q,t("，再转化成 "),N,t("，可以使用 "),S,t(" 解决嵌套问题。")]),E,u(" prettier-ignore "),n("table",null,[I,n("tbody",null,[n("tr",null,[C,L,O,n("td",V,[s(a,{to:"/tag/string.html"},{default:e(()=>[j]),_:1}),t(),s(a,{to:"/tag/dynamic-programming.html"},{default:e(()=>[B]),_:1})]),T,n("td",F,[n("a",R,[t("🀄️"),s(o)]),t(),n("a",A,[t("🔗"),s(o)])])]),n("tr",null,[G,M,Y,n("td",z,[s(a,{to:"/tag/stack.html"},{default:e(()=>[D]),_:1}),t(),s(a,{to:"/tag/hash-table.html"},{default:e(()=>[H]),_:1}),t(),s(a,{to:"/tag/string.html"},{default:e(()=>[J]),_:1}),t(),K]),P,n("td",Q,[n("a",U,[t("🀄️"),s(o)]),t(),n("a",W,[t("🔗"),s(o)])])]),n("tr",null,[X,Z,$,n("td",nn,[s(a,{to:"/tag/breadth-first-search.html"},{default:e(()=>[tn]),_:1}),t(),s(a,{to:"/tag/string.html"},{default:e(()=>[sn]),_:1}),t(),s(a,{to:"/tag/backtracking.html"},{default:e(()=>[en]),_:1})]),an,n("td",on,[n("a",cn,[t("🀄️"),s(o)]),t(),n("a",ln,[t("🔗"),s(o)])])])])])])}const kn=i(k,[["render",pn],["__file","0394.html.vue"]]);export{kn as default};
