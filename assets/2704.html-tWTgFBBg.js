import{_ as c,r as a,o as p,c as u,a as n,b as e,d as o,w as r,e as s}from"./app-aQeLbVW9.js";const d={},i=n("h1",{id:"_2704-相等还是不相等",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_2704-相等还是不相等","aria-hidden":"true"},"#"),e(" 2704. 相等还是不相等")],-1),h={href:"https://leetcode.cn/problems/to-be-or-not-to-be",target:"_blank",rel:"noopener noreferrer"},k=n("code",null,"力扣",-1),v={href:"https://leetcode.com/problems/to-be-or-not-to-be",target:"_blank",rel:"noopener noreferrer"},_=n("code",null,"LeetCode",-1),m=s('<h2 id="题目" tabindex="-1"><a class="header-anchor" href="#题目" aria-hidden="true">#</a> 题目</h2><p>Write a function <code>expect</code> that helps developers test their code. It should take in any value <code>val</code> and return an object with the following two functions.</p><ul><li><code>toBe(val)</code> accepts another value and returns <code>true</code> if the two values <code>===</code> each other. If they are not equal, it should throw an error <code>&quot;Not Equal&quot;</code>.</li><li><code>notToBe(val)</code> accepts another value and returns <code>true</code> if the two values <code>!==</code> each other. If they are equal, it should throw an error <code>&quot;Equal&quot;</code>.</li></ul><p><strong>Example 1:</strong></p>',4),b=n("blockquote",null,[n("p",null,"Input: func = () => expect(5).toBe(5)"),n("p",{"value:true":""},"Output:"),n("p",null,"Explanation: 5 === 5 so this expression returns true.")],-1),f=n("p",null,[n("strong",null,"Example 2:")],-1),g=n("blockquote",null,[n("p",null,"Input: func = () => expect(5).toBe(null)"),n("p",{"error:NotEqual":""},"Output:"),n("p",null,'Explanation: 5 !== null so this expression throw the error "Not Equal".')],-1),x=n("p",null,[n("strong",null,"Example 3:")],-1),q=n("blockquote",null,[n("p",null,"Input: func = () => expect(5).notToBe(null)"),n("p",{"value:true":""},"Output:"),n("p",null,"Explanation: 5 !== null so this expression returns true.")],-1),w=s('<h2 id="题目大意" tabindex="-1"><a class="header-anchor" href="#题目大意" aria-hidden="true">#</a> 题目大意</h2><p>请你编写一个名为 <code>expect</code> 的函数，用于帮助开发人员测试他们的代码。它应该接受任何值 <code>val</code> 并返回一个包含以下两个函数的对象。</p><ul><li><code>toBe(val)</code> 接受另一个值并在两个值相等（ <code>===</code> ）时返回 <code>true</code> 。如果它们不相等，则应抛出错误 <code>&quot;Not Equal&quot;</code> 。</li><li><code>notToBe(val)</code> 接受另一个值并在两个值不相等（ <code>!==</code> ）时返回 <code>true</code> 。如果它们相等，则应抛出错误 <code>&quot;Equal&quot;</code> 。</li></ul><p><strong>示例 1：</strong></p>',4),B=n("blockquote",null,[n("p",null,[n("strong",null,"输入："),e(" func = () => expect(5).toBe(5)")]),n("p",null,[n("strong",{"value:true":""},"输出：")]),n("p",null,[n("strong",null,"解释："),e(" 5 === 5 因此该表达式返回 true。")])],-1),E=n("p",null,[n("strong",null,"示例 2：")],-1),y=n("blockquote",null,[n("p",null,[n("strong",null,"输入："),e(" func = () => expect(5).toBe(null)")]),n("p",null,[n("strong",{"error:NotEqual":""},"输出：")]),n("p",null,[n("strong",null,"解释："),e(' 5 !== null 因此抛出错误 "Not Equal".')])],-1),N=n("p",null,[n("strong",null,"示例 3：")],-1),T=n("blockquote",null,[n("p",null,[n("strong",null,"输入："),e(" func = () => expect(5).notToBe(null)")]),n("p",null,[n("strong",{"value:true":""},"输出：")]),n("p",null,[n("strong",null,"解释："),e(" 5 !== null 因此该表达式返回 true.")])],-1),I=s(`<h2 id="解题思路" tabindex="-1"><a class="header-anchor" href="#解题思路" aria-hidden="true">#</a> 解题思路</h2><p>这道题目是对测试框架中的断言功能的模拟，能帮助在单元测试中验证值是否符合预期，常见于像 Jest 这样的测试框架。比如常见的 <code>expect</code> 函数，用来测试代码是否符合预期。<code>toBe</code> 和 <code>notToBe</code> 就像是测试条件，用于断言两个值是否相等或不等。</p><ol><li><strong>实现 <code>expect</code> 函数</strong>： <ul><li>传入的 <code>val</code> 会在内部返回一个对象，这个对象包含两个方法：<code>toBe</code> 和 <code>notToBe</code>。</li></ul></li><li><strong><code>toBe</code> 方法</strong>： <ul><li>比较 <code>val</code> 和传入的 <code>val2</code> 是否相等，如果相等则返回 <code>true</code>，否则抛出错误 <code>&#39;Not Equal&#39;</code>。</li></ul></li><li><strong><code>notToBe</code> 方法</strong>： <ul><li>比较 <code>val</code> 和传入的 <code>val2</code> 是否不相等，如果不相等则返回 <code>true</code>，否则抛出错误 <code>&#39;Equal&#39;</code>。</li></ul></li></ol><h4 id="复杂度分析" tabindex="-1"><a class="header-anchor" href="#复杂度分析" aria-hidden="true">#</a> 复杂度分析</h4><ul><li><strong>时间复杂度</strong>：<code>O(1)</code>，因为每个操作都是常数时间的判断操作。</li><li><strong>空间复杂度</strong>：<code>O(1)</code>，因为只存储了传入的 <code>val</code> 和返回的对象，额外空间开销很小。</li></ul><h2 id="代码" tabindex="-1"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>string<span class="token punctuation">}</span></span> <span class="token parameter">val</span>
 * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>Object<span class="token punctuation">}</span></span>
 */</span>
<span class="token keyword">var</span> <span class="token function-variable function">expect</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> <span class="token punctuation">{</span>
		<span class="token function-variable function">toBe</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">val2</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span>val <span class="token operator">===</span> val2<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
			<span class="token keyword">throw</span> <span class="token string">&#39;Not Equal&#39;</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span><span class="token punctuation">,</span>
		<span class="token function-variable function">notToBe</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">val2</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span>val <span class="token operator">!==</span> val2<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
			<span class="token keyword">throw</span> <span class="token string">&#39;Equal&#39;</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * expect(5).toBe(5); // true
 * expect(5).notToBe(5); // throws &quot;Equal&quot;
 */</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,7);function O(j,V){const l=a("font"),t=a("ExternalLinkIcon");return p(),u("div",null,[i,n("p",null,[e("🟢 "),o(l,{color:"#15bd66"},{default:r(()=>[e("Easy")]),_:1}),e("  🔗 "),n("a",h,[k,o(t)]),e(),n("a",v,[_,o(t)])]),m,b,f,g,x,q,w,B,E,y,N,T,I])}const L=c(d,[["render",O],["__file","2704.html.vue"]]);export{L as default};
