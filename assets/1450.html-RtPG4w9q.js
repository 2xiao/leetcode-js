import{_ as c,r as s,o as r,c as d,a as n,b as e,d as t,w as o,e as l}from"./app-B5EG-zH0.js";const u={},m=n("h1",{id:"_1450-在既定时间做作业的学生人数",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_1450-在既定时间做作业的学生人数","aria-hidden":"true"},"#"),e(" 1450. 在既定时间做作业的学生人数")],-1),k=n("code",null,"数组",-1),h={href:"https://leetcode.cn/problems/number-of-students-doing-homework-at-a-given-time",target:"_blank",rel:"noopener noreferrer"},g=n("code",null,"力扣",-1),T={href:"https://leetcode.com/problems/number-of-students-doing-homework-at-a-given-time",target:"_blank",rel:"noopener noreferrer"},b=n("code",null,"LeetCode",-1),v=l(`<h2 id="题目" tabindex="-1"><a class="header-anchor" href="#题目" aria-hidden="true">#</a> 题目</h2><p>Given two integer arrays <code>startTime</code> and <code>endTime</code> and given an integer <code>queryTime</code>.</p><p>The <code>ith</code> student started doing their homework at the time <code>startTime[i]</code> and finished it at time <code>endTime[i]</code>.</p><p>Return <em>the number of students</em> doing their homework at time <code>queryTime</code>. More formally, return the number of students where <code>queryTime</code> lays in the interval <code>[startTime[i], endTime[i]]</code> inclusive.</p><p><strong>Example 1:</strong></p><blockquote><p>Input: startTime = [1,2,3], endTime = [3,2,7], queryTime = 4</p><p>Output: 1</p><p>Explanation: We have 3 students where:</p><p>The first student started doing homework at time 1 and finished at time 3 and wasn&#39;t doing anything at time 4.</p><p>The second student started doing homework at time 2 and finished at time 2 and also wasn&#39;t doing anything at time 4.</p><p>The third student started doing homework at time 3 and finished at time 7 and was the only student doing homework at time 4.</p></blockquote><p><strong>Example 2:</strong></p><blockquote><p>Input: startTime = [4], endTime = [4], queryTime = 4</p><p>Output: 1</p><p>Explanation: The only student was doing their homework at the queryTime.</p></blockquote><p><strong>Constraints:</strong></p><ul><li><code>startTime.length == endTime.length</code></li><li><code>1 &lt;= startTime.length &lt;= 100</code></li><li><code>1 &lt;= startTime[i] &lt;= endTime[i] &lt;= 1000</code></li><li><code>1 &lt;= queryTime &lt;= 1000</code></li></ul><h2 id="题目大意" tabindex="-1"><a class="header-anchor" href="#题目大意" aria-hidden="true">#</a> 题目大意</h2><p>给你两个整数数组 <code>startTime</code>（开始时间）和 <code>endTime</code>（结束时间），并指定一个整数 <code>queryTime</code> 作为查询时间。</p><p>已知，第 <code>i</code> 名学生在 <code>startTime[i]</code> 时开始写作业并于 <code>endTime[i]</code> 时完成作业。</p><p>请返回在查询时间 <code>queryTime</code> 时正在做作业的学生人数。形式上，返回能够使 <code>queryTime</code> 处于区间 <code>[startTime[i], endTime[i]]</code>（含）的学生人数。</p><p><strong>示例 1：</strong></p><blockquote><p><strong>输入：</strong> startTime = [1,2,3], endTime = [3,2,7], queryTime = 4</p><p><strong>输出：</strong> 1</p><p><strong>解释：</strong> 一共有 3 名学生。</p><p>第一名学生在时间 1 开始写作业，并于时间 3 完成作业，在时间 4 没有处于做作业的状态。</p><p>第二名学生在时间 2 开始写作业，并于时间 2 完成作业，在时间 4 没有处于做作业的状态。</p><p>第三名学生在时间 3 开始写作业，预计于时间 7 完成作业，这是是唯一一名在时间 4 时正在做作业的学生。</p></blockquote><p><strong>示例 2：</strong></p><blockquote><p><strong>输入：</strong> startTime = [4], endTime = [4], queryTime = 4</p><p><strong>输出：</strong> 1</p><p><strong>解释：</strong> 在查询时间只有一名学生在做作业。</p></blockquote><p><strong>示例 3：</strong></p><blockquote><p><strong>输入：</strong> startTime = [4], endTime = [4], queryTime = 5</p><p><strong>输出：</strong> 0</p></blockquote><p><strong>示例 4：</strong></p><blockquote><p><strong>输入：</strong> startTime = [1,1,1,1], endTime = [1,3,2,4], queryTime = 7</p><p><strong>输出：</strong> 0</p></blockquote><p><strong>示例 5：</strong></p><blockquote><p><strong>输入：</strong> startTime = [9,8,7,6,5,4,3,2,1], endTime = [10,10,10,10,10,10,10,10,10], queryTime = 5</p><p><strong>输出：</strong> 5</p></blockquote><p><strong>提示：</strong></p><ul><li><code>startTime.length == endTime.length</code></li><li><code>1 &lt;= startTime.length &lt;= 100</code></li><li><code>1 &lt;= startTime[i] &lt;= endTime[i] &lt;= 1000</code></li><li><code>1 &lt;= queryTime &lt;= 1000</code></li></ul><h2 id="解题思路" tabindex="-1"><a class="header-anchor" href="#解题思路" aria-hidden="true">#</a> 解题思路</h2><ol><li><p>定义 <code>count</code> 变量，初始值为 0，用于统计符合条件的学生人数。</p></li><li><p><strong>遍历所有学生的时间段</strong>:</p><ul><li>对于每个学生，检查 <code>queryTime</code> 是否在 <code>startTime[i]</code> 和 <code>endTime[i]</code> 之间，包括边界。</li><li>如果符合条件，递增 <code>count</code>。</li></ul></li><li><p>遍历结束后，返回计数器 <code>count</code> 的值。</p></li></ol><h4 id="复杂度分析" tabindex="-1"><a class="header-anchor" href="#复杂度分析" aria-hidden="true">#</a> 复杂度分析</h4><ul><li><strong>时间复杂度</strong>: <code>O(n)</code>，其中 <code>n</code> 是学生数量，遍历所有学生的时间段。</li><li><strong>空间复杂度</strong>: <code>O(1)</code>，仅使用了常数空间变量 <code>count</code>，空间复杂度为常数。</li></ul><h2 id="代码" tabindex="-1"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span> <span class="token parameter">startTime</span>
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span> <span class="token parameter">endTime</span>
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">}</span></span> <span class="token parameter">queryTime</span>
 * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">}</span></span>
 */</span>
<span class="token keyword">var</span> <span class="token function-variable function">busyStudent</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">startTime<span class="token punctuation">,</span> endTime<span class="token punctuation">,</span> queryTime</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> startTime<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>queryTime <span class="token operator">&gt;=</span> startTime<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> queryTime <span class="token operator">&lt;=</span> endTime<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			count<span class="token operator">++</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> count<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,32);function y(_,f){const i=s("font"),p=s("RouterLink"),a=s("ExternalLinkIcon");return r(),d("div",null,[m,n("p",null,[e("🟢 "),t(i,{color:"#15bd66"},{default:o(()=>[e("Easy")]),_:1}),e("  🔖  "),t(p,{to:"/tag/array.html"},{default:o(()=>[k]),_:1}),e("  🔗 "),n("a",h,[g,t(a)]),e(),n("a",T,[b,t(a)])]),v])}const w=c(u,[["render",y],["__file","1450.html.vue"]]);export{w as default};
