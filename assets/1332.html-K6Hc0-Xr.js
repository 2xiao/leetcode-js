import{_ as r,r as t,o as l,c as i,a as n,b as s,d as a,w as e,e as u}from"./app-fBVbqwGY.js";const d={},k=n("h1",{id:"_1332-删除回文子序列",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_1332-删除回文子序列","aria-hidden":"true"},"#"),s(" 1332. 删除回文子序列")],-1),b=n("code",null,"双指针",-1),g=n("code",null,"字符串",-1),m={href:"https://leetcode.cn/problems/remove-palindromic-subsequences",target:"_blank",rel:"noopener noreferrer"},h=n("code",null,"力扣",-1),q={href:"https://leetcode.com/problems/remove-palindromic-subsequences",target:"_blank",rel:"noopener noreferrer"},v=n("code",null,"LeetCode",-1),f=u(`<h2 id="题目" tabindex="-1"><a class="header-anchor" href="#题目" aria-hidden="true">#</a> 题目</h2><p>You are given a string <code>s</code> consisting <strong>only</strong> of letters <code>&#39;a&#39;</code> and <code>&#39;b&#39;</code>. In a single step you can remove one <strong>palindromic subsequence</strong> from <code>s</code>.</p><p>Return <em>the <strong>minimum</strong> number of steps to make the given string empty</em>.</p><p>A string is a <strong>subsequence</strong> of a given string if it is generated by deleting some characters of a given string without changing its order. Note that a subsequence does <strong>not</strong> necessarily need to be contiguous.</p><p>A string is called <strong>palindrome</strong> if is one that reads the same backward as well as forward.</p><p><strong>Example 1:</strong></p><blockquote><p>Input: s = &quot;ababa&quot;</p><p>Output: 1</p><p>Explanation: s is already a palindrome, so its entirety can be removed in a single step.</p></blockquote><p><strong>Example 2:</strong></p><blockquote><p>Input: s = &quot;abb&quot;</p><p>Output: 2</p><p>Explanation: &quot;<em>a</em> bb&quot; -&gt; &quot;<em>bb</em> &quot; -&gt; &quot;&quot;.</p><p>Remove palindromic subsequence &quot;a&quot; then &quot;bb&quot;.</p></blockquote><p><strong>Example 3:</strong></p><blockquote><p>Input: s = &quot;baabb&quot;</p><p>Output: 2</p><p>Explanation: &quot;<em>baa</em> b <em>b</em> &quot; -&gt; &quot;<em>b</em> &quot; -&gt; &quot;&quot;.</p><p>Remove palindromic subsequence &quot;baab&quot; then &quot;b&quot;.</p></blockquote><p><strong>Constraints:</strong></p><ul><li><code>1 &lt;= s.length &lt;= 1000</code></li><li><code>s[i]</code> is either <code>&#39;a&#39;</code> or <code>&#39;b&#39;</code>.</li></ul><h2 id="题目大意" tabindex="-1"><a class="header-anchor" href="#题目大意" aria-hidden="true">#</a> 题目大意</h2><p>给你一个字符串 <code>s</code>，它仅由字母 <code>&#39;a&#39;</code> 和 <code>&#39;b&#39;</code> 组成。每一次删除操作都可以从 <code>s</code> 中删除一个回文 <strong>子序列</strong> 。</p><p>返回删除给定字符串中所有字符（字符串为空）的最小删除次数。</p><p>「子序列」定义：如果一个字符串可以通过删除原字符串某些字符而不改变原字符顺序得到，那么这个字符串就是原字符串的一个子序列。</p><p>「回文」定义：如果一个字符串向后和向前读是一致的，那么这个字符串就是一个回文。</p><p><strong>示例 1：</strong></p><blockquote><p><strong>输入：</strong> s = &quot;ababa&quot;</p><p><strong>输出：</strong> 1</p><p><strong>解释：</strong> 字符串本身就是回文序列，只需要删除一次。</p></blockquote><p><strong>示例 2：</strong></p><blockquote><p><strong>输入：</strong> s = &quot;abb&quot;</p><p><strong>输出：</strong> 2</p><p><strong>解释：</strong> &quot;<strong>a</strong> bb&quot; -&gt; &quot;<strong>bb</strong> &quot; -&gt; &quot;&quot;.</p><p>先删除回文子序列 &quot;a&quot;，然后再删除 &quot;bb&quot;。</p></blockquote><p><strong>示例 3：</strong></p><blockquote><p><strong>输入：</strong> s = &quot;baabb&quot;</p><p><strong>输出：</strong> 2</p><p><strong>解释：</strong> &quot;<strong>baa</strong> b<strong>b</strong> &quot; -&gt; &quot;b&quot; -&gt; &quot;&quot;.</p><p>先删除回文子序列 &quot;baab&quot;，然后再删除 &quot;b&quot;。</p></blockquote><p><strong>提示：</strong></p><ul><li><code>1 &lt;= s.length &lt;= 1000</code></li><li><code>s</code> 仅包含字母 <code>&#39;a&#39;</code> 和 <code>&#39;b&#39;</code></li></ul><h2 id="解题思路" tabindex="-1"><a class="header-anchor" href="#解题思路" aria-hidden="true">#</a> 解题思路</h2><ol><li><p>如果字符串 <code>s</code> 本身就是回文，那么只需要移除一次子序列即可（直接移除整个字符串）。</p></li><li><p>如果 <code>s</code> 不是回文字符串，则最少只需要进行两次移除操作：</p><ul><li>先移除所有的 <code>a</code>，然后移除所有的 <code>b</code></li></ul></li><li><p><strong>特殊情况：</strong> 当字符串 <code>s</code> 为空时，直接返回 <code>0</code>，因为没有子序列可移除。</p></li></ol><h4 id="复杂度分析" tabindex="-1"><a class="header-anchor" href="#复杂度分析" aria-hidden="true">#</a> 复杂度分析</h4><ul><li><strong>时间复杂度</strong>：<code>O(n)</code>，其中 <code>n</code> 是字符串 <code>s</code> 的长度，在判断回文时需要遍历字符串的一半。</li><li><strong>空间复杂度</strong>：<code>O(1)</code>，只用了常数的额外空间。</li></ul><h2 id="代码" tabindex="-1"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>string<span class="token punctuation">}</span></span> <span class="token parameter">s</span>
 * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">}</span></span>
 */</span>
<span class="token keyword">var</span> <span class="token function-variable function">removePalindromeSub</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">s</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">const</span> <span class="token function-variable function">isPalindrome</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">s</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
		<span class="token keyword">let</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>
			right <span class="token operator">=</span> s<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
		<span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">!==</span> s<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
			left<span class="token operator">++</span><span class="token punctuation">;</span>
			right<span class="token operator">--</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span><span class="token punctuation">;</span>

	<span class="token comment">// 空字符串直接返回 0</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token comment">// 如果字符串本身是回文，返回 1</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isPalindrome</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token comment">// 否则返回 2</span>
	<span class="token keyword">return</span> <span class="token number">2</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,32);function _(w,y){const c=t("font"),o=t("RouterLink"),p=t("ExternalLinkIcon");return l(),i("div",null,[k,n("p",null,[s("🟢 "),a(c,{color:"#15bd66"},{default:e(()=>[s("Easy")]),_:1}),s("  🔖  "),a(o,{to:"/tag/two-pointers.html"},{default:e(()=>[b]),_:1}),s(),a(o,{to:"/tag/string.html"},{default:e(()=>[g]),_:1}),s("  🔗 "),n("a",m,[h,a(p)]),s(),n("a",q,[v,a(p)])]),f])}const E=r(d,[["render",_],["__file","1332.html.vue"]]);export{E as default};
