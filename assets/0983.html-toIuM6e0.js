import{_ as l,r as c,o as i,c as d,a as n,b as s,d as a,w as t,f as r,e as u}from"./app-fBVbqwGY.js";const k={},h=n("h1",{id:"_983-最低票价",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_983-最低票价","aria-hidden":"true"},"#"),s(" 983. 最低票价")],-1),y=n("code",null,"数组",-1),m=n("code",null,"动态规划",-1),g={href:"https://leetcode.cn/problems/minimum-cost-for-tickets",target:"_blank",rel:"noopener noreferrer"},_=n("code",null,"力扣",-1),v={href:"https://leetcode.com/problems/minimum-cost-for-tickets",target:"_blank",rel:"noopener noreferrer"},b=n("code",null,"LeetCode",-1),f=u(`<h2 id="题目" tabindex="-1"><a class="header-anchor" href="#题目" aria-hidden="true">#</a> 题目</h2><p>You have planned some train traveling one year in advance. The days of the year in which you will travel are given as an integer array <code>days</code>. Each day is an integer from <code>1</code> to <code>365</code>.</p><p>Train tickets are sold in <strong>three different ways</strong> :</p><ul><li>a <strong>1-day</strong> pass is sold for <code>costs[0]</code> dollars,</li><li>a <strong>7-day</strong> pass is sold for <code>costs[1]</code> dollars, and</li><li>a <strong>30-day</strong> pass is sold for <code>costs[2]</code> dollars.</li></ul><p>The passes allow that many days of consecutive travel.</p><ul><li>For example, if we get a <strong>7-day</strong> pass on day <code>2</code>, then we can travel for <code>7</code> days: <code>2</code>, <code>3</code>, <code>4</code>, <code>5</code>, <code>6</code>, <code>7</code>, and <code>8</code>.</li></ul><p>Return <em>the minimum number of dollars you need to travel every day in the given list of days</em>.</p><p><strong>Example 1:</strong></p><blockquote><p>Input: days = [1,4,6,7,8,20], costs = [2,7,15]</p><p>Output: 11</p><p>Explanation: For example, here is one way to buy passes that lets you travel your travel plan:</p><p>On day 1, you bought a 1-day pass for costs[0] = $2, which covered day 1.</p><p>On day 3, you bought a 7-day pass for costs[1] = $7, which covered days 3, 4, ..., 9.</p><p>On day 20, you bought a 1-day pass for costs[0] = $2, which covered day 20.</p><p>In total, you spent $11 and covered all the days of your travel.</p></blockquote><p><strong>Example 2:</strong></p><blockquote><p>Input: days = [1,2,3,4,5,6,7,8,9,10,30,31], costs = [2,7,15]</p><p>Output: 17</p><p>Explanation: For example, here is one way to buy passes that lets you travel your travel plan:</p><p>On day 1, you bought a 30-day pass for costs[2] = $15 which covered days 1, 2, ..., 30.</p><p>On day 31, you bought a 1-day pass for costs[0] = $2 which covered day 31.</p><p>In total, you spent $17 and covered all the days of your travel.</p></blockquote><p><strong>Constraints:</strong></p><ul><li><code>1 &lt;= days.length &lt;= 365</code></li><li><code>1 &lt;= days[i] &lt;= 365</code></li><li><code>days</code> is in strictly increasing order.</li><li><code>costs.length == 3</code></li><li><code>1 &lt;= costs[i] &lt;= 1000</code></li></ul><h2 id="题目大意" tabindex="-1"><a class="header-anchor" href="#题目大意" aria-hidden="true">#</a> 题目大意</h2><p>在一个火车旅行很受欢迎的国度，你提前一年计划了一些火车旅行。在接下来的一年里，你要旅行的日子将以一个名为 <code>days</code> 的数组给出。每一项是一个从 <code>1</code> 到 <code>365</code> 的整数。</p><p>火车票有 <strong>三种不同的销售方式</strong> ：</p><ul><li>一张 <strong>为期一天</strong> 的通行证售价为 <code>costs[0]</code> 美元；</li><li>一张 <strong>为期七天</strong> 的通行证售价为 <code>costs[1]</code> 美元；</li><li>一张 <strong>为期三十天</strong> 的通行证售价为 <code>costs[2]</code> 美元。</li></ul><p>通行证允许数天无限制的旅行。 例如，如果我们在第 <code>2</code> 天获得一张 <strong>为期 7 天</strong> 的通行证，那么我们可以连着旅行 7 天：第 <code>2</code> 天、第 <code>3</code> 天、第 <code>4</code> 天、第 <code>5</code> 天、第 <code>6</code> 天、第 <code>7</code> 天和第 <code>8</code> 天。</p><p>返回 _你想要完成在给定的列表 <code>days</code> 中列出的每一天的旅行所需要的最低消费 _。</p><p><strong>示例 1：</strong></p><blockquote><p><strong>输入：</strong> days = [1,4,6,7,8,20], costs = [2,7,15]</p><p><strong>输出：</strong> 11</p><p><strong>解释：</strong></p><p>例如，这里有一种购买通行证的方法，可以让你完成你的旅行计划：</p><p>在第 1 天，你花了 costs[0] = $2 买了一张为期 1 天的通行证，它将在第 1 天生效。</p><p>在第 3 天，你花了 costs[1] = $7 买了一张为期 7 天的通行证，它将在第 3, 4, ..., 9 天生效。</p><p>在第 20 天，你花了 costs[0] = $2 买了一张为期 1 天的通行证，它将在第 20 天生效。</p><p>你总共花了 $11，并完成了你计划的每一天旅行。</p></blockquote><p><strong>示例 2：</strong></p><blockquote><p><strong>输入：</strong> days = [1,2,3,4,5,6,7,8,9,10,30,31], costs = [2,7,15]</p><p><strong>输出：</strong> 17</p><p><strong>解释：</strong> 例如，这里有一种购买通行证的方法，可以让你完成你的旅行计划：</p><p>在第 1 天，你花了 costs[2] = $15 买了一张为期 30 天的通行证，它将在第 1, 2, ..., 30 天生效。</p><p>在第 31 天，你花了 costs[0] = $2 买了一张为期 1 天的通行证，它将在第 31 天生效。</p><p>你总共花了 $17，并完成了你计划的每一天旅行。</p></blockquote><p><strong>提示：</strong></p><ul><li><code>1 &lt;= days.length &lt;= 365</code></li><li><code>1 &lt;= days[i] &lt;= 365</code></li><li><code>days</code> 按顺序严格递增</li><li><code>costs.length == 3</code></li><li><code>1 &lt;= costs[i] &lt;= 1000</code></li></ul><h2 id="解题思路" tabindex="-1"><a class="header-anchor" href="#解题思路" aria-hidden="true">#</a> 解题思路</h2><ol><li><p><strong>状态定义</strong>： 定义 <code>dp[i]</code> 表示第 <code>i</code> 天为止的最低花费。</p></li><li><p><strong>状态转移方程</strong>：</p><ul><li>如果第 <code>i</code> 天不是旅行日，则继承前一天的花费： <code>dp[i] = dp[i - 1]</code></li><li>如果第 <code>i</code> 天是旅行日，有三种购买车票方案： <ol><li>若购买一日票，价格为 <code>costs[0]</code>，花费为 <code>oneDay = costs[0] + dp[i - 1]</code>。</li><li>若购买七日票，价格为 <code>costs[1]</code>，花费为 <code>sevenDays = costs[1] + dp[max(0, i - 7)]</code>。</li><li>若购买三十日票，价格为 <code>costs[2]</code>，花费为 <code>thirtyDays = costs[2] + dp[max(0, i - 30)]</code>。</li></ol></li><li>选择三种车票方案中的最小值： <code>dp[i] = min(oneDay, sevenDays, thirtyDays)</code></li></ul></li><li><p><strong>边界条件</strong>：</p><ul><li>第 0 天的花费为 0：<code>dp[0] = 0</code>。</li></ul></li><li><p><strong>最终结果</strong>：</p><ul><li>返回 <code>dp[lastDay]</code>，即最后一天的最低花费。</li></ul></li></ol><h4 id="复杂度分析" tabindex="-1"><a class="header-anchor" href="#复杂度分析" aria-hidden="true">#</a> 复杂度分析</h4><ul><li><strong>时间复杂度</strong>：<code>O(lastDay)</code>，因为每一天都需要根据状态转移方程计算。</li><li><strong>空间复杂度</strong>：<code>O(lastDay)</code>，存储动态规划数组 <code>dp</code>。</li></ul><h2 id="代码" tabindex="-1"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span> <span class="token parameter">days</span>
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span> <span class="token parameter">costs</span>
 * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">}</span></span>
 */</span>
<span class="token keyword">var</span> <span class="token function-variable function">mincostTickets</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">days<span class="token punctuation">,</span> costs</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">const</span> travelDay <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span>days<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 旅行日期集合</span>
	<span class="token keyword">const</span> lastDay <span class="token operator">=</span> days<span class="token punctuation">[</span>days<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 最后一天</span>
	<span class="token keyword">let</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>lastDay <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// dp[i] 初始化为 0</span>

	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> lastDay<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>travelDay<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 非旅行日，花费不变</span>
			<span class="token keyword">continue</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		<span class="token comment">// 计算三种方案的花费</span>
		<span class="token keyword">const</span> oneDay <span class="token operator">=</span> costs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
		<span class="token keyword">const</span> sevenDays <span class="token operator">=</span> costs<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> dp<span class="token punctuation">[</span>Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> i <span class="token operator">-</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
		<span class="token keyword">const</span> thirtyDays <span class="token operator">=</span> costs<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">+</span> dp<span class="token punctuation">[</span>Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> i <span class="token operator">-</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
		dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>oneDay<span class="token punctuation">,</span> sevenDays<span class="token punctuation">,</span> thirtyDays<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> dp<span class="token punctuation">[</span>lastDay<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="相关题目" tabindex="-1"><a class="header-anchor" href="#相关题目" aria-hidden="true">#</a> 相关题目</h2>`,32),x=n("thead",null,[n("tr",null,[n("th",{style:{"text-align":"center"}},"题号"),n("th",{style:{"text-align":"left"}},"标题"),n("th",{style:{"text-align":"center"}},"题解"),n("th",{style:{"text-align":"left"}},"标签"),n("th",{style:{"text-align":"center"}},"难度"),n("th",{style:{"text-align":"center"}},"力扣")])],-1),w=n("td",{style:{"text-align":"center"}},"322",-1),D=n("td",{style:{"text-align":"left"}},"零钱兑换",-1),$={style:{"text-align":"center"}},O={style:{"text-align":"left"}},q=n("code",null,"广度优先搜索",-1),E=n("code",null,"数组",-1),I=n("code",null,"动态规划",-1),C=n("td",{style:{"text-align":"center"}},"🟠",-1),L={style:{"text-align":"center"}},N={href:"https://leetcode.cn/problems/coin-change",target:"_blank",rel:"noopener noreferrer"},T={href:"https://leetcode.com/problems/coin-change",target:"_blank",rel:"noopener noreferrer"},V=n("td",{style:{"text-align":"center"}},"2979",-1),M=n("td",{style:{"text-align":"left"}},"最贵的无法购买的商品 🔒",-1),j=n("td",{style:{"text-align":"center"}},null,-1),B={style:{"text-align":"left"}},F=n("code",null,"数学",-1),R=n("code",null,"动态规划",-1),S=n("code",null,"数论",-1),A=n("td",{style:{"text-align":"center"}},"🟠",-1),Y={style:{"text-align":"center"}},z={href:"https://leetcode.cn/problems/most-expensive-item-that-can-not-be-bought",target:"_blank",rel:"noopener noreferrer"},G={href:"https://leetcode.com/problems/most-expensive-item-that-can-not-be-bought",target:"_blank",rel:"noopener noreferrer"};function H(J,K){const p=c("font"),e=c("RouterLink"),o=c("ExternalLinkIcon");return i(),d("div",null,[h,n("p",null,[s("🟠 "),a(p,{color:"#ffb800"},{default:t(()=>[s("Medium")]),_:1}),s("  🔖  "),a(e,{to:"/tag/array.html"},{default:t(()=>[y]),_:1}),s(),a(e,{to:"/tag/dynamic-programming.html"},{default:t(()=>[m]),_:1}),s("  🔗 "),n("a",g,[_,a(o)]),s(),n("a",v,[b,a(o)])]),f,r(" prettier-ignore "),n("table",null,[x,n("tbody",null,[n("tr",null,[w,D,n("td",$,[a(e,{to:"/problem/0322.html"},{default:t(()=>[s("[✓]")]),_:1})]),n("td",O,[a(e,{to:"/tag/breadth-first-search.html"},{default:t(()=>[q]),_:1}),s(),a(e,{to:"/tag/array.html"},{default:t(()=>[E]),_:1}),s(),a(e,{to:"/tag/dynamic-programming.html"},{default:t(()=>[I]),_:1})]),C,n("td",L,[n("a",N,[s("🀄️"),a(o)]),s(),n("a",T,[s("🔗"),a(o)])])]),n("tr",null,[V,M,j,n("td",B,[a(e,{to:"/tag/math.html"},{default:t(()=>[F]),_:1}),s(),a(e,{to:"/tag/dynamic-programming.html"},{default:t(()=>[R]),_:1}),s(),a(e,{to:"/tag/number-theory.html"},{default:t(()=>[S]),_:1})]),A,n("td",Y,[n("a",z,[s("🀄️"),a(o)]),s(),n("a",G,[s("🔗"),a(o)])])])])])])}const Q=l(k,[["render",H],["__file","0983.html.vue"]]);export{Q as default};
