import{_ as d,r,o as _,c,a as t,d as o,w as n,b as e,f as a}from"./app-aQeLbVW9.js";const i={},h=t("h1",{id:"树",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#树","aria-hidden":"true"},"#"),e(" 树")],-1),g=t("summary",null,"全部标签",-1),f=t("p",null,[t("strong",null,"数据结构")],-1),u=t("code",null,"数组",-1),m=t("code",null,"矩阵",-1),p=t("code",null,"链表",-1),y=t("code",null,"双向链表",-1),b=t("code",null,"栈",-1),x=t("code",null,"单调栈",-1),k=t("code",null,"队列",-1),v=t("code",null,"单调队列",-1),w=t("code",null,"堆（优先队列）",-1),q=t("code",null,"哈希表",-1),I=t("code",null,"字符串",-1),z=t("code",null,"字符串匹配",-1),N=t("span",{class:"blue"},"树",-1),V=t("code",null,"二叉树",-1),K=t("code",null,"二叉搜索树",-1),L=t("code",null,"最小生成树",-1),j=t("code",null,"图",-1),B=t("code",null,"有序集合",-1),C=t("code",null,"拓扑排序",-1),E=t("code",null,"最短路",-1),R=t("code",null,"强连通分量",-1),T=t("code",null,"欧拉回路",-1),A=t("code",null,"双连通分量",-1),D=t("code",null,"并查集",-1),F=t("code",null,"字典树",-1),G=t("code",null,"线段树",-1),H=t("code",null,"树状数组",-1),J=t("code",null,"后缀数组",-1),M=t("p",null,[t("strong",null,"算法")],-1),O=t("code",null,"枚举",-1),P=t("code",null,"递归",-1),Q=t("code",null,"分治",-1),S=t("code",null,"回溯",-1),U=t("code",null,"贪心",-1),W=t("code",null,"动态规划",-1),X=t("code",null,"排序",-1),Y=t("code",null,"桶排序",-1),Z=t("code",null,"计数排序",-1),$=t("code",null,"基数排序",-1),tt=t("code",null,"归并排序",-1),et=t("code",null,"快速选择",-1),ot=t("code",null,"二分查找",-1),lt=t("code",null,"记忆化搜索",-1),nt=t("code",null,"深度优先搜索",-1),st=t("code",null,"广度优先搜索",-1),rt=t("code",null,"双指针",-1),dt=t("code",null,"位运算",-1),_t=t("code",null,"前缀和",-1),ct=t("code",null,"计数",-1),at=t("code",null,"滑动窗口",-1),it=t("code",null,"状态压缩",-1),ht=t("code",null,"哈希函数",-1),gt=t("code",null,"滚动哈希",-1),ft=t("code",null,"扫描线",-1),ut=t("p",null,[t("strong",null,"其他")],-1),mt=t("code",null,"数学",-1),pt=t("code",null,"数论",-1),yt=t("code",null,"几何",-1),bt=t("code",null,"博弈",-1),xt=t("code",null,"模拟",-1),kt=t("code",null,"组合数学",-1),vt=t("code",null,"随机化",-1),wt=t("code",null,"概率与统计",-1),qt=t("code",null,"水塘抽样",-1),It=t("code",null,"拒绝采样",-1),zt=t("code",null,"数据库",-1),Nt=t("code",null,"设计",-1),Vt=t("code",null,"数据流",-1),Kt=t("code",null,"脑筋急转弯",-1),Lt=t("code",null,"交互",-1),jt=t("code",null,"迭代器",-1),Bt=t("code",null,"多线程",-1),Ct=t("hr",null,null,-1),Et=t("thead",null,[t("tr",null,[t("th",{style:{"text-align":"center"}},"题号"),t("th",{style:{"text-align":"left"}},"标题"),t("th",{style:{"text-align":"center"}},"题解"),t("th",{style:{"text-align":"left"}},"标签"),t("th",{style:{"text-align":"center"}},"难度"),t("th",{style:{"text-align":"center"}},"力扣")])],-1),Rt=t("td",{style:{"text-align":"center"}},"94",-1),Tt=t("td",{style:{"text-align":"left"}},"二叉树的中序遍历",-1),At={style:{"text-align":"center"}},Dt={style:{"text-align":"left"}},Ft=t("code",null,"栈",-1),Gt=t("code",null,"树",-1),Ht=t("code",null,"深度优先搜索",-1),Jt=t("code",null,"1+",-1),Mt=t("td",{style:{"text-align":"center"}},"🟢",-1),Ot={style:{"text-align":"center"}},Pt={href:"https://leetcode.cn/problems/binary-tree-inorder-traversal",target:"_blank",rel:"noopener noreferrer"},Qt={href:"https://leetcode.com/problems/binary-tree-inorder-traversal",target:"_blank",rel:"noopener noreferrer"},St=t("td",{style:{"text-align":"center"}},"95",-1),Ut=t("td",{style:{"text-align":"left"}},"不同的二叉搜索树 II",-1),Wt={style:{"text-align":"center"}},Xt={style:{"text-align":"left"}},Yt=t("code",null,"树",-1),Zt=t("code",null,"二叉搜索树",-1),$t=t("code",null,"动态规划",-1),te=t("code",null,"2+",-1),ee=t("td",{style:{"text-align":"center"}},"🟠",-1),oe={style:{"text-align":"center"}},le={href:"https://leetcode.cn/problems/unique-binary-search-trees-ii",target:"_blank",rel:"noopener noreferrer"},ne={href:"https://leetcode.com/problems/unique-binary-search-trees-ii",target:"_blank",rel:"noopener noreferrer"},se=t("td",{style:{"text-align":"center"}},"96",-1),re=t("td",{style:{"text-align":"left"}},"不同的二叉搜索树",-1),de={style:{"text-align":"center"}},_e={style:{"text-align":"left"}},ce=t("code",null,"树",-1),ae=t("code",null,"二叉搜索树",-1),ie=t("code",null,"数学",-1),he=t("code",null,"2+",-1),ge=t("td",{style:{"text-align":"center"}},"🟠",-1),fe={style:{"text-align":"center"}},ue={href:"https://leetcode.cn/problems/unique-binary-search-trees",target:"_blank",rel:"noopener noreferrer"},me={href:"https://leetcode.com/problems/unique-binary-search-trees",target:"_blank",rel:"noopener noreferrer"},pe=t("td",{style:{"text-align":"center"}},"98",-1),ye=t("td",{style:{"text-align":"left"}},"验证二叉搜索树",-1),be={style:{"text-align":"center"}},xe={style:{"text-align":"left"}},ke=t("code",null,"树",-1),ve=t("code",null,"深度优先搜索",-1),we=t("code",null,"二叉搜索树",-1),qe=t("code",null,"1+",-1),Ie=t("td",{style:{"text-align":"center"}},"🟠",-1),ze={style:{"text-align":"center"}},Ne={href:"https://leetcode.cn/problems/validate-binary-search-tree",target:"_blank",rel:"noopener noreferrer"},Ve={href:"https://leetcode.com/problems/validate-binary-search-tree",target:"_blank",rel:"noopener noreferrer"},Ke=t("td",{style:{"text-align":"center"}},"99",-1),Le=t("td",{style:{"text-align":"left"}},"恢复二叉搜索树",-1),je={style:{"text-align":"center"}},Be={style:{"text-align":"left"}},Ce=t("code",null,"树",-1),Ee=t("code",null,"深度优先搜索",-1),Re=t("code",null,"二叉搜索树",-1),Te=t("code",null,"1+",-1),Ae=t("td",{style:{"text-align":"center"}},"🟠",-1),De={style:{"text-align":"center"}},Fe={href:"https://leetcode.cn/problems/recover-binary-search-tree",target:"_blank",rel:"noopener noreferrer"},Ge={href:"https://leetcode.com/problems/recover-binary-search-tree",target:"_blank",rel:"noopener noreferrer"},He=t("td",{style:{"text-align":"center"}},"100",-1),Je=t("td",{style:{"text-align":"left"}},"相同的树",-1),Me={style:{"text-align":"center"}},Oe={style:{"text-align":"left"}},Pe=t("code",null,"树",-1),Qe=t("code",null,"深度优先搜索",-1),Se=t("code",null,"广度优先搜索",-1),Ue=t("code",null,"1+",-1),We=t("td",{style:{"text-align":"center"}},"🟢",-1),Xe={style:{"text-align":"center"}},Ye={href:"https://leetcode.cn/problems/same-tree",target:"_blank",rel:"noopener noreferrer"},Ze={href:"https://leetcode.com/problems/same-tree",target:"_blank",rel:"noopener noreferrer"},$e=t("td",{style:{"text-align":"center"}},"101",-1),to=t("td",{style:{"text-align":"left"}},"对称二叉树",-1),eo={style:{"text-align":"center"}},oo={style:{"text-align":"left"}},lo=t("code",null,"树",-1),no=t("code",null,"深度优先搜索",-1),so=t("code",null,"广度优先搜索",-1),ro=t("code",null,"1+",-1),_o=t("td",{style:{"text-align":"center"}},"🟢",-1),co={style:{"text-align":"center"}},ao={href:"https://leetcode.cn/problems/symmetric-tree",target:"_blank",rel:"noopener noreferrer"},io={href:"https://leetcode.com/problems/symmetric-tree",target:"_blank",rel:"noopener noreferrer"},ho=t("td",{style:{"text-align":"center"}},"102",-1),go=t("td",{style:{"text-align":"left"}},"二叉树的层序遍历",-1),fo={style:{"text-align":"center"}},uo={style:{"text-align":"left"}},mo=t("code",null,"树",-1),po=t("code",null,"广度优先搜索",-1),yo=t("code",null,"二叉树",-1),bo=t("td",{style:{"text-align":"center"}},"🟠",-1),xo={style:{"text-align":"center"}},ko={href:"https://leetcode.cn/problems/binary-tree-level-order-traversal",target:"_blank",rel:"noopener noreferrer"},vo={href:"https://leetcode.com/problems/binary-tree-level-order-traversal",target:"_blank",rel:"noopener noreferrer"},wo=t("td",{style:{"text-align":"center"}},"103",-1),qo=t("td",{style:{"text-align":"left"}},"二叉树的锯齿形层序遍历",-1),Io={style:{"text-align":"center"}},zo={style:{"text-align":"left"}},No=t("code",null,"树",-1),Vo=t("code",null,"广度优先搜索",-1),Ko=t("code",null,"二叉树",-1),Lo=t("td",{style:{"text-align":"center"}},"🟠",-1),jo={style:{"text-align":"center"}},Bo={href:"https://leetcode.cn/problems/binary-tree-zigzag-level-order-traversal",target:"_blank",rel:"noopener noreferrer"},Co={href:"https://leetcode.com/problems/binary-tree-zigzag-level-order-traversal",target:"_blank",rel:"noopener noreferrer"},Eo=t("td",{style:{"text-align":"center"}},"104",-1),Ro=t("td",{style:{"text-align":"left"}},"二叉树的最大深度",-1),To={style:{"text-align":"center"}},Ao={style:{"text-align":"left"}},Do=t("code",null,"树",-1),Fo=t("code",null,"深度优先搜索",-1),Go=t("code",null,"广度优先搜索",-1),Ho=t("code",null,"1+",-1),Jo=t("td",{style:{"text-align":"center"}},"🟢",-1),Mo={style:{"text-align":"center"}},Oo={href:"https://leetcode.cn/problems/maximum-depth-of-binary-tree",target:"_blank",rel:"noopener noreferrer"},Po={href:"https://leetcode.com/problems/maximum-depth-of-binary-tree",target:"_blank",rel:"noopener noreferrer"},Qo=t("td",{style:{"text-align":"center"}},"105",-1),So=t("td",{style:{"text-align":"left"}},"从前序与中序遍历序列构造二叉树",-1),Uo={style:{"text-align":"center"}},Wo={style:{"text-align":"left"}},Xo=t("code",null,"树",-1),Yo=t("code",null,"数组",-1),Zo=t("code",null,"哈希表",-1),$o=t("code",null,"2+",-1),tl=t("td",{style:{"text-align":"center"}},"🟠",-1),el={style:{"text-align":"center"}},ol={href:"https://leetcode.cn/problems/construct-binary-tree-from-preorder-and-inorder-traversal",target:"_blank",rel:"noopener noreferrer"},ll={href:"https://leetcode.com/problems/construct-binary-tree-from-preorder-and-inorder-traversal",target:"_blank",rel:"noopener noreferrer"},nl=t("td",{style:{"text-align":"center"}},"106",-1),sl=t("td",{style:{"text-align":"left"}},"从中序与后序遍历序列构造二叉树",-1),rl={style:{"text-align":"center"}},dl={style:{"text-align":"left"}},_l=t("code",null,"树",-1),cl=t("code",null,"数组",-1),al=t("code",null,"哈希表",-1),il=t("code",null,"2+",-1),hl=t("td",{style:{"text-align":"center"}},"🟠",-1),gl={style:{"text-align":"center"}},fl={href:"https://leetcode.cn/problems/construct-binary-tree-from-inorder-and-postorder-traversal",target:"_blank",rel:"noopener noreferrer"},ul={href:"https://leetcode.com/problems/construct-binary-tree-from-inorder-and-postorder-traversal",target:"_blank",rel:"noopener noreferrer"},ml=t("td",{style:{"text-align":"center"}},"107",-1),pl=t("td",{style:{"text-align":"left"}},"二叉树的层序遍历 II",-1),yl={style:{"text-align":"center"}},bl={style:{"text-align":"left"}},xl=t("code",null,"树",-1),kl=t("code",null,"广度优先搜索",-1),vl=t("code",null,"二叉树",-1),wl=t("td",{style:{"text-align":"center"}},"🟠",-1),ql={style:{"text-align":"center"}},Il={href:"https://leetcode.cn/problems/binary-tree-level-order-traversal-ii",target:"_blank",rel:"noopener noreferrer"},zl={href:"https://leetcode.com/problems/binary-tree-level-order-traversal-ii",target:"_blank",rel:"noopener noreferrer"},Nl=t("td",{style:{"text-align":"center"}},"108",-1),Vl=t("td",{style:{"text-align":"left"}},"将有序数组转换为二叉搜索树",-1),Kl={style:{"text-align":"center"}},Ll={style:{"text-align":"left"}},jl=t("code",null,"树",-1),Bl=t("code",null,"二叉搜索树",-1),Cl=t("code",null,"数组",-1),El=t("code",null,"2+",-1),Rl=t("td",{style:{"text-align":"center"}},"🟢",-1),Tl={style:{"text-align":"center"}},Al={href:"https://leetcode.cn/problems/convert-sorted-array-to-binary-search-tree",target:"_blank",rel:"noopener noreferrer"},Dl={href:"https://leetcode.com/problems/convert-sorted-array-to-binary-search-tree",target:"_blank",rel:"noopener noreferrer"},Fl=t("td",{style:{"text-align":"center"}},"109",-1),Gl=t("td",{style:{"text-align":"left"}},"有序链表转换二叉搜索树",-1),Hl={style:{"text-align":"center"}},Jl={style:{"text-align":"left"}},Ml=t("code",null,"树",-1),Ol=t("code",null,"二叉搜索树",-1),Pl=t("code",null,"链表",-1),Ql=t("code",null,"2+",-1),Sl=t("td",{style:{"text-align":"center"}},"🟠",-1),Ul={style:{"text-align":"center"}},Wl={href:"https://leetcode.cn/problems/convert-sorted-list-to-binary-search-tree",target:"_blank",rel:"noopener noreferrer"},Xl={href:"https://leetcode.com/problems/convert-sorted-list-to-binary-search-tree",target:"_blank",rel:"noopener noreferrer"},Yl=t("td",{style:{"text-align":"center"}},"110",-1),Zl=t("td",{style:{"text-align":"left"}},"平衡二叉树",-1),$l={style:{"text-align":"center"}},tn={style:{"text-align":"left"}},en=t("code",null,"树",-1),on=t("code",null,"深度优先搜索",-1),ln=t("code",null,"二叉树",-1),nn=t("td",{style:{"text-align":"center"}},"🟢",-1),sn={style:{"text-align":"center"}},rn={href:"https://leetcode.cn/problems/balanced-binary-tree",target:"_blank",rel:"noopener noreferrer"},dn={href:"https://leetcode.com/problems/balanced-binary-tree",target:"_blank",rel:"noopener noreferrer"},_n=t("td",{style:{"text-align":"center"}},"111",-1),cn=t("td",{style:{"text-align":"left"}},"二叉树的最小深度",-1),an={style:{"text-align":"center"}},hn={style:{"text-align":"left"}},gn=t("code",null,"树",-1),fn=t("code",null,"深度优先搜索",-1),un=t("code",null,"广度优先搜索",-1),mn=t("code",null,"1+",-1),pn=t("td",{style:{"text-align":"center"}},"🟢",-1),yn={style:{"text-align":"center"}},bn={href:"https://leetcode.cn/problems/minimum-depth-of-binary-tree",target:"_blank",rel:"noopener noreferrer"},xn={href:"https://leetcode.com/problems/minimum-depth-of-binary-tree",target:"_blank",rel:"noopener noreferrer"},kn=t("td",{style:{"text-align":"center"}},"112",-1),vn=t("td",{style:{"text-align":"left"}},"路径总和",-1),wn={style:{"text-align":"center"}},qn={style:{"text-align":"left"}},In=t("code",null,"树",-1),zn=t("code",null,"深度优先搜索",-1),Nn=t("code",null,"广度优先搜索",-1),Vn=t("code",null,"1+",-1),Kn=t("td",{style:{"text-align":"center"}},"🟢",-1),Ln={style:{"text-align":"center"}},jn={href:"https://leetcode.cn/problems/path-sum",target:"_blank",rel:"noopener noreferrer"},Bn={href:"https://leetcode.com/problems/path-sum",target:"_blank",rel:"noopener noreferrer"},Cn=t("td",{style:{"text-align":"center"}},"113",-1),En=t("td",{style:{"text-align":"left"}},"路径总和 II",-1),Rn={style:{"text-align":"center"}},Tn={style:{"text-align":"left"}},An=t("code",null,"树",-1),Dn=t("code",null,"深度优先搜索",-1),Fn=t("code",null,"回溯",-1),Gn=t("code",null,"1+",-1),Hn=t("td",{style:{"text-align":"center"}},"🟠",-1),Jn={style:{"text-align":"center"}},Mn={href:"https://leetcode.cn/problems/path-sum-ii",target:"_blank",rel:"noopener noreferrer"},On={href:"https://leetcode.com/problems/path-sum-ii",target:"_blank",rel:"noopener noreferrer"},Pn=t("td",{style:{"text-align":"center"}},"114",-1),Qn=t("td",{style:{"text-align":"left"}},"二叉树展开为链表",-1),Sn={style:{"text-align":"center"}},Un={style:{"text-align":"left"}},Wn=t("code",null,"栈",-1),Xn=t("code",null,"树",-1),Yn=t("code",null,"深度优先搜索",-1),Zn=t("code",null,"2+",-1),$n=t("td",{style:{"text-align":"center"}},"🟠",-1),ts={style:{"text-align":"center"}},es={href:"https://leetcode.cn/problems/flatten-binary-tree-to-linked-list",target:"_blank",rel:"noopener noreferrer"},os={href:"https://leetcode.com/problems/flatten-binary-tree-to-linked-list",target:"_blank",rel:"noopener noreferrer"},ls=t("td",{style:{"text-align":"center"}},"116",-1),ns=t("td",{style:{"text-align":"left"}},"填充每个节点的下一个右侧节点指针",-1),ss={style:{"text-align":"center"}},rs={style:{"text-align":"left"}},ds=t("code",null,"树",-1),_s=t("code",null,"深度优先搜索",-1),cs=t("code",null,"广度优先搜索",-1),as=t("code",null,"2+",-1),is=t("td",{style:{"text-align":"center"}},"🟠",-1),hs={style:{"text-align":"center"}},gs={href:"https://leetcode.cn/problems/populating-next-right-pointers-in-each-node",target:"_blank",rel:"noopener noreferrer"},fs={href:"https://leetcode.com/problems/populating-next-right-pointers-in-each-node",target:"_blank",rel:"noopener noreferrer"},us=t("td",{style:{"text-align":"center"}},"117",-1),ms=t("td",{style:{"text-align":"left"}},"填充每个节点的下一个右侧节点指针 II",-1),ps={style:{"text-align":"center"}},ys={style:{"text-align":"left"}},bs=t("code",null,"树",-1),xs=t("code",null,"深度优先搜索",-1),ks=t("code",null,"广度优先搜索",-1),vs=t("code",null,"2+",-1),ws=t("td",{style:{"text-align":"center"}},"🟠",-1),qs={style:{"text-align":"center"}},Is={href:"https://leetcode.cn/problems/populating-next-right-pointers-in-each-node-ii",target:"_blank",rel:"noopener noreferrer"},zs={href:"https://leetcode.com/problems/populating-next-right-pointers-in-each-node-ii",target:"_blank",rel:"noopener noreferrer"},Ns=t("td",{style:{"text-align":"center"}},"124",-1),Vs=t("td",{style:{"text-align":"left"}},"二叉树中的最大路径和",-1),Ks={style:{"text-align":"center"}},Ls={style:{"text-align":"left"}},js=t("code",null,"树",-1),Bs=t("code",null,"深度优先搜索",-1),Cs=t("code",null,"动态规划",-1),Es=t("code",null,"1+",-1),Rs=t("td",{style:{"text-align":"center"}},"🔴",-1),Ts={style:{"text-align":"center"}},As={href:"https://leetcode.cn/problems/binary-tree-maximum-path-sum",target:"_blank",rel:"noopener noreferrer"},Ds={href:"https://leetcode.com/problems/binary-tree-maximum-path-sum",target:"_blank",rel:"noopener noreferrer"},Fs=t("td",{style:{"text-align":"center"}},"129",-1),Gs=t("td",{style:{"text-align":"left"}},"求根节点到叶节点数字之和",-1),Hs={style:{"text-align":"center"}},Js={style:{"text-align":"left"}},Ms=t("code",null,"树",-1),Os=t("code",null,"深度优先搜索",-1),Ps=t("code",null,"二叉树",-1),Qs=t("td",{style:{"text-align":"center"}},"🟠",-1),Ss={style:{"text-align":"center"}},Us={href:"https://leetcode.cn/problems/sum-root-to-leaf-numbers",target:"_blank",rel:"noopener noreferrer"},Ws={href:"https://leetcode.com/problems/sum-root-to-leaf-numbers",target:"_blank",rel:"noopener noreferrer"},Xs=t("td",{style:{"text-align":"center"}},"144",-1),Ys=t("td",{style:{"text-align":"left"}},"二叉树的前序遍历",-1),Zs={style:{"text-align":"center"}},$s={style:{"text-align":"left"}},tr=t("code",null,"栈",-1),er=t("code",null,"树",-1),or=t("code",null,"深度优先搜索",-1),lr=t("code",null,"1+",-1),nr=t("td",{style:{"text-align":"center"}},"🟢",-1),sr={style:{"text-align":"center"}},rr={href:"https://leetcode.cn/problems/binary-tree-preorder-traversal",target:"_blank",rel:"noopener noreferrer"},dr={href:"https://leetcode.com/problems/binary-tree-preorder-traversal",target:"_blank",rel:"noopener noreferrer"},_r=t("td",{style:{"text-align":"center"}},"145",-1),cr=t("td",{style:{"text-align":"left"}},"二叉树的后序遍历",-1),ar={style:{"text-align":"center"}},ir={style:{"text-align":"left"}},hr=t("code",null,"栈",-1),gr=t("code",null,"树",-1),fr=t("code",null,"深度优先搜索",-1),ur=t("code",null,"1+",-1),mr=t("td",{style:{"text-align":"center"}},"🟢",-1),pr={style:{"text-align":"center"}},yr={href:"https://leetcode.cn/problems/binary-tree-postorder-traversal",target:"_blank",rel:"noopener noreferrer"},br={href:"https://leetcode.com/problems/binary-tree-postorder-traversal",target:"_blank",rel:"noopener noreferrer"},xr=t("td",{style:{"text-align":"center"}},"156",-1),kr=t("td",{style:{"text-align":"left"}},"上下翻转二叉树 🔒",-1),vr={style:{"text-align":"center"}},wr={style:{"text-align":"left"}},qr=t("code",null,"树",-1),Ir=t("code",null,"深度优先搜索",-1),zr=t("code",null,"二叉树",-1),Nr=t("td",{style:{"text-align":"center"}},"🟠",-1),Vr={style:{"text-align":"center"}},Kr={href:"https://leetcode.cn/problems/binary-tree-upside-down",target:"_blank",rel:"noopener noreferrer"},Lr={href:"https://leetcode.com/problems/binary-tree-upside-down",target:"_blank",rel:"noopener noreferrer"},jr=t("td",{style:{"text-align":"center"}},"173",-1),Br=t("td",{style:{"text-align":"left"}},"二叉搜索树迭代器",-1),Cr={style:{"text-align":"center"}},Er={style:{"text-align":"left"}},Rr=t("code",null,"栈",-1),Tr=t("code",null,"树",-1),Ar=t("code",null,"设计",-1),Dr=t("code",null,"3+",-1),Fr=t("td",{style:{"text-align":"center"}},"🟠",-1),Gr={style:{"text-align":"center"}},Hr={href:"https://leetcode.cn/problems/binary-search-tree-iterator",target:"_blank",rel:"noopener noreferrer"},Jr={href:"https://leetcode.com/problems/binary-search-tree-iterator",target:"_blank",rel:"noopener noreferrer"},Mr=t("td",{style:{"text-align":"center"}},"199",-1),Or=t("td",{style:{"text-align":"left"}},"二叉树的右视图",-1),Pr={style:{"text-align":"center"}},Qr={style:{"text-align":"left"}},Sr=t("code",null,"树",-1),Ur=t("code",null,"深度优先搜索",-1),Wr=t("code",null,"广度优先搜索",-1),Xr=t("code",null,"1+",-1),Yr=t("td",{style:{"text-align":"center"}},"🟠",-1),Zr={style:{"text-align":"center"}},$r={href:"https://leetcode.cn/problems/binary-tree-right-side-view",target:"_blank",rel:"noopener noreferrer"},td={href:"https://leetcode.com/problems/binary-tree-right-side-view",target:"_blank",rel:"noopener noreferrer"},ed=t("td",{style:{"text-align":"center"}},"222",-1),od=t("td",{style:{"text-align":"left"}},"完全二叉树的节点个数",-1),ld={style:{"text-align":"center"}},nd={style:{"text-align":"left"}},sd=t("code",null,"位运算",-1),rd=t("code",null,"树",-1),dd=t("code",null,"二分查找",-1),_d=t("code",null,"1+",-1),cd=t("td",{style:{"text-align":"center"}},"🟢",-1),ad={style:{"text-align":"center"}},id={href:"https://leetcode.cn/problems/count-complete-tree-nodes",target:"_blank",rel:"noopener noreferrer"},hd={href:"https://leetcode.com/problems/count-complete-tree-nodes",target:"_blank",rel:"noopener noreferrer"},gd=t("td",{style:{"text-align":"center"}},"226",-1),fd=t("td",{style:{"text-align":"left"}},"翻转二叉树",-1),ud={style:{"text-align":"center"}},md={style:{"text-align":"left"}},pd=t("code",null,"树",-1),yd=t("code",null,"深度优先搜索",-1),bd=t("code",null,"广度优先搜索",-1),xd=t("code",null,"1+",-1),kd=t("td",{style:{"text-align":"center"}},"🟢",-1),vd={style:{"text-align":"center"}},wd={href:"https://leetcode.cn/problems/invert-binary-tree",target:"_blank",rel:"noopener noreferrer"},qd={href:"https://leetcode.com/problems/invert-binary-tree",target:"_blank",rel:"noopener noreferrer"},Id=t("td",{style:{"text-align":"center"}},"230",-1),zd=t("td",{style:{"text-align":"left"}},"二叉搜索树中第 K 小的元素",-1),Nd={style:{"text-align":"center"}},Vd={style:{"text-align":"left"}},Kd=t("code",null,"树",-1),Ld=t("code",null,"深度优先搜索",-1),jd=t("code",null,"二叉搜索树",-1),Bd=t("code",null,"1+",-1),Cd=t("td",{style:{"text-align":"center"}},"🟠",-1),Ed={style:{"text-align":"center"}},Rd={href:"https://leetcode.cn/problems/kth-smallest-element-in-a-bst",target:"_blank",rel:"noopener noreferrer"},Td={href:"https://leetcode.com/problems/kth-smallest-element-in-a-bst",target:"_blank",rel:"noopener noreferrer"},Ad=t("td",{style:{"text-align":"center"}},"235",-1),Dd=t("td",{style:{"text-align":"left"}},"二叉搜索树的最近公共祖先",-1),Fd={style:{"text-align":"center"}},Gd={style:{"text-align":"left"}},Hd=t("code",null,"树",-1),Jd=t("code",null,"深度优先搜索",-1),Md=t("code",null,"二叉搜索树",-1),Od=t("code",null,"1+",-1),Pd=t("td",{style:{"text-align":"center"}},"🟠",-1),Qd={style:{"text-align":"center"}},Sd={href:"https://leetcode.cn/problems/lowest-common-ancestor-of-a-binary-search-tree",target:"_blank",rel:"noopener noreferrer"},Ud={href:"https://leetcode.com/problems/lowest-common-ancestor-of-a-binary-search-tree",target:"_blank",rel:"noopener noreferrer"},Wd=t("td",{style:{"text-align":"center"}},"236",-1),Xd=t("td",{style:{"text-align":"left"}},"二叉树的最近公共祖先",-1),Yd={style:{"text-align":"center"}},Zd={style:{"text-align":"left"}},$d=t("code",null,"树",-1),t_=t("code",null,"深度优先搜索",-1),e_=t("code",null,"二叉树",-1),o_=t("td",{style:{"text-align":"center"}},"🟠",-1),l_={style:{"text-align":"center"}},n_={href:"https://leetcode.cn/problems/lowest-common-ancestor-of-a-binary-tree",target:"_blank",rel:"noopener noreferrer"},s_={href:"https://leetcode.com/problems/lowest-common-ancestor-of-a-binary-tree",target:"_blank",rel:"noopener noreferrer"},r_=t("td",{style:{"text-align":"center"}},"250",-1),d_=t("td",{style:{"text-align":"left"}},"统计同值子树 🔒",-1),__=t("td",{style:{"text-align":"center"}},null,-1),c_={style:{"text-align":"left"}},a_=t("code",null,"树",-1),i_=t("code",null,"深度优先搜索",-1),h_=t("code",null,"二叉树",-1),g_=t("td",{style:{"text-align":"center"}},"🟠",-1),f_={style:{"text-align":"center"}},u_={href:"https://leetcode.cn/problems/count-univalue-subtrees",target:"_blank",rel:"noopener noreferrer"},m_={href:"https://leetcode.com/problems/count-univalue-subtrees",target:"_blank",rel:"noopener noreferrer"},p_=t("td",{style:{"text-align":"center"}},"255",-1),y_=t("td",{style:{"text-align":"left"}},"验证二叉搜索树的前序遍历序列 🔒",-1),b_=t("td",{style:{"text-align":"center"}},null,-1),x_={style:{"text-align":"left"}},k_=t("code",null,"栈",-1),v_=t("code",null,"树",-1),w_=t("code",null,"二叉搜索树",-1),q_=t("code",null,"4+",-1),I_=t("td",{style:{"text-align":"center"}},"🟠",-1),z_={style:{"text-align":"center"}},N_={href:"https://leetcode.cn/problems/verify-preorder-sequence-in-binary-search-tree",target:"_blank",rel:"noopener noreferrer"},V_={href:"https://leetcode.com/problems/verify-preorder-sequence-in-binary-search-tree",target:"_blank",rel:"noopener noreferrer"},K_=t("td",{style:{"text-align":"center"}},"257",-1),L_=t("td",{style:{"text-align":"left"}},"二叉树的所有路径",-1),j_={style:{"text-align":"center"}},B_={style:{"text-align":"left"}},C_=t("code",null,"树",-1),E_=t("code",null,"深度优先搜索",-1),R_=t("code",null,"字符串",-1),T_=t("code",null,"2+",-1),A_=t("td",{style:{"text-align":"center"}},"🟢",-1),D_={style:{"text-align":"center"}},F_={href:"https://leetcode.cn/problems/binary-tree-paths",target:"_blank",rel:"noopener noreferrer"},G_={href:"https://leetcode.com/problems/binary-tree-paths",target:"_blank",rel:"noopener noreferrer"},H_=t("td",{style:{"text-align":"center"}},"270",-1),J_=t("td",{style:{"text-align":"left"}},"最接近的二叉搜索树值 🔒",-1),M_=t("td",{style:{"text-align":"center"}},null,-1),O_={style:{"text-align":"left"}},P_=t("code",null,"树",-1),Q_=t("code",null,"深度优先搜索",-1),S_=t("code",null,"二叉搜索树",-1),U_=t("code",null,"2+",-1),W_=t("td",{style:{"text-align":"center"}},"🟢",-1),X_={style:{"text-align":"center"}},Y_={href:"https://leetcode.cn/problems/closest-binary-search-tree-value",target:"_blank",rel:"noopener noreferrer"},Z_={href:"https://leetcode.com/problems/closest-binary-search-tree-value",target:"_blank",rel:"noopener noreferrer"},$_=t("td",{style:{"text-align":"center"}},"272",-1),tc=t("td",{style:{"text-align":"left"}},"最接近的二叉搜索树值 II 🔒",-1),ec=t("td",{style:{"text-align":"center"}},null,-1),oc={style:{"text-align":"left"}},lc=t("code",null,"栈",-1),nc=t("code",null,"树",-1),sc=t("code",null,"深度优先搜索",-1),rc=t("code",null,"4+",-1),dc=t("td",{style:{"text-align":"center"}},"🔴",-1),_c={style:{"text-align":"center"}},cc={href:"https://leetcode.cn/problems/closest-binary-search-tree-value-ii",target:"_blank",rel:"noopener noreferrer"},ac={href:"https://leetcode.com/problems/closest-binary-search-tree-value-ii",target:"_blank",rel:"noopener noreferrer"},ic=t("td",{style:{"text-align":"center"}},"285",-1),hc=t("td",{style:{"text-align":"left"}},"二叉搜索树中的中序后继 🔒",-1),gc=t("td",{style:{"text-align":"center"}},null,-1),fc={style:{"text-align":"left"}},uc=t("code",null,"树",-1),mc=t("code",null,"深度优先搜索",-1),pc=t("code",null,"二叉搜索树",-1),yc=t("code",null,"1+",-1),bc=t("td",{style:{"text-align":"center"}},"🟠",-1),xc={style:{"text-align":"center"}},kc={href:"https://leetcode.cn/problems/inorder-successor-in-bst",target:"_blank",rel:"noopener noreferrer"},vc={href:"https://leetcode.com/problems/inorder-successor-in-bst",target:"_blank",rel:"noopener noreferrer"},wc=t("td",{style:{"text-align":"center"}},"297",-1),qc=t("td",{style:{"text-align":"left"}},"二叉树的序列化与反序列化",-1),Ic={style:{"text-align":"center"}},zc={style:{"text-align":"left"}},Nc=t("code",null,"树",-1),Vc=t("code",null,"深度优先搜索",-1),Kc=t("code",null,"广度优先搜索",-1),Lc=t("code",null,"3+",-1),jc=t("td",{style:{"text-align":"center"}},"🔴",-1),Bc={style:{"text-align":"center"}},Cc={href:"https://leetcode.cn/problems/serialize-and-deserialize-binary-tree",target:"_blank",rel:"noopener noreferrer"},Ec={href:"https://leetcode.com/problems/serialize-and-deserialize-binary-tree",target:"_blank",rel:"noopener noreferrer"},Rc=t("td",{style:{"text-align":"center"}},"298",-1),Tc=t("td",{style:{"text-align":"left"}},"二叉树最长连续序列 🔒",-1),Ac=t("td",{style:{"text-align":"center"}},null,-1),Dc={style:{"text-align":"left"}},Fc=t("code",null,"树",-1),Gc=t("code",null,"深度优先搜索",-1),Hc=t("code",null,"二叉树",-1),Jc=t("td",{style:{"text-align":"center"}},"🟠",-1),Mc={style:{"text-align":"center"}},Oc={href:"https://leetcode.cn/problems/binary-tree-longest-consecutive-sequence",target:"_blank",rel:"noopener noreferrer"},Pc={href:"https://leetcode.com/problems/binary-tree-longest-consecutive-sequence",target:"_blank",rel:"noopener noreferrer"},Qc=t("td",{style:{"text-align":"center"}},"314",-1),Sc=t("td",{style:{"text-align":"left"}},"二叉树的垂直遍历 🔒",-1),Uc=t("td",{style:{"text-align":"center"}},null,-1),Wc={style:{"text-align":"left"}},Xc=t("code",null,"树",-1),Yc=t("code",null,"深度优先搜索",-1),Zc=t("code",null,"广度优先搜索",-1),$c=t("code",null,"3+",-1),ta=t("td",{style:{"text-align":"center"}},"🟠",-1),ea={style:{"text-align":"center"}},oa={href:"https://leetcode.cn/problems/binary-tree-vertical-order-traversal",target:"_blank",rel:"noopener noreferrer"},la={href:"https://leetcode.com/problems/binary-tree-vertical-order-traversal",target:"_blank",rel:"noopener noreferrer"},na=t("td",{style:{"text-align":"center"}},"331",-1),sa=t("td",{style:{"text-align":"left"}},"验证二叉树的前序序列化",-1),ra={style:{"text-align":"center"}},da={style:{"text-align":"left"}},_a=t("code",null,"栈",-1),ca=t("code",null,"树",-1),aa=t("code",null,"字符串",-1),ia=t("code",null,"1+",-1),ha=t("td",{style:{"text-align":"center"}},"🟠",-1),ga={style:{"text-align":"center"}},fa={href:"https://leetcode.cn/problems/verify-preorder-serialization-of-a-binary-tree",target:"_blank",rel:"noopener noreferrer"},ua={href:"https://leetcode.com/problems/verify-preorder-serialization-of-a-binary-tree",target:"_blank",rel:"noopener noreferrer"},ma=t("td",{style:{"text-align":"center"}},"333",-1),pa=t("td",{style:{"text-align":"left"}},"最大二叉搜索子树 🔒",-1),ya=t("td",{style:{"text-align":"center"}},null,-1),ba={style:{"text-align":"left"}},xa=t("code",null,"树",-1),ka=t("code",null,"深度优先搜索",-1),va=t("code",null,"二叉搜索树",-1),wa=t("code",null,"2+",-1),qa=t("td",{style:{"text-align":"center"}},"🟠",-1),Ia={style:{"text-align":"center"}},za={href:"https://leetcode.cn/problems/largest-bst-subtree",target:"_blank",rel:"noopener noreferrer"},Na={href:"https://leetcode.com/problems/largest-bst-subtree",target:"_blank",rel:"noopener noreferrer"},Va=t("td",{style:{"text-align":"center"}},"337",-1),Ka=t("td",{style:{"text-align":"left"}},"打家劫舍 III",-1),La={style:{"text-align":"center"}},ja={style:{"text-align":"left"}},Ba=t("code",null,"树",-1),Ca=t("code",null,"深度优先搜索",-1),Ea=t("code",null,"动态规划",-1),Ra=t("code",null,"1+",-1),Ta=t("td",{style:{"text-align":"center"}},"🟠",-1),Aa={style:{"text-align":"center"}},Da={href:"https://leetcode.cn/problems/house-robber-iii",target:"_blank",rel:"noopener noreferrer"},Fa={href:"https://leetcode.com/problems/house-robber-iii",target:"_blank",rel:"noopener noreferrer"},Ga=t("td",{style:{"text-align":"center"}},"341",-1),Ha=t("td",{style:{"text-align":"left"}},"扁平化嵌套列表迭代器",-1),Ja={style:{"text-align":"center"}},Ma={style:{"text-align":"left"}},Oa=t("code",null,"栈",-1),Pa=t("code",null,"树",-1),Qa=t("code",null,"深度优先搜索",-1),Sa=t("code",null,"3+",-1),Ua=t("td",{style:{"text-align":"center"}},"🟠",-1),Wa={style:{"text-align":"center"}},Xa={href:"https://leetcode.cn/problems/flatten-nested-list-iterator",target:"_blank",rel:"noopener noreferrer"},Ya={href:"https://leetcode.com/problems/flatten-nested-list-iterator",target:"_blank",rel:"noopener noreferrer"},Za=t("td",{style:{"text-align":"center"}},"366",-1),$a=t("td",{style:{"text-align":"left"}},"寻找二叉树的叶子节点 🔒",-1),ti={style:{"text-align":"center"}},ei={style:{"text-align":"left"}},oi=t("code",null,"树",-1),li=t("code",null,"深度优先搜索",-1),ni=t("code",null,"二叉树",-1),si=t("td",{style:{"text-align":"center"}},"🟠",-1),ri={style:{"text-align":"center"}},di={href:"https://leetcode.cn/problems/find-leaves-of-binary-tree",target:"_blank",rel:"noopener noreferrer"},_i={href:"https://leetcode.com/problems/find-leaves-of-binary-tree",target:"_blank",rel:"noopener noreferrer"},ci=t("td",{style:{"text-align":"center"}},"404",-1),ai=t("td",{style:{"text-align":"left"}},"左叶子之和",-1),ii={style:{"text-align":"center"}},hi={style:{"text-align":"left"}},gi=t("code",null,"树",-1),fi=t("code",null,"深度优先搜索",-1),ui=t("code",null,"广度优先搜索",-1),mi=t("code",null,"1+",-1),pi=t("td",{style:{"text-align":"center"}},"🟢",-1),yi={style:{"text-align":"center"}},bi={href:"https://leetcode.cn/problems/sum-of-left-leaves",target:"_blank",rel:"noopener noreferrer"},xi={href:"https://leetcode.com/problems/sum-of-left-leaves",target:"_blank",rel:"noopener noreferrer"},ki=t("td",{style:{"text-align":"center"}},"426",-1),vi=t("td",{style:{"text-align":"left"}},"将二叉搜索树转化为排序的双向链表 🔒",-1),wi={style:{"text-align":"center"}},qi={style:{"text-align":"left"}},Ii=t("code",null,"栈",-1),zi=t("code",null,"树",-1),Ni=t("code",null,"深度优先搜索",-1),Vi=t("code",null,"4+",-1),Ki=t("td",{style:{"text-align":"center"}},"🟠",-1),Li={style:{"text-align":"center"}},ji={href:"https://leetcode.cn/problems/convert-binary-search-tree-to-sorted-doubly-linked-list",target:"_blank",rel:"noopener noreferrer"},Bi={href:"https://leetcode.com/problems/convert-binary-search-tree-to-sorted-doubly-linked-list",target:"_blank",rel:"noopener noreferrer"},Ci=t("td",{style:{"text-align":"center"}},"427",-1),Ei=t("td",{style:{"text-align":"left"}},"建立四叉树",-1),Ri={style:{"text-align":"center"}},Ti={style:{"text-align":"left"}},Ai=t("code",null,"树",-1),Di=t("code",null,"数组",-1),Fi=t("code",null,"分治",-1),Gi=t("code",null,"1+",-1),Hi=t("td",{style:{"text-align":"center"}},"🟠",-1),Ji={style:{"text-align":"center"}},Mi={href:"https://leetcode.cn/problems/construct-quad-tree",target:"_blank",rel:"noopener noreferrer"},Oi={href:"https://leetcode.com/problems/construct-quad-tree",target:"_blank",rel:"noopener noreferrer"},Pi=t("td",{style:{"text-align":"center"}},"428",-1),Qi=t("td",{style:{"text-align":"left"}},"序列化和反序列化 N 叉树 🔒",-1),Si=t("td",{style:{"text-align":"center"}},null,-1),Ui={style:{"text-align":"left"}},Wi=t("code",null,"树",-1),Xi=t("code",null,"深度优先搜索",-1),Yi=t("code",null,"广度优先搜索",-1),Zi=t("code",null,"1+",-1),$i=t("td",{style:{"text-align":"center"}},"🔴",-1),th={style:{"text-align":"center"}},eh={href:"https://leetcode.cn/problems/serialize-and-deserialize-n-ary-tree",target:"_blank",rel:"noopener noreferrer"},oh={href:"https://leetcode.com/problems/serialize-and-deserialize-n-ary-tree",target:"_blank",rel:"noopener noreferrer"},lh=t("td",{style:{"text-align":"center"}},"429",-1),nh=t("td",{style:{"text-align":"left"}},"N 叉树的层序遍历",-1),sh={style:{"text-align":"center"}},rh={style:{"text-align":"left"}},dh=t("code",null,"树",-1),_h=t("code",null,"广度优先搜索",-1),ch=t("td",{style:{"text-align":"center"}},"🟠",-1),ah={style:{"text-align":"center"}},ih={href:"https://leetcode.cn/problems/n-ary-tree-level-order-traversal",target:"_blank",rel:"noopener noreferrer"},hh={href:"https://leetcode.com/problems/n-ary-tree-level-order-traversal",target:"_blank",rel:"noopener noreferrer"},gh=t("td",{style:{"text-align":"center"}},"431",-1),fh=t("td",{style:{"text-align":"left"}},"将 N 叉树编码为二叉树 🔒",-1),uh=t("td",{style:{"text-align":"center"}},null,-1),mh={style:{"text-align":"left"}},ph=t("code",null,"树",-1),yh=t("code",null,"深度优先搜索",-1),bh=t("code",null,"广度优先搜索",-1),xh=t("code",null,"2+",-1),kh=t("td",{style:{"text-align":"center"}},"🔴",-1),vh={style:{"text-align":"center"}},wh={href:"https://leetcode.cn/problems/encode-n-ary-tree-to-binary-tree",target:"_blank",rel:"noopener noreferrer"},qh={href:"https://leetcode.com/problems/encode-n-ary-tree-to-binary-tree",target:"_blank",rel:"noopener noreferrer"},Ih=t("td",{style:{"text-align":"center"}},"437",-1),zh=t("td",{style:{"text-align":"left"}},"路径总和 III",-1),Nh={style:{"text-align":"center"}},Vh={style:{"text-align":"left"}},Kh=t("code",null,"树",-1),Lh=t("code",null,"深度优先搜索",-1),jh=t("code",null,"二叉树",-1),Bh=t("td",{style:{"text-align":"center"}},"🟠",-1),Ch={style:{"text-align":"center"}},Eh={href:"https://leetcode.cn/problems/path-sum-iii",target:"_blank",rel:"noopener noreferrer"},Rh={href:"https://leetcode.com/problems/path-sum-iii",target:"_blank",rel:"noopener noreferrer"},Th=t("td",{style:{"text-align":"center"}},"449",-1),Ah=t("td",{style:{"text-align":"left"}},"序列化和反序列化二叉搜索树",-1),Dh={style:{"text-align":"center"}},Fh={style:{"text-align":"left"}},Gh=t("code",null,"树",-1),Hh=t("code",null,"深度优先搜索",-1),Jh=t("code",null,"广度优先搜索",-1),Mh=t("code",null,"4+",-1),Oh=t("td",{style:{"text-align":"center"}},"🟠",-1),Ph={style:{"text-align":"center"}},Qh={href:"https://leetcode.cn/problems/serialize-and-deserialize-bst",target:"_blank",rel:"noopener noreferrer"},Sh={href:"https://leetcode.com/problems/serialize-and-deserialize-bst",target:"_blank",rel:"noopener noreferrer"},Uh=t("td",{style:{"text-align":"center"}},"450",-1),Wh=t("td",{style:{"text-align":"left"}},"删除二叉搜索树中的节点",-1),Xh={style:{"text-align":"center"}},Yh={style:{"text-align":"left"}},Zh=t("code",null,"树",-1),$h=t("code",null,"二叉搜索树",-1),t1=t("code",null,"二叉树",-1),e1=t("td",{style:{"text-align":"center"}},"🟠",-1),o1={style:{"text-align":"center"}},l1={href:"https://leetcode.cn/problems/delete-node-in-a-bst",target:"_blank",rel:"noopener noreferrer"},n1={href:"https://leetcode.com/problems/delete-node-in-a-bst",target:"_blank",rel:"noopener noreferrer"},s1=t("td",{style:{"text-align":"center"}},"501",-1),r1=t("td",{style:{"text-align":"left"}},"二叉搜索树中的众数",-1),d1={style:{"text-align":"center"}},_1={style:{"text-align":"left"}},c1=t("code",null,"树",-1),a1=t("code",null,"深度优先搜索",-1),i1=t("code",null,"二叉搜索树",-1),h1=t("code",null,"1+",-1),g1=t("td",{style:{"text-align":"center"}},"🟢",-1),f1={style:{"text-align":"center"}},u1={href:"https://leetcode.cn/problems/find-mode-in-binary-search-tree",target:"_blank",rel:"noopener noreferrer"},m1={href:"https://leetcode.com/problems/find-mode-in-binary-search-tree",target:"_blank",rel:"noopener noreferrer"},p1=t("td",{style:{"text-align":"center"}},"508",-1),y1=t("td",{style:{"text-align":"left"}},"出现次数最多的子树元素和",-1),b1=t("td",{style:{"text-align":"center"}},null,-1),x1={style:{"text-align":"left"}},k1=t("code",null,"树",-1),v1=t("code",null,"深度优先搜索",-1),w1=t("code",null,"哈希表",-1),q1=t("code",null,"1+",-1),I1=t("td",{style:{"text-align":"center"}},"🟠",-1),z1={style:{"text-align":"center"}},N1={href:"https://leetcode.cn/problems/most-frequent-subtree-sum",target:"_blank",rel:"noopener noreferrer"},V1={href:"https://leetcode.com/problems/most-frequent-subtree-sum",target:"_blank",rel:"noopener noreferrer"},K1=t("td",{style:{"text-align":"center"}},"510",-1),L1=t("td",{style:{"text-align":"left"}},"二叉搜索树中的中序后继 II 🔒",-1),j1=t("td",{style:{"text-align":"center"}},null,-1),B1={style:{"text-align":"left"}},C1=t("code",null,"树",-1),E1=t("code",null,"二叉搜索树",-1),R1=t("code",null,"二叉树",-1),T1=t("td",{style:{"text-align":"center"}},"🟠",-1),A1={style:{"text-align":"center"}},D1={href:"https://leetcode.cn/problems/inorder-successor-in-bst-ii",target:"_blank",rel:"noopener noreferrer"},F1={href:"https://leetcode.com/problems/inorder-successor-in-bst-ii",target:"_blank",rel:"noopener noreferrer"},G1=t("td",{style:{"text-align":"center"}},"513",-1),H1=t("td",{style:{"text-align":"left"}},"找树左下角的值",-1),J1=t("td",{style:{"text-align":"center"}},null,-1),M1={style:{"text-align":"left"}},O1=t("code",null,"树",-1),P1=t("code",null,"深度优先搜索",-1),Q1=t("code",null,"广度优先搜索",-1),S1=t("code",null,"1+",-1),U1=t("td",{style:{"text-align":"center"}},"🟠",-1),W1={style:{"text-align":"center"}},X1={href:"https://leetcode.cn/problems/find-bottom-left-tree-value",target:"_blank",rel:"noopener noreferrer"},Y1={href:"https://leetcode.com/problems/find-bottom-left-tree-value",target:"_blank",rel:"noopener noreferrer"},Z1=t("td",{style:{"text-align":"center"}},"515",-1),$1=t("td",{style:{"text-align":"left"}},"在每个树行中找最大值",-1),tg={style:{"text-align":"center"}},eg={style:{"text-align":"left"}},og=t("code",null,"树",-1),lg=t("code",null,"深度优先搜索",-1),ng=t("code",null,"广度优先搜索",-1),sg=t("code",null,"1+",-1),rg=t("td",{style:{"text-align":"center"}},"🟠",-1),dg={style:{"text-align":"center"}},_g={href:"https://leetcode.cn/problems/find-largest-value-in-each-tree-row",target:"_blank",rel:"noopener noreferrer"},cg={href:"https://leetcode.com/problems/find-largest-value-in-each-tree-row",target:"_blank",rel:"noopener noreferrer"},ag=t("td",{style:{"text-align":"center"}},"530",-1),ig=t("td",{style:{"text-align":"left"}},"二叉搜索树的最小绝对差",-1),hg={style:{"text-align":"center"}},gg={style:{"text-align":"left"}},fg=t("code",null,"树",-1),ug=t("code",null,"深度优先搜索",-1),mg=t("code",null,"广度优先搜索",-1),pg=t("code",null,"2+",-1),yg=t("td",{style:{"text-align":"center"}},"🟢",-1),bg={style:{"text-align":"center"}},xg={href:"https://leetcode.cn/problems/minimum-absolute-difference-in-bst",target:"_blank",rel:"noopener noreferrer"},kg={href:"https://leetcode.com/problems/minimum-absolute-difference-in-bst",target:"_blank",rel:"noopener noreferrer"},vg=t("td",{style:{"text-align":"center"}},"536",-1),wg=t("td",{style:{"text-align":"left"}},"从字符串生成二叉树 🔒",-1),qg=t("td",{style:{"text-align":"center"}},null,-1),Ig={style:{"text-align":"left"}},zg=t("code",null,"栈",-1),Ng=t("code",null,"树",-1),Vg=t("code",null,"深度优先搜索",-1),Kg=t("code",null,"2+",-1),Lg=t("td",{style:{"text-align":"center"}},"🟠",-1),jg={style:{"text-align":"center"}},Bg={href:"https://leetcode.cn/problems/construct-binary-tree-from-string",target:"_blank",rel:"noopener noreferrer"},Cg={href:"https://leetcode.com/problems/construct-binary-tree-from-string",target:"_blank",rel:"noopener noreferrer"},Eg=t("td",{style:{"text-align":"center"}},"538",-1),Rg=t("td",{style:{"text-align":"left"}},"把二叉搜索树转换为累加树",-1),Tg=t("td",{style:{"text-align":"center"}},null,-1),Ag={style:{"text-align":"left"}},Dg=t("code",null,"树",-1),Fg=t("code",null,"深度优先搜索",-1),Gg=t("code",null,"二叉搜索树",-1),Hg=t("code",null,"1+",-1),Jg=t("td",{style:{"text-align":"center"}},"🟠",-1),Mg={style:{"text-align":"center"}},Og={href:"https://leetcode.cn/problems/convert-bst-to-greater-tree",target:"_blank",rel:"noopener noreferrer"},Pg={href:"https://leetcode.com/problems/convert-bst-to-greater-tree",target:"_blank",rel:"noopener noreferrer"},Qg=t("td",{style:{"text-align":"center"}},"543",-1),Sg=t("td",{style:{"text-align":"left"}},"二叉树的直径",-1),Ug={style:{"text-align":"center"}},Wg={style:{"text-align":"left"}},Xg=t("code",null,"树",-1),Yg=t("code",null,"深度优先搜索",-1),Zg=t("code",null,"二叉树",-1),$g=t("td",{style:{"text-align":"center"}},"🟢",-1),tf={style:{"text-align":"center"}},ef={href:"https://leetcode.cn/problems/diameter-of-binary-tree",target:"_blank",rel:"noopener noreferrer"},of={href:"https://leetcode.com/problems/diameter-of-binary-tree",target:"_blank",rel:"noopener noreferrer"},lf=t("td",{style:{"text-align":"center"}},"545",-1),nf=t("td",{style:{"text-align":"left"}},"二叉树的边界 🔒",-1),sf=t("td",{style:{"text-align":"center"}},null,-1),rf={style:{"text-align":"left"}},df=t("code",null,"树",-1),_f=t("code",null,"深度优先搜索",-1),cf=t("code",null,"二叉树",-1),af=t("td",{style:{"text-align":"center"}},"🟠",-1),hf={style:{"text-align":"center"}},gf={href:"https://leetcode.cn/problems/boundary-of-binary-tree",target:"_blank",rel:"noopener noreferrer"},ff={href:"https://leetcode.com/problems/boundary-of-binary-tree",target:"_blank",rel:"noopener noreferrer"},uf=t("td",{style:{"text-align":"center"}},"549",-1),mf=t("td",{style:{"text-align":"left"}},"二叉树最长连续序列 II 🔒",-1),pf=t("td",{style:{"text-align":"center"}},null,-1),yf={style:{"text-align":"left"}},bf=t("code",null,"树",-1),xf=t("code",null,"深度优先搜索",-1),kf=t("code",null,"二叉树",-1),vf=t("td",{style:{"text-align":"center"}},"🟠",-1),wf={style:{"text-align":"center"}},qf={href:"https://leetcode.cn/problems/binary-tree-longest-consecutive-sequence-ii",target:"_blank",rel:"noopener noreferrer"},If={href:"https://leetcode.com/problems/binary-tree-longest-consecutive-sequence-ii",target:"_blank",rel:"noopener noreferrer"},zf=t("td",{style:{"text-align":"center"}},"558",-1),Nf=t("td",{style:{"text-align":"left"}},"四叉树交集",-1),Vf=t("td",{style:{"text-align":"center"}},null,-1),Kf={style:{"text-align":"left"}},Lf=t("code",null,"树",-1),jf=t("code",null,"分治",-1),Bf=t("td",{style:{"text-align":"center"}},"🟠",-1),Cf={style:{"text-align":"center"}},Ef={href:"https://leetcode.cn/problems/logical-or-of-two-binary-grids-represented-as-quad-trees",target:"_blank",rel:"noopener noreferrer"},Rf={href:"https://leetcode.com/problems/logical-or-of-two-binary-grids-represented-as-quad-trees",target:"_blank",rel:"noopener noreferrer"},Tf=t("td",{style:{"text-align":"center"}},"559",-1),Af=t("td",{style:{"text-align":"left"}},"N 叉树的最大深度",-1),Df={style:{"text-align":"center"}},Ff={style:{"text-align":"left"}},Gf=t("code",null,"树",-1),Hf=t("code",null,"深度优先搜索",-1),Jf=t("code",null,"广度优先搜索",-1),Mf=t("td",{style:{"text-align":"center"}},"🟢",-1),Of={style:{"text-align":"center"}},Pf={href:"https://leetcode.cn/problems/maximum-depth-of-n-ary-tree",target:"_blank",rel:"noopener noreferrer"},Qf={href:"https://leetcode.com/problems/maximum-depth-of-n-ary-tree",target:"_blank",rel:"noopener noreferrer"},Sf=t("td",{style:{"text-align":"center"}},"563",-1),Uf=t("td",{style:{"text-align":"left"}},"二叉树的坡度",-1),Wf={style:{"text-align":"center"}},Xf={style:{"text-align":"left"}},Yf=t("code",null,"树",-1),Zf=t("code",null,"深度优先搜索",-1),$f=t("code",null,"二叉树",-1),tu=t("td",{style:{"text-align":"center"}},"🟢",-1),eu={style:{"text-align":"center"}},ou={href:"https://leetcode.cn/problems/binary-tree-tilt",target:"_blank",rel:"noopener noreferrer"},lu={href:"https://leetcode.com/problems/binary-tree-tilt",target:"_blank",rel:"noopener noreferrer"},nu=t("td",{style:{"text-align":"center"}},"572",-1),su=t("td",{style:{"text-align":"left"}},"另一棵树的子树",-1),ru={style:{"text-align":"center"}},du={style:{"text-align":"left"}},_u=t("code",null,"树",-1),cu=t("code",null,"深度优先搜索",-1),au=t("code",null,"二叉树",-1),iu=t("code",null,"2+",-1),hu=t("td",{style:{"text-align":"center"}},"🟢",-1),gu={style:{"text-align":"center"}},fu={href:"https://leetcode.cn/problems/subtree-of-another-tree",target:"_blank",rel:"noopener noreferrer"},uu={href:"https://leetcode.com/problems/subtree-of-another-tree",target:"_blank",rel:"noopener noreferrer"},mu=t("td",{style:{"text-align":"center"}},"582",-1),pu=t("td",{style:{"text-align":"left"}},"杀掉进程 🔒",-1),yu=t("td",{style:{"text-align":"center"}},null,-1),bu={style:{"text-align":"left"}},xu=t("code",null,"树",-1),ku=t("code",null,"深度优先搜索",-1),vu=t("code",null,"广度优先搜索",-1),wu=t("code",null,"2+",-1),qu=t("td",{style:{"text-align":"center"}},"🟠",-1),Iu={style:{"text-align":"center"}},zu={href:"https://leetcode.cn/problems/kill-process",target:"_blank",rel:"noopener noreferrer"},Nu={href:"https://leetcode.com/problems/kill-process",target:"_blank",rel:"noopener noreferrer"},Vu=t("td",{style:{"text-align":"center"}},"589",-1),Ku=t("td",{style:{"text-align":"left"}},"N 叉树的前序遍历",-1),Lu={style:{"text-align":"center"}},ju={style:{"text-align":"left"}},Bu=t("code",null,"栈",-1),Cu=t("code",null,"树",-1),Eu=t("code",null,"深度优先搜索",-1),Ru=t("td",{style:{"text-align":"center"}},"🟢",-1),Tu={style:{"text-align":"center"}},Au={href:"https://leetcode.cn/problems/n-ary-tree-preorder-traversal",target:"_blank",rel:"noopener noreferrer"},Du={href:"https://leetcode.com/problems/n-ary-tree-preorder-traversal",target:"_blank",rel:"noopener noreferrer"},Fu=t("td",{style:{"text-align":"center"}},"590",-1),Gu=t("td",{style:{"text-align":"left"}},"N 叉树的后序遍历",-1),Hu={style:{"text-align":"center"}},Ju={style:{"text-align":"left"}},Mu=t("code",null,"栈",-1),Ou=t("code",null,"树",-1),Pu=t("code",null,"深度优先搜索",-1),Qu=t("td",{style:{"text-align":"center"}},"🟢",-1),Su={style:{"text-align":"center"}},Uu={href:"https://leetcode.cn/problems/n-ary-tree-postorder-traversal",target:"_blank",rel:"noopener noreferrer"},Wu={href:"https://leetcode.com/problems/n-ary-tree-postorder-traversal",target:"_blank",rel:"noopener noreferrer"},Xu=t("td",{style:{"text-align":"center"}},"606",-1),Yu=t("td",{style:{"text-align":"left"}},"根据二叉树创建字符串",-1),Zu=t("td",{style:{"text-align":"center"}},null,-1),$u={style:{"text-align":"left"}},tm=t("code",null,"树",-1),em=t("code",null,"深度优先搜索",-1),om=t("code",null,"字符串",-1),lm=t("code",null,"1+",-1),nm=t("td",{style:{"text-align":"center"}},"🟠",-1),sm={style:{"text-align":"center"}},rm={href:"https://leetcode.cn/problems/construct-string-from-binary-tree",target:"_blank",rel:"noopener noreferrer"},dm={href:"https://leetcode.com/problems/construct-string-from-binary-tree",target:"_blank",rel:"noopener noreferrer"},_m=t("td",{style:{"text-align":"center"}},"617",-1),cm=t("td",{style:{"text-align":"left"}},"合并二叉树",-1),am={style:{"text-align":"center"}},im={style:{"text-align":"left"}},hm=t("code",null,"树",-1),gm=t("code",null,"深度优先搜索",-1),fm=t("code",null,"广度优先搜索",-1),um=t("code",null,"1+",-1),mm=t("td",{style:{"text-align":"center"}},"🟢",-1),pm={style:{"text-align":"center"}},ym={href:"https://leetcode.cn/problems/merge-two-binary-trees",target:"_blank",rel:"noopener noreferrer"},bm={href:"https://leetcode.com/problems/merge-two-binary-trees",target:"_blank",rel:"noopener noreferrer"},xm=t("td",{style:{"text-align":"center"}},"623",-1),km=t("td",{style:{"text-align":"left"}},"在二叉树中增加一行",-1),vm=t("td",{style:{"text-align":"center"}},null,-1),wm={style:{"text-align":"left"}},qm=t("code",null,"树",-1),Im=t("code",null,"深度优先搜索",-1),zm=t("code",null,"广度优先搜索",-1),Nm=t("code",null,"1+",-1),Vm=t("td",{style:{"text-align":"center"}},"🟠",-1),Km={style:{"text-align":"center"}},Lm={href:"https://leetcode.cn/problems/add-one-row-to-tree",target:"_blank",rel:"noopener noreferrer"},jm={href:"https://leetcode.com/problems/add-one-row-to-tree",target:"_blank",rel:"noopener noreferrer"},Bm=t("td",{style:{"text-align":"center"}},"637",-1),Cm=t("td",{style:{"text-align":"left"}},"二叉树的层平均值",-1),Em={style:{"text-align":"center"}},Rm={style:{"text-align":"left"}},Tm=t("code",null,"树",-1),Am=t("code",null,"深度优先搜索",-1),Dm=t("code",null,"广度优先搜索",-1),Fm=t("code",null,"1+",-1),Gm=t("td",{style:{"text-align":"center"}},"🟢",-1),Hm={style:{"text-align":"center"}},Jm={href:"https://leetcode.cn/problems/average-of-levels-in-binary-tree",target:"_blank",rel:"noopener noreferrer"},Mm={href:"https://leetcode.com/problems/average-of-levels-in-binary-tree",target:"_blank",rel:"noopener noreferrer"},Om=t("td",{style:{"text-align":"center"}},"652",-1),Pm=t("td",{style:{"text-align":"left"}},"寻找重复的子树",-1),Qm=t("td",{style:{"text-align":"center"}},null,-1),Sm={style:{"text-align":"left"}},Um=t("code",null,"树",-1),Wm=t("code",null,"深度优先搜索",-1),Xm=t("code",null,"哈希表",-1),Ym=t("code",null,"1+",-1),Zm=t("td",{style:{"text-align":"center"}},"🟠",-1),$m={style:{"text-align":"center"}},tp={href:"https://leetcode.cn/problems/find-duplicate-subtrees",target:"_blank",rel:"noopener noreferrer"},ep={href:"https://leetcode.com/problems/find-duplicate-subtrees",target:"_blank",rel:"noopener noreferrer"},op=t("td",{style:{"text-align":"center"}},"653",-1),lp=t("td",{style:{"text-align":"left"}},"两数之和 IV - 输入二叉搜索树",-1),np={style:{"text-align":"center"}},sp={style:{"text-align":"left"}},rp=t("code",null,"树",-1),dp=t("code",null,"深度优先搜索",-1),_p=t("code",null,"广度优先搜索",-1),cp=t("code",null,"4+",-1),ap=t("td",{style:{"text-align":"center"}},"🟢",-1),ip={style:{"text-align":"center"}},hp={href:"https://leetcode.cn/problems/two-sum-iv-input-is-a-bst",target:"_blank",rel:"noopener noreferrer"},gp={href:"https://leetcode.com/problems/two-sum-iv-input-is-a-bst",target:"_blank",rel:"noopener noreferrer"},fp=t("td",{style:{"text-align":"center"}},"654",-1),up=t("td",{style:{"text-align":"left"}},"最大二叉树",-1),mp={style:{"text-align":"center"}},pp={style:{"text-align":"left"}},yp=t("code",null,"栈",-1),bp=t("code",null,"树",-1),xp=t("code",null,"数组",-1),kp=t("code",null,"3+",-1),vp=t("td",{style:{"text-align":"center"}},"🟠",-1),wp={style:{"text-align":"center"}},qp={href:"https://leetcode.cn/problems/maximum-binary-tree",target:"_blank",rel:"noopener noreferrer"},Ip={href:"https://leetcode.com/problems/maximum-binary-tree",target:"_blank",rel:"noopener noreferrer"},zp=t("td",{style:{"text-align":"center"}},"655",-1),Np=t("td",{style:{"text-align":"left"}},"输出二叉树",-1),Vp=t("td",{style:{"text-align":"center"}},null,-1),Kp={style:{"text-align":"left"}},Lp=t("code",null,"树",-1),jp=t("code",null,"深度优先搜索",-1),Bp=t("code",null,"广度优先搜索",-1),Cp=t("code",null,"1+",-1),Ep=t("td",{style:{"text-align":"center"}},"🟠",-1),Rp={style:{"text-align":"center"}},Tp={href:"https://leetcode.cn/problems/print-binary-tree",target:"_blank",rel:"noopener noreferrer"},Ap={href:"https://leetcode.com/problems/print-binary-tree",target:"_blank",rel:"noopener noreferrer"},Dp=t("td",{style:{"text-align":"center"}},"662",-1),Fp=t("td",{style:{"text-align":"left"}},"二叉树最大宽度",-1),Gp={style:{"text-align":"center"}},Hp={style:{"text-align":"left"}},Jp=t("code",null,"树",-1),Mp=t("code",null,"深度优先搜索",-1),Op=t("code",null,"广度优先搜索",-1),Pp=t("code",null,"1+",-1),Qp=t("td",{style:{"text-align":"center"}},"🟠",-1),Sp={style:{"text-align":"center"}},Up={href:"https://leetcode.cn/problems/maximum-width-of-binary-tree",target:"_blank",rel:"noopener noreferrer"},Wp={href:"https://leetcode.com/problems/maximum-width-of-binary-tree",target:"_blank",rel:"noopener noreferrer"},Xp=t("td",{style:{"text-align":"center"}},"663",-1),Yp=t("td",{style:{"text-align":"left"}},"均匀树划分 🔒",-1),Zp=t("td",{style:{"text-align":"center"}},null,-1),$p={style:{"text-align":"left"}},ty=t("code",null,"树",-1),ey=t("code",null,"深度优先搜索",-1),oy=t("code",null,"二叉树",-1),ly=t("td",{style:{"text-align":"center"}},"🟠",-1),ny={style:{"text-align":"center"}},sy={href:"https://leetcode.cn/problems/equal-tree-partition",target:"_blank",rel:"noopener noreferrer"},ry={href:"https://leetcode.com/problems/equal-tree-partition",target:"_blank",rel:"noopener noreferrer"},dy=t("td",{style:{"text-align":"center"}},"666",-1),_y=t("td",{style:{"text-align":"left"}},"路径总和 IV 🔒",-1),cy=t("td",{style:{"text-align":"center"}},null,-1),ay={style:{"text-align":"left"}},iy=t("code",null,"树",-1),hy=t("code",null,"深度优先搜索",-1),gy=t("code",null,"数组",-1),fy=t("code",null,"2+",-1),uy=t("td",{style:{"text-align":"center"}},"🟠",-1),my={style:{"text-align":"center"}},py={href:"https://leetcode.cn/problems/path-sum-iv",target:"_blank",rel:"noopener noreferrer"},yy={href:"https://leetcode.com/problems/path-sum-iv",target:"_blank",rel:"noopener noreferrer"},by=t("td",{style:{"text-align":"center"}},"669",-1),xy=t("td",{style:{"text-align":"left"}},"修剪二叉搜索树",-1),ky=t("td",{style:{"text-align":"center"}},null,-1),vy={style:{"text-align":"left"}},wy=t("code",null,"树",-1),qy=t("code",null,"深度优先搜索",-1),Iy=t("code",null,"二叉搜索树",-1),zy=t("code",null,"1+",-1),Ny=t("td",{style:{"text-align":"center"}},"🟠",-1),Vy={style:{"text-align":"center"}},Ky={href:"https://leetcode.cn/problems/trim-a-binary-search-tree",target:"_blank",rel:"noopener noreferrer"},Ly={href:"https://leetcode.com/problems/trim-a-binary-search-tree",target:"_blank",rel:"noopener noreferrer"},jy=t("td",{style:{"text-align":"center"}},"671",-1),By=t("td",{style:{"text-align":"left"}},"二叉树中第二小的节点",-1),Cy={style:{"text-align":"center"}},Ey={style:{"text-align":"left"}},Ry=t("code",null,"树",-1),Ty=t("code",null,"深度优先搜索",-1),Ay=t("code",null,"二叉树",-1),Dy=t("td",{style:{"text-align":"center"}},"🟢",-1),Fy={style:{"text-align":"center"}},Gy={href:"https://leetcode.cn/problems/second-minimum-node-in-a-binary-tree",target:"_blank",rel:"noopener noreferrer"},Hy={href:"https://leetcode.com/problems/second-minimum-node-in-a-binary-tree",target:"_blank",rel:"noopener noreferrer"},Jy=t("td",{style:{"text-align":"center"}},"687",-1),My=t("td",{style:{"text-align":"left"}},"最长同值路径",-1),Oy=t("td",{style:{"text-align":"center"}},null,-1),Py={style:{"text-align":"left"}},Qy=t("code",null,"树",-1),Sy=t("code",null,"深度优先搜索",-1),Uy=t("code",null,"二叉树",-1),Wy=t("td",{style:{"text-align":"center"}},"🟠",-1),Xy={style:{"text-align":"center"}},Yy={href:"https://leetcode.cn/problems/longest-univalue-path",target:"_blank",rel:"noopener noreferrer"},Zy={href:"https://leetcode.com/problems/longest-univalue-path",target:"_blank",rel:"noopener noreferrer"},$y=t("td",{style:{"text-align":"center"}},"690",-1),tb=t("td",{style:{"text-align":"left"}},"员工的重要性",-1),eb=t("td",{style:{"text-align":"center"}},null,-1),ob={style:{"text-align":"left"}},lb=t("code",null,"树",-1),nb=t("code",null,"深度优先搜索",-1),sb=t("code",null,"广度优先搜索",-1),rb=t("code",null,"2+",-1),db=t("td",{style:{"text-align":"center"}},"🟠",-1),_b={style:{"text-align":"center"}},cb={href:"https://leetcode.cn/problems/employee-importance",target:"_blank",rel:"noopener noreferrer"},ab={href:"https://leetcode.com/problems/employee-importance",target:"_blank",rel:"noopener noreferrer"},ib=t("td",{style:{"text-align":"center"}},"700",-1),hb=t("td",{style:{"text-align":"left"}},"二叉搜索树中的搜索",-1),gb={style:{"text-align":"center"}},fb={style:{"text-align":"left"}},ub=t("code",null,"树",-1),mb=t("code",null,"二叉搜索树",-1),pb=t("code",null,"二叉树",-1),yb=t("td",{style:{"text-align":"center"}},"🟢",-1),bb={style:{"text-align":"center"}},xb={href:"https://leetcode.cn/problems/search-in-a-binary-search-tree",target:"_blank",rel:"noopener noreferrer"},kb={href:"https://leetcode.com/problems/search-in-a-binary-search-tree",target:"_blank",rel:"noopener noreferrer"},vb=t("td",{style:{"text-align":"center"}},"701",-1),wb=t("td",{style:{"text-align":"left"}},"二叉搜索树中的插入操作",-1),qb={style:{"text-align":"center"}},Ib={style:{"text-align":"left"}},zb=t("code",null,"树",-1),Nb=t("code",null,"二叉搜索树",-1),Vb=t("code",null,"二叉树",-1),Kb=t("td",{style:{"text-align":"center"}},"🟠",-1),Lb={style:{"text-align":"center"}},jb={href:"https://leetcode.cn/problems/insert-into-a-binary-search-tree",target:"_blank",rel:"noopener noreferrer"},Bb={href:"https://leetcode.com/problems/insert-into-a-binary-search-tree",target:"_blank",rel:"noopener noreferrer"},Cb=t("td",{style:{"text-align":"center"}},"703",-1),Eb=t("td",{style:{"text-align":"left"}},"数据流中的第 K 大元素",-1),Rb={style:{"text-align":"center"}},Tb={style:{"text-align":"left"}},Ab=t("code",null,"树",-1),Db=t("code",null,"设计",-1),Fb=t("code",null,"二叉搜索树",-1),Gb=t("code",null,"3+",-1),Hb=t("td",{style:{"text-align":"center"}},"🟢",-1),Jb={style:{"text-align":"center"}},Mb={href:"https://leetcode.cn/problems/kth-largest-element-in-a-stream",target:"_blank",rel:"noopener noreferrer"},Ob={href:"https://leetcode.com/problems/kth-largest-element-in-a-stream",target:"_blank",rel:"noopener noreferrer"},Pb=t("td",{style:{"text-align":"center"}},"742",-1),Qb=t("td",{style:{"text-align":"left"}},"二叉树最近的叶节点 🔒",-1),Sb=t("td",{style:{"text-align":"center"}},null,-1),Ub={style:{"text-align":"left"}},Wb=t("code",null,"树",-1),Xb=t("code",null,"深度优先搜索",-1),Yb=t("code",null,"广度优先搜索",-1),Zb=t("code",null,"1+",-1),$b=t("td",{style:{"text-align":"center"}},"🟠",-1),t2={style:{"text-align":"center"}},e2={href:"https://leetcode.cn/problems/closest-leaf-in-a-binary-tree",target:"_blank",rel:"noopener noreferrer"},o2={href:"https://leetcode.com/problems/closest-leaf-in-a-binary-tree",target:"_blank",rel:"noopener noreferrer"},l2=t("td",{style:{"text-align":"center"}},"776",-1),n2=t("td",{style:{"text-align":"left"}},"拆分二叉搜索树 🔒",-1),s2=t("td",{style:{"text-align":"center"}},null,-1),r2={style:{"text-align":"left"}},d2=t("code",null,"树",-1),_2=t("code",null,"二叉搜索树",-1),c2=t("code",null,"递归",-1),a2=t("code",null,"1+",-1),i2=t("td",{style:{"text-align":"center"}},"🟠",-1),h2={style:{"text-align":"center"}},g2={href:"https://leetcode.cn/problems/split-bst",target:"_blank",rel:"noopener noreferrer"},f2={href:"https://leetcode.com/problems/split-bst",target:"_blank",rel:"noopener noreferrer"},u2=t("td",{style:{"text-align":"center"}},"783",-1),m2=t("td",{style:{"text-align":"left"}},"二叉搜索树节点最小距离",-1),p2={style:{"text-align":"center"}},y2={style:{"text-align":"left"}},b2=t("code",null,"树",-1),x2=t("code",null,"深度优先搜索",-1),k2=t("code",null,"广度优先搜索",-1),v2=t("code",null,"2+",-1),w2=t("td",{style:{"text-align":"center"}},"🟢",-1),q2={style:{"text-align":"center"}},I2={href:"https://leetcode.cn/problems/minimum-distance-between-bst-nodes",target:"_blank",rel:"noopener noreferrer"},z2={href:"https://leetcode.com/problems/minimum-distance-between-bst-nodes",target:"_blank",rel:"noopener noreferrer"},N2=t("td",{style:{"text-align":"center"}},"814",-1),V2=t("td",{style:{"text-align":"left"}},"二叉树剪枝",-1),K2=t("td",{style:{"text-align":"center"}},null,-1),L2={style:{"text-align":"left"}},j2=t("code",null,"树",-1),B2=t("code",null,"深度优先搜索",-1),C2=t("code",null,"二叉树",-1),E2=t("td",{style:{"text-align":"center"}},"🟠",-1),R2={style:{"text-align":"center"}},T2={href:"https://leetcode.cn/problems/binary-tree-pruning",target:"_blank",rel:"noopener noreferrer"},A2={href:"https://leetcode.com/problems/binary-tree-pruning",target:"_blank",rel:"noopener noreferrer"},D2=t("td",{style:{"text-align":"center"}},"834",-1),F2=t("td",{style:{"text-align":"left"}},"树中距离之和",-1),G2=t("td",{style:{"text-align":"center"}},null,-1),H2={style:{"text-align":"left"}},J2=t("code",null,"树",-1),M2=t("code",null,"深度优先搜索",-1),O2=t("code",null,"图",-1),P2=t("code",null,"1+",-1),Q2=t("td",{style:{"text-align":"center"}},"🔴",-1),S2={style:{"text-align":"center"}},U2={href:"https://leetcode.cn/problems/sum-of-distances-in-tree",target:"_blank",rel:"noopener noreferrer"},W2={href:"https://leetcode.com/problems/sum-of-distances-in-tree",target:"_blank",rel:"noopener noreferrer"},X2=t("td",{style:{"text-align":"center"}},"863",-1),Y2=t("td",{style:{"text-align":"left"}},"二叉树中所有距离为 K 的结点",-1),Z2=t("td",{style:{"text-align":"center"}},null,-1),$2={style:{"text-align":"left"}},tx=t("code",null,"树",-1),ex=t("code",null,"深度优先搜索",-1),ox=t("code",null,"广度优先搜索",-1),lx=t("code",null,"2+",-1),nx=t("td",{style:{"text-align":"center"}},"🟠",-1),sx={style:{"text-align":"center"}},rx={href:"https://leetcode.cn/problems/all-nodes-distance-k-in-binary-tree",target:"_blank",rel:"noopener noreferrer"},dx={href:"https://leetcode.com/problems/all-nodes-distance-k-in-binary-tree",target:"_blank",rel:"noopener noreferrer"},_x=t("td",{style:{"text-align":"center"}},"865",-1),cx=t("td",{style:{"text-align":"left"}},"具有所有最深节点的最小子树",-1),ax=t("td",{style:{"text-align":"center"}},null,-1),ix={style:{"text-align":"left"}},hx=t("code",null,"树",-1),gx=t("code",null,"深度优先搜索",-1),fx=t("code",null,"广度优先搜索",-1),ux=t("code",null,"2+",-1),mx=t("td",{style:{"text-align":"center"}},"🟠",-1),px={style:{"text-align":"center"}},yx={href:"https://leetcode.cn/problems/smallest-subtree-with-all-the-deepest-nodes",target:"_blank",rel:"noopener noreferrer"},bx={href:"https://leetcode.com/problems/smallest-subtree-with-all-the-deepest-nodes",target:"_blank",rel:"noopener noreferrer"},xx=t("td",{style:{"text-align":"center"}},"872",-1),kx=t("td",{style:{"text-align":"left"}},"叶子相似的树",-1),vx={style:{"text-align":"center"}},wx={style:{"text-align":"left"}},qx=t("code",null,"树",-1),Ix=t("code",null,"深度优先搜索",-1),zx=t("code",null,"二叉树",-1),Nx=t("td",{style:{"text-align":"center"}},"🟢",-1),Vx={style:{"text-align":"center"}},Kx={href:"https://leetcode.cn/problems/leaf-similar-trees",target:"_blank",rel:"noopener noreferrer"},Lx={href:"https://leetcode.com/problems/leaf-similar-trees",target:"_blank",rel:"noopener noreferrer"},jx=t("td",{style:{"text-align":"center"}},"889",-1),Bx=t("td",{style:{"text-align":"left"}},"根据前序和后序遍历构造二叉树",-1),Cx={style:{"text-align":"center"}},Ex={style:{"text-align":"left"}},Rx=t("code",null,"树",-1),Tx=t("code",null,"数组",-1),Ax=t("code",null,"哈希表",-1),Dx=t("code",null,"2+",-1),Fx=t("td",{style:{"text-align":"center"}},"🟠",-1),Gx={style:{"text-align":"center"}},Hx={href:"https://leetcode.cn/problems/construct-binary-tree-from-preorder-and-postorder-traversal",target:"_blank",rel:"noopener noreferrer"},Jx={href:"https://leetcode.com/problems/construct-binary-tree-from-preorder-and-postorder-traversal",target:"_blank",rel:"noopener noreferrer"},Mx=t("td",{style:{"text-align":"center"}},"894",-1),Ox=t("td",{style:{"text-align":"left"}},"所有可能的真二叉树",-1),Px=t("td",{style:{"text-align":"center"}},null,-1),Qx={style:{"text-align":"left"}},Sx=t("code",null,"树",-1),Ux=t("code",null,"递归",-1),Wx=t("code",null,"记忆化搜索",-1),Xx=t("code",null,"2+",-1),Yx=t("td",{style:{"text-align":"center"}},"🟠",-1),Zx={style:{"text-align":"center"}},$x={href:"https://leetcode.cn/problems/all-possible-full-binary-trees",target:"_blank",rel:"noopener noreferrer"},t3={href:"https://leetcode.com/problems/all-possible-full-binary-trees",target:"_blank",rel:"noopener noreferrer"},e3=t("td",{style:{"text-align":"center"}},"897",-1),o3=t("td",{style:{"text-align":"left"}},"递增顺序搜索树",-1),l3={style:{"text-align":"center"}},n3={style:{"text-align":"left"}},s3=t("code",null,"栈",-1),r3=t("code",null,"树",-1),d3=t("code",null,"深度优先搜索",-1),_3=t("code",null,"2+",-1),c3=t("td",{style:{"text-align":"center"}},"🟢",-1),a3={style:{"text-align":"center"}},i3={href:"https://leetcode.cn/problems/increasing-order-search-tree",target:"_blank",rel:"noopener noreferrer"},h3={href:"https://leetcode.com/problems/increasing-order-search-tree",target:"_blank",rel:"noopener noreferrer"},g3=t("td",{style:{"text-align":"center"}},"919",-1),f3=t("td",{style:{"text-align":"left"}},"完全二叉树插入器",-1),u3=t("td",{style:{"text-align":"center"}},null,-1),m3={style:{"text-align":"left"}},p3=t("code",null,"树",-1),y3=t("code",null,"广度优先搜索",-1),b3=t("code",null,"设计",-1),x3=t("code",null,"1+",-1),k3=t("td",{style:{"text-align":"center"}},"🟠",-1),v3={style:{"text-align":"center"}},w3={href:"https://leetcode.cn/problems/complete-binary-tree-inserter",target:"_blank",rel:"noopener noreferrer"},q3={href:"https://leetcode.com/problems/complete-binary-tree-inserter",target:"_blank",rel:"noopener noreferrer"},I3=t("td",{style:{"text-align":"center"}},"938",-1),z3=t("td",{style:{"text-align":"left"}},"二叉搜索树的范围和",-1),N3={style:{"text-align":"center"}},V3={style:{"text-align":"left"}},K3=t("code",null,"树",-1),L3=t("code",null,"深度优先搜索",-1),j3=t("code",null,"二叉搜索树",-1),B3=t("code",null,"1+",-1),C3=t("td",{style:{"text-align":"center"}},"🟢",-1),E3={style:{"text-align":"center"}},R3={href:"https://leetcode.cn/problems/range-sum-of-bst",target:"_blank",rel:"noopener noreferrer"},T3={href:"https://leetcode.com/problems/range-sum-of-bst",target:"_blank",rel:"noopener noreferrer"},A3=t("td",{style:{"text-align":"center"}},"951",-1),D3=t("td",{style:{"text-align":"left"}},"翻转等价二叉树",-1),F3={style:{"text-align":"center"}},G3={style:{"text-align":"left"}},H3=t("code",null,"树",-1),J3=t("code",null,"深度优先搜索",-1),M3=t("code",null,"二叉树",-1),O3=t("td",{style:{"text-align":"center"}},"🟠",-1),P3={style:{"text-align":"center"}},Q3={href:"https://leetcode.cn/problems/flip-equivalent-binary-trees",target:"_blank",rel:"noopener noreferrer"},S3={href:"https://leetcode.com/problems/flip-equivalent-binary-trees",target:"_blank",rel:"noopener noreferrer"},U3=t("td",{style:{"text-align":"center"}},"958",-1),W3=t("td",{style:{"text-align":"left"}},"二叉树的完全性检验",-1),X3={style:{"text-align":"center"}},Y3={style:{"text-align":"left"}},Z3=t("code",null,"树",-1),$3=t("code",null,"广度优先搜索",-1),t0=t("code",null,"二叉树",-1),e0=t("td",{style:{"text-align":"center"}},"🟠",-1),o0={style:{"text-align":"center"}},l0={href:"https://leetcode.cn/problems/check-completeness-of-a-binary-tree",target:"_blank",rel:"noopener noreferrer"},n0={href:"https://leetcode.com/problems/check-completeness-of-a-binary-tree",target:"_blank",rel:"noopener noreferrer"},s0=t("td",{style:{"text-align":"center"}},"965",-1),r0=t("td",{style:{"text-align":"left"}},"单值二叉树",-1),d0={style:{"text-align":"center"}},_0={style:{"text-align":"left"}},c0=t("code",null,"树",-1),a0=t("code",null,"深度优先搜索",-1),i0=t("code",null,"广度优先搜索",-1),h0=t("code",null,"1+",-1),g0=t("td",{style:{"text-align":"center"}},"🟢",-1),f0={style:{"text-align":"center"}},u0={href:"https://leetcode.cn/problems/univalued-binary-tree",target:"_blank",rel:"noopener noreferrer"},m0={href:"https://leetcode.com/problems/univalued-binary-tree",target:"_blank",rel:"noopener noreferrer"},p0=t("td",{style:{"text-align":"center"}},"968",-1),y0=t("td",{style:{"text-align":"left"}},"监控二叉树",-1),b0=t("td",{style:{"text-align":"center"}},null,-1),x0={style:{"text-align":"left"}},k0=t("code",null,"树",-1),v0=t("code",null,"深度优先搜索",-1),w0=t("code",null,"动态规划",-1),q0=t("code",null,"1+",-1),I0=t("td",{style:{"text-align":"center"}},"🔴",-1),z0={style:{"text-align":"center"}},N0={href:"https://leetcode.cn/problems/binary-tree-cameras",target:"_blank",rel:"noopener noreferrer"},V0={href:"https://leetcode.com/problems/binary-tree-cameras",target:"_blank",rel:"noopener noreferrer"},K0=t("td",{style:{"text-align":"center"}},"971",-1),L0=t("td",{style:{"text-align":"left"}},"翻转二叉树以匹配先序遍历",-1),j0=t("td",{style:{"text-align":"center"}},null,-1),B0={style:{"text-align":"left"}},C0=t("code",null,"树",-1),E0=t("code",null,"深度优先搜索",-1),R0=t("code",null,"二叉树",-1),T0=t("td",{style:{"text-align":"center"}},"🟠",-1),A0={style:{"text-align":"center"}},D0={href:"https://leetcode.cn/problems/flip-binary-tree-to-match-preorder-traversal",target:"_blank",rel:"noopener noreferrer"},F0={href:"https://leetcode.com/problems/flip-binary-tree-to-match-preorder-traversal",target:"_blank",rel:"noopener noreferrer"},G0=t("td",{style:{"text-align":"center"}},"979",-1),H0=t("td",{style:{"text-align":"left"}},"在二叉树中分配硬币",-1),J0=t("td",{style:{"text-align":"center"}},null,-1),M0={style:{"text-align":"left"}},O0=t("code",null,"树",-1),P0=t("code",null,"深度优先搜索",-1),Q0=t("code",null,"二叉树",-1),S0=t("td",{style:{"text-align":"center"}},"🟠",-1),U0={style:{"text-align":"center"}},W0={href:"https://leetcode.cn/problems/distribute-coins-in-binary-tree",target:"_blank",rel:"noopener noreferrer"},X0={href:"https://leetcode.com/problems/distribute-coins-in-binary-tree",target:"_blank",rel:"noopener noreferrer"},Y0=t("td",{style:{"text-align":"center"}},"987",-1),Z0=t("td",{style:{"text-align":"left"}},"二叉树的垂序遍历",-1),$0=t("td",{style:{"text-align":"center"}},null,-1),t4={style:{"text-align":"left"}},e4=t("code",null,"树",-1),o4=t("code",null,"深度优先搜索",-1),l4=t("code",null,"广度优先搜索",-1),n4=t("code",null,"3+",-1),s4=t("td",{style:{"text-align":"center"}},"🔴",-1),r4={style:{"text-align":"center"}},d4={href:"https://leetcode.cn/problems/vertical-order-traversal-of-a-binary-tree",target:"_blank",rel:"noopener noreferrer"},_4={href:"https://leetcode.com/problems/vertical-order-traversal-of-a-binary-tree",target:"_blank",rel:"noopener noreferrer"},c4=t("td",{style:{"text-align":"center"}},"988",-1),a4=t("td",{style:{"text-align":"left"}},"从叶结点开始的最小字符串",-1),i4=t("td",{style:{"text-align":"center"}},null,-1),h4={style:{"text-align":"left"}},g4=t("code",null,"树",-1),f4=t("code",null,"深度优先搜索",-1),u4=t("code",null,"字符串",-1),m4=t("code",null,"2+",-1),p4=t("td",{style:{"text-align":"center"}},"🟠",-1),y4={style:{"text-align":"center"}},b4={href:"https://leetcode.cn/problems/smallest-string-starting-from-leaf",target:"_blank",rel:"noopener noreferrer"},x4={href:"https://leetcode.com/problems/smallest-string-starting-from-leaf",target:"_blank",rel:"noopener noreferrer"},k4=t("td",{style:{"text-align":"center"}},"993",-1),v4=t("td",{style:{"text-align":"left"}},"二叉树的堂兄弟节点",-1),w4={style:{"text-align":"center"}},q4={style:{"text-align":"left"}},I4=t("code",null,"树",-1),z4=t("code",null,"深度优先搜索",-1),N4=t("code",null,"广度优先搜索",-1),V4=t("code",null,"1+",-1),K4=t("td",{style:{"text-align":"center"}},"🟢",-1),L4={style:{"text-align":"center"}},j4={href:"https://leetcode.cn/problems/cousins-in-binary-tree",target:"_blank",rel:"noopener noreferrer"},B4={href:"https://leetcode.com/problems/cousins-in-binary-tree",target:"_blank",rel:"noopener noreferrer"},C4=t("td",{style:{"text-align":"center"}},"998",-1),E4=t("td",{style:{"text-align":"left"}},"最大二叉树 II",-1),R4=t("td",{style:{"text-align":"center"}},null,-1),T4={style:{"text-align":"left"}},A4=t("code",null,"树",-1),D4=t("code",null,"二叉树",-1),F4=t("td",{style:{"text-align":"center"}},"🟠",-1),G4={style:{"text-align":"center"}},H4={href:"https://leetcode.cn/problems/maximum-binary-tree-ii",target:"_blank",rel:"noopener noreferrer"},J4={href:"https://leetcode.com/problems/maximum-binary-tree-ii",target:"_blank",rel:"noopener noreferrer"},M4=t("td",{style:{"text-align":"center"}},"1008",-1),O4=t("td",{style:{"text-align":"left"}},"前序遍历构造二叉搜索树",-1),P4={style:{"text-align":"center"}},Q4={style:{"text-align":"left"}},S4=t("code",null,"栈",-1),U4=t("code",null,"树",-1),W4=t("code",null,"二叉搜索树",-1),X4=t("code",null,"3+",-1),Y4=t("td",{style:{"text-align":"center"}},"🟠",-1),Z4={style:{"text-align":"center"}},$4={href:"https://leetcode.cn/problems/construct-binary-search-tree-from-preorder-traversal",target:"_blank",rel:"noopener noreferrer"},t6={href:"https://leetcode.com/problems/construct-binary-search-tree-from-preorder-traversal",target:"_blank",rel:"noopener noreferrer"},e6=t("td",{style:{"text-align":"center"}},"1022",-1),o6=t("td",{style:{"text-align":"left"}},"从根到叶的二进制数之和",-1),l6={style:{"text-align":"center"}},n6={style:{"text-align":"left"}},s6=t("code",null,"树",-1),r6=t("code",null,"深度优先搜索",-1),d6=t("code",null,"二叉树",-1),_6=t("td",{style:{"text-align":"center"}},"🟢",-1),c6={style:{"text-align":"center"}},a6={href:"https://leetcode.cn/problems/sum-of-root-to-leaf-binary-numbers",target:"_blank",rel:"noopener noreferrer"},i6={href:"https://leetcode.com/problems/sum-of-root-to-leaf-binary-numbers",target:"_blank",rel:"noopener noreferrer"},h6=t("td",{style:{"text-align":"center"}},"1026",-1),g6=t("td",{style:{"text-align":"left"}},"节点与其祖先之间的最大差值",-1),f6=t("td",{style:{"text-align":"center"}},null,-1),u6={style:{"text-align":"left"}},m6=t("code",null,"树",-1),p6=t("code",null,"深度优先搜索",-1),y6=t("code",null,"二叉树",-1),b6=t("td",{style:{"text-align":"center"}},"🟠",-1),x6={style:{"text-align":"center"}},k6={href:"https://leetcode.cn/problems/maximum-difference-between-node-and-ancestor",target:"_blank",rel:"noopener noreferrer"},v6={href:"https://leetcode.com/problems/maximum-difference-between-node-and-ancestor",target:"_blank",rel:"noopener noreferrer"},w6=t("td",{style:{"text-align":"center"}},"1028",-1),q6=t("td",{style:{"text-align":"left"}},"从先序遍历还原二叉树",-1),I6={style:{"text-align":"center"}},z6={style:{"text-align":"left"}},N6=t("code",null,"树",-1),V6=t("code",null,"深度优先搜索",-1),K6=t("code",null,"字符串",-1),L6=t("code",null,"1+",-1),j6=t("td",{style:{"text-align":"center"}},"🔴",-1),B6={style:{"text-align":"center"}},C6={href:"https://leetcode.cn/problems/recover-a-tree-from-preorder-traversal",target:"_blank",rel:"noopener noreferrer"},E6={href:"https://leetcode.com/problems/recover-a-tree-from-preorder-traversal",target:"_blank",rel:"noopener noreferrer"},R6=t("td",{style:{"text-align":"center"}},"1038",-1),T6=t("td",{style:{"text-align":"left"}},"从二叉搜索树到更大和树",-1),A6=t("td",{style:{"text-align":"center"}},null,-1),D6={style:{"text-align":"left"}},F6=t("code",null,"树",-1),G6=t("code",null,"深度优先搜索",-1),H6=t("code",null,"二叉搜索树",-1),J6=t("code",null,"1+",-1),M6=t("td",{style:{"text-align":"center"}},"🟠",-1),O6={style:{"text-align":"center"}},P6={href:"https://leetcode.cn/problems/binary-search-tree-to-greater-sum-tree",target:"_blank",rel:"noopener noreferrer"},Q6={href:"https://leetcode.com/problems/binary-search-tree-to-greater-sum-tree",target:"_blank",rel:"noopener noreferrer"},S6=t("td",{style:{"text-align":"center"}},"1080",-1),U6=t("td",{style:{"text-align":"left"}},"根到叶路径上的不足节点",-1),W6=t("td",{style:{"text-align":"center"}},null,-1),X6={style:{"text-align":"left"}},Y6=t("code",null,"树",-1),Z6=t("code",null,"深度优先搜索",-1),$6=t("code",null,"二叉树",-1),t5=t("td",{style:{"text-align":"center"}},"🟠",-1),e5={style:{"text-align":"center"}},o5={href:"https://leetcode.cn/problems/insufficient-nodes-in-root-to-leaf-paths",target:"_blank",rel:"noopener noreferrer"},l5={href:"https://leetcode.com/problems/insufficient-nodes-in-root-to-leaf-paths",target:"_blank",rel:"noopener noreferrer"},n5=t("td",{style:{"text-align":"center"}},"1104",-1),s5=t("td",{style:{"text-align":"left"}},"二叉树寻路",-1),r5=t("td",{style:{"text-align":"center"}},null,-1),d5={style:{"text-align":"left"}},_5=t("code",null,"树",-1),c5=t("code",null,"数学",-1),a5=t("code",null,"二叉树",-1),i5=t("td",{style:{"text-align":"center"}},"🟠",-1),h5={style:{"text-align":"center"}},g5={href:"https://leetcode.cn/problems/path-in-zigzag-labelled-binary-tree",target:"_blank",rel:"noopener noreferrer"},f5={href:"https://leetcode.com/problems/path-in-zigzag-labelled-binary-tree",target:"_blank",rel:"noopener noreferrer"},u5=t("td",{style:{"text-align":"center"}},"1110",-1),m5=t("td",{style:{"text-align":"left"}},"删点成林",-1),p5=t("td",{style:{"text-align":"center"}},null,-1),y5={style:{"text-align":"left"}},b5=t("code",null,"树",-1),x5=t("code",null,"深度优先搜索",-1),k5=t("code",null,"数组",-1),v5=t("code",null,"2+",-1),w5=t("td",{style:{"text-align":"center"}},"🟠",-1),q5={style:{"text-align":"center"}},I5={href:"https://leetcode.cn/problems/delete-nodes-and-return-forest",target:"_blank",rel:"noopener noreferrer"},z5={href:"https://leetcode.com/problems/delete-nodes-and-return-forest",target:"_blank",rel:"noopener noreferrer"},N5=t("td",{style:{"text-align":"center"}},"1120",-1),V5=t("td",{style:{"text-align":"left"}},"子树的最大平均值 🔒",-1),K5=t("td",{style:{"text-align":"center"}},null,-1),L5={style:{"text-align":"left"}},j5=t("code",null,"树",-1),B5=t("code",null,"深度优先搜索",-1),C5=t("code",null,"二叉树",-1),E5=t("td",{style:{"text-align":"center"}},"🟠",-1),R5={style:{"text-align":"center"}},T5={href:"https://leetcode.cn/problems/maximum-average-subtree",target:"_blank",rel:"noopener noreferrer"},A5={href:"https://leetcode.com/problems/maximum-average-subtree",target:"_blank",rel:"noopener noreferrer"},D5=t("td",{style:{"text-align":"center"}},"1123",-1),F5=t("td",{style:{"text-align":"left"}},"最深叶节点的最近公共祖先",-1),G5=t("td",{style:{"text-align":"center"}},null,-1),H5={style:{"text-align":"left"}},J5=t("code",null,"树",-1),M5=t("code",null,"深度优先搜索",-1),O5=t("code",null,"广度优先搜索",-1),P5=t("code",null,"2+",-1),Q5=t("td",{style:{"text-align":"center"}},"🟠",-1),S5={style:{"text-align":"center"}},U5={href:"https://leetcode.cn/problems/lowest-common-ancestor-of-deepest-leaves",target:"_blank",rel:"noopener noreferrer"},W5={href:"https://leetcode.com/problems/lowest-common-ancestor-of-deepest-leaves",target:"_blank",rel:"noopener noreferrer"},X5=t("td",{style:{"text-align":"center"}},"1145",-1),Y5=t("td",{style:{"text-align":"left"}},"二叉树着色游戏",-1),Z5=t("td",{style:{"text-align":"center"}},null,-1),$5={style:{"text-align":"left"}},t9=t("code",null,"树",-1),e9=t("code",null,"深度优先搜索",-1),o9=t("code",null,"二叉树",-1),l9=t("td",{style:{"text-align":"center"}},"🟠",-1),n9={style:{"text-align":"center"}},s9={href:"https://leetcode.cn/problems/binary-tree-coloring-game",target:"_blank",rel:"noopener noreferrer"},r9={href:"https://leetcode.com/problems/binary-tree-coloring-game",target:"_blank",rel:"noopener noreferrer"},d9=t("td",{style:{"text-align":"center"}},"1161",-1),_9=t("td",{style:{"text-align":"left"}},"最大层内元素和",-1),c9={style:{"text-align":"center"}},a9={style:{"text-align":"left"}},i9=t("code",null,"树",-1),h9=t("code",null,"深度优先搜索",-1),g9=t("code",null,"广度优先搜索",-1),f9=t("code",null,"1+",-1),u9=t("td",{style:{"text-align":"center"}},"🟠",-1),m9={style:{"text-align":"center"}},p9={href:"https://leetcode.cn/problems/maximum-level-sum-of-a-binary-tree",target:"_blank",rel:"noopener noreferrer"},y9={href:"https://leetcode.com/problems/maximum-level-sum-of-a-binary-tree",target:"_blank",rel:"noopener noreferrer"},b9=t("td",{style:{"text-align":"center"}},"1214",-1),x9=t("td",{style:{"text-align":"left"}},"查找两棵二叉搜索树之和 🔒",-1),k9=t("td",{style:{"text-align":"center"}},null,-1),v9={style:{"text-align":"left"}},w9=t("code",null,"栈",-1),q9=t("code",null,"树",-1),I9=t("code",null,"深度优先搜索",-1),z9=t("code",null,"4+",-1),N9=t("td",{style:{"text-align":"center"}},"🟠",-1),V9={style:{"text-align":"center"}},K9={href:"https://leetcode.cn/problems/two-sum-bsts",target:"_blank",rel:"noopener noreferrer"},L9={href:"https://leetcode.com/problems/two-sum-bsts",target:"_blank",rel:"noopener noreferrer"},j9=t("td",{style:{"text-align":"center"}},"1245",-1),B9=t("td",{style:{"text-align":"left"}},"树的直径 🔒",-1),C9=t("td",{style:{"text-align":"center"}},null,-1),E9={style:{"text-align":"left"}},R9=t("code",null,"树",-1),T9=t("code",null,"深度优先搜索",-1),A9=t("code",null,"广度优先搜索",-1),D9=t("code",null,"2+",-1),F9=t("td",{style:{"text-align":"center"}},"🟠",-1),G9={style:{"text-align":"center"}},H9={href:"https://leetcode.cn/problems/tree-diameter",target:"_blank",rel:"noopener noreferrer"},J9={href:"https://leetcode.com/problems/tree-diameter",target:"_blank",rel:"noopener noreferrer"},M9=t("td",{style:{"text-align":"center"}},"1257",-1),O9=t("td",{style:{"text-align":"left"}},"最小公共区域 🔒",-1),P9=t("td",{style:{"text-align":"center"}},null,-1),Q9={style:{"text-align":"left"}},S9=t("code",null,"树",-1),U9=t("code",null,"深度优先搜索",-1),W9=t("code",null,"广度优先搜索",-1),X9=t("code",null,"3+",-1),Y9=t("td",{style:{"text-align":"center"}},"🟠",-1),Z9={style:{"text-align":"center"}},$9={href:"https://leetcode.cn/problems/smallest-common-region",target:"_blank",rel:"noopener noreferrer"},t7={href:"https://leetcode.com/problems/smallest-common-region",target:"_blank",rel:"noopener noreferrer"},e7=t("td",{style:{"text-align":"center"}},"1261",-1),o7=t("td",{style:{"text-align":"left"}},"在受污染的二叉树中查找元素",-1),l7={style:{"text-align":"center"}},n7={style:{"text-align":"left"}},s7=t("code",null,"树",-1),r7=t("code",null,"深度优先搜索",-1),d7=t("code",null,"广度优先搜索",-1),_7=t("code",null,"3+",-1),c7=t("td",{style:{"text-align":"center"}},"🟠",-1),a7={style:{"text-align":"center"}},i7={href:"https://leetcode.cn/problems/find-elements-in-a-contaminated-binary-tree",target:"_blank",rel:"noopener noreferrer"},h7={href:"https://leetcode.com/problems/find-elements-in-a-contaminated-binary-tree",target:"_blank",rel:"noopener noreferrer"},g7=t("td",{style:{"text-align":"center"}},"1273",-1),f7=t("td",{style:{"text-align":"left"}},"删除树节点 🔒",-1),u7=t("td",{style:{"text-align":"center"}},null,-1),m7={style:{"text-align":"left"}},p7=t("code",null,"树",-1),y7=t("code",null,"深度优先搜索",-1),b7=t("code",null,"广度优先搜索",-1),x7=t("code",null,"1+",-1),k7=t("td",{style:{"text-align":"center"}},"🟠",-1),v7={style:{"text-align":"center"}},w7={href:"https://leetcode.cn/problems/delete-tree-nodes",target:"_blank",rel:"noopener noreferrer"},q7={href:"https://leetcode.com/problems/delete-tree-nodes",target:"_blank",rel:"noopener noreferrer"},I7=t("td",{style:{"text-align":"center"}},"1302",-1),z7=t("td",{style:{"text-align":"left"}},"层数最深叶子节点的和",-1),N7=t("td",{style:{"text-align":"center"}},null,-1),V7={style:{"text-align":"left"}},K7=t("code",null,"树",-1),L7=t("code",null,"深度优先搜索",-1),j7=t("code",null,"广度优先搜索",-1),B7=t("code",null,"1+",-1),C7=t("td",{style:{"text-align":"center"}},"🟠",-1),E7={style:{"text-align":"center"}},R7={href:"https://leetcode.cn/problems/deepest-leaves-sum",target:"_blank",rel:"noopener noreferrer"},T7={href:"https://leetcode.com/problems/deepest-leaves-sum",target:"_blank",rel:"noopener noreferrer"},A7=t("td",{style:{"text-align":"center"}},"1305",-1),D7=t("td",{style:{"text-align":"left"}},"两棵二叉搜索树中的所有元素",-1),F7=t("td",{style:{"text-align":"center"}},null,-1),G7={style:{"text-align":"left"}},H7=t("code",null,"树",-1),J7=t("code",null,"深度优先搜索",-1),M7=t("code",null,"二叉搜索树",-1),O7=t("code",null,"2+",-1),P7=t("td",{style:{"text-align":"center"}},"🟠",-1),Q7={style:{"text-align":"center"}},S7={href:"https://leetcode.cn/problems/all-elements-in-two-binary-search-trees",target:"_blank",rel:"noopener noreferrer"},U7={href:"https://leetcode.com/problems/all-elements-in-two-binary-search-trees",target:"_blank",rel:"noopener noreferrer"},W7=t("td",{style:{"text-align":"center"}},"1315",-1),X7=t("td",{style:{"text-align":"left"}},"祖父节点值为偶数的节点和",-1),Y7=t("td",{style:{"text-align":"center"}},null,-1),Z7={style:{"text-align":"left"}},$7=t("code",null,"树",-1),t8=t("code",null,"深度优先搜索",-1),e8=t("code",null,"广度优先搜索",-1),o8=t("code",null,"1+",-1),l8=t("td",{style:{"text-align":"center"}},"🟠",-1),n8={style:{"text-align":"center"}},s8={href:"https://leetcode.cn/problems/sum-of-nodes-with-even-valued-grandparent",target:"_blank",rel:"noopener noreferrer"},r8={href:"https://leetcode.com/problems/sum-of-nodes-with-even-valued-grandparent",target:"_blank",rel:"noopener noreferrer"},d8=t("td",{style:{"text-align":"center"}},"1325",-1),_8=t("td",{style:{"text-align":"left"}},"删除给定值的叶子节点",-1),c8=t("td",{style:{"text-align":"center"}},null,-1),a8={style:{"text-align":"left"}},i8=t("code",null,"树",-1),h8=t("code",null,"深度优先搜索",-1),g8=t("code",null,"二叉树",-1),f8=t("td",{style:{"text-align":"center"}},"🟠",-1),u8={style:{"text-align":"center"}},m8={href:"https://leetcode.cn/problems/delete-leaves-with-a-given-value",target:"_blank",rel:"noopener noreferrer"},p8={href:"https://leetcode.com/problems/delete-leaves-with-a-given-value",target:"_blank",rel:"noopener noreferrer"},y8=t("td",{style:{"text-align":"center"}},"1339",-1),b8=t("td",{style:{"text-align":"left"}},"分裂二叉树的最大乘积",-1),x8=t("td",{style:{"text-align":"center"}},null,-1),k8={style:{"text-align":"left"}},v8=t("code",null,"树",-1),w8=t("code",null,"深度优先搜索",-1),q8=t("code",null,"二叉树",-1),I8=t("td",{style:{"text-align":"center"}},"🟠",-1),z8={style:{"text-align":"center"}},N8={href:"https://leetcode.cn/problems/maximum-product-of-splitted-binary-tree",target:"_blank",rel:"noopener noreferrer"},V8={href:"https://leetcode.com/problems/maximum-product-of-splitted-binary-tree",target:"_blank",rel:"noopener noreferrer"},K8=t("td",{style:{"text-align":"center"}},"1361",-1),L8=t("td",{style:{"text-align":"left"}},"验证二叉树",-1),j8=t("td",{style:{"text-align":"center"}},null,-1),B8={style:{"text-align":"left"}},C8=t("code",null,"树",-1),E8=t("code",null,"深度优先搜索",-1),R8=t("code",null,"广度优先搜索",-1),T8=t("code",null,"3+",-1),A8=t("td",{style:{"text-align":"center"}},"🟠",-1),D8={style:{"text-align":"center"}},F8={href:"https://leetcode.cn/problems/validate-binary-tree-nodes",target:"_blank",rel:"noopener noreferrer"},G8={href:"https://leetcode.com/problems/validate-binary-tree-nodes",target:"_blank",rel:"noopener noreferrer"},H8=t("td",{style:{"text-align":"center"}},"1367",-1),J8=t("td",{style:{"text-align":"left"}},"二叉树中的链表",-1),M8=t("td",{style:{"text-align":"center"}},null,-1),O8={style:{"text-align":"left"}},P8=t("code",null,"树",-1),Q8=t("code",null,"深度优先搜索",-1),S8=t("code",null,"链表",-1),U8=t("code",null,"1+",-1),W8=t("td",{style:{"text-align":"center"}},"🟠",-1),X8={style:{"text-align":"center"}},Y8={href:"https://leetcode.cn/problems/linked-list-in-binary-tree",target:"_blank",rel:"noopener noreferrer"},Z8={href:"https://leetcode.com/problems/linked-list-in-binary-tree",target:"_blank",rel:"noopener noreferrer"},$8=t("td",{style:{"text-align":"center"}},"1372",-1),tk=t("td",{style:{"text-align":"left"}},"二叉树中的最长交错路径",-1),ek={style:{"text-align":"center"}},ok={style:{"text-align":"left"}},lk=t("code",null,"树",-1),nk=t("code",null,"深度优先搜索",-1),sk=t("code",null,"动态规划",-1),rk=t("code",null,"1+",-1),dk=t("td",{style:{"text-align":"center"}},"🟠",-1),_k={style:{"text-align":"center"}},ck={href:"https://leetcode.cn/problems/longest-zigzag-path-in-a-binary-tree",target:"_blank",rel:"noopener noreferrer"},ak={href:"https://leetcode.com/problems/longest-zigzag-path-in-a-binary-tree",target:"_blank",rel:"noopener noreferrer"},ik=t("td",{style:{"text-align":"center"}},"1373",-1),hk=t("td",{style:{"text-align":"left"}},"二叉搜索子树的最大键值和",-1),gk=t("td",{style:{"text-align":"center"}},null,-1),fk={style:{"text-align":"left"}},uk=t("code",null,"树",-1),mk=t("code",null,"深度优先搜索",-1),pk=t("code",null,"二叉搜索树",-1),yk=t("code",null,"2+",-1),bk=t("td",{style:{"text-align":"center"}},"🔴",-1),xk={style:{"text-align":"center"}},kk={href:"https://leetcode.cn/problems/maximum-sum-bst-in-binary-tree",target:"_blank",rel:"noopener noreferrer"},vk={href:"https://leetcode.com/problems/maximum-sum-bst-in-binary-tree",target:"_blank",rel:"noopener noreferrer"},wk=t("td",{style:{"text-align":"center"}},"1376",-1),qk=t("td",{style:{"text-align":"left"}},"通知所有员工所需的时间",-1),Ik=t("td",{style:{"text-align":"center"}},null,-1),zk={style:{"text-align":"left"}},Nk=t("code",null,"树",-1),Vk=t("code",null,"深度优先搜索",-1),Kk=t("code",null,"广度优先搜索",-1),Lk=t("td",{style:{"text-align":"center"}},"🟠",-1),jk={style:{"text-align":"center"}},Bk={href:"https://leetcode.cn/problems/time-needed-to-inform-all-employees",target:"_blank",rel:"noopener noreferrer"},Ck={href:"https://leetcode.com/problems/time-needed-to-inform-all-employees",target:"_blank",rel:"noopener noreferrer"},Ek=t("td",{style:{"text-align":"center"}},"1377",-1),Rk=t("td",{style:{"text-align":"left"}},"T 秒后青蛙的位置",-1),Tk=t("td",{style:{"text-align":"center"}},null,-1),Ak={style:{"text-align":"left"}},Dk=t("code",null,"树",-1),Fk=t("code",null,"深度优先搜索",-1),Gk=t("code",null,"广度优先搜索",-1),Hk=t("code",null,"1+",-1),Jk=t("td",{style:{"text-align":"center"}},"🔴",-1),Mk={style:{"text-align":"center"}},Ok={href:"https://leetcode.cn/problems/frog-position-after-t-seconds",target:"_blank",rel:"noopener noreferrer"},Pk={href:"https://leetcode.com/problems/frog-position-after-t-seconds",target:"_blank",rel:"noopener noreferrer"},Qk=t("td",{style:{"text-align":"center"}},"1379",-1),Sk=t("td",{style:{"text-align":"left"}},"找出克隆二叉树中的相同节点",-1),Uk={style:{"text-align":"center"}},Wk={style:{"text-align":"left"}},Xk=t("code",null,"树",-1),Yk=t("code",null,"深度优先搜索",-1),Zk=t("code",null,"广度优先搜索",-1),$k=t("code",null,"1+",-1),tv=t("td",{style:{"text-align":"center"}},"🟢",-1),ev={style:{"text-align":"center"}},ov={href:"https://leetcode.cn/problems/find-a-corresponding-node-of-a-binary-tree-in-a-clone-of-that-tree",target:"_blank",rel:"noopener noreferrer"},lv={href:"https://leetcode.com/problems/find-a-corresponding-node-of-a-binary-tree-in-a-clone-of-that-tree",target:"_blank",rel:"noopener noreferrer"},nv=t("td",{style:{"text-align":"center"}},"1382",-1),sv=t("td",{style:{"text-align":"left"}},"将二叉搜索树变平衡",-1),rv=t("td",{style:{"text-align":"center"}},null,-1),dv={style:{"text-align":"left"}},_v=t("code",null,"贪心",-1),cv=t("code",null,"树",-1),av=t("code",null,"深度优先搜索",-1),iv=t("code",null,"3+",-1),hv=t("td",{style:{"text-align":"center"}},"🟠",-1),gv={style:{"text-align":"center"}},fv={href:"https://leetcode.cn/problems/balance-a-binary-search-tree",target:"_blank",rel:"noopener noreferrer"},uv={href:"https://leetcode.com/problems/balance-a-binary-search-tree",target:"_blank",rel:"noopener noreferrer"},mv=t("td",{style:{"text-align":"center"}},"1430",-1),pv=t("td",{style:{"text-align":"left"}},"判断给定的序列是否是二叉树从根到叶的路径 🔒",-1),yv=t("td",{style:{"text-align":"center"}},null,-1),bv={style:{"text-align":"left"}},xv=t("code",null,"树",-1),kv=t("code",null,"深度优先搜索",-1),vv=t("code",null,"广度优先搜索",-1),wv=t("code",null,"1+",-1),qv=t("td",{style:{"text-align":"center"}},"🟠",-1),Iv={style:{"text-align":"center"}},zv={href:"https://leetcode.cn/problems/check-if-a-string-is-a-valid-sequence-from-root-to-leaves-path-in-a-binary-tree",target:"_blank",rel:"noopener noreferrer"},Nv={href:"https://leetcode.com/problems/check-if-a-string-is-a-valid-sequence-from-root-to-leaves-path-in-a-binary-tree",target:"_blank",rel:"noopener noreferrer"},Vv=t("td",{style:{"text-align":"center"}},"1443",-1),Kv=t("td",{style:{"text-align":"left"}},"收集树上所有苹果的最少时间",-1),Lv=t("td",{style:{"text-align":"center"}},null,-1),jv={style:{"text-align":"left"}},Bv=t("code",null,"树",-1),Cv=t("code",null,"深度优先搜索",-1),Ev=t("code",null,"广度优先搜索",-1),Rv=t("code",null,"1+",-1),Tv=t("td",{style:{"text-align":"center"}},"🟠",-1),Av={style:{"text-align":"center"}},Dv={href:"https://leetcode.cn/problems/minimum-time-to-collect-all-apples-in-a-tree",target:"_blank",rel:"noopener noreferrer"},Fv={href:"https://leetcode.com/problems/minimum-time-to-collect-all-apples-in-a-tree",target:"_blank",rel:"noopener noreferrer"},Gv=t("td",{style:{"text-align":"center"}},"1448",-1),Hv=t("td",{style:{"text-align":"left"}},"统计二叉树中好节点的数目",-1),Jv={style:{"text-align":"center"}},Mv={style:{"text-align":"left"}},Ov=t("code",null,"树",-1),Pv=t("code",null,"深度优先搜索",-1),Qv=t("code",null,"广度优先搜索",-1),Sv=t("code",null,"1+",-1),Uv=t("td",{style:{"text-align":"center"}},"🟠",-1),Wv={style:{"text-align":"center"}},Xv={href:"https://leetcode.cn/problems/count-good-nodes-in-binary-tree",target:"_blank",rel:"noopener noreferrer"},Yv={href:"https://leetcode.com/problems/count-good-nodes-in-binary-tree",target:"_blank",rel:"noopener noreferrer"},Zv=t("td",{style:{"text-align":"center"}},"1457",-1),$v=t("td",{style:{"text-align":"left"}},"二叉树中的伪回文路径",-1),tw=t("td",{style:{"text-align":"center"}},null,-1),ew={style:{"text-align":"left"}},ow=t("code",null,"位运算",-1),lw=t("code",null,"树",-1),nw=t("code",null,"深度优先搜索",-1),sw=t("code",null,"2+",-1),rw=t("td",{style:{"text-align":"center"}},"🟠",-1),dw={style:{"text-align":"center"}},_w={href:"https://leetcode.cn/problems/pseudo-palindromic-paths-in-a-binary-tree",target:"_blank",rel:"noopener noreferrer"},cw={href:"https://leetcode.com/problems/pseudo-palindromic-paths-in-a-binary-tree",target:"_blank",rel:"noopener noreferrer"},aw=t("td",{style:{"text-align":"center"}},"1469",-1),iw=t("td",{style:{"text-align":"left"}},"寻找所有的独生节点 🔒",-1),hw=t("td",{style:{"text-align":"center"}},null,-1),gw={style:{"text-align":"left"}},fw=t("code",null,"树",-1),uw=t("code",null,"深度优先搜索",-1),mw=t("code",null,"广度优先搜索",-1),pw=t("code",null,"1+",-1),yw=t("td",{style:{"text-align":"center"}},"🟢",-1),bw={style:{"text-align":"center"}},xw={href:"https://leetcode.cn/problems/find-all-the-lonely-nodes",target:"_blank",rel:"noopener noreferrer"},kw={href:"https://leetcode.com/problems/find-all-the-lonely-nodes",target:"_blank",rel:"noopener noreferrer"},vw=t("td",{style:{"text-align":"center"}},"1483",-1),ww=t("td",{style:{"text-align":"left"}},"树节点的第 K 个祖先",-1),qw=t("td",{style:{"text-align":"center"}},null,-1),Iw={style:{"text-align":"left"}},zw=t("code",null,"树",-1),Nw=t("code",null,"深度优先搜索",-1),Vw=t("code",null,"广度优先搜索",-1),Kw=t("code",null,"3+",-1),Lw=t("td",{style:{"text-align":"center"}},"🔴",-1),jw={style:{"text-align":"center"}},Bw={href:"https://leetcode.cn/problems/kth-ancestor-of-a-tree-node",target:"_blank",rel:"noopener noreferrer"},Cw={href:"https://leetcode.com/problems/kth-ancestor-of-a-tree-node",target:"_blank",rel:"noopener noreferrer"},Ew=t("td",{style:{"text-align":"center"}},"1485",-1),Rw=t("td",{style:{"text-align":"left"}},"克隆含随机指针的二叉树 🔒",-1),Tw=t("td",{style:{"text-align":"center"}},null,-1),Aw={style:{"text-align":"left"}},Dw=t("code",null,"树",-1),Fw=t("code",null,"深度优先搜索",-1),Gw=t("code",null,"广度优先搜索",-1),Hw=t("code",null,"2+",-1),Jw=t("td",{style:{"text-align":"center"}},"🟠",-1),Mw={style:{"text-align":"center"}},Ow={href:"https://leetcode.cn/problems/clone-binary-tree-with-random-pointer",target:"_blank",rel:"noopener noreferrer"},Pw={href:"https://leetcode.com/problems/clone-binary-tree-with-random-pointer",target:"_blank",rel:"noopener noreferrer"},Qw=t("td",{style:{"text-align":"center"}},"1490",-1),Sw=t("td",{style:{"text-align":"left"}},"克隆 N 叉树 🔒",-1),Uw=t("td",{style:{"text-align":"center"}},null,-1),Ww={style:{"text-align":"left"}},Xw=t("code",null,"树",-1),Yw=t("code",null,"深度优先搜索",-1),Zw=t("code",null,"广度优先搜索",-1),$w=t("code",null,"1+",-1),tq=t("td",{style:{"text-align":"center"}},"🟠",-1),eq={style:{"text-align":"center"}},oq={href:"https://leetcode.cn/problems/clone-n-ary-tree",target:"_blank",rel:"noopener noreferrer"},lq={href:"https://leetcode.com/problems/clone-n-ary-tree",target:"_blank",rel:"noopener noreferrer"},nq=t("td",{style:{"text-align":"center"}},"1506",-1),sq=t("td",{style:{"text-align":"left"}},"找到 N 叉树的根节点 🔒",-1),rq=t("td",{style:{"text-align":"center"}},null,-1),dq={style:{"text-align":"left"}},_q=t("code",null,"位运算",-1),cq=t("code",null,"树",-1),aq=t("code",null,"深度优先搜索",-1),iq=t("code",null,"1+",-1),hq=t("td",{style:{"text-align":"center"}},"🟠",-1),gq={style:{"text-align":"center"}},fq={href:"https://leetcode.cn/problems/find-root-of-n-ary-tree",target:"_blank",rel:"noopener noreferrer"},uq={href:"https://leetcode.com/problems/find-root-of-n-ary-tree",target:"_blank",rel:"noopener noreferrer"},mq=t("td",{style:{"text-align":"center"}},"1516",-1),pq=t("td",{style:{"text-align":"left"}},"移动 N 叉树的子树 🔒",-1),yq=t("td",{style:{"text-align":"center"}},null,-1),bq={style:{"text-align":"left"}},xq=t("code",null,"树",-1),kq=t("code",null,"深度优先搜索",-1),vq=t("td",{style:{"text-align":"center"}},"🔴",-1),wq={style:{"text-align":"center"}},qq={href:"https://leetcode.cn/problems/move-sub-tree-of-n-ary-tree",target:"_blank",rel:"noopener noreferrer"},Iq={href:"https://leetcode.com/problems/move-sub-tree-of-n-ary-tree",target:"_blank",rel:"noopener noreferrer"},zq=t("td",{style:{"text-align":"center"}},"1519",-1),Nq=t("td",{style:{"text-align":"left"}},"子树中标签相同的节点数",-1),Vq=t("td",{style:{"text-align":"center"}},null,-1),Kq={style:{"text-align":"left"}},Lq=t("code",null,"树",-1),jq=t("code",null,"深度优先搜索",-1),Bq=t("code",null,"广度优先搜索",-1),Cq=t("code",null,"2+",-1),Eq=t("td",{style:{"text-align":"center"}},"🟠",-1),Rq={style:{"text-align":"center"}},Tq={href:"https://leetcode.cn/problems/number-of-nodes-in-the-sub-tree-with-the-same-label",target:"_blank",rel:"noopener noreferrer"},Aq={href:"https://leetcode.com/problems/number-of-nodes-in-the-sub-tree-with-the-same-label",target:"_blank",rel:"noopener noreferrer"},Dq=t("td",{style:{"text-align":"center"}},"1522",-1),Fq=t("td",{style:{"text-align":"left"}},"N 叉树的直径 🔒",-1),Gq={style:{"text-align":"center"}},Hq={style:{"text-align":"left"}},Jq=t("code",null,"树",-1),Mq=t("code",null,"深度优先搜索",-1),Oq=t("td",{style:{"text-align":"center"}},"🟠",-1),Pq={style:{"text-align":"center"}},Qq={href:"https://leetcode.cn/problems/diameter-of-n-ary-tree",target:"_blank",rel:"noopener noreferrer"},Sq={href:"https://leetcode.com/problems/diameter-of-n-ary-tree",target:"_blank",rel:"noopener noreferrer"},Uq=t("td",{style:{"text-align":"center"}},"1530",-1),Wq=t("td",{style:{"text-align":"left"}},"好叶子节点对的数量",-1),Xq=t("td",{style:{"text-align":"center"}},null,-1),Yq={style:{"text-align":"left"}},Zq=t("code",null,"树",-1),$q=t("code",null,"深度优先搜索",-1),tI=t("code",null,"二叉树",-1),eI=t("td",{style:{"text-align":"center"}},"🟠",-1),oI={style:{"text-align":"center"}},lI={href:"https://leetcode.cn/problems/number-of-good-leaf-nodes-pairs",target:"_blank",rel:"noopener noreferrer"},nI={href:"https://leetcode.com/problems/number-of-good-leaf-nodes-pairs",target:"_blank",rel:"noopener noreferrer"},sI=t("td",{style:{"text-align":"center"}},"1569",-1),rI=t("td",{style:{"text-align":"left"}},"将子数组重新排序得到同一个二叉搜索树的方案数",-1),dI=t("td",{style:{"text-align":"center"}},null,-1),_I={style:{"text-align":"left"}},cI=t("code",null,"树",-1),aI=t("code",null,"并查集",-1),iI=t("code",null,"二叉搜索树",-1),hI=t("code",null,"7+",-1),gI=t("td",{style:{"text-align":"center"}},"🔴",-1),fI={style:{"text-align":"center"}},uI={href:"https://leetcode.cn/problems/number-of-ways-to-reorder-array-to-get-same-bst",target:"_blank",rel:"noopener noreferrer"},mI={href:"https://leetcode.com/problems/number-of-ways-to-reorder-array-to-get-same-bst",target:"_blank",rel:"noopener noreferrer"},pI=t("td",{style:{"text-align":"center"}},"1586",-1),yI=t("td",{style:{"text-align":"left"}},"二叉搜索树迭代器 II 🔒",-1),bI=t("td",{style:{"text-align":"center"}},null,-1),xI={style:{"text-align":"left"}},kI=t("code",null,"栈",-1),vI=t("code",null,"树",-1),wI=t("code",null,"设计",-1),qI=t("code",null,"3+",-1),II=t("td",{style:{"text-align":"center"}},"🟠",-1),zI={style:{"text-align":"center"}},NI={href:"https://leetcode.cn/problems/binary-search-tree-iterator-ii",target:"_blank",rel:"noopener noreferrer"},VI={href:"https://leetcode.com/problems/binary-search-tree-iterator-ii",target:"_blank",rel:"noopener noreferrer"},KI=t("td",{style:{"text-align":"center"}},"1597",-1),LI=t("td",{style:{"text-align":"left"}},"根据中缀表达式构造二叉表达式树 🔒",-1),jI=t("td",{style:{"text-align":"center"}},null,-1),BI={style:{"text-align":"left"}},CI=t("code",null,"栈",-1),EI=t("code",null,"树",-1),RI=t("code",null,"字符串",-1),TI=t("code",null,"1+",-1),AI=t("td",{style:{"text-align":"center"}},"🔴",-1),DI={style:{"text-align":"center"}},FI={href:"https://leetcode.cn/problems/build-binary-expression-tree-from-infix-expression",target:"_blank",rel:"noopener noreferrer"},GI={href:"https://leetcode.com/problems/build-binary-expression-tree-from-infix-expression",target:"_blank",rel:"noopener noreferrer"},HI=t("td",{style:{"text-align":"center"}},"1600",-1),JI=t("td",{style:{"text-align":"left"}},"王位继承顺序",-1),MI=t("td",{style:{"text-align":"center"}},null,-1),OI={style:{"text-align":"left"}},PI=t("code",null,"树",-1),QI=t("code",null,"深度优先搜索",-1),SI=t("code",null,"设计",-1),UI=t("code",null,"1+",-1),WI=t("td",{style:{"text-align":"center"}},"🟠",-1),XI={style:{"text-align":"center"}},YI={href:"https://leetcode.cn/problems/throne-inheritance",target:"_blank",rel:"noopener noreferrer"},ZI={href:"https://leetcode.com/problems/throne-inheritance",target:"_blank",rel:"noopener noreferrer"},$I=t("td",{style:{"text-align":"center"}},"1602",-1),tz=t("td",{style:{"text-align":"left"}},"找到二叉树中最近的右侧节点 🔒",-1),ez=t("td",{style:{"text-align":"center"}},null,-1),oz={style:{"text-align":"left"}},lz=t("code",null,"树",-1),nz=t("code",null,"广度优先搜索",-1),sz=t("code",null,"二叉树",-1),rz=t("td",{style:{"text-align":"center"}},"🟠",-1),dz={style:{"text-align":"center"}},_z={href:"https://leetcode.cn/problems/find-nearest-right-node-in-binary-tree",target:"_blank",rel:"noopener noreferrer"},cz={href:"https://leetcode.com/problems/find-nearest-right-node-in-binary-tree",target:"_blank",rel:"noopener noreferrer"},az=t("td",{style:{"text-align":"center"}},"1609",-1),iz=t("td",{style:{"text-align":"left"}},"奇偶树",-1),hz=t("td",{style:{"text-align":"center"}},null,-1),gz={style:{"text-align":"left"}},fz=t("code",null,"树",-1),uz=t("code",null,"广度优先搜索",-1),mz=t("code",null,"二叉树",-1),pz=t("td",{style:{"text-align":"center"}},"🟠",-1),yz={style:{"text-align":"center"}},bz={href:"https://leetcode.cn/problems/even-odd-tree",target:"_blank",rel:"noopener noreferrer"},xz={href:"https://leetcode.com/problems/even-odd-tree",target:"_blank",rel:"noopener noreferrer"},kz=t("td",{style:{"text-align":"center"}},"1612",-1),vz=t("td",{style:{"text-align":"left"}},"检查两棵二叉表达式树是否等价 🔒",-1),wz=t("td",{style:{"text-align":"center"}},null,-1),qz={style:{"text-align":"left"}},Iz=t("code",null,"树",-1),zz=t("code",null,"深度优先搜索",-1),Nz=t("code",null,"哈希表",-1),Vz=t("code",null,"2+",-1),Kz=t("td",{style:{"text-align":"center"}},"🟠",-1),Lz={style:{"text-align":"center"}},jz={href:"https://leetcode.cn/problems/check-if-two-expression-trees-are-equivalent",target:"_blank",rel:"noopener noreferrer"},Bz={href:"https://leetcode.com/problems/check-if-two-expression-trees-are-equivalent",target:"_blank",rel:"noopener noreferrer"},Cz=t("td",{style:{"text-align":"center"}},"1617",-1),Ez=t("td",{style:{"text-align":"left"}},"统计子树中城市之间最大距离",-1),Rz=t("td",{style:{"text-align":"center"}},null,-1),Tz={style:{"text-align":"left"}},Az=t("code",null,"位运算",-1),Dz=t("code",null,"树",-1),Fz=t("code",null,"动态规划",-1),Gz=t("code",null,"2+",-1),Hz=t("td",{style:{"text-align":"center"}},"🔴",-1),Jz={style:{"text-align":"center"}},Mz={href:"https://leetcode.cn/problems/count-subtrees-with-max-distance-between-cities",target:"_blank",rel:"noopener noreferrer"},Oz={href:"https://leetcode.com/problems/count-subtrees-with-max-distance-between-cities",target:"_blank",rel:"noopener noreferrer"},Pz=t("td",{style:{"text-align":"center"}},"1628",-1),Qz=t("td",{style:{"text-align":"left"}},"设计带解析函数的表达式树 🔒",-1),Sz=t("td",{style:{"text-align":"center"}},null,-1),Uz={style:{"text-align":"left"}},Wz=t("code",null,"栈",-1),Xz=t("code",null,"树",-1),Yz=t("code",null,"设计",-1),Zz=t("code",null,"3+",-1),$z=t("td",{style:{"text-align":"center"}},"🟠",-1),tN={style:{"text-align":"center"}},eN={href:"https://leetcode.cn/problems/design-an-expression-tree-with-evaluate-function",target:"_blank",rel:"noopener noreferrer"},oN={href:"https://leetcode.com/problems/design-an-expression-tree-with-evaluate-function",target:"_blank",rel:"noopener noreferrer"},lN=t("td",{style:{"text-align":"center"}},"1644",-1),nN=t("td",{style:{"text-align":"left"}},"二叉树的最近公共祖先 II 🔒",-1),sN=t("td",{style:{"text-align":"center"}},null,-1),rN={style:{"text-align":"left"}},dN=t("code",null,"树",-1),_N=t("code",null,"深度优先搜索",-1),cN=t("code",null,"二叉树",-1),aN=t("td",{style:{"text-align":"center"}},"🟠",-1),iN={style:{"text-align":"center"}},hN={href:"https://leetcode.cn/problems/lowest-common-ancestor-of-a-binary-tree-ii",target:"_blank",rel:"noopener noreferrer"},gN={href:"https://leetcode.com/problems/lowest-common-ancestor-of-a-binary-tree-ii",target:"_blank",rel:"noopener noreferrer"},fN=t("td",{style:{"text-align":"center"}},"1650",-1),uN=t("td",{style:{"text-align":"left"}},"二叉树的最近公共祖先 III 🔒",-1),mN=t("td",{style:{"text-align":"center"}},null,-1),pN={style:{"text-align":"left"}},yN=t("code",null,"树",-1),bN=t("code",null,"哈希表",-1),xN=t("code",null,"双指针",-1),kN=t("code",null,"1+",-1),vN=t("td",{style:{"text-align":"center"}},"🟠",-1),wN={style:{"text-align":"center"}},qN={href:"https://leetcode.cn/problems/lowest-common-ancestor-of-a-binary-tree-iii",target:"_blank",rel:"noopener noreferrer"},IN={href:"https://leetcode.com/problems/lowest-common-ancestor-of-a-binary-tree-iii",target:"_blank",rel:"noopener noreferrer"},zN=t("td",{style:{"text-align":"center"}},"1660",-1),NN=t("td",{style:{"text-align":"left"}},"纠正二叉树 🔒",-1),VN=t("td",{style:{"text-align":"center"}},null,-1),KN={style:{"text-align":"left"}},LN=t("code",null,"树",-1),jN=t("code",null,"深度优先搜索",-1),BN=t("code",null,"广度优先搜索",-1),CN=t("code",null,"2+",-1),EN=t("td",{style:{"text-align":"center"}},"🟠",-1),RN={style:{"text-align":"center"}},TN={href:"https://leetcode.cn/problems/correct-a-binary-tree",target:"_blank",rel:"noopener noreferrer"},AN={href:"https://leetcode.com/problems/correct-a-binary-tree",target:"_blank",rel:"noopener noreferrer"},DN=t("td",{style:{"text-align":"center"}},"1666",-1),FN=t("td",{style:{"text-align":"left"}},"改变二叉树的根节点 🔒",-1),GN=t("td",{style:{"text-align":"center"}},null,-1),HN={style:{"text-align":"left"}},JN=t("code",null,"树",-1),MN=t("code",null,"深度优先搜索",-1),ON=t("code",null,"二叉树",-1),PN=t("td",{style:{"text-align":"center"}},"🟠",-1),QN={style:{"text-align":"center"}},SN={href:"https://leetcode.cn/problems/change-the-root-of-a-binary-tree",target:"_blank",rel:"noopener noreferrer"},UN={href:"https://leetcode.com/problems/change-the-root-of-a-binary-tree",target:"_blank",rel:"noopener noreferrer"},WN=t("td",{style:{"text-align":"center"}},"1676",-1),XN=t("td",{style:{"text-align":"left"}},"二叉树的最近公共祖先 IV 🔒",-1),YN=t("td",{style:{"text-align":"center"}},null,-1),ZN={style:{"text-align":"left"}},$N=t("code",null,"树",-1),tV=t("code",null,"深度优先搜索",-1),eV=t("code",null,"哈希表",-1),oV=t("code",null,"1+",-1),lV=t("td",{style:{"text-align":"center"}},"🟠",-1),nV={style:{"text-align":"center"}},sV={href:"https://leetcode.cn/problems/lowest-common-ancestor-of-a-binary-tree-iv",target:"_blank",rel:"noopener noreferrer"},rV={href:"https://leetcode.com/problems/lowest-common-ancestor-of-a-binary-tree-iv",target:"_blank",rel:"noopener noreferrer"},dV=t("td",{style:{"text-align":"center"}},"1719",-1),_V=t("td",{style:{"text-align":"left"}},"重构一棵树的方案数",-1),cV=t("td",{style:{"text-align":"center"}},null,-1),aV={style:{"text-align":"left"}},iV=t("code",null,"树",-1),hV=t("code",null,"图",-1),gV=t("td",{style:{"text-align":"center"}},"🔴",-1),fV={style:{"text-align":"center"}},uV={href:"https://leetcode.cn/problems/number-of-ways-to-reconstruct-a-tree",target:"_blank",rel:"noopener noreferrer"},mV={href:"https://leetcode.com/problems/number-of-ways-to-reconstruct-a-tree",target:"_blank",rel:"noopener noreferrer"},pV=t("td",{style:{"text-align":"center"}},"1740",-1),yV=t("td",{style:{"text-align":"left"}},"找到二叉树中的距离 🔒",-1),bV=t("td",{style:{"text-align":"center"}},null,-1),xV={style:{"text-align":"left"}},kV=t("code",null,"树",-1),vV=t("code",null,"深度优先搜索",-1),wV=t("code",null,"广度优先搜索",-1),qV=t("code",null,"2+",-1),IV=t("td",{style:{"text-align":"center"}},"🟠",-1),zV={style:{"text-align":"center"}},NV={href:"https://leetcode.cn/problems/find-distance-in-a-binary-tree",target:"_blank",rel:"noopener noreferrer"},VV={href:"https://leetcode.com/problems/find-distance-in-a-binary-tree",target:"_blank",rel:"noopener noreferrer"},KV=t("td",{style:{"text-align":"center"}},"1766",-1),LV=t("td",{style:{"text-align":"left"}},"互质树",-1),jV=t("td",{style:{"text-align":"center"}},null,-1),BV={style:{"text-align":"left"}},CV=t("code",null,"树",-1),EV=t("code",null,"深度优先搜索",-1),RV=t("code",null,"数组",-1),TV=t("code",null,"2+",-1),AV=t("td",{style:{"text-align":"center"}},"🔴",-1),DV={style:{"text-align":"center"}},FV={href:"https://leetcode.cn/problems/tree-of-coprimes",target:"_blank",rel:"noopener noreferrer"},GV={href:"https://leetcode.com/problems/tree-of-coprimes",target:"_blank",rel:"noopener noreferrer"},HV=t("td",{style:{"text-align":"center"}},"1902",-1),JV=t("td",{style:{"text-align":"left"}},"给定二叉搜索树的插入顺序求深度 🔒",-1),MV=t("td",{style:{"text-align":"center"}},null,-1),OV={style:{"text-align":"left"}},PV=t("code",null,"树",-1),QV=t("code",null,"二叉搜索树",-1),SV=t("code",null,"数组",-1),UV=t("code",null,"2+",-1),WV=t("td",{style:{"text-align":"center"}},"🟠",-1),XV={style:{"text-align":"center"}},YV={href:"https://leetcode.cn/problems/depth-of-bst-given-insertion-order",target:"_blank",rel:"noopener noreferrer"},ZV={href:"https://leetcode.com/problems/depth-of-bst-given-insertion-order",target:"_blank",rel:"noopener noreferrer"},$V=t("td",{style:{"text-align":"center"}},"1916",-1),tK=t("td",{style:{"text-align":"left"}},"统计为蚁群构筑房间的不同顺序",-1),eK=t("td",{style:{"text-align":"center"}},null,-1),oK={style:{"text-align":"left"}},lK=t("code",null,"树",-1),nK=t("code",null,"图",-1),sK=t("code",null,"拓扑排序",-1),rK=t("code",null,"3+",-1),dK=t("td",{style:{"text-align":"center"}},"🔴",-1),_K={style:{"text-align":"center"}},cK={href:"https://leetcode.cn/problems/count-ways-to-build-rooms-in-an-ant-colony",target:"_blank",rel:"noopener noreferrer"},aK={href:"https://leetcode.com/problems/count-ways-to-build-rooms-in-an-ant-colony",target:"_blank",rel:"noopener noreferrer"},iK=t("td",{style:{"text-align":"center"}},"1932",-1),hK=t("td",{style:{"text-align":"left"}},"合并多棵二叉搜索树",-1),gK=t("td",{style:{"text-align":"center"}},null,-1),fK={style:{"text-align":"left"}},uK=t("code",null,"树",-1),mK=t("code",null,"深度优先搜索",-1),pK=t("code",null,"哈希表",-1),yK=t("code",null,"2+",-1),bK=t("td",{style:{"text-align":"center"}},"🔴",-1),xK={style:{"text-align":"center"}},kK={href:"https://leetcode.cn/problems/merge-bsts-to-create-single-bst",target:"_blank",rel:"noopener noreferrer"},vK={href:"https://leetcode.com/problems/merge-bsts-to-create-single-bst",target:"_blank",rel:"noopener noreferrer"},wK=t("td",{style:{"text-align":"center"}},"1973",-1),qK=t("td",{style:{"text-align":"left"}},"值等于子节点值之和的节点数量 🔒",-1),IK=t("td",{style:{"text-align":"center"}},null,-1),zK={style:{"text-align":"left"}},NK=t("code",null,"树",-1),VK=t("code",null,"深度优先搜索",-1),KK=t("code",null,"二叉树",-1),LK=t("td",{style:{"text-align":"center"}},"🟠",-1),jK={style:{"text-align":"center"}},BK={href:"https://leetcode.cn/problems/count-nodes-equal-to-sum-of-descendants",target:"_blank",rel:"noopener noreferrer"},CK={href:"https://leetcode.com/problems/count-nodes-equal-to-sum-of-descendants",target:"_blank",rel:"noopener noreferrer"},EK=t("td",{style:{"text-align":"center"}},"1993",-1),RK=t("td",{style:{"text-align":"left"}},"树上的操作",-1),TK=t("td",{style:{"text-align":"center"}},null,-1),AK={style:{"text-align":"left"}},DK=t("code",null,"树",-1),FK=t("code",null,"深度优先搜索",-1),GK=t("code",null,"广度优先搜索",-1),HK=t("code",null,"3+",-1),JK=t("td",{style:{"text-align":"center"}},"🟠",-1),MK={style:{"text-align":"center"}},OK={href:"https://leetcode.cn/problems/operations-on-tree",target:"_blank",rel:"noopener noreferrer"},PK={href:"https://leetcode.com/problems/operations-on-tree",target:"_blank",rel:"noopener noreferrer"},QK=t("td",{style:{"text-align":"center"}},"2003",-1),SK=t("td",{style:{"text-align":"left"}},"每棵子树内缺失的最小基因值",-1),UK=t("td",{style:{"text-align":"center"}},null,-1),WK={style:{"text-align":"left"}},XK=t("code",null,"树",-1),YK=t("code",null,"深度优先搜索",-1),ZK=t("code",null,"并查集",-1),$K=t("code",null,"1+",-1),tL=t("td",{style:{"text-align":"center"}},"🔴",-1),eL={style:{"text-align":"center"}},oL={href:"https://leetcode.cn/problems/smallest-missing-genetic-value-in-each-subtree",target:"_blank",rel:"noopener noreferrer"},lL={href:"https://leetcode.com/problems/smallest-missing-genetic-value-in-each-subtree",target:"_blank",rel:"noopener noreferrer"},nL=t("td",{style:{"text-align":"center"}},"2005",-1),sL=t("td",{style:{"text-align":"left"}},"斐波那契树的移除子树游戏 🔒",-1),rL=t("td",{style:{"text-align":"center"}},null,-1),dL={style:{"text-align":"left"}},_L=t("code",null,"树",-1),cL=t("code",null,"数学",-1),aL=t("code",null,"动态规划",-1),iL=t("code",null,"2+",-1),hL=t("td",{style:{"text-align":"center"}},"🔴",-1),gL={style:{"text-align":"center"}},fL={href:"https://leetcode.cn/problems/subtree-removal-game-with-fibonacci-tree",target:"_blank",rel:"noopener noreferrer"},uL={href:"https://leetcode.com/problems/subtree-removal-game-with-fibonacci-tree",target:"_blank",rel:"noopener noreferrer"},mL=t("td",{style:{"text-align":"center"}},"2049",-1),pL=t("td",{style:{"text-align":"left"}},"统计最高分的节点数目",-1),yL=t("td",{style:{"text-align":"center"}},null,-1),bL={style:{"text-align":"left"}},xL=t("code",null,"树",-1),kL=t("code",null,"深度优先搜索",-1),vL=t("code",null,"数组",-1),wL=t("code",null,"1+",-1),qL=t("td",{style:{"text-align":"center"}},"🟠",-1),IL={style:{"text-align":"center"}},zL={href:"https://leetcode.cn/problems/count-nodes-with-the-highest-score",target:"_blank",rel:"noopener noreferrer"},NL={href:"https://leetcode.com/problems/count-nodes-with-the-highest-score",target:"_blank",rel:"noopener noreferrer"},VL=t("td",{style:{"text-align":"center"}},"2096",-1),KL=t("td",{style:{"text-align":"left"}},"从二叉树一个节点到另一个节点每一步的方向",-1),LL=t("td",{style:{"text-align":"center"}},null,-1),jL={style:{"text-align":"left"}},BL=t("code",null,"树",-1),CL=t("code",null,"深度优先搜索",-1),EL=t("code",null,"字符串",-1),RL=t("code",null,"1+",-1),TL=t("td",{style:{"text-align":"center"}},"🟠",-1),AL={style:{"text-align":"center"}},DL={href:"https://leetcode.cn/problems/step-by-step-directions-from-a-binary-tree-node-to-another",target:"_blank",rel:"noopener noreferrer"},FL={href:"https://leetcode.com/problems/step-by-step-directions-from-a-binary-tree-node-to-another",target:"_blank",rel:"noopener noreferrer"},GL=t("td",{style:{"text-align":"center"}},"2196",-1),HL=t("td",{style:{"text-align":"left"}},"根据描述创建二叉树",-1),JL={style:{"text-align":"center"}},ML={style:{"text-align":"left"}},OL=t("code",null,"树",-1),PL=t("code",null,"数组",-1),QL=t("code",null,"哈希表",-1),SL=t("code",null,"1+",-1),UL=t("td",{style:{"text-align":"center"}},"🟠",-1),WL={style:{"text-align":"center"}},XL={href:"https://leetcode.cn/problems/create-binary-tree-from-descriptions",target:"_blank",rel:"noopener noreferrer"},YL={href:"https://leetcode.com/problems/create-binary-tree-from-descriptions",target:"_blank",rel:"noopener noreferrer"},ZL=t("td",{style:{"text-align":"center"}},"2236",-1),$L=t("td",{style:{"text-align":"left"}},"判断根结点是否等于子结点之和",-1),tj={style:{"text-align":"center"}},ej={style:{"text-align":"left"}},oj=t("code",null,"树",-1),lj=t("code",null,"二叉树",-1),nj=t("td",{style:{"text-align":"center"}},"🟢",-1),sj={style:{"text-align":"center"}},rj={href:"https://leetcode.cn/problems/root-equals-sum-of-children",target:"_blank",rel:"noopener noreferrer"},dj={href:"https://leetcode.com/problems/root-equals-sum-of-children",target:"_blank",rel:"noopener noreferrer"},_j=t("td",{style:{"text-align":"center"}},"2246",-1),cj=t("td",{style:{"text-align":"left"}},"相邻字符不同的最长路径",-1),aj=t("td",{style:{"text-align":"center"}},null,-1),ij={style:{"text-align":"left"}},hj=t("code",null,"树",-1),gj=t("code",null,"深度优先搜索",-1),fj=t("code",null,"图",-1),uj=t("code",null,"3+",-1),mj=t("td",{style:{"text-align":"center"}},"🔴",-1),pj={style:{"text-align":"center"}},yj={href:"https://leetcode.cn/problems/longest-path-with-different-adjacent-characters",target:"_blank",rel:"noopener noreferrer"},bj={href:"https://leetcode.com/problems/longest-path-with-different-adjacent-characters",target:"_blank",rel:"noopener noreferrer"},xj=t("td",{style:{"text-align":"center"}},"2265",-1),kj=t("td",{style:{"text-align":"left"}},"统计值等于子树平均值的节点数",-1),vj=t("td",{style:{"text-align":"center"}},null,-1),wj={style:{"text-align":"left"}},qj=t("code",null,"树",-1),Ij=t("code",null,"深度优先搜索",-1),zj=t("code",null,"二叉树",-1),Nj=t("td",{style:{"text-align":"center"}},"🟠",-1),Vj={style:{"text-align":"center"}},Kj={href:"https://leetcode.cn/problems/count-nodes-equal-to-average-of-subtree",target:"_blank",rel:"noopener noreferrer"},Lj={href:"https://leetcode.com/problems/count-nodes-equal-to-average-of-subtree",target:"_blank",rel:"noopener noreferrer"},jj=t("td",{style:{"text-align":"center"}},"2277",-1),Bj=t("td",{style:{"text-align":"left"}},"树中最接近路径的节点 🔒",-1),Cj=t("td",{style:{"text-align":"center"}},null,-1),Ej={style:{"text-align":"left"}},Rj=t("code",null,"树",-1),Tj=t("code",null,"深度优先搜索",-1),Aj=t("code",null,"广度优先搜索",-1),Dj=t("code",null,"1+",-1),Fj=t("td",{style:{"text-align":"center"}},"🔴",-1),Gj={style:{"text-align":"center"}},Hj={href:"https://leetcode.cn/problems/closest-node-to-path-in-tree",target:"_blank",rel:"noopener noreferrer"},Jj={href:"https://leetcode.com/problems/closest-node-to-path-in-tree",target:"_blank",rel:"noopener noreferrer"},Mj=t("td",{style:{"text-align":"center"}},"2313",-1),Oj=t("td",{style:{"text-align":"left"}},"二叉树中得到结果所需的最少翻转次数 🔒",-1),Pj=t("td",{style:{"text-align":"center"}},null,-1),Qj={style:{"text-align":"left"}},Sj=t("code",null,"树",-1),Uj=t("code",null,"深度优先搜索",-1),Wj=t("code",null,"动态规划",-1),Xj=t("code",null,"1+",-1),Yj=t("td",{style:{"text-align":"center"}},"🔴",-1),Zj={style:{"text-align":"center"}},$j={href:"https://leetcode.cn/problems/minimum-flips-in-binary-tree-to-get-result",target:"_blank",rel:"noopener noreferrer"},tB={href:"https://leetcode.com/problems/minimum-flips-in-binary-tree-to-get-result",target:"_blank",rel:"noopener noreferrer"},eB=t("td",{style:{"text-align":"center"}},"2322",-1),oB=t("td",{style:{"text-align":"left"}},"从树中删除边的最小分数",-1),lB=t("td",{style:{"text-align":"center"}},null,-1),nB={style:{"text-align":"left"}},sB=t("code",null,"位运算",-1),rB=t("code",null,"树",-1),dB=t("code",null,"深度优先搜索",-1),_B=t("code",null,"1+",-1),cB=t("td",{style:{"text-align":"center"}},"🔴",-1),aB={style:{"text-align":"center"}},iB={href:"https://leetcode.cn/problems/minimum-score-after-removals-on-a-tree",target:"_blank",rel:"noopener noreferrer"},hB={href:"https://leetcode.com/problems/minimum-score-after-removals-on-a-tree",target:"_blank",rel:"noopener noreferrer"},gB=t("td",{style:{"text-align":"center"}},"2331",-1),fB=t("td",{style:{"text-align":"left"}},"计算布尔二叉树的值",-1),uB={style:{"text-align":"center"}},mB={style:{"text-align":"left"}},pB=t("code",null,"树",-1),yB=t("code",null,"深度优先搜索",-1),bB=t("code",null,"二叉树",-1),xB=t("td",{style:{"text-align":"center"}},"🟢",-1),kB={style:{"text-align":"center"}},vB={href:"https://leetcode.cn/problems/evaluate-boolean-binary-tree",target:"_blank",rel:"noopener noreferrer"},wB={href:"https://leetcode.com/problems/evaluate-boolean-binary-tree",target:"_blank",rel:"noopener noreferrer"},qB=t("td",{style:{"text-align":"center"}},"2368",-1),IB=t("td",{style:{"text-align":"left"}},"受限条件下可到达节点的数目",-1),zB=t("td",{style:{"text-align":"center"}},null,-1),NB={style:{"text-align":"left"}},VB=t("code",null,"树",-1),KB=t("code",null,"深度优先搜索",-1),LB=t("code",null,"广度优先搜索",-1),jB=t("code",null,"4+",-1),BB=t("td",{style:{"text-align":"center"}},"🟠",-1),CB={style:{"text-align":"center"}},EB={href:"https://leetcode.cn/problems/reachable-nodes-with-restrictions",target:"_blank",rel:"noopener noreferrer"},RB={href:"https://leetcode.com/problems/reachable-nodes-with-restrictions",target:"_blank",rel:"noopener noreferrer"},TB=t("td",{style:{"text-align":"center"}},"2378",-1),AB=t("td",{style:{"text-align":"left"}},"选择边来最大化树的得分 🔒",-1),DB=t("td",{style:{"text-align":"center"}},null,-1),FB={style:{"text-align":"left"}},GB=t("code",null,"树",-1),HB=t("code",null,"深度优先搜索",-1),JB=t("code",null,"动态规划",-1),MB=t("td",{style:{"text-align":"center"}},"🟠",-1),OB={style:{"text-align":"center"}},PB={href:"https://leetcode.cn/problems/choose-edges-to-maximize-score-in-a-tree",target:"_blank",rel:"noopener noreferrer"},QB={href:"https://leetcode.com/problems/choose-edges-to-maximize-score-in-a-tree",target:"_blank",rel:"noopener noreferrer"},SB=t("td",{style:{"text-align":"center"}},"2385",-1),UB=t("td",{style:{"text-align":"left"}},"感染二叉树需要的总时间",-1),WB=t("td",{style:{"text-align":"center"}},null,-1),XB={style:{"text-align":"left"}},YB=t("code",null,"树",-1),ZB=t("code",null,"深度优先搜索",-1),$B=t("code",null,"广度优先搜索",-1),tC=t("code",null,"2+",-1),eC=t("td",{style:{"text-align":"center"}},"🟠",-1),oC={style:{"text-align":"center"}},lC={href:"https://leetcode.cn/problems/amount-of-time-for-binary-tree-to-be-infected",target:"_blank",rel:"noopener noreferrer"},nC={href:"https://leetcode.com/problems/amount-of-time-for-binary-tree-to-be-infected",target:"_blank",rel:"noopener noreferrer"},sC=t("td",{style:{"text-align":"center"}},"2415",-1),rC=t("td",{style:{"text-align":"left"}},"反转二叉树的奇数层",-1),dC={style:{"text-align":"center"}},_C={style:{"text-align":"left"}},cC=t("code",null,"树",-1),aC=t("code",null,"深度优先搜索",-1),iC=t("code",null,"广度优先搜索",-1),hC=t("code",null,"1+",-1),gC=t("td",{style:{"text-align":"center"}},"🟠",-1),fC={style:{"text-align":"center"}},uC={href:"https://leetcode.cn/problems/reverse-odd-levels-of-binary-tree",target:"_blank",rel:"noopener noreferrer"},mC={href:"https://leetcode.com/problems/reverse-odd-levels-of-binary-tree",target:"_blank",rel:"noopener noreferrer"},pC=t("td",{style:{"text-align":"center"}},"2421",-1),yC=t("td",{style:{"text-align":"left"}},"好路径的数目",-1),bC=t("td",{style:{"text-align":"center"}},null,-1),xC={style:{"text-align":"left"}},kC=t("code",null,"树",-1),vC=t("code",null,"并查集",-1),wC=t("code",null,"图",-1),qC=t("code",null,"3+",-1),IC=t("td",{style:{"text-align":"center"}},"🔴",-1),zC={style:{"text-align":"center"}},NC={href:"https://leetcode.cn/problems/number-of-good-paths",target:"_blank",rel:"noopener noreferrer"},VC={href:"https://leetcode.com/problems/number-of-good-paths",target:"_blank",rel:"noopener noreferrer"},KC=t("td",{style:{"text-align":"center"}},"2440",-1),LC=t("td",{style:{"text-align":"left"}},"创建价值相同的连通块",-1),jC=t("td",{style:{"text-align":"center"}},null,-1),BC={style:{"text-align":"left"}},CC=t("code",null,"树",-1),EC=t("code",null,"深度优先搜索",-1),RC=t("code",null,"数组",-1),TC=t("code",null,"2+",-1),AC=t("td",{style:{"text-align":"center"}},"🔴",-1),DC={style:{"text-align":"center"}},FC={href:"https://leetcode.cn/problems/create-components-with-same-value",target:"_blank",rel:"noopener noreferrer"},GC={href:"https://leetcode.com/problems/create-components-with-same-value",target:"_blank",rel:"noopener noreferrer"},HC=t("td",{style:{"text-align":"center"}},"2445",-1),JC=t("td",{style:{"text-align":"left"}},"值为 1 的节点数 🔒",-1),MC=t("td",{style:{"text-align":"center"}},null,-1),OC={style:{"text-align":"left"}},PC=t("code",null,"树",-1),QC=t("code",null,"深度优先搜索",-1),SC=t("code",null,"广度优先搜索",-1),UC=t("code",null,"1+",-1),WC=t("td",{style:{"text-align":"center"}},"🟠",-1),XC={style:{"text-align":"center"}},YC={href:"https://leetcode.cn/problems/number-of-nodes-with-value-one",target:"_blank",rel:"noopener noreferrer"},ZC={href:"https://leetcode.com/problems/number-of-nodes-with-value-one",target:"_blank",rel:"noopener noreferrer"};function $C(tE,eE){const l=r("RouterLink"),s=r("ExternalLinkIcon");return _(),c("div",null,[h,t("details",null,[g,f,t("p",null,[o(l,{to:"/tag/array.html"},{default:n(()=>[u]),_:1}),e(),o(l,{to:"/tag/matrix.html"},{default:n(()=>[m]),_:1}),e(),o(l,{to:"/tag/linked-list.html"},{default:n(()=>[p]),_:1}),e(),o(l,{to:"/tag/doubly-linked-list.html"},{default:n(()=>[y]),_:1}),e(),o(l,{to:"/tag/stack.html"},{default:n(()=>[b]),_:1}),e(),o(l,{to:"/tag/monotonic-stack.html"},{default:n(()=>[x]),_:1}),e(),o(l,{to:"/tag/queue.html"},{default:n(()=>[k]),_:1}),e(),o(l,{to:"/tag/monotonic-queue.html"},{default:n(()=>[v]),_:1}),e(),o(l,{to:"/tag/heap-priority-queue.html"},{default:n(()=>[w]),_:1}),e(),o(l,{to:"/tag/hash-table.html"},{default:n(()=>[q]),_:1}),e(),o(l,{to:"/tag/string.html"},{default:n(()=>[I]),_:1}),e(),o(l,{to:"/tag/string-matching.html"},{default:n(()=>[z]),_:1}),e(),N,e(),o(l,{to:"/tag/binary-tree.html"},{default:n(()=>[V]),_:1}),e(),o(l,{to:"/tag/binary-search-tree.html"},{default:n(()=>[K]),_:1}),e(),o(l,{to:"/tag/minimum-spanning-tree.html"},{default:n(()=>[L]),_:1}),e(),o(l,{to:"/tag/graph.html"},{default:n(()=>[j]),_:1}),e(),o(l,{to:"/tag/ordered-set.html"},{default:n(()=>[B]),_:1}),e(),o(l,{to:"/tag/topological-sort.html"},{default:n(()=>[C]),_:1}),e(),o(l,{to:"/tag/shortest-path.html"},{default:n(()=>[E]),_:1}),e(),o(l,{to:"/tag/strongly-connected-component.html"},{default:n(()=>[R]),_:1}),e(),o(l,{to:"/tag/eulerian-circuit.html"},{default:n(()=>[T]),_:1}),e(),o(l,{to:"/tag/biconnected-component.html"},{default:n(()=>[A]),_:1}),e(),o(l,{to:"/tag/union-find.html"},{default:n(()=>[D]),_:1}),e(),o(l,{to:"/tag/trie.html"},{default:n(()=>[F]),_:1}),e(),o(l,{to:"/tag/segment-tree.html"},{default:n(()=>[G]),_:1}),e(),o(l,{to:"/tag/binary-indexed-tree.html"},{default:n(()=>[H]),_:1}),e(),o(l,{to:"/tag/suffix-array.html"},{default:n(()=>[J]),_:1})]),M,t("p",null,[o(l,{to:"/tag/enumeration.html"},{default:n(()=>[O]),_:1}),e(),o(l,{to:"/tag/recursion.html"},{default:n(()=>[P]),_:1}),e(),o(l,{to:"/tag/divide-and-conquer.html"},{default:n(()=>[Q]),_:1}),e(),o(l,{to:"/tag/backtracking.html"},{default:n(()=>[S]),_:1}),e(),o(l,{to:"/tag/greedy.html"},{default:n(()=>[U]),_:1}),e(),o(l,{to:"/tag/dynamic-programming.html"},{default:n(()=>[W]),_:1}),e(),o(l,{to:"/tag/sorting.html"},{default:n(()=>[X]),_:1}),e(),o(l,{to:"/tag/bucket-sort.html"},{default:n(()=>[Y]),_:1}),e(),o(l,{to:"/tag/counting-sort.html"},{default:n(()=>[Z]),_:1}),e(),o(l,{to:"/tag/radix-sort.html"},{default:n(()=>[$]),_:1}),e(),o(l,{to:"/tag/merge-sort.html"},{default:n(()=>[tt]),_:1}),e(),o(l,{to:"/tag/quickselect.html"},{default:n(()=>[et]),_:1}),e(),o(l,{to:"/tag/binary-search.html"},{default:n(()=>[ot]),_:1}),e(),o(l,{to:"/tag/memoization.html"},{default:n(()=>[lt]),_:1}),e(),o(l,{to:"/tag/depth-first-search.html"},{default:n(()=>[nt]),_:1}),e(),o(l,{to:"/tag/breadth-first-search.html"},{default:n(()=>[st]),_:1}),e(),o(l,{to:"/tag/two-pointers.html"},{default:n(()=>[rt]),_:1}),e(),o(l,{to:"/tag/bit-manipulation.html"},{default:n(()=>[dt]),_:1}),e(),o(l,{to:"/tag/prefix-sum.html"},{default:n(()=>[_t]),_:1}),e(),o(l,{to:"/tag/counting.html"},{default:n(()=>[ct]),_:1}),e(),o(l,{to:"/tag/sliding-window.html"},{default:n(()=>[at]),_:1}),e(),o(l,{to:"/tag/bitmask.html"},{default:n(()=>[it]),_:1}),e(),o(l,{to:"/tag/hash-function.html"},{default:n(()=>[ht]),_:1}),e(),o(l,{to:"/tag/rolling-hash.html"},{default:n(()=>[gt]),_:1}),e(),o(l,{to:"/tag/line-sweep.html"},{default:n(()=>[ft]),_:1})]),ut,t("p",null,[o(l,{to:"/tag/math.html"},{default:n(()=>[mt]),_:1}),e(),o(l,{to:"/tag/number-theory.html"},{default:n(()=>[pt]),_:1}),e(),o(l,{to:"/tag/geometry.html"},{default:n(()=>[yt]),_:1}),e(),o(l,{to:"/tag/game-theory.html"},{default:n(()=>[bt]),_:1}),e(),o(l,{to:"/tag/simulation.html"},{default:n(()=>[xt]),_:1}),e(),o(l,{to:"/tag/combinatorics.html"},{default:n(()=>[kt]),_:1}),e(),o(l,{to:"/tag/randomized.html"},{default:n(()=>[vt]),_:1}),e(),o(l,{to:"/tag/probability-and-statistics.html"},{default:n(()=>[wt]),_:1}),e(),o(l,{to:"/tag/reservoir-sampling.html"},{default:n(()=>[qt]),_:1}),e(),o(l,{to:"/tag/rejection-sampling.html"},{default:n(()=>[It]),_:1}),e(),o(l,{to:"/tag/database.html"},{default:n(()=>[zt]),_:1}),e(),o(l,{to:"/tag/design.html"},{default:n(()=>[Nt]),_:1}),e(),o(l,{to:"/tag/data-stream.html"},{default:n(()=>[Vt]),_:1}),e(),o(l,{to:"/tag/brainteaser.html"},{default:n(()=>[Kt]),_:1}),e(),o(l,{to:"/tag/interactive.html"},{default:n(()=>[Lt]),_:1}),e(),o(l,{to:"/tag/iterator.html"},{default:n(()=>[jt]),_:1}),e(),o(l,{to:"/tag/concurrency.html"},{default:n(()=>[Bt]),_:1})])]),Ct,a(" prettier-ignore "),t("table",null,[Et,t("tbody",null,[t("tr",null,[Rt,Tt,t("td",At,[o(l,{to:"/problem/0094.html"},{default:n(()=>[e("[✓]")]),_:1})]),t("td",Dt,[o(l,{to:"/tag/stack.html"},{default:n(()=>[Ft]),_:1}),e(),o(l,{to:"/tag/tree.html"},{default:n(()=>[Gt]),_:1}),e(),o(l,{to:"/tag/depth-first-search.html"},{default:n(()=>[Ht]),_:1}),e(),Jt]),Mt,t("td",Ot,[t("a",Pt,[e("🀄️"),o(s)]),e(),t("a",Qt,[e("🔗"),o(s)])])]),t("tr",null,[St,Ut,t("td",Wt,[o(l,{to:"/problem/0095.html"},{default:n(()=>[e("[✓]")]),_:1})]),t("td",Xt,[o(l,{to:"/tag/tree.html"},{default:n(()=>[Yt]),_:1}),e(),o(l,{to:"/tag/binary-search-tree.html"},{default:n(()=>[Zt]),_:1}),e(),o(l,{to:"/tag/dynamic-programming.html"},{default:n(()=>[$t]),_:1}),e(),te]),ee,t("td",oe,[t("a",le,[e("🀄️"),o(s)]),e(),t("a",ne,[e("🔗"),o(s)])])]),t("tr",null,[se,re,t("td",de,[o(l,{to:"/problem/0096.html"},{default:n(()=>[e("[✓]")]),_:1})]),t("td",_e,[o(l,{to:"/tag/tree.html"},{default:n(()=>[ce]),_:1}),e(),o(l,{to:"/tag/binary-search-tree.html"},{default:n(()=>[ae]),_:1}),e(),o(l,{to:"/tag/math.html"},{default:n(()=>[ie]),_:1}),e(),he]),ge,t("td",fe,[t("a",ue,[e("🀄️"),o(s)]),e(),t("a",me,[e("🔗"),o(s)])])]),t("tr",null,[pe,ye,t("td",be,[o(l,{to:"/problem/0098.html"},{default:n(()=>[e("[✓]")]),_:1})]),t("td",xe,[o(l,{to:"/tag/tree.html"},{default:n(()=>[ke]),_:1}),e(),o(l,{to:"/tag/depth-first-search.html"},{default:n(()=>[ve]),_:1}),e(),o(l,{to:"/tag/binary-search-tree.html"},{default:n(()=>[we]),_:1}),e(),qe]),Ie,t("td",ze,[t("a",Ne,[e("🀄️"),o(s)]),e(),t("a",Ve,[e("🔗"),o(s)])])]),t("tr",null,[Ke,Le,t("td",je,[o(l,{to:"/problem/0099.html"},{default:n(()=>[e("[✓]")]),_:1})]),t("td",Be,[o(l,{to:"/tag/tree.html"},{default:n(()=>[Ce]),_:1}),e(),o(l,{to:"/tag/depth-first-search.html"},{default:n(()=>[Ee]),_:1}),e(),o(l,{to:"/tag/binary-search-tree.html"},{default:n(()=>[Re]),_:1}),e(),Te]),Ae,t("td",De,[t("a",Fe,[e("🀄️"),o(s)]),e(),t("a",Ge,[e("🔗"),o(s)])])]),t("tr",null,[He,Je,t("td",Me,[o(l,{to:"/problem/0100.html"},{default:n(()=>[e("[✓]")]),_:1})]),t("td",Oe,[o(l,{to:"/tag/tree.html"},{default:n(()=>[Pe]),_:1}),e(),o(l,{to:"/tag/depth-first-search.html"},{default:n(()=>[Qe]),_:1}),e(),o(l,{to:"/tag/breadth-first-search.html"},{default:n(()=>[Se]),_:1}),e(),Ue]),We,t("td",Xe,[t("a",Ye,[e("🀄️"),o(s)]),e(),t("a",Ze,[e("🔗"),o(s)])])]),t("tr",null,[$e,to,t("td",eo,[o(l,{to:"/problem/0101.html"},{default:n(()=>[e("[✓]")]),_:1})]),t("td",oo,[o(l,{to:"/tag/tree.html"},{default:n(()=>[lo]),_:1}),e(),o(l,{to:"/tag/depth-first-search.html"},{default:n(()=>[no]),_:1}),e(),o(l,{to:"/tag/breadth-first-search.html"},{default:n(()=>[so]),_:1}),e(),ro]),_o,t("td",co,[t("a",ao,[e("🀄️"),o(s)]),e(),t("a",io,[e("🔗"),o(s)])])]),t("tr",null,[ho,go,t("td",fo,[o(l,{to:"/problem/0102.html"},{default:n(()=>[e("[✓]")]),_:1})]),t("td",uo,[o(l,{to:"/tag/tree.html"},{default:n(()=>[mo]),_:1}),e(),o(l,{to:"/tag/breadth-first-search.html"},{default:n(()=>[po]),_:1}),e(),o(l,{to:"/tag/binary-tree.html"},{default:n(()=>[yo]),_:1})]),bo,t("td",xo,[t("a",ko,[e("🀄️"),o(s)]),e(),t("a",vo,[e("🔗"),o(s)])])]),t("tr",null,[wo,qo,t("td",Io,[o(l,{to:"/problem/0103.html"},{default:n(()=>[e("[✓]")]),_:1})]),t("td",zo,[o(l,{to:"/tag/tree.html"},{default:n(()=>[No]),_:1}),e(),o(l,{to:"/tag/breadth-first-search.html"},{default:n(()=>[Vo]),_:1}),e(),o(l,{to:"/tag/binary-tree.html"},{default:n(()=>[Ko]),_:1})]),Lo,t("td",jo,[t("a",Bo,[e("🀄️"),o(s)]),e(),t("a",Co,[e("🔗"),o(s)])])]),t("tr",null,[Eo,Ro,t("td",To,[o(l,{to:"/problem/0104.html"},{default:n(()=>[e("[✓]")]),_:1})]),t("td",Ao,[o(l,{to:"/tag/tree.html"},{default:n(()=>[Do]),_:1}),e(),o(l,{to:"/tag/depth-first-search.html"},{default:n(()=>[Fo]),_:1}),e(),o(l,{to:"/tag/breadth-first-search.html"},{default:n(()=>[Go]),_:1}),e(),Ho]),Jo,t("td",Mo,[t("a",Oo,[e("🀄️"),o(s)]),e(),t("a",Po,[e("🔗"),o(s)])])]),t("tr",null,[Qo,So,t("td",Uo,[o(l,{to:"/problem/0105.html"},{default:n(()=>[e("[✓]")]),_:1})]),t("td",Wo,[o(l,{to:"/tag/tree.html"},{default:n(()=>[Xo]),_:1}),e(),o(l,{to:"/tag/array.html"},{default:n(()=>[Yo]),_:1}),e(),o(l,{to:"/tag/hash-table.html"},{default:n(()=>[Zo]),_:1}),e(),$o]),tl,t("td",el,[t("a",ol,[e("🀄️"),o(s)]),e(),t("a",ll,[e("🔗"),o(s)])])]),t("tr",null,[nl,sl,t("td",rl,[o(l,{to:"/problem/0106.html"},{default:n(()=>[e("[✓]")]),_:1})]),t("td",dl,[o(l,{to:"/tag/tree.html"},{default:n(()=>[_l]),_:1}),e(),o(l,{to:"/tag/array.html"},{default:n(()=>[cl]),_:1}),e(),o(l,{to:"/tag/hash-table.html"},{default:n(()=>[al]),_:1}),e(),il]),hl,t("td",gl,[t("a",fl,[e("🀄️"),o(s)]),e(),t("a",ul,[e("🔗"),o(s)])])]),t("tr",null,[ml,pl,t("td",yl,[o(l,{to:"/problem/0107.html"},{default:n(()=>[e("[✓]")]),_:1})]),t("td",bl,[o(l,{to:"/tag/tree.html"},{default:n(()=>[xl]),_:1}),e(),o(l,{to:"/tag/breadth-first-search.html"},{default:n(()=>[kl]),_:1}),e(),o(l,{to:"/tag/binary-tree.html"},{default:n(()=>[vl]),_:1})]),wl,t("td",ql,[t("a",Il,[e("🀄️"),o(s)]),e(),t("a",zl,[e("🔗"),o(s)])])]),t("tr",null,[Nl,Vl,t("td",Kl,[o(l,{to:"/problem/0108.html"},{default:n(()=>[e("[✓]")]),_:1})]),t("td",Ll,[o(l,{to:"/tag/tree.html"},{default:n(()=>[jl]),_:1}),e(),o(l,{to:"/tag/binary-search-tree.html"},{default:n(()=>[Bl]),_:1}),e(),o(l,{to:"/tag/array.html"},{default:n(()=>[Cl]),_:1}),e(),El]),Rl,t("td",Tl,[t("a",Al,[e("🀄️"),o(s)]),e(),t("a",Dl,[e("🔗"),o(s)])])]),t("tr",null,[Fl,Gl,t("td",Hl,[o(l,{to:"/problem/0109.html"},{default:n(()=>[e("[✓]")]),_:1})]),t("td",Jl,[o(l,{to:"/tag/tree.html"},{default:n(()=>[Ml]),_:1}),e(),o(l,{to:"/tag/binary-search-tree.html"},{default:n(()=>[Ol]),_:1}),e(),o(l,{to:"/tag/linked-list.html"},{default:n(()=>[Pl]),_:1}),e(),Ql]),Sl,t("td",Ul,[t("a",Wl,[e("🀄️"),o(s)]),e(),t("a",Xl,[e("🔗"),o(s)])])]),t("tr",null,[Yl,Zl,t("td",$l,[o(l,{to:"/problem/0110.html"},{default:n(()=>[e("[✓]")]),_:1})]),t("td",tn,[o(l,{to:"/tag/tree.html"},{default:n(()=>[en]),_:1}),e(),o(l,{to:"/tag/depth-first-search.html"},{default:n(()=>[on]),_:1}),e(),o(l,{to:"/tag/binary-tree.html"},{default:n(()=>[ln]),_:1})]),nn,t("td",sn,[t("a",rn,[e("🀄️"),o(s)]),e(),t("a",dn,[e("🔗"),o(s)])])]),t("tr",null,[_n,cn,t("td",an,[o(l,{to:"/problem/0111.html"},{default:n(()=>[e("[✓]")]),_:1})]),t("td",hn,[o(l,{to:"/tag/tree.html"},{default:n(()=>[gn]),_:1}),e(),o(l,{to:"/tag/depth-first-search.html"},{default:n(()=>[fn]),_:1}),e(),o(l,{to:"/tag/breadth-first-search.html"},{default:n(()=>[un]),_:1}),e(),mn]),pn,t("td",yn,[t("a",bn,[e("🀄️"),o(s)]),e(),t("a",xn,[e("🔗"),o(s)])])]),t("tr",null,[kn,vn,t("td",wn,[o(l,{to:"/problem/0112.html"},{default:n(()=>[e("[✓]")]),_:1})]),t("td",qn,[o(l,{to:"/tag/tree.html"},{default:n(()=>[In]),_:1}),e(),o(l,{to:"/tag/depth-first-search.html"},{default:n(()=>[zn]),_:1}),e(),o(l,{to:"/tag/breadth-first-search.html"},{default:n(()=>[Nn]),_:1}),e(),Vn]),Kn,t("td",Ln,[t("a",jn,[e("🀄️"),o(s)]),e(),t("a",Bn,[e("🔗"),o(s)])])]),t("tr",null,[Cn,En,t("td",Rn,[o(l,{to:"/problem/0113.html"},{default:n(()=>[e("[✓]")]),_:1})]),t("td",Tn,[o(l,{to:"/tag/tree.html"},{default:n(()=>[An]),_:1}),e(),o(l,{to:"/tag/depth-first-search.html"},{default:n(()=>[Dn]),_:1}),e(),o(l,{to:"/tag/backtracking.html"},{default:n(()=>[Fn]),_:1}),e(),Gn]),Hn,t("td",Jn,[t("a",Mn,[e("🀄️"),o(s)]),e(),t("a",On,[e("🔗"),o(s)])])]),t("tr",null,[Pn,Qn,t("td",Sn,[o(l,{to:"/problem/0114.html"},{default:n(()=>[e("[✓]")]),_:1})]),t("td",Un,[o(l,{to:"/tag/stack.html"},{default:n(()=>[Wn]),_:1}),e(),o(l,{to:"/tag/tree.html"},{default:n(()=>[Xn]),_:1}),e(),o(l,{to:"/tag/depth-first-search.html"},{default:n(()=>[Yn]),_:1}),e(),Zn]),$n,t("td",ts,[t("a",es,[e("🀄️"),o(s)]),e(),t("a",os,[e("🔗"),o(s)])])]),t("tr",null,[ls,ns,t("td",ss,[o(l,{to:"/problem/0116.html"},{default:n(()=>[e("[✓]")]),_:1})]),t("td",rs,[o(l,{to:"/tag/tree.html"},{default:n(()=>[ds]),_:1}),e(),o(l,{to:"/tag/depth-first-search.html"},{default:n(()=>[_s]),_:1}),e(),o(l,{to:"/tag/breadth-first-search.html"},{default:n(()=>[cs]),_:1}),e(),as]),is,t("td",hs,[t("a",gs,[e("🀄️"),o(s)]),e(),t("a",fs,[e("🔗"),o(s)])])]),t("tr",null,[us,ms,t("td",ps,[o(l,{to:"/problem/0117.html"},{default:n(()=>[e("[✓]")]),_:1})]),t("td",ys,[o(l,{to:"/tag/tree.html"},{default:n(()=>[bs]),_:1}),e(),o(l,{to:"/tag/depth-first-search.html"},{default:n(()=>[xs]),_:1}),e(),o(l,{to:"/tag/breadth-first-search.html"},{default:n(()=>[ks]),_:1}),e(),vs]),ws,t("td",qs,[t("a",Is,[e("🀄️"),o(s)]),e(),t("a",zs,[e("🔗"),o(s)])])]),t("tr",null,[Ns,Vs,t("td",Ks,[o(l,{to:"/problem/0124.html"},{default:n(()=>[e("[✓]")]),_:1})]),t("td",Ls,[o(l,{to:"/tag/tree.html"},{default:n(()=>[js]),_:1}),e(),o(l,{to:"/tag/depth-first-search.html"},{default:n(()=>[Bs]),_:1}),e(),o(l,{to:"/tag/dynamic-programming.html"},{default:n(()=>[Cs]),_:1}),e(),Es]),Rs,t("td",Ts,[t("a",As,[e("🀄️"),o(s)]),e(),t("a",Ds,[e("🔗"),o(s)])])]),t("tr",null,[Fs,Gs,t("td",Hs,[o(l,{to:"/problem/0129.html"},{default:n(()=>[e("[✓]")]),_:1})]),t("td",Js,[o(l,{to:"/tag/tree.html"},{default:n(()=>[Ms]),_:1}),e(),o(l,{to:"/tag/depth-first-search.html"},{default:n(()=>[Os]),_:1}),e(),o(l,{to:"/tag/binary-tree.html"},{default:n(()=>[Ps]),_:1})]),Qs,t("td",Ss,[t("a",Us,[e("🀄️"),o(s)]),e(),t("a",Ws,[e("🔗"),o(s)])])]),t("tr",null,[Xs,Ys,t("td",Zs,[o(l,{to:"/problem/0144.html"},{default:n(()=>[e("[✓]")]),_:1})]),t("td",$s,[o(l,{to:"/tag/stack.html"},{default:n(()=>[tr]),_:1}),e(),o(l,{to:"/tag/tree.html"},{default:n(()=>[er]),_:1}),e(),o(l,{to:"/tag/depth-first-search.html"},{default:n(()=>[or]),_:1}),e(),lr]),nr,t("td",sr,[t("a",rr,[e("🀄️"),o(s)]),e(),t("a",dr,[e("🔗"),o(s)])])]),t("tr",null,[_r,cr,t("td",ar,[o(l,{to:"/problem/0145.html"},{default:n(()=>[e("[✓]")]),_:1})]),t("td",ir,[o(l,{to:"/tag/stack.html"},{default:n(()=>[hr]),_:1}),e(),o(l,{to:"/tag/tree.html"},{default:n(()=>[gr]),_:1}),e(),o(l,{to:"/tag/depth-first-search.html"},{default:n(()=>[fr]),_:1}),e(),ur]),mr,t("td",pr,[t("a",yr,[e("🀄️"),o(s)]),e(),t("a",br,[e("🔗"),o(s)])])]),t("tr",null,[xr,kr,t("td",vr,[o(l,{to:"/problem/0156.html"},{default:n(()=>[e("[✓]")]),_:1})]),t("td",wr,[o(l,{to:"/tag/tree.html"},{default:n(()=>[qr]),_:1}),e(),o(l,{to:"/tag/depth-first-search.html"},{default:n(()=>[Ir]),_:1}),e(),o(l,{to:"/tag/binary-tree.html"},{default:n(()=>[zr]),_:1})]),Nr,t("td",Vr,[t("a",Kr,[e("🀄️"),o(s)]),e(),t("a",Lr,[e("🔗"),o(s)])])]),t("tr",null,[jr,Br,t("td",Cr,[o(l,{to:"/problem/0173.html"},{default:n(()=>[e("[✓]")]),_:1})]),t("td",Er,[o(l,{to:"/tag/stack.html"},{default:n(()=>[Rr]),_:1}),e(),o(l,{to:"/tag/tree.html"},{default:n(()=>[Tr]),_:1}),e(),o(l,{to:"/tag/design.html"},{default:n(()=>[Ar]),_:1}),e(),Dr]),Fr,t("td",Gr,[t("a",Hr,[e("🀄️"),o(s)]),e(),t("a",Jr,[e("🔗"),o(s)])])]),t("tr",null,[Mr,Or,t("td",Pr,[o(l,{to:"/problem/0199.html"},{default:n(()=>[e("[✓]")]),_:1})]),t("td",Qr,[o(l,{to:"/tag/tree.html"},{default:n(()=>[Sr]),_:1}),e(),o(l,{to:"/tag/depth-first-search.html"},{default:n(()=>[Ur]),_:1}),e(),o(l,{to:"/tag/breadth-first-search.html"},{default:n(()=>[Wr]),_:1}),e(),Xr]),Yr,t("td",Zr,[t("a",$r,[e("🀄️"),o(s)]),e(),t("a",td,[e("🔗"),o(s)])])]),t("tr",null,[ed,od,t("td",ld,[o(l,{to:"/problem/0222.html"},{default:n(()=>[e("[✓]")]),_:1})]),t("td",nd,[o(l,{to:"/tag/bit-manipulation.html"},{default:n(()=>[sd]),_:1}),e(),o(l,{to:"/tag/tree.html"},{default:n(()=>[rd]),_:1}),e(),o(l,{to:"/tag/binary-search.html"},{default:n(()=>[dd]),_:1}),e(),_d]),cd,t("td",ad,[t("a",id,[e("🀄️"),o(s)]),e(),t("a",hd,[e("🔗"),o(s)])])]),t("tr",null,[gd,fd,t("td",ud,[o(l,{to:"/problem/0226.html"},{default:n(()=>[e("[✓]")]),_:1})]),t("td",md,[o(l,{to:"/tag/tree.html"},{default:n(()=>[pd]),_:1}),e(),o(l,{to:"/tag/depth-first-search.html"},{default:n(()=>[yd]),_:1}),e(),o(l,{to:"/tag/breadth-first-search.html"},{default:n(()=>[bd]),_:1}),e(),xd]),kd,t("td",vd,[t("a",wd,[e("🀄️"),o(s)]),e(),t("a",qd,[e("🔗"),o(s)])])]),t("tr",null,[Id,zd,t("td",Nd,[o(l,{to:"/problem/0230.html"},{default:n(()=>[e("[✓]")]),_:1})]),t("td",Vd,[o(l,{to:"/tag/tree.html"},{default:n(()=>[Kd]),_:1}),e(),o(l,{to:"/tag/depth-first-search.html"},{default:n(()=>[Ld]),_:1}),e(),o(l,{to:"/tag/binary-search-tree.html"},{default:n(()=>[jd]),_:1}),e(),Bd]),Cd,t("td",Ed,[t("a",Rd,[e("🀄️"),o(s)]),e(),t("a",Td,[e("🔗"),o(s)])])]),t("tr",null,[Ad,Dd,t("td",Fd,[o(l,{to:"/problem/0235.html"},{default:n(()=>[e("[✓]")]),_:1})]),t("td",Gd,[o(l,{to:"/tag/tree.html"},{default:n(()=>[Hd]),_:1}),e(),o(l,{to:"/tag/depth-first-search.html"},{default:n(()=>[Jd]),_:1}),e(),o(l,{to:"/tag/binary-search-tree.html"},{default:n(()=>[Md]),_:1}),e(),Od]),Pd,t("td",Qd,[t("a",Sd,[e("🀄️"),o(s)]),e(),t("a",Ud,[e("🔗"),o(s)])])]),t("tr",null,[Wd,Xd,t("td",Yd,[o(l,{to:"/problem/0236.html"},{default:n(()=>[e("[✓]")]),_:1})]),t("td",Zd,[o(l,{to:"/tag/tree.html"},{default:n(()=>[$d]),_:1}),e(),o(l,{to:"/tag/depth-first-search.html"},{default:n(()=>[t_]),_:1}),e(),o(l,{to:"/tag/binary-tree.html"},{default:n(()=>[e_]),_:1})]),o_,t("td",l_,[t("a",n_,[e("🀄️"),o(s)]),e(),t("a",s_,[e("🔗"),o(s)])])]),t("tr",null,[r_,d_,__,t("td",c_,[o(l,{to:"/tag/tree.html"},{default:n(()=>[a_]),_:1}),e(),o(l,{to:"/tag/depth-first-search.html"},{default:n(()=>[i_]),_:1}),e(),o(l,{to:"/tag/binary-tree.html"},{default:n(()=>[h_]),_:1})]),g_,t("td",f_,[t("a",u_,[e("🀄️"),o(s)]),e(),t("a",m_,[e("🔗"),o(s)])])]),t("tr",null,[p_,y_,b_,t("td",x_,[o(l,{to:"/tag/stack.html"},{default:n(()=>[k_]),_:1}),e(),o(l,{to:"/tag/tree.html"},{default:n(()=>[v_]),_:1}),e(),o(l,{to:"/tag/binary-search-tree.html"},{default:n(()=>[w_]),_:1}),e(),q_]),I_,t("td",z_,[t("a",N_,[e("🀄️"),o(s)]),e(),t("a",V_,[e("🔗"),o(s)])])]),t("tr",null,[K_,L_,t("td",j_,[o(l,{to:"/problem/0257.html"},{default:n(()=>[e("[✓]")]),_:1})]),t("td",B_,[o(l,{to:"/tag/tree.html"},{default:n(()=>[C_]),_:1}),e(),o(l,{to:"/tag/depth-first-search.html"},{default:n(()=>[E_]),_:1}),e(),o(l,{to:"/tag/string.html"},{default:n(()=>[R_]),_:1}),e(),T_]),A_,t("td",D_,[t("a",F_,[e("🀄️"),o(s)]),e(),t("a",G_,[e("🔗"),o(s)])])]),t("tr",null,[H_,J_,M_,t("td",O_,[o(l,{to:"/tag/tree.html"},{default:n(()=>[P_]),_:1}),e(),o(l,{to:"/tag/depth-first-search.html"},{default:n(()=>[Q_]),_:1}),e(),o(l,{to:"/tag/binary-search-tree.html"},{default:n(()=>[S_]),_:1}),e(),U_]),W_,t("td",X_,[t("a",Y_,[e("🀄️"),o(s)]),e(),t("a",Z_,[e("🔗"),o(s)])])]),t("tr",null,[$_,tc,ec,t("td",oc,[o(l,{to:"/tag/stack.html"},{default:n(()=>[lc]),_:1}),e(),o(l,{to:"/tag/tree.html"},{default:n(()=>[nc]),_:1}),e(),o(l,{to:"/tag/depth-first-search.html"},{default:n(()=>[sc]),_:1}),e(),rc]),dc,t("td",_c,[t("a",cc,[e("🀄️"),o(s)]),e(),t("a",ac,[e("🔗"),o(s)])])]),t("tr",null,[ic,hc,gc,t("td",fc,[o(l,{to:"/tag/tree.html"},{default:n(()=>[uc]),_:1}),e(),o(l,{to:"/tag/depth-first-search.html"},{default:n(()=>[mc]),_:1}),e(),o(l,{to:"/tag/binary-search-tree.html"},{default:n(()=>[pc]),_:1}),e(),yc]),bc,t("td",xc,[t("a",kc,[e("🀄️"),o(s)]),e(),t("a",vc,[e("🔗"),o(s)])])]),t("tr",null,[wc,qc,t("td",Ic,[o(l,{to:"/problem/0297.html"},{default:n(()=>[e("[✓]")]),_:1})]),t("td",zc,[o(l,{to:"/tag/tree.html"},{default:n(()=>[Nc]),_:1}),e(),o(l,{to:"/tag/depth-first-search.html"},{default:n(()=>[Vc]),_:1}),e(),o(l,{to:"/tag/breadth-first-search.html"},{default:n(()=>[Kc]),_:1}),e(),Lc]),jc,t("td",Bc,[t("a",Cc,[e("🀄️"),o(s)]),e(),t("a",Ec,[e("🔗"),o(s)])])]),t("tr",null,[Rc,Tc,Ac,t("td",Dc,[o(l,{to:"/tag/tree.html"},{default:n(()=>[Fc]),_:1}),e(),o(l,{to:"/tag/depth-first-search.html"},{default:n(()=>[Gc]),_:1}),e(),o(l,{to:"/tag/binary-tree.html"},{default:n(()=>[Hc]),_:1})]),Jc,t("td",Mc,[t("a",Oc,[e("🀄️"),o(s)]),e(),t("a",Pc,[e("🔗"),o(s)])])]),t("tr",null,[Qc,Sc,Uc,t("td",Wc,[o(l,{to:"/tag/tree.html"},{default:n(()=>[Xc]),_:1}),e(),o(l,{to:"/tag/depth-first-search.html"},{default:n(()=>[Yc]),_:1}),e(),o(l,{to:"/tag/breadth-first-search.html"},{default:n(()=>[Zc]),_:1}),e(),$c]),ta,t("td",ea,[t("a",oa,[e("🀄️"),o(s)]),e(),t("a",la,[e("🔗"),o(s)])])]),t("tr",null,[na,sa,t("td",ra,[o(l,{to:"/problem/0331.html"},{default:n(()=>[e("[✓]")]),_:1})]),t("td",da,[o(l,{to:"/tag/stack.html"},{default:n(()=>[_a]),_:1}),e(),o(l,{to:"/tag/tree.html"},{default:n(()=>[ca]),_:1}),e(),o(l,{to:"/tag/string.html"},{default:n(()=>[aa]),_:1}),e(),ia]),ha,t("td",ga,[t("a",fa,[e("🀄️"),o(s)]),e(),t("a",ua,[e("🔗"),o(s)])])]),t("tr",null,[ma,pa,ya,t("td",ba,[o(l,{to:"/tag/tree.html"},{default:n(()=>[xa]),_:1}),e(),o(l,{to:"/tag/depth-first-search.html"},{default:n(()=>[ka]),_:1}),e(),o(l,{to:"/tag/binary-search-tree.html"},{default:n(()=>[va]),_:1}),e(),wa]),qa,t("td",Ia,[t("a",za,[e("🀄️"),o(s)]),e(),t("a",Na,[e("🔗"),o(s)])])]),t("tr",null,[Va,Ka,t("td",La,[o(l,{to:"/problem/0337.html"},{default:n(()=>[e("[✓]")]),_:1})]),t("td",ja,[o(l,{to:"/tag/tree.html"},{default:n(()=>[Ba]),_:1}),e(),o(l,{to:"/tag/depth-first-search.html"},{default:n(()=>[Ca]),_:1}),e(),o(l,{to:"/tag/dynamic-programming.html"},{default:n(()=>[Ea]),_:1}),e(),Ra]),Ta,t("td",Aa,[t("a",Da,[e("🀄️"),o(s)]),e(),t("a",Fa,[e("🔗"),o(s)])])]),t("tr",null,[Ga,Ha,t("td",Ja,[o(l,{to:"/problem/0341.html"},{default:n(()=>[e("[✓]")]),_:1})]),t("td",Ma,[o(l,{to:"/tag/stack.html"},{default:n(()=>[Oa]),_:1}),e(),o(l,{to:"/tag/tree.html"},{default:n(()=>[Pa]),_:1}),e(),o(l,{to:"/tag/depth-first-search.html"},{default:n(()=>[Qa]),_:1}),e(),Sa]),Ua,t("td",Wa,[t("a",Xa,[e("🀄️"),o(s)]),e(),t("a",Ya,[e("🔗"),o(s)])])]),t("tr",null,[Za,$a,t("td",ti,[o(l,{to:"/problem/0366.html"},{default:n(()=>[e("[✓]")]),_:1})]),t("td",ei,[o(l,{to:"/tag/tree.html"},{default:n(()=>[oi]),_:1}),e(),o(l,{to:"/tag/depth-first-search.html"},{default:n(()=>[li]),_:1}),e(),o(l,{to:"/tag/binary-tree.html"},{default:n(()=>[ni]),_:1})]),si,t("td",ri,[t("a",di,[e("🀄️"),o(s)]),e(),t("a",_i,[e("🔗"),o(s)])])]),t("tr",null,[ci,ai,t("td",ii,[o(l,{to:"/problem/0404.html"},{default:n(()=>[e("[✓]")]),_:1})]),t("td",hi,[o(l,{to:"/tag/tree.html"},{default:n(()=>[gi]),_:1}),e(),o(l,{to:"/tag/depth-first-search.html"},{default:n(()=>[fi]),_:1}),e(),o(l,{to:"/tag/breadth-first-search.html"},{default:n(()=>[ui]),_:1}),e(),mi]),pi,t("td",yi,[t("a",bi,[e("🀄️"),o(s)]),e(),t("a",xi,[e("🔗"),o(s)])])]),t("tr",null,[ki,vi,t("td",wi,[o(l,{to:"/problem/0426.html"},{default:n(()=>[e("[✓]")]),_:1})]),t("td",qi,[o(l,{to:"/tag/stack.html"},{default:n(()=>[Ii]),_:1}),e(),o(l,{to:"/tag/tree.html"},{default:n(()=>[zi]),_:1}),e(),o(l,{to:"/tag/depth-first-search.html"},{default:n(()=>[Ni]),_:1}),e(),Vi]),Ki,t("td",Li,[t("a",ji,[e("🀄️"),o(s)]),e(),t("a",Bi,[e("🔗"),o(s)])])]),t("tr",null,[Ci,Ei,t("td",Ri,[o(l,{to:"/problem/0427.html"},{default:n(()=>[e("[✓]")]),_:1})]),t("td",Ti,[o(l,{to:"/tag/tree.html"},{default:n(()=>[Ai]),_:1}),e(),o(l,{to:"/tag/array.html"},{default:n(()=>[Di]),_:1}),e(),o(l,{to:"/tag/divide-and-conquer.html"},{default:n(()=>[Fi]),_:1}),e(),Gi]),Hi,t("td",Ji,[t("a",Mi,[e("🀄️"),o(s)]),e(),t("a",Oi,[e("🔗"),o(s)])])]),t("tr",null,[Pi,Qi,Si,t("td",Ui,[o(l,{to:"/tag/tree.html"},{default:n(()=>[Wi]),_:1}),e(),o(l,{to:"/tag/depth-first-search.html"},{default:n(()=>[Xi]),_:1}),e(),o(l,{to:"/tag/breadth-first-search.html"},{default:n(()=>[Yi]),_:1}),e(),Zi]),$i,t("td",th,[t("a",eh,[e("🀄️"),o(s)]),e(),t("a",oh,[e("🔗"),o(s)])])]),t("tr",null,[lh,nh,t("td",sh,[o(l,{to:"/problem/0429.html"},{default:n(()=>[e("[✓]")]),_:1})]),t("td",rh,[o(l,{to:"/tag/tree.html"},{default:n(()=>[dh]),_:1}),e(),o(l,{to:"/tag/breadth-first-search.html"},{default:n(()=>[_h]),_:1})]),ch,t("td",ah,[t("a",ih,[e("🀄️"),o(s)]),e(),t("a",hh,[e("🔗"),o(s)])])]),t("tr",null,[gh,fh,uh,t("td",mh,[o(l,{to:"/tag/tree.html"},{default:n(()=>[ph]),_:1}),e(),o(l,{to:"/tag/depth-first-search.html"},{default:n(()=>[yh]),_:1}),e(),o(l,{to:"/tag/breadth-first-search.html"},{default:n(()=>[bh]),_:1}),e(),xh]),kh,t("td",vh,[t("a",wh,[e("🀄️"),o(s)]),e(),t("a",qh,[e("🔗"),o(s)])])]),t("tr",null,[Ih,zh,t("td",Nh,[o(l,{to:"/problem/0437.html"},{default:n(()=>[e("[✓]")]),_:1})]),t("td",Vh,[o(l,{to:"/tag/tree.html"},{default:n(()=>[Kh]),_:1}),e(),o(l,{to:"/tag/depth-first-search.html"},{default:n(()=>[Lh]),_:1}),e(),o(l,{to:"/tag/binary-tree.html"},{default:n(()=>[jh]),_:1})]),Bh,t("td",Ch,[t("a",Eh,[e("🀄️"),o(s)]),e(),t("a",Rh,[e("🔗"),o(s)])])]),t("tr",null,[Th,Ah,t("td",Dh,[o(l,{to:"/problem/0449.html"},{default:n(()=>[e("[✓]")]),_:1})]),t("td",Fh,[o(l,{to:"/tag/tree.html"},{default:n(()=>[Gh]),_:1}),e(),o(l,{to:"/tag/depth-first-search.html"},{default:n(()=>[Hh]),_:1}),e(),o(l,{to:"/tag/breadth-first-search.html"},{default:n(()=>[Jh]),_:1}),e(),Mh]),Oh,t("td",Ph,[t("a",Qh,[e("🀄️"),o(s)]),e(),t("a",Sh,[e("🔗"),o(s)])])]),t("tr",null,[Uh,Wh,t("td",Xh,[o(l,{to:"/problem/0450.html"},{default:n(()=>[e("[✓]")]),_:1})]),t("td",Yh,[o(l,{to:"/tag/tree.html"},{default:n(()=>[Zh]),_:1}),e(),o(l,{to:"/tag/binary-search-tree.html"},{default:n(()=>[$h]),_:1}),e(),o(l,{to:"/tag/binary-tree.html"},{default:n(()=>[t1]),_:1})]),e1,t("td",o1,[t("a",l1,[e("🀄️"),o(s)]),e(),t("a",n1,[e("🔗"),o(s)])])]),t("tr",null,[s1,r1,t("td",d1,[o(l,{to:"/problem/0501.html"},{default:n(()=>[e("[✓]")]),_:1})]),t("td",_1,[o(l,{to:"/tag/tree.html"},{default:n(()=>[c1]),_:1}),e(),o(l,{to:"/tag/depth-first-search.html"},{default:n(()=>[a1]),_:1}),e(),o(l,{to:"/tag/binary-search-tree.html"},{default:n(()=>[i1]),_:1}),e(),h1]),g1,t("td",f1,[t("a",u1,[e("🀄️"),o(s)]),e(),t("a",m1,[e("🔗"),o(s)])])]),t("tr",null,[p1,y1,b1,t("td",x1,[o(l,{to:"/tag/tree.html"},{default:n(()=>[k1]),_:1}),e(),o(l,{to:"/tag/depth-first-search.html"},{default:n(()=>[v1]),_:1}),e(),o(l,{to:"/tag/hash-table.html"},{default:n(()=>[w1]),_:1}),e(),q1]),I1,t("td",z1,[t("a",N1,[e("🀄️"),o(s)]),e(),t("a",V1,[e("🔗"),o(s)])])]),t("tr",null,[K1,L1,j1,t("td",B1,[o(l,{to:"/tag/tree.html"},{default:n(()=>[C1]),_:1}),e(),o(l,{to:"/tag/binary-search-tree.html"},{default:n(()=>[E1]),_:1}),e(),o(l,{to:"/tag/binary-tree.html"},{default:n(()=>[R1]),_:1})]),T1,t("td",A1,[t("a",D1,[e("🀄️"),o(s)]),e(),t("a",F1,[e("🔗"),o(s)])])]),t("tr",null,[G1,H1,J1,t("td",M1,[o(l,{to:"/tag/tree.html"},{default:n(()=>[O1]),_:1}),e(),o(l,{to:"/tag/depth-first-search.html"},{default:n(()=>[P1]),_:1}),e(),o(l,{to:"/tag/breadth-first-search.html"},{default:n(()=>[Q1]),_:1}),e(),S1]),U1,t("td",W1,[t("a",X1,[e("🀄️"),o(s)]),e(),t("a",Y1,[e("🔗"),o(s)])])]),t("tr",null,[Z1,$1,t("td",tg,[o(l,{to:"/problem/0515.html"},{default:n(()=>[e("[✓]")]),_:1})]),t("td",eg,[o(l,{to:"/tag/tree.html"},{default:n(()=>[og]),_:1}),e(),o(l,{to:"/tag/depth-first-search.html"},{default:n(()=>[lg]),_:1}),e(),o(l,{to:"/tag/breadth-first-search.html"},{default:n(()=>[ng]),_:1}),e(),sg]),rg,t("td",dg,[t("a",_g,[e("🀄️"),o(s)]),e(),t("a",cg,[e("🔗"),o(s)])])]),t("tr",null,[ag,ig,t("td",hg,[o(l,{to:"/problem/0530.html"},{default:n(()=>[e("[✓]")]),_:1})]),t("td",gg,[o(l,{to:"/tag/tree.html"},{default:n(()=>[fg]),_:1}),e(),o(l,{to:"/tag/depth-first-search.html"},{default:n(()=>[ug]),_:1}),e(),o(l,{to:"/tag/breadth-first-search.html"},{default:n(()=>[mg]),_:1}),e(),pg]),yg,t("td",bg,[t("a",xg,[e("🀄️"),o(s)]),e(),t("a",kg,[e("🔗"),o(s)])])]),t("tr",null,[vg,wg,qg,t("td",Ig,[o(l,{to:"/tag/stack.html"},{default:n(()=>[zg]),_:1}),e(),o(l,{to:"/tag/tree.html"},{default:n(()=>[Ng]),_:1}),e(),o(l,{to:"/tag/depth-first-search.html"},{default:n(()=>[Vg]),_:1}),e(),Kg]),Lg,t("td",jg,[t("a",Bg,[e("🀄️"),o(s)]),e(),t("a",Cg,[e("🔗"),o(s)])])]),t("tr",null,[Eg,Rg,Tg,t("td",Ag,[o(l,{to:"/tag/tree.html"},{default:n(()=>[Dg]),_:1}),e(),o(l,{to:"/tag/depth-first-search.html"},{default:n(()=>[Fg]),_:1}),e(),o(l,{to:"/tag/binary-search-tree.html"},{default:n(()=>[Gg]),_:1}),e(),Hg]),Jg,t("td",Mg,[t("a",Og,[e("🀄️"),o(s)]),e(),t("a",Pg,[e("🔗"),o(s)])])]),t("tr",null,[Qg,Sg,t("td",Ug,[o(l,{to:"/problem/0543.html"},{default:n(()=>[e("[✓]")]),_:1})]),t("td",Wg,[o(l,{to:"/tag/tree.html"},{default:n(()=>[Xg]),_:1}),e(),o(l,{to:"/tag/depth-first-search.html"},{default:n(()=>[Yg]),_:1}),e(),o(l,{to:"/tag/binary-tree.html"},{default:n(()=>[Zg]),_:1})]),$g,t("td",tf,[t("a",ef,[e("🀄️"),o(s)]),e(),t("a",of,[e("🔗"),o(s)])])]),t("tr",null,[lf,nf,sf,t("td",rf,[o(l,{to:"/tag/tree.html"},{default:n(()=>[df]),_:1}),e(),o(l,{to:"/tag/depth-first-search.html"},{default:n(()=>[_f]),_:1}),e(),o(l,{to:"/tag/binary-tree.html"},{default:n(()=>[cf]),_:1})]),af,t("td",hf,[t("a",gf,[e("🀄️"),o(s)]),e(),t("a",ff,[e("🔗"),o(s)])])]),t("tr",null,[uf,mf,pf,t("td",yf,[o(l,{to:"/tag/tree.html"},{default:n(()=>[bf]),_:1}),e(),o(l,{to:"/tag/depth-first-search.html"},{default:n(()=>[xf]),_:1}),e(),o(l,{to:"/tag/binary-tree.html"},{default:n(()=>[kf]),_:1})]),vf,t("td",wf,[t("a",qf,[e("🀄️"),o(s)]),e(),t("a",If,[e("🔗"),o(s)])])]),t("tr",null,[zf,Nf,Vf,t("td",Kf,[o(l,{to:"/tag/tree.html"},{default:n(()=>[Lf]),_:1}),e(),o(l,{to:"/tag/divide-and-conquer.html"},{default:n(()=>[jf]),_:1})]),Bf,t("td",Cf,[t("a",Ef,[e("🀄️"),o(s)]),e(),t("a",Rf,[e("🔗"),o(s)])])]),t("tr",null,[Tf,Af,t("td",Df,[o(l,{to:"/problem/0559.html"},{default:n(()=>[e("[✓]")]),_:1})]),t("td",Ff,[o(l,{to:"/tag/tree.html"},{default:n(()=>[Gf]),_:1}),e(),o(l,{to:"/tag/depth-first-search.html"},{default:n(()=>[Hf]),_:1}),e(),o(l,{to:"/tag/breadth-first-search.html"},{default:n(()=>[Jf]),_:1})]),Mf,t("td",Of,[t("a",Pf,[e("🀄️"),o(s)]),e(),t("a",Qf,[e("🔗"),o(s)])])]),t("tr",null,[Sf,Uf,t("td",Wf,[o(l,{to:"/problem/0563.html"},{default:n(()=>[e("[✓]")]),_:1})]),t("td",Xf,[o(l,{to:"/tag/tree.html"},{default:n(()=>[Yf]),_:1}),e(),o(l,{to:"/tag/depth-first-search.html"},{default:n(()=>[Zf]),_:1}),e(),o(l,{to:"/tag/binary-tree.html"},{default:n(()=>[$f]),_:1})]),tu,t("td",eu,[t("a",ou,[e("🀄️"),o(s)]),e(),t("a",lu,[e("🔗"),o(s)])])]),t("tr",null,[nu,su,t("td",ru,[o(l,{to:"/problem/0572.html"},{default:n(()=>[e("[✓]")]),_:1})]),t("td",du,[o(l,{to:"/tag/tree.html"},{default:n(()=>[_u]),_:1}),e(),o(l,{to:"/tag/depth-first-search.html"},{default:n(()=>[cu]),_:1}),e(),o(l,{to:"/tag/binary-tree.html"},{default:n(()=>[au]),_:1}),e(),iu]),hu,t("td",gu,[t("a",fu,[e("🀄️"),o(s)]),e(),t("a",uu,[e("🔗"),o(s)])])]),t("tr",null,[mu,pu,yu,t("td",bu,[o(l,{to:"/tag/tree.html"},{default:n(()=>[xu]),_:1}),e(),o(l,{to:"/tag/depth-first-search.html"},{default:n(()=>[ku]),_:1}),e(),o(l,{to:"/tag/breadth-first-search.html"},{default:n(()=>[vu]),_:1}),e(),wu]),qu,t("td",Iu,[t("a",zu,[e("🀄️"),o(s)]),e(),t("a",Nu,[e("🔗"),o(s)])])]),t("tr",null,[Vu,Ku,t("td",Lu,[o(l,{to:"/problem/0589.html"},{default:n(()=>[e("[✓]")]),_:1})]),t("td",ju,[o(l,{to:"/tag/stack.html"},{default:n(()=>[Bu]),_:1}),e(),o(l,{to:"/tag/tree.html"},{default:n(()=>[Cu]),_:1}),e(),o(l,{to:"/tag/depth-first-search.html"},{default:n(()=>[Eu]),_:1})]),Ru,t("td",Tu,[t("a",Au,[e("🀄️"),o(s)]),e(),t("a",Du,[e("🔗"),o(s)])])]),t("tr",null,[Fu,Gu,t("td",Hu,[o(l,{to:"/problem/0590.html"},{default:n(()=>[e("[✓]")]),_:1})]),t("td",Ju,[o(l,{to:"/tag/stack.html"},{default:n(()=>[Mu]),_:1}),e(),o(l,{to:"/tag/tree.html"},{default:n(()=>[Ou]),_:1}),e(),o(l,{to:"/tag/depth-first-search.html"},{default:n(()=>[Pu]),_:1})]),Qu,t("td",Su,[t("a",Uu,[e("🀄️"),o(s)]),e(),t("a",Wu,[e("🔗"),o(s)])])]),t("tr",null,[Xu,Yu,Zu,t("td",$u,[o(l,{to:"/tag/tree.html"},{default:n(()=>[tm]),_:1}),e(),o(l,{to:"/tag/depth-first-search.html"},{default:n(()=>[em]),_:1}),e(),o(l,{to:"/tag/string.html"},{default:n(()=>[om]),_:1}),e(),lm]),nm,t("td",sm,[t("a",rm,[e("🀄️"),o(s)]),e(),t("a",dm,[e("🔗"),o(s)])])]),t("tr",null,[_m,cm,t("td",am,[o(l,{to:"/problem/0617.html"},{default:n(()=>[e("[✓]")]),_:1})]),t("td",im,[o(l,{to:"/tag/tree.html"},{default:n(()=>[hm]),_:1}),e(),o(l,{to:"/tag/depth-first-search.html"},{default:n(()=>[gm]),_:1}),e(),o(l,{to:"/tag/breadth-first-search.html"},{default:n(()=>[fm]),_:1}),e(),um]),mm,t("td",pm,[t("a",ym,[e("🀄️"),o(s)]),e(),t("a",bm,[e("🔗"),o(s)])])]),t("tr",null,[xm,km,vm,t("td",wm,[o(l,{to:"/tag/tree.html"},{default:n(()=>[qm]),_:1}),e(),o(l,{to:"/tag/depth-first-search.html"},{default:n(()=>[Im]),_:1}),e(),o(l,{to:"/tag/breadth-first-search.html"},{default:n(()=>[zm]),_:1}),e(),Nm]),Vm,t("td",Km,[t("a",Lm,[e("🀄️"),o(s)]),e(),t("a",jm,[e("🔗"),o(s)])])]),t("tr",null,[Bm,Cm,t("td",Em,[o(l,{to:"/problem/0637.html"},{default:n(()=>[e("[✓]")]),_:1})]),t("td",Rm,[o(l,{to:"/tag/tree.html"},{default:n(()=>[Tm]),_:1}),e(),o(l,{to:"/tag/depth-first-search.html"},{default:n(()=>[Am]),_:1}),e(),o(l,{to:"/tag/breadth-first-search.html"},{default:n(()=>[Dm]),_:1}),e(),Fm]),Gm,t("td",Hm,[t("a",Jm,[e("🀄️"),o(s)]),e(),t("a",Mm,[e("🔗"),o(s)])])]),t("tr",null,[Om,Pm,Qm,t("td",Sm,[o(l,{to:"/tag/tree.html"},{default:n(()=>[Um]),_:1}),e(),o(l,{to:"/tag/depth-first-search.html"},{default:n(()=>[Wm]),_:1}),e(),o(l,{to:"/tag/hash-table.html"},{default:n(()=>[Xm]),_:1}),e(),Ym]),Zm,t("td",$m,[t("a",tp,[e("🀄️"),o(s)]),e(),t("a",ep,[e("🔗"),o(s)])])]),t("tr",null,[op,lp,t("td",np,[o(l,{to:"/problem/0653.html"},{default:n(()=>[e("[✓]")]),_:1})]),t("td",sp,[o(l,{to:"/tag/tree.html"},{default:n(()=>[rp]),_:1}),e(),o(l,{to:"/tag/depth-first-search.html"},{default:n(()=>[dp]),_:1}),e(),o(l,{to:"/tag/breadth-first-search.html"},{default:n(()=>[_p]),_:1}),e(),cp]),ap,t("td",ip,[t("a",hp,[e("🀄️"),o(s)]),e(),t("a",gp,[e("🔗"),o(s)])])]),t("tr",null,[fp,up,t("td",mp,[o(l,{to:"/problem/0654.html"},{default:n(()=>[e("[✓]")]),_:1})]),t("td",pp,[o(l,{to:"/tag/stack.html"},{default:n(()=>[yp]),_:1}),e(),o(l,{to:"/tag/tree.html"},{default:n(()=>[bp]),_:1}),e(),o(l,{to:"/tag/array.html"},{default:n(()=>[xp]),_:1}),e(),kp]),vp,t("td",wp,[t("a",qp,[e("🀄️"),o(s)]),e(),t("a",Ip,[e("🔗"),o(s)])])]),t("tr",null,[zp,Np,Vp,t("td",Kp,[o(l,{to:"/tag/tree.html"},{default:n(()=>[Lp]),_:1}),e(),o(l,{to:"/tag/depth-first-search.html"},{default:n(()=>[jp]),_:1}),e(),o(l,{to:"/tag/breadth-first-search.html"},{default:n(()=>[Bp]),_:1}),e(),Cp]),Ep,t("td",Rp,[t("a",Tp,[e("🀄️"),o(s)]),e(),t("a",Ap,[e("🔗"),o(s)])])]),t("tr",null,[Dp,Fp,t("td",Gp,[o(l,{to:"/problem/0662.html"},{default:n(()=>[e("[✓]")]),_:1})]),t("td",Hp,[o(l,{to:"/tag/tree.html"},{default:n(()=>[Jp]),_:1}),e(),o(l,{to:"/tag/depth-first-search.html"},{default:n(()=>[Mp]),_:1}),e(),o(l,{to:"/tag/breadth-first-search.html"},{default:n(()=>[Op]),_:1}),e(),Pp]),Qp,t("td",Sp,[t("a",Up,[e("🀄️"),o(s)]),e(),t("a",Wp,[e("🔗"),o(s)])])]),t("tr",null,[Xp,Yp,Zp,t("td",$p,[o(l,{to:"/tag/tree.html"},{default:n(()=>[ty]),_:1}),e(),o(l,{to:"/tag/depth-first-search.html"},{default:n(()=>[ey]),_:1}),e(),o(l,{to:"/tag/binary-tree.html"},{default:n(()=>[oy]),_:1})]),ly,t("td",ny,[t("a",sy,[e("🀄️"),o(s)]),e(),t("a",ry,[e("🔗"),o(s)])])]),t("tr",null,[dy,_y,cy,t("td",ay,[o(l,{to:"/tag/tree.html"},{default:n(()=>[iy]),_:1}),e(),o(l,{to:"/tag/depth-first-search.html"},{default:n(()=>[hy]),_:1}),e(),o(l,{to:"/tag/array.html"},{default:n(()=>[gy]),_:1}),e(),fy]),uy,t("td",my,[t("a",py,[e("🀄️"),o(s)]),e(),t("a",yy,[e("🔗"),o(s)])])]),t("tr",null,[by,xy,ky,t("td",vy,[o(l,{to:"/tag/tree.html"},{default:n(()=>[wy]),_:1}),e(),o(l,{to:"/tag/depth-first-search.html"},{default:n(()=>[qy]),_:1}),e(),o(l,{to:"/tag/binary-search-tree.html"},{default:n(()=>[Iy]),_:1}),e(),zy]),Ny,t("td",Vy,[t("a",Ky,[e("🀄️"),o(s)]),e(),t("a",Ly,[e("🔗"),o(s)])])]),t("tr",null,[jy,By,t("td",Cy,[o(l,{to:"/problem/0671.html"},{default:n(()=>[e("[✓]")]),_:1})]),t("td",Ey,[o(l,{to:"/tag/tree.html"},{default:n(()=>[Ry]),_:1}),e(),o(l,{to:"/tag/depth-first-search.html"},{default:n(()=>[Ty]),_:1}),e(),o(l,{to:"/tag/binary-tree.html"},{default:n(()=>[Ay]),_:1})]),Dy,t("td",Fy,[t("a",Gy,[e("🀄️"),o(s)]),e(),t("a",Hy,[e("🔗"),o(s)])])]),t("tr",null,[Jy,My,Oy,t("td",Py,[o(l,{to:"/tag/tree.html"},{default:n(()=>[Qy]),_:1}),e(),o(l,{to:"/tag/depth-first-search.html"},{default:n(()=>[Sy]),_:1}),e(),o(l,{to:"/tag/binary-tree.html"},{default:n(()=>[Uy]),_:1})]),Wy,t("td",Xy,[t("a",Yy,[e("🀄️"),o(s)]),e(),t("a",Zy,[e("🔗"),o(s)])])]),t("tr",null,[$y,tb,eb,t("td",ob,[o(l,{to:"/tag/tree.html"},{default:n(()=>[lb]),_:1}),e(),o(l,{to:"/tag/depth-first-search.html"},{default:n(()=>[nb]),_:1}),e(),o(l,{to:"/tag/breadth-first-search.html"},{default:n(()=>[sb]),_:1}),e(),rb]),db,t("td",_b,[t("a",cb,[e("🀄️"),o(s)]),e(),t("a",ab,[e("🔗"),o(s)])])]),t("tr",null,[ib,hb,t("td",gb,[o(l,{to:"/problem/0700.html"},{default:n(()=>[e("[✓]")]),_:1})]),t("td",fb,[o(l,{to:"/tag/tree.html"},{default:n(()=>[ub]),_:1}),e(),o(l,{to:"/tag/binary-search-tree.html"},{default:n(()=>[mb]),_:1}),e(),o(l,{to:"/tag/binary-tree.html"},{default:n(()=>[pb]),_:1})]),yb,t("td",bb,[t("a",xb,[e("🀄️"),o(s)]),e(),t("a",kb,[e("🔗"),o(s)])])]),t("tr",null,[vb,wb,t("td",qb,[o(l,{to:"/problem/0701.html"},{default:n(()=>[e("[✓]")]),_:1})]),t("td",Ib,[o(l,{to:"/tag/tree.html"},{default:n(()=>[zb]),_:1}),e(),o(l,{to:"/tag/binary-search-tree.html"},{default:n(()=>[Nb]),_:1}),e(),o(l,{to:"/tag/binary-tree.html"},{default:n(()=>[Vb]),_:1})]),Kb,t("td",Lb,[t("a",jb,[e("🀄️"),o(s)]),e(),t("a",Bb,[e("🔗"),o(s)])])]),t("tr",null,[Cb,Eb,t("td",Rb,[o(l,{to:"/problem/0703.html"},{default:n(()=>[e("[✓]")]),_:1})]),t("td",Tb,[o(l,{to:"/tag/tree.html"},{default:n(()=>[Ab]),_:1}),e(),o(l,{to:"/tag/design.html"},{default:n(()=>[Db]),_:1}),e(),o(l,{to:"/tag/binary-search-tree.html"},{default:n(()=>[Fb]),_:1}),e(),Gb]),Hb,t("td",Jb,[t("a",Mb,[e("🀄️"),o(s)]),e(),t("a",Ob,[e("🔗"),o(s)])])]),t("tr",null,[Pb,Qb,Sb,t("td",Ub,[o(l,{to:"/tag/tree.html"},{default:n(()=>[Wb]),_:1}),e(),o(l,{to:"/tag/depth-first-search.html"},{default:n(()=>[Xb]),_:1}),e(),o(l,{to:"/tag/breadth-first-search.html"},{default:n(()=>[Yb]),_:1}),e(),Zb]),$b,t("td",t2,[t("a",e2,[e("🀄️"),o(s)]),e(),t("a",o2,[e("🔗"),o(s)])])]),t("tr",null,[l2,n2,s2,t("td",r2,[o(l,{to:"/tag/tree.html"},{default:n(()=>[d2]),_:1}),e(),o(l,{to:"/tag/binary-search-tree.html"},{default:n(()=>[_2]),_:1}),e(),o(l,{to:"/tag/recursion.html"},{default:n(()=>[c2]),_:1}),e(),a2]),i2,t("td",h2,[t("a",g2,[e("🀄️"),o(s)]),e(),t("a",f2,[e("🔗"),o(s)])])]),t("tr",null,[u2,m2,t("td",p2,[o(l,{to:"/problem/0783.html"},{default:n(()=>[e("[✓]")]),_:1})]),t("td",y2,[o(l,{to:"/tag/tree.html"},{default:n(()=>[b2]),_:1}),e(),o(l,{to:"/tag/depth-first-search.html"},{default:n(()=>[x2]),_:1}),e(),o(l,{to:"/tag/breadth-first-search.html"},{default:n(()=>[k2]),_:1}),e(),v2]),w2,t("td",q2,[t("a",I2,[e("🀄️"),o(s)]),e(),t("a",z2,[e("🔗"),o(s)])])]),t("tr",null,[N2,V2,K2,t("td",L2,[o(l,{to:"/tag/tree.html"},{default:n(()=>[j2]),_:1}),e(),o(l,{to:"/tag/depth-first-search.html"},{default:n(()=>[B2]),_:1}),e(),o(l,{to:"/tag/binary-tree.html"},{default:n(()=>[C2]),_:1})]),E2,t("td",R2,[t("a",T2,[e("🀄️"),o(s)]),e(),t("a",A2,[e("🔗"),o(s)])])]),t("tr",null,[D2,F2,G2,t("td",H2,[o(l,{to:"/tag/tree.html"},{default:n(()=>[J2]),_:1}),e(),o(l,{to:"/tag/depth-first-search.html"},{default:n(()=>[M2]),_:1}),e(),o(l,{to:"/tag/graph.html"},{default:n(()=>[O2]),_:1}),e(),P2]),Q2,t("td",S2,[t("a",U2,[e("🀄️"),o(s)]),e(),t("a",W2,[e("🔗"),o(s)])])]),t("tr",null,[X2,Y2,Z2,t("td",$2,[o(l,{to:"/tag/tree.html"},{default:n(()=>[tx]),_:1}),e(),o(l,{to:"/tag/depth-first-search.html"},{default:n(()=>[ex]),_:1}),e(),o(l,{to:"/tag/breadth-first-search.html"},{default:n(()=>[ox]),_:1}),e(),lx]),nx,t("td",sx,[t("a",rx,[e("🀄️"),o(s)]),e(),t("a",dx,[e("🔗"),o(s)])])]),t("tr",null,[_x,cx,ax,t("td",ix,[o(l,{to:"/tag/tree.html"},{default:n(()=>[hx]),_:1}),e(),o(l,{to:"/tag/depth-first-search.html"},{default:n(()=>[gx]),_:1}),e(),o(l,{to:"/tag/breadth-first-search.html"},{default:n(()=>[fx]),_:1}),e(),ux]),mx,t("td",px,[t("a",yx,[e("🀄️"),o(s)]),e(),t("a",bx,[e("🔗"),o(s)])])]),t("tr",null,[xx,kx,t("td",vx,[o(l,{to:"/problem/0872.html"},{default:n(()=>[e("[✓]")]),_:1})]),t("td",wx,[o(l,{to:"/tag/tree.html"},{default:n(()=>[qx]),_:1}),e(),o(l,{to:"/tag/depth-first-search.html"},{default:n(()=>[Ix]),_:1}),e(),o(l,{to:"/tag/binary-tree.html"},{default:n(()=>[zx]),_:1})]),Nx,t("td",Vx,[t("a",Kx,[e("🀄️"),o(s)]),e(),t("a",Lx,[e("🔗"),o(s)])])]),t("tr",null,[jx,Bx,t("td",Cx,[o(l,{to:"/problem/0889.html"},{default:n(()=>[e("[✓]")]),_:1})]),t("td",Ex,[o(l,{to:"/tag/tree.html"},{default:n(()=>[Rx]),_:1}),e(),o(l,{to:"/tag/array.html"},{default:n(()=>[Tx]),_:1}),e(),o(l,{to:"/tag/hash-table.html"},{default:n(()=>[Ax]),_:1}),e(),Dx]),Fx,t("td",Gx,[t("a",Hx,[e("🀄️"),o(s)]),e(),t("a",Jx,[e("🔗"),o(s)])])]),t("tr",null,[Mx,Ox,Px,t("td",Qx,[o(l,{to:"/tag/tree.html"},{default:n(()=>[Sx]),_:1}),e(),o(l,{to:"/tag/recursion.html"},{default:n(()=>[Ux]),_:1}),e(),o(l,{to:"/tag/memoization.html"},{default:n(()=>[Wx]),_:1}),e(),Xx]),Yx,t("td",Zx,[t("a",$x,[e("🀄️"),o(s)]),e(),t("a",t3,[e("🔗"),o(s)])])]),t("tr",null,[e3,o3,t("td",l3,[o(l,{to:"/problem/0897.html"},{default:n(()=>[e("[✓]")]),_:1})]),t("td",n3,[o(l,{to:"/tag/stack.html"},{default:n(()=>[s3]),_:1}),e(),o(l,{to:"/tag/tree.html"},{default:n(()=>[r3]),_:1}),e(),o(l,{to:"/tag/depth-first-search.html"},{default:n(()=>[d3]),_:1}),e(),_3]),c3,t("td",a3,[t("a",i3,[e("🀄️"),o(s)]),e(),t("a",h3,[e("🔗"),o(s)])])]),t("tr",null,[g3,f3,u3,t("td",m3,[o(l,{to:"/tag/tree.html"},{default:n(()=>[p3]),_:1}),e(),o(l,{to:"/tag/breadth-first-search.html"},{default:n(()=>[y3]),_:1}),e(),o(l,{to:"/tag/design.html"},{default:n(()=>[b3]),_:1}),e(),x3]),k3,t("td",v3,[t("a",w3,[e("🀄️"),o(s)]),e(),t("a",q3,[e("🔗"),o(s)])])]),t("tr",null,[I3,z3,t("td",N3,[o(l,{to:"/problem/0938.html"},{default:n(()=>[e("[✓]")]),_:1})]),t("td",V3,[o(l,{to:"/tag/tree.html"},{default:n(()=>[K3]),_:1}),e(),o(l,{to:"/tag/depth-first-search.html"},{default:n(()=>[L3]),_:1}),e(),o(l,{to:"/tag/binary-search-tree.html"},{default:n(()=>[j3]),_:1}),e(),B3]),C3,t("td",E3,[t("a",R3,[e("🀄️"),o(s)]),e(),t("a",T3,[e("🔗"),o(s)])])]),t("tr",null,[A3,D3,t("td",F3,[o(l,{to:"/problem/0951.html"},{default:n(()=>[e("[✓]")]),_:1})]),t("td",G3,[o(l,{to:"/tag/tree.html"},{default:n(()=>[H3]),_:1}),e(),o(l,{to:"/tag/depth-first-search.html"},{default:n(()=>[J3]),_:1}),e(),o(l,{to:"/tag/binary-tree.html"},{default:n(()=>[M3]),_:1})]),O3,t("td",P3,[t("a",Q3,[e("🀄️"),o(s)]),e(),t("a",S3,[e("🔗"),o(s)])])]),t("tr",null,[U3,W3,t("td",X3,[o(l,{to:"/problem/0958.html"},{default:n(()=>[e("[✓]")]),_:1})]),t("td",Y3,[o(l,{to:"/tag/tree.html"},{default:n(()=>[Z3]),_:1}),e(),o(l,{to:"/tag/breadth-first-search.html"},{default:n(()=>[$3]),_:1}),e(),o(l,{to:"/tag/binary-tree.html"},{default:n(()=>[t0]),_:1})]),e0,t("td",o0,[t("a",l0,[e("🀄️"),o(s)]),e(),t("a",n0,[e("🔗"),o(s)])])]),t("tr",null,[s0,r0,t("td",d0,[o(l,{to:"/problem/0965.html"},{default:n(()=>[e("[✓]")]),_:1})]),t("td",_0,[o(l,{to:"/tag/tree.html"},{default:n(()=>[c0]),_:1}),e(),o(l,{to:"/tag/depth-first-search.html"},{default:n(()=>[a0]),_:1}),e(),o(l,{to:"/tag/breadth-first-search.html"},{default:n(()=>[i0]),_:1}),e(),h0]),g0,t("td",f0,[t("a",u0,[e("🀄️"),o(s)]),e(),t("a",m0,[e("🔗"),o(s)])])]),t("tr",null,[p0,y0,b0,t("td",x0,[o(l,{to:"/tag/tree.html"},{default:n(()=>[k0]),_:1}),e(),o(l,{to:"/tag/depth-first-search.html"},{default:n(()=>[v0]),_:1}),e(),o(l,{to:"/tag/dynamic-programming.html"},{default:n(()=>[w0]),_:1}),e(),q0]),I0,t("td",z0,[t("a",N0,[e("🀄️"),o(s)]),e(),t("a",V0,[e("🔗"),o(s)])])]),t("tr",null,[K0,L0,j0,t("td",B0,[o(l,{to:"/tag/tree.html"},{default:n(()=>[C0]),_:1}),e(),o(l,{to:"/tag/depth-first-search.html"},{default:n(()=>[E0]),_:1}),e(),o(l,{to:"/tag/binary-tree.html"},{default:n(()=>[R0]),_:1})]),T0,t("td",A0,[t("a",D0,[e("🀄️"),o(s)]),e(),t("a",F0,[e("🔗"),o(s)])])]),t("tr",null,[G0,H0,J0,t("td",M0,[o(l,{to:"/tag/tree.html"},{default:n(()=>[O0]),_:1}),e(),o(l,{to:"/tag/depth-first-search.html"},{default:n(()=>[P0]),_:1}),e(),o(l,{to:"/tag/binary-tree.html"},{default:n(()=>[Q0]),_:1})]),S0,t("td",U0,[t("a",W0,[e("🀄️"),o(s)]),e(),t("a",X0,[e("🔗"),o(s)])])]),t("tr",null,[Y0,Z0,$0,t("td",t4,[o(l,{to:"/tag/tree.html"},{default:n(()=>[e4]),_:1}),e(),o(l,{to:"/tag/depth-first-search.html"},{default:n(()=>[o4]),_:1}),e(),o(l,{to:"/tag/breadth-first-search.html"},{default:n(()=>[l4]),_:1}),e(),n4]),s4,t("td",r4,[t("a",d4,[e("🀄️"),o(s)]),e(),t("a",_4,[e("🔗"),o(s)])])]),t("tr",null,[c4,a4,i4,t("td",h4,[o(l,{to:"/tag/tree.html"},{default:n(()=>[g4]),_:1}),e(),o(l,{to:"/tag/depth-first-search.html"},{default:n(()=>[f4]),_:1}),e(),o(l,{to:"/tag/string.html"},{default:n(()=>[u4]),_:1}),e(),m4]),p4,t("td",y4,[t("a",b4,[e("🀄️"),o(s)]),e(),t("a",x4,[e("🔗"),o(s)])])]),t("tr",null,[k4,v4,t("td",w4,[o(l,{to:"/problem/0993.html"},{default:n(()=>[e("[✓]")]),_:1})]),t("td",q4,[o(l,{to:"/tag/tree.html"},{default:n(()=>[I4]),_:1}),e(),o(l,{to:"/tag/depth-first-search.html"},{default:n(()=>[z4]),_:1}),e(),o(l,{to:"/tag/breadth-first-search.html"},{default:n(()=>[N4]),_:1}),e(),V4]),K4,t("td",L4,[t("a",j4,[e("🀄️"),o(s)]),e(),t("a",B4,[e("🔗"),o(s)])])]),t("tr",null,[C4,E4,R4,t("td",T4,[o(l,{to:"/tag/tree.html"},{default:n(()=>[A4]),_:1}),e(),o(l,{to:"/tag/binary-tree.html"},{default:n(()=>[D4]),_:1})]),F4,t("td",G4,[t("a",H4,[e("🀄️"),o(s)]),e(),t("a",J4,[e("🔗"),o(s)])])]),t("tr",null,[M4,O4,t("td",P4,[o(l,{to:"/problem/1008.html"},{default:n(()=>[e("[✓]")]),_:1})]),t("td",Q4,[o(l,{to:"/tag/stack.html"},{default:n(()=>[S4]),_:1}),e(),o(l,{to:"/tag/tree.html"},{default:n(()=>[U4]),_:1}),e(),o(l,{to:"/tag/binary-search-tree.html"},{default:n(()=>[W4]),_:1}),e(),X4]),Y4,t("td",Z4,[t("a",$4,[e("🀄️"),o(s)]),e(),t("a",t6,[e("🔗"),o(s)])])]),t("tr",null,[e6,o6,t("td",l6,[o(l,{to:"/problem/1022.html"},{default:n(()=>[e("[✓]")]),_:1})]),t("td",n6,[o(l,{to:"/tag/tree.html"},{default:n(()=>[s6]),_:1}),e(),o(l,{to:"/tag/depth-first-search.html"},{default:n(()=>[r6]),_:1}),e(),o(l,{to:"/tag/binary-tree.html"},{default:n(()=>[d6]),_:1})]),_6,t("td",c6,[t("a",a6,[e("🀄️"),o(s)]),e(),t("a",i6,[e("🔗"),o(s)])])]),t("tr",null,[h6,g6,f6,t("td",u6,[o(l,{to:"/tag/tree.html"},{default:n(()=>[m6]),_:1}),e(),o(l,{to:"/tag/depth-first-search.html"},{default:n(()=>[p6]),_:1}),e(),o(l,{to:"/tag/binary-tree.html"},{default:n(()=>[y6]),_:1})]),b6,t("td",x6,[t("a",k6,[e("🀄️"),o(s)]),e(),t("a",v6,[e("🔗"),o(s)])])]),t("tr",null,[w6,q6,t("td",I6,[o(l,{to:"/problem/1028.html"},{default:n(()=>[e("[✓]")]),_:1})]),t("td",z6,[o(l,{to:"/tag/tree.html"},{default:n(()=>[N6]),_:1}),e(),o(l,{to:"/tag/depth-first-search.html"},{default:n(()=>[V6]),_:1}),e(),o(l,{to:"/tag/string.html"},{default:n(()=>[K6]),_:1}),e(),L6]),j6,t("td",B6,[t("a",C6,[e("🀄️"),o(s)]),e(),t("a",E6,[e("🔗"),o(s)])])]),t("tr",null,[R6,T6,A6,t("td",D6,[o(l,{to:"/tag/tree.html"},{default:n(()=>[F6]),_:1}),e(),o(l,{to:"/tag/depth-first-search.html"},{default:n(()=>[G6]),_:1}),e(),o(l,{to:"/tag/binary-search-tree.html"},{default:n(()=>[H6]),_:1}),e(),J6]),M6,t("td",O6,[t("a",P6,[e("🀄️"),o(s)]),e(),t("a",Q6,[e("🔗"),o(s)])])]),t("tr",null,[S6,U6,W6,t("td",X6,[o(l,{to:"/tag/tree.html"},{default:n(()=>[Y6]),_:1}),e(),o(l,{to:"/tag/depth-first-search.html"},{default:n(()=>[Z6]),_:1}),e(),o(l,{to:"/tag/binary-tree.html"},{default:n(()=>[$6]),_:1})]),t5,t("td",e5,[t("a",o5,[e("🀄️"),o(s)]),e(),t("a",l5,[e("🔗"),o(s)])])]),t("tr",null,[n5,s5,r5,t("td",d5,[o(l,{to:"/tag/tree.html"},{default:n(()=>[_5]),_:1}),e(),o(l,{to:"/tag/math.html"},{default:n(()=>[c5]),_:1}),e(),o(l,{to:"/tag/binary-tree.html"},{default:n(()=>[a5]),_:1})]),i5,t("td",h5,[t("a",g5,[e("🀄️"),o(s)]),e(),t("a",f5,[e("🔗"),o(s)])])]),t("tr",null,[u5,m5,p5,t("td",y5,[o(l,{to:"/tag/tree.html"},{default:n(()=>[b5]),_:1}),e(),o(l,{to:"/tag/depth-first-search.html"},{default:n(()=>[x5]),_:1}),e(),o(l,{to:"/tag/array.html"},{default:n(()=>[k5]),_:1}),e(),v5]),w5,t("td",q5,[t("a",I5,[e("🀄️"),o(s)]),e(),t("a",z5,[e("🔗"),o(s)])])]),t("tr",null,[N5,V5,K5,t("td",L5,[o(l,{to:"/tag/tree.html"},{default:n(()=>[j5]),_:1}),e(),o(l,{to:"/tag/depth-first-search.html"},{default:n(()=>[B5]),_:1}),e(),o(l,{to:"/tag/binary-tree.html"},{default:n(()=>[C5]),_:1})]),E5,t("td",R5,[t("a",T5,[e("🀄️"),o(s)]),e(),t("a",A5,[e("🔗"),o(s)])])]),t("tr",null,[D5,F5,G5,t("td",H5,[o(l,{to:"/tag/tree.html"},{default:n(()=>[J5]),_:1}),e(),o(l,{to:"/tag/depth-first-search.html"},{default:n(()=>[M5]),_:1}),e(),o(l,{to:"/tag/breadth-first-search.html"},{default:n(()=>[O5]),_:1}),e(),P5]),Q5,t("td",S5,[t("a",U5,[e("🀄️"),o(s)]),e(),t("a",W5,[e("🔗"),o(s)])])]),t("tr",null,[X5,Y5,Z5,t("td",$5,[o(l,{to:"/tag/tree.html"},{default:n(()=>[t9]),_:1}),e(),o(l,{to:"/tag/depth-first-search.html"},{default:n(()=>[e9]),_:1}),e(),o(l,{to:"/tag/binary-tree.html"},{default:n(()=>[o9]),_:1})]),l9,t("td",n9,[t("a",s9,[e("🀄️"),o(s)]),e(),t("a",r9,[e("🔗"),o(s)])])]),t("tr",null,[d9,_9,t("td",c9,[o(l,{to:"/problem/1161.html"},{default:n(()=>[e("[✓]")]),_:1})]),t("td",a9,[o(l,{to:"/tag/tree.html"},{default:n(()=>[i9]),_:1}),e(),o(l,{to:"/tag/depth-first-search.html"},{default:n(()=>[h9]),_:1}),e(),o(l,{to:"/tag/breadth-first-search.html"},{default:n(()=>[g9]),_:1}),e(),f9]),u9,t("td",m9,[t("a",p9,[e("🀄️"),o(s)]),e(),t("a",y9,[e("🔗"),o(s)])])]),t("tr",null,[b9,x9,k9,t("td",v9,[o(l,{to:"/tag/stack.html"},{default:n(()=>[w9]),_:1}),e(),o(l,{to:"/tag/tree.html"},{default:n(()=>[q9]),_:1}),e(),o(l,{to:"/tag/depth-first-search.html"},{default:n(()=>[I9]),_:1}),e(),z9]),N9,t("td",V9,[t("a",K9,[e("🀄️"),o(s)]),e(),t("a",L9,[e("🔗"),o(s)])])]),t("tr",null,[j9,B9,C9,t("td",E9,[o(l,{to:"/tag/tree.html"},{default:n(()=>[R9]),_:1}),e(),o(l,{to:"/tag/depth-first-search.html"},{default:n(()=>[T9]),_:1}),e(),o(l,{to:"/tag/breadth-first-search.html"},{default:n(()=>[A9]),_:1}),e(),D9]),F9,t("td",G9,[t("a",H9,[e("🀄️"),o(s)]),e(),t("a",J9,[e("🔗"),o(s)])])]),t("tr",null,[M9,O9,P9,t("td",Q9,[o(l,{to:"/tag/tree.html"},{default:n(()=>[S9]),_:1}),e(),o(l,{to:"/tag/depth-first-search.html"},{default:n(()=>[U9]),_:1}),e(),o(l,{to:"/tag/breadth-first-search.html"},{default:n(()=>[W9]),_:1}),e(),X9]),Y9,t("td",Z9,[t("a",$9,[e("🀄️"),o(s)]),e(),t("a",t7,[e("🔗"),o(s)])])]),t("tr",null,[e7,o7,t("td",l7,[o(l,{to:"/problem/1261.html"},{default:n(()=>[e("[✓]")]),_:1})]),t("td",n7,[o(l,{to:"/tag/tree.html"},{default:n(()=>[s7]),_:1}),e(),o(l,{to:"/tag/depth-first-search.html"},{default:n(()=>[r7]),_:1}),e(),o(l,{to:"/tag/breadth-first-search.html"},{default:n(()=>[d7]),_:1}),e(),_7]),c7,t("td",a7,[t("a",i7,[e("🀄️"),o(s)]),e(),t("a",h7,[e("🔗"),o(s)])])]),t("tr",null,[g7,f7,u7,t("td",m7,[o(l,{to:"/tag/tree.html"},{default:n(()=>[p7]),_:1}),e(),o(l,{to:"/tag/depth-first-search.html"},{default:n(()=>[y7]),_:1}),e(),o(l,{to:"/tag/breadth-first-search.html"},{default:n(()=>[b7]),_:1}),e(),x7]),k7,t("td",v7,[t("a",w7,[e("🀄️"),o(s)]),e(),t("a",q7,[e("🔗"),o(s)])])]),t("tr",null,[I7,z7,N7,t("td",V7,[o(l,{to:"/tag/tree.html"},{default:n(()=>[K7]),_:1}),e(),o(l,{to:"/tag/depth-first-search.html"},{default:n(()=>[L7]),_:1}),e(),o(l,{to:"/tag/breadth-first-search.html"},{default:n(()=>[j7]),_:1}),e(),B7]),C7,t("td",E7,[t("a",R7,[e("🀄️"),o(s)]),e(),t("a",T7,[e("🔗"),o(s)])])]),t("tr",null,[A7,D7,F7,t("td",G7,[o(l,{to:"/tag/tree.html"},{default:n(()=>[H7]),_:1}),e(),o(l,{to:"/tag/depth-first-search.html"},{default:n(()=>[J7]),_:1}),e(),o(l,{to:"/tag/binary-search-tree.html"},{default:n(()=>[M7]),_:1}),e(),O7]),P7,t("td",Q7,[t("a",S7,[e("🀄️"),o(s)]),e(),t("a",U7,[e("🔗"),o(s)])])]),t("tr",null,[W7,X7,Y7,t("td",Z7,[o(l,{to:"/tag/tree.html"},{default:n(()=>[$7]),_:1}),e(),o(l,{to:"/tag/depth-first-search.html"},{default:n(()=>[t8]),_:1}),e(),o(l,{to:"/tag/breadth-first-search.html"},{default:n(()=>[e8]),_:1}),e(),o8]),l8,t("td",n8,[t("a",s8,[e("🀄️"),o(s)]),e(),t("a",r8,[e("🔗"),o(s)])])]),t("tr",null,[d8,_8,c8,t("td",a8,[o(l,{to:"/tag/tree.html"},{default:n(()=>[i8]),_:1}),e(),o(l,{to:"/tag/depth-first-search.html"},{default:n(()=>[h8]),_:1}),e(),o(l,{to:"/tag/binary-tree.html"},{default:n(()=>[g8]),_:1})]),f8,t("td",u8,[t("a",m8,[e("🀄️"),o(s)]),e(),t("a",p8,[e("🔗"),o(s)])])]),t("tr",null,[y8,b8,x8,t("td",k8,[o(l,{to:"/tag/tree.html"},{default:n(()=>[v8]),_:1}),e(),o(l,{to:"/tag/depth-first-search.html"},{default:n(()=>[w8]),_:1}),e(),o(l,{to:"/tag/binary-tree.html"},{default:n(()=>[q8]),_:1})]),I8,t("td",z8,[t("a",N8,[e("🀄️"),o(s)]),e(),t("a",V8,[e("🔗"),o(s)])])]),t("tr",null,[K8,L8,j8,t("td",B8,[o(l,{to:"/tag/tree.html"},{default:n(()=>[C8]),_:1}),e(),o(l,{to:"/tag/depth-first-search.html"},{default:n(()=>[E8]),_:1}),e(),o(l,{to:"/tag/breadth-first-search.html"},{default:n(()=>[R8]),_:1}),e(),T8]),A8,t("td",D8,[t("a",F8,[e("🀄️"),o(s)]),e(),t("a",G8,[e("🔗"),o(s)])])]),t("tr",null,[H8,J8,M8,t("td",O8,[o(l,{to:"/tag/tree.html"},{default:n(()=>[P8]),_:1}),e(),o(l,{to:"/tag/depth-first-search.html"},{default:n(()=>[Q8]),_:1}),e(),o(l,{to:"/tag/linked-list.html"},{default:n(()=>[S8]),_:1}),e(),U8]),W8,t("td",X8,[t("a",Y8,[e("🀄️"),o(s)]),e(),t("a",Z8,[e("🔗"),o(s)])])]),t("tr",null,[$8,tk,t("td",ek,[o(l,{to:"/problem/1372.html"},{default:n(()=>[e("[✓]")]),_:1})]),t("td",ok,[o(l,{to:"/tag/tree.html"},{default:n(()=>[lk]),_:1}),e(),o(l,{to:"/tag/depth-first-search.html"},{default:n(()=>[nk]),_:1}),e(),o(l,{to:"/tag/dynamic-programming.html"},{default:n(()=>[sk]),_:1}),e(),rk]),dk,t("td",_k,[t("a",ck,[e("🀄️"),o(s)]),e(),t("a",ak,[e("🔗"),o(s)])])]),t("tr",null,[ik,hk,gk,t("td",fk,[o(l,{to:"/tag/tree.html"},{default:n(()=>[uk]),_:1}),e(),o(l,{to:"/tag/depth-first-search.html"},{default:n(()=>[mk]),_:1}),e(),o(l,{to:"/tag/binary-search-tree.html"},{default:n(()=>[pk]),_:1}),e(),yk]),bk,t("td",xk,[t("a",kk,[e("🀄️"),o(s)]),e(),t("a",vk,[e("🔗"),o(s)])])]),t("tr",null,[wk,qk,Ik,t("td",zk,[o(l,{to:"/tag/tree.html"},{default:n(()=>[Nk]),_:1}),e(),o(l,{to:"/tag/depth-first-search.html"},{default:n(()=>[Vk]),_:1}),e(),o(l,{to:"/tag/breadth-first-search.html"},{default:n(()=>[Kk]),_:1})]),Lk,t("td",jk,[t("a",Bk,[e("🀄️"),o(s)]),e(),t("a",Ck,[e("🔗"),o(s)])])]),t("tr",null,[Ek,Rk,Tk,t("td",Ak,[o(l,{to:"/tag/tree.html"},{default:n(()=>[Dk]),_:1}),e(),o(l,{to:"/tag/depth-first-search.html"},{default:n(()=>[Fk]),_:1}),e(),o(l,{to:"/tag/breadth-first-search.html"},{default:n(()=>[Gk]),_:1}),e(),Hk]),Jk,t("td",Mk,[t("a",Ok,[e("🀄️"),o(s)]),e(),t("a",Pk,[e("🔗"),o(s)])])]),t("tr",null,[Qk,Sk,t("td",Uk,[o(l,{to:"/problem/1379.html"},{default:n(()=>[e("[✓]")]),_:1})]),t("td",Wk,[o(l,{to:"/tag/tree.html"},{default:n(()=>[Xk]),_:1}),e(),o(l,{to:"/tag/depth-first-search.html"},{default:n(()=>[Yk]),_:1}),e(),o(l,{to:"/tag/breadth-first-search.html"},{default:n(()=>[Zk]),_:1}),e(),$k]),tv,t("td",ev,[t("a",ov,[e("🀄️"),o(s)]),e(),t("a",lv,[e("🔗"),o(s)])])]),t("tr",null,[nv,sv,rv,t("td",dv,[o(l,{to:"/tag/greedy.html"},{default:n(()=>[_v]),_:1}),e(),o(l,{to:"/tag/tree.html"},{default:n(()=>[cv]),_:1}),e(),o(l,{to:"/tag/depth-first-search.html"},{default:n(()=>[av]),_:1}),e(),iv]),hv,t("td",gv,[t("a",fv,[e("🀄️"),o(s)]),e(),t("a",uv,[e("🔗"),o(s)])])]),t("tr",null,[mv,pv,yv,t("td",bv,[o(l,{to:"/tag/tree.html"},{default:n(()=>[xv]),_:1}),e(),o(l,{to:"/tag/depth-first-search.html"},{default:n(()=>[kv]),_:1}),e(),o(l,{to:"/tag/breadth-first-search.html"},{default:n(()=>[vv]),_:1}),e(),wv]),qv,t("td",Iv,[t("a",zv,[e("🀄️"),o(s)]),e(),t("a",Nv,[e("🔗"),o(s)])])]),t("tr",null,[Vv,Kv,Lv,t("td",jv,[o(l,{to:"/tag/tree.html"},{default:n(()=>[Bv]),_:1}),e(),o(l,{to:"/tag/depth-first-search.html"},{default:n(()=>[Cv]),_:1}),e(),o(l,{to:"/tag/breadth-first-search.html"},{default:n(()=>[Ev]),_:1}),e(),Rv]),Tv,t("td",Av,[t("a",Dv,[e("🀄️"),o(s)]),e(),t("a",Fv,[e("🔗"),o(s)])])]),t("tr",null,[Gv,Hv,t("td",Jv,[o(l,{to:"/problem/1448.html"},{default:n(()=>[e("[✓]")]),_:1})]),t("td",Mv,[o(l,{to:"/tag/tree.html"},{default:n(()=>[Ov]),_:1}),e(),o(l,{to:"/tag/depth-first-search.html"},{default:n(()=>[Pv]),_:1}),e(),o(l,{to:"/tag/breadth-first-search.html"},{default:n(()=>[Qv]),_:1}),e(),Sv]),Uv,t("td",Wv,[t("a",Xv,[e("🀄️"),o(s)]),e(),t("a",Yv,[e("🔗"),o(s)])])]),t("tr",null,[Zv,$v,tw,t("td",ew,[o(l,{to:"/tag/bit-manipulation.html"},{default:n(()=>[ow]),_:1}),e(),o(l,{to:"/tag/tree.html"},{default:n(()=>[lw]),_:1}),e(),o(l,{to:"/tag/depth-first-search.html"},{default:n(()=>[nw]),_:1}),e(),sw]),rw,t("td",dw,[t("a",_w,[e("🀄️"),o(s)]),e(),t("a",cw,[e("🔗"),o(s)])])]),t("tr",null,[aw,iw,hw,t("td",gw,[o(l,{to:"/tag/tree.html"},{default:n(()=>[fw]),_:1}),e(),o(l,{to:"/tag/depth-first-search.html"},{default:n(()=>[uw]),_:1}),e(),o(l,{to:"/tag/breadth-first-search.html"},{default:n(()=>[mw]),_:1}),e(),pw]),yw,t("td",bw,[t("a",xw,[e("🀄️"),o(s)]),e(),t("a",kw,[e("🔗"),o(s)])])]),t("tr",null,[vw,ww,qw,t("td",Iw,[o(l,{to:"/tag/tree.html"},{default:n(()=>[zw]),_:1}),e(),o(l,{to:"/tag/depth-first-search.html"},{default:n(()=>[Nw]),_:1}),e(),o(l,{to:"/tag/breadth-first-search.html"},{default:n(()=>[Vw]),_:1}),e(),Kw]),Lw,t("td",jw,[t("a",Bw,[e("🀄️"),o(s)]),e(),t("a",Cw,[e("🔗"),o(s)])])]),t("tr",null,[Ew,Rw,Tw,t("td",Aw,[o(l,{to:"/tag/tree.html"},{default:n(()=>[Dw]),_:1}),e(),o(l,{to:"/tag/depth-first-search.html"},{default:n(()=>[Fw]),_:1}),e(),o(l,{to:"/tag/breadth-first-search.html"},{default:n(()=>[Gw]),_:1}),e(),Hw]),Jw,t("td",Mw,[t("a",Ow,[e("🀄️"),o(s)]),e(),t("a",Pw,[e("🔗"),o(s)])])]),t("tr",null,[Qw,Sw,Uw,t("td",Ww,[o(l,{to:"/tag/tree.html"},{default:n(()=>[Xw]),_:1}),e(),o(l,{to:"/tag/depth-first-search.html"},{default:n(()=>[Yw]),_:1}),e(),o(l,{to:"/tag/breadth-first-search.html"},{default:n(()=>[Zw]),_:1}),e(),$w]),tq,t("td",eq,[t("a",oq,[e("🀄️"),o(s)]),e(),t("a",lq,[e("🔗"),o(s)])])]),t("tr",null,[nq,sq,rq,t("td",dq,[o(l,{to:"/tag/bit-manipulation.html"},{default:n(()=>[_q]),_:1}),e(),o(l,{to:"/tag/tree.html"},{default:n(()=>[cq]),_:1}),e(),o(l,{to:"/tag/depth-first-search.html"},{default:n(()=>[aq]),_:1}),e(),iq]),hq,t("td",gq,[t("a",fq,[e("🀄️"),o(s)]),e(),t("a",uq,[e("🔗"),o(s)])])]),t("tr",null,[mq,pq,yq,t("td",bq,[o(l,{to:"/tag/tree.html"},{default:n(()=>[xq]),_:1}),e(),o(l,{to:"/tag/depth-first-search.html"},{default:n(()=>[kq]),_:1})]),vq,t("td",wq,[t("a",qq,[e("🀄️"),o(s)]),e(),t("a",Iq,[e("🔗"),o(s)])])]),t("tr",null,[zq,Nq,Vq,t("td",Kq,[o(l,{to:"/tag/tree.html"},{default:n(()=>[Lq]),_:1}),e(),o(l,{to:"/tag/depth-first-search.html"},{default:n(()=>[jq]),_:1}),e(),o(l,{to:"/tag/breadth-first-search.html"},{default:n(()=>[Bq]),_:1}),e(),Cq]),Eq,t("td",Rq,[t("a",Tq,[e("🀄️"),o(s)]),e(),t("a",Aq,[e("🔗"),o(s)])])]),t("tr",null,[Dq,Fq,t("td",Gq,[o(l,{to:"/problem/1522.html"},{default:n(()=>[e("[✓]")]),_:1})]),t("td",Hq,[o(l,{to:"/tag/tree.html"},{default:n(()=>[Jq]),_:1}),e(),o(l,{to:"/tag/depth-first-search.html"},{default:n(()=>[Mq]),_:1})]),Oq,t("td",Pq,[t("a",Qq,[e("🀄️"),o(s)]),e(),t("a",Sq,[e("🔗"),o(s)])])]),t("tr",null,[Uq,Wq,Xq,t("td",Yq,[o(l,{to:"/tag/tree.html"},{default:n(()=>[Zq]),_:1}),e(),o(l,{to:"/tag/depth-first-search.html"},{default:n(()=>[$q]),_:1}),e(),o(l,{to:"/tag/binary-tree.html"},{default:n(()=>[tI]),_:1})]),eI,t("td",oI,[t("a",lI,[e("🀄️"),o(s)]),e(),t("a",nI,[e("🔗"),o(s)])])]),t("tr",null,[sI,rI,dI,t("td",_I,[o(l,{to:"/tag/tree.html"},{default:n(()=>[cI]),_:1}),e(),o(l,{to:"/tag/union-find.html"},{default:n(()=>[aI]),_:1}),e(),o(l,{to:"/tag/binary-search-tree.html"},{default:n(()=>[iI]),_:1}),e(),hI]),gI,t("td",fI,[t("a",uI,[e("🀄️"),o(s)]),e(),t("a",mI,[e("🔗"),o(s)])])]),t("tr",null,[pI,yI,bI,t("td",xI,[o(l,{to:"/tag/stack.html"},{default:n(()=>[kI]),_:1}),e(),o(l,{to:"/tag/tree.html"},{default:n(()=>[vI]),_:1}),e(),o(l,{to:"/tag/design.html"},{default:n(()=>[wI]),_:1}),e(),qI]),II,t("td",zI,[t("a",NI,[e("🀄️"),o(s)]),e(),t("a",VI,[e("🔗"),o(s)])])]),t("tr",null,[KI,LI,jI,t("td",BI,[o(l,{to:"/tag/stack.html"},{default:n(()=>[CI]),_:1}),e(),o(l,{to:"/tag/tree.html"},{default:n(()=>[EI]),_:1}),e(),o(l,{to:"/tag/string.html"},{default:n(()=>[RI]),_:1}),e(),TI]),AI,t("td",DI,[t("a",FI,[e("🀄️"),o(s)]),e(),t("a",GI,[e("🔗"),o(s)])])]),t("tr",null,[HI,JI,MI,t("td",OI,[o(l,{to:"/tag/tree.html"},{default:n(()=>[PI]),_:1}),e(),o(l,{to:"/tag/depth-first-search.html"},{default:n(()=>[QI]),_:1}),e(),o(l,{to:"/tag/design.html"},{default:n(()=>[SI]),_:1}),e(),UI]),WI,t("td",XI,[t("a",YI,[e("🀄️"),o(s)]),e(),t("a",ZI,[e("🔗"),o(s)])])]),t("tr",null,[$I,tz,ez,t("td",oz,[o(l,{to:"/tag/tree.html"},{default:n(()=>[lz]),_:1}),e(),o(l,{to:"/tag/breadth-first-search.html"},{default:n(()=>[nz]),_:1}),e(),o(l,{to:"/tag/binary-tree.html"},{default:n(()=>[sz]),_:1})]),rz,t("td",dz,[t("a",_z,[e("🀄️"),o(s)]),e(),t("a",cz,[e("🔗"),o(s)])])]),t("tr",null,[az,iz,hz,t("td",gz,[o(l,{to:"/tag/tree.html"},{default:n(()=>[fz]),_:1}),e(),o(l,{to:"/tag/breadth-first-search.html"},{default:n(()=>[uz]),_:1}),e(),o(l,{to:"/tag/binary-tree.html"},{default:n(()=>[mz]),_:1})]),pz,t("td",yz,[t("a",bz,[e("🀄️"),o(s)]),e(),t("a",xz,[e("🔗"),o(s)])])]),t("tr",null,[kz,vz,wz,t("td",qz,[o(l,{to:"/tag/tree.html"},{default:n(()=>[Iz]),_:1}),e(),o(l,{to:"/tag/depth-first-search.html"},{default:n(()=>[zz]),_:1}),e(),o(l,{to:"/tag/hash-table.html"},{default:n(()=>[Nz]),_:1}),e(),Vz]),Kz,t("td",Lz,[t("a",jz,[e("🀄️"),o(s)]),e(),t("a",Bz,[e("🔗"),o(s)])])]),t("tr",null,[Cz,Ez,Rz,t("td",Tz,[o(l,{to:"/tag/bit-manipulation.html"},{default:n(()=>[Az]),_:1}),e(),o(l,{to:"/tag/tree.html"},{default:n(()=>[Dz]),_:1}),e(),o(l,{to:"/tag/dynamic-programming.html"},{default:n(()=>[Fz]),_:1}),e(),Gz]),Hz,t("td",Jz,[t("a",Mz,[e("🀄️"),o(s)]),e(),t("a",Oz,[e("🔗"),o(s)])])]),t("tr",null,[Pz,Qz,Sz,t("td",Uz,[o(l,{to:"/tag/stack.html"},{default:n(()=>[Wz]),_:1}),e(),o(l,{to:"/tag/tree.html"},{default:n(()=>[Xz]),_:1}),e(),o(l,{to:"/tag/design.html"},{default:n(()=>[Yz]),_:1}),e(),Zz]),$z,t("td",tN,[t("a",eN,[e("🀄️"),o(s)]),e(),t("a",oN,[e("🔗"),o(s)])])]),t("tr",null,[lN,nN,sN,t("td",rN,[o(l,{to:"/tag/tree.html"},{default:n(()=>[dN]),_:1}),e(),o(l,{to:"/tag/depth-first-search.html"},{default:n(()=>[_N]),_:1}),e(),o(l,{to:"/tag/binary-tree.html"},{default:n(()=>[cN]),_:1})]),aN,t("td",iN,[t("a",hN,[e("🀄️"),o(s)]),e(),t("a",gN,[e("🔗"),o(s)])])]),t("tr",null,[fN,uN,mN,t("td",pN,[o(l,{to:"/tag/tree.html"},{default:n(()=>[yN]),_:1}),e(),o(l,{to:"/tag/hash-table.html"},{default:n(()=>[bN]),_:1}),e(),o(l,{to:"/tag/two-pointers.html"},{default:n(()=>[xN]),_:1}),e(),kN]),vN,t("td",wN,[t("a",qN,[e("🀄️"),o(s)]),e(),t("a",IN,[e("🔗"),o(s)])])]),t("tr",null,[zN,NN,VN,t("td",KN,[o(l,{to:"/tag/tree.html"},{default:n(()=>[LN]),_:1}),e(),o(l,{to:"/tag/depth-first-search.html"},{default:n(()=>[jN]),_:1}),e(),o(l,{to:"/tag/breadth-first-search.html"},{default:n(()=>[BN]),_:1}),e(),CN]),EN,t("td",RN,[t("a",TN,[e("🀄️"),o(s)]),e(),t("a",AN,[e("🔗"),o(s)])])]),t("tr",null,[DN,FN,GN,t("td",HN,[o(l,{to:"/tag/tree.html"},{default:n(()=>[JN]),_:1}),e(),o(l,{to:"/tag/depth-first-search.html"},{default:n(()=>[MN]),_:1}),e(),o(l,{to:"/tag/binary-tree.html"},{default:n(()=>[ON]),_:1})]),PN,t("td",QN,[t("a",SN,[e("🀄️"),o(s)]),e(),t("a",UN,[e("🔗"),o(s)])])]),t("tr",null,[WN,XN,YN,t("td",ZN,[o(l,{to:"/tag/tree.html"},{default:n(()=>[$N]),_:1}),e(),o(l,{to:"/tag/depth-first-search.html"},{default:n(()=>[tV]),_:1}),e(),o(l,{to:"/tag/hash-table.html"},{default:n(()=>[eV]),_:1}),e(),oV]),lV,t("td",nV,[t("a",sV,[e("🀄️"),o(s)]),e(),t("a",rV,[e("🔗"),o(s)])])]),t("tr",null,[dV,_V,cV,t("td",aV,[o(l,{to:"/tag/tree.html"},{default:n(()=>[iV]),_:1}),e(),o(l,{to:"/tag/graph.html"},{default:n(()=>[hV]),_:1})]),gV,t("td",fV,[t("a",uV,[e("🀄️"),o(s)]),e(),t("a",mV,[e("🔗"),o(s)])])]),t("tr",null,[pV,yV,bV,t("td",xV,[o(l,{to:"/tag/tree.html"},{default:n(()=>[kV]),_:1}),e(),o(l,{to:"/tag/depth-first-search.html"},{default:n(()=>[vV]),_:1}),e(),o(l,{to:"/tag/breadth-first-search.html"},{default:n(()=>[wV]),_:1}),e(),qV]),IV,t("td",zV,[t("a",NV,[e("🀄️"),o(s)]),e(),t("a",VV,[e("🔗"),o(s)])])]),t("tr",null,[KV,LV,jV,t("td",BV,[o(l,{to:"/tag/tree.html"},{default:n(()=>[CV]),_:1}),e(),o(l,{to:"/tag/depth-first-search.html"},{default:n(()=>[EV]),_:1}),e(),o(l,{to:"/tag/array.html"},{default:n(()=>[RV]),_:1}),e(),TV]),AV,t("td",DV,[t("a",FV,[e("🀄️"),o(s)]),e(),t("a",GV,[e("🔗"),o(s)])])]),t("tr",null,[HV,JV,MV,t("td",OV,[o(l,{to:"/tag/tree.html"},{default:n(()=>[PV]),_:1}),e(),o(l,{to:"/tag/binary-search-tree.html"},{default:n(()=>[QV]),_:1}),e(),o(l,{to:"/tag/array.html"},{default:n(()=>[SV]),_:1}),e(),UV]),WV,t("td",XV,[t("a",YV,[e("🀄️"),o(s)]),e(),t("a",ZV,[e("🔗"),o(s)])])]),t("tr",null,[$V,tK,eK,t("td",oK,[o(l,{to:"/tag/tree.html"},{default:n(()=>[lK]),_:1}),e(),o(l,{to:"/tag/graph.html"},{default:n(()=>[nK]),_:1}),e(),o(l,{to:"/tag/topological-sort.html"},{default:n(()=>[sK]),_:1}),e(),rK]),dK,t("td",_K,[t("a",cK,[e("🀄️"),o(s)]),e(),t("a",aK,[e("🔗"),o(s)])])]),t("tr",null,[iK,hK,gK,t("td",fK,[o(l,{to:"/tag/tree.html"},{default:n(()=>[uK]),_:1}),e(),o(l,{to:"/tag/depth-first-search.html"},{default:n(()=>[mK]),_:1}),e(),o(l,{to:"/tag/hash-table.html"},{default:n(()=>[pK]),_:1}),e(),yK]),bK,t("td",xK,[t("a",kK,[e("🀄️"),o(s)]),e(),t("a",vK,[e("🔗"),o(s)])])]),t("tr",null,[wK,qK,IK,t("td",zK,[o(l,{to:"/tag/tree.html"},{default:n(()=>[NK]),_:1}),e(),o(l,{to:"/tag/depth-first-search.html"},{default:n(()=>[VK]),_:1}),e(),o(l,{to:"/tag/binary-tree.html"},{default:n(()=>[KK]),_:1})]),LK,t("td",jK,[t("a",BK,[e("🀄️"),o(s)]),e(),t("a",CK,[e("🔗"),o(s)])])]),t("tr",null,[EK,RK,TK,t("td",AK,[o(l,{to:"/tag/tree.html"},{default:n(()=>[DK]),_:1}),e(),o(l,{to:"/tag/depth-first-search.html"},{default:n(()=>[FK]),_:1}),e(),o(l,{to:"/tag/breadth-first-search.html"},{default:n(()=>[GK]),_:1}),e(),HK]),JK,t("td",MK,[t("a",OK,[e("🀄️"),o(s)]),e(),t("a",PK,[e("🔗"),o(s)])])]),t("tr",null,[QK,SK,UK,t("td",WK,[o(l,{to:"/tag/tree.html"},{default:n(()=>[XK]),_:1}),e(),o(l,{to:"/tag/depth-first-search.html"},{default:n(()=>[YK]),_:1}),e(),o(l,{to:"/tag/union-find.html"},{default:n(()=>[ZK]),_:1}),e(),$K]),tL,t("td",eL,[t("a",oL,[e("🀄️"),o(s)]),e(),t("a",lL,[e("🔗"),o(s)])])]),t("tr",null,[nL,sL,rL,t("td",dL,[o(l,{to:"/tag/tree.html"},{default:n(()=>[_L]),_:1}),e(),o(l,{to:"/tag/math.html"},{default:n(()=>[cL]),_:1}),e(),o(l,{to:"/tag/dynamic-programming.html"},{default:n(()=>[aL]),_:1}),e(),iL]),hL,t("td",gL,[t("a",fL,[e("🀄️"),o(s)]),e(),t("a",uL,[e("🔗"),o(s)])])]),t("tr",null,[mL,pL,yL,t("td",bL,[o(l,{to:"/tag/tree.html"},{default:n(()=>[xL]),_:1}),e(),o(l,{to:"/tag/depth-first-search.html"},{default:n(()=>[kL]),_:1}),e(),o(l,{to:"/tag/array.html"},{default:n(()=>[vL]),_:1}),e(),wL]),qL,t("td",IL,[t("a",zL,[e("🀄️"),o(s)]),e(),t("a",NL,[e("🔗"),o(s)])])]),t("tr",null,[VL,KL,LL,t("td",jL,[o(l,{to:"/tag/tree.html"},{default:n(()=>[BL]),_:1}),e(),o(l,{to:"/tag/depth-first-search.html"},{default:n(()=>[CL]),_:1}),e(),o(l,{to:"/tag/string.html"},{default:n(()=>[EL]),_:1}),e(),RL]),TL,t("td",AL,[t("a",DL,[e("🀄️"),o(s)]),e(),t("a",FL,[e("🔗"),o(s)])])]),t("tr",null,[GL,HL,t("td",JL,[o(l,{to:"/problem/2196.html"},{default:n(()=>[e("[✓]")]),_:1})]),t("td",ML,[o(l,{to:"/tag/tree.html"},{default:n(()=>[OL]),_:1}),e(),o(l,{to:"/tag/array.html"},{default:n(()=>[PL]),_:1}),e(),o(l,{to:"/tag/hash-table.html"},{default:n(()=>[QL]),_:1}),e(),SL]),UL,t("td",WL,[t("a",XL,[e("🀄️"),o(s)]),e(),t("a",YL,[e("🔗"),o(s)])])]),t("tr",null,[ZL,$L,t("td",tj,[o(l,{to:"/problem/2236.html"},{default:n(()=>[e("[✓]")]),_:1})]),t("td",ej,[o(l,{to:"/tag/tree.html"},{default:n(()=>[oj]),_:1}),e(),o(l,{to:"/tag/binary-tree.html"},{default:n(()=>[lj]),_:1})]),nj,t("td",sj,[t("a",rj,[e("🀄️"),o(s)]),e(),t("a",dj,[e("🔗"),o(s)])])]),t("tr",null,[_j,cj,aj,t("td",ij,[o(l,{to:"/tag/tree.html"},{default:n(()=>[hj]),_:1}),e(),o(l,{to:"/tag/depth-first-search.html"},{default:n(()=>[gj]),_:1}),e(),o(l,{to:"/tag/graph.html"},{default:n(()=>[fj]),_:1}),e(),uj]),mj,t("td",pj,[t("a",yj,[e("🀄️"),o(s)]),e(),t("a",bj,[e("🔗"),o(s)])])]),t("tr",null,[xj,kj,vj,t("td",wj,[o(l,{to:"/tag/tree.html"},{default:n(()=>[qj]),_:1}),e(),o(l,{to:"/tag/depth-first-search.html"},{default:n(()=>[Ij]),_:1}),e(),o(l,{to:"/tag/binary-tree.html"},{default:n(()=>[zj]),_:1})]),Nj,t("td",Vj,[t("a",Kj,[e("🀄️"),o(s)]),e(),t("a",Lj,[e("🔗"),o(s)])])]),t("tr",null,[jj,Bj,Cj,t("td",Ej,[o(l,{to:"/tag/tree.html"},{default:n(()=>[Rj]),_:1}),e(),o(l,{to:"/tag/depth-first-search.html"},{default:n(()=>[Tj]),_:1}),e(),o(l,{to:"/tag/breadth-first-search.html"},{default:n(()=>[Aj]),_:1}),e(),Dj]),Fj,t("td",Gj,[t("a",Hj,[e("🀄️"),o(s)]),e(),t("a",Jj,[e("🔗"),o(s)])])]),t("tr",null,[Mj,Oj,Pj,t("td",Qj,[o(l,{to:"/tag/tree.html"},{default:n(()=>[Sj]),_:1}),e(),o(l,{to:"/tag/depth-first-search.html"},{default:n(()=>[Uj]),_:1}),e(),o(l,{to:"/tag/dynamic-programming.html"},{default:n(()=>[Wj]),_:1}),e(),Xj]),Yj,t("td",Zj,[t("a",$j,[e("🀄️"),o(s)]),e(),t("a",tB,[e("🔗"),o(s)])])]),t("tr",null,[eB,oB,lB,t("td",nB,[o(l,{to:"/tag/bit-manipulation.html"},{default:n(()=>[sB]),_:1}),e(),o(l,{to:"/tag/tree.html"},{default:n(()=>[rB]),_:1}),e(),o(l,{to:"/tag/depth-first-search.html"},{default:n(()=>[dB]),_:1}),e(),_B]),cB,t("td",aB,[t("a",iB,[e("🀄️"),o(s)]),e(),t("a",hB,[e("🔗"),o(s)])])]),t("tr",null,[gB,fB,t("td",uB,[o(l,{to:"/problem/2331.html"},{default:n(()=>[e("[✓]")]),_:1})]),t("td",mB,[o(l,{to:"/tag/tree.html"},{default:n(()=>[pB]),_:1}),e(),o(l,{to:"/tag/depth-first-search.html"},{default:n(()=>[yB]),_:1}),e(),o(l,{to:"/tag/binary-tree.html"},{default:n(()=>[bB]),_:1})]),xB,t("td",kB,[t("a",vB,[e("🀄️"),o(s)]),e(),t("a",wB,[e("🔗"),o(s)])])]),t("tr",null,[qB,IB,zB,t("td",NB,[o(l,{to:"/tag/tree.html"},{default:n(()=>[VB]),_:1}),e(),o(l,{to:"/tag/depth-first-search.html"},{default:n(()=>[KB]),_:1}),e(),o(l,{to:"/tag/breadth-first-search.html"},{default:n(()=>[LB]),_:1}),e(),jB]),BB,t("td",CB,[t("a",EB,[e("🀄️"),o(s)]),e(),t("a",RB,[e("🔗"),o(s)])])]),t("tr",null,[TB,AB,DB,t("td",FB,[o(l,{to:"/tag/tree.html"},{default:n(()=>[GB]),_:1}),e(),o(l,{to:"/tag/depth-first-search.html"},{default:n(()=>[HB]),_:1}),e(),o(l,{to:"/tag/dynamic-programming.html"},{default:n(()=>[JB]),_:1})]),MB,t("td",OB,[t("a",PB,[e("🀄️"),o(s)]),e(),t("a",QB,[e("🔗"),o(s)])])]),t("tr",null,[SB,UB,WB,t("td",XB,[o(l,{to:"/tag/tree.html"},{default:n(()=>[YB]),_:1}),e(),o(l,{to:"/tag/depth-first-search.html"},{default:n(()=>[ZB]),_:1}),e(),o(l,{to:"/tag/breadth-first-search.html"},{default:n(()=>[$B]),_:1}),e(),tC]),eC,t("td",oC,[t("a",lC,[e("🀄️"),o(s)]),e(),t("a",nC,[e("🔗"),o(s)])])]),t("tr",null,[sC,rC,t("td",dC,[o(l,{to:"/problem/2415.html"},{default:n(()=>[e("[✓]")]),_:1})]),t("td",_C,[o(l,{to:"/tag/tree.html"},{default:n(()=>[cC]),_:1}),e(),o(l,{to:"/tag/depth-first-search.html"},{default:n(()=>[aC]),_:1}),e(),o(l,{to:"/tag/breadth-first-search.html"},{default:n(()=>[iC]),_:1}),e(),hC]),gC,t("td",fC,[t("a",uC,[e("🀄️"),o(s)]),e(),t("a",mC,[e("🔗"),o(s)])])]),t("tr",null,[pC,yC,bC,t("td",xC,[o(l,{to:"/tag/tree.html"},{default:n(()=>[kC]),_:1}),e(),o(l,{to:"/tag/union-find.html"},{default:n(()=>[vC]),_:1}),e(),o(l,{to:"/tag/graph.html"},{default:n(()=>[wC]),_:1}),e(),qC]),IC,t("td",zC,[t("a",NC,[e("🀄️"),o(s)]),e(),t("a",VC,[e("🔗"),o(s)])])]),t("tr",null,[KC,LC,jC,t("td",BC,[o(l,{to:"/tag/tree.html"},{default:n(()=>[CC]),_:1}),e(),o(l,{to:"/tag/depth-first-search.html"},{default:n(()=>[EC]),_:1}),e(),o(l,{to:"/tag/array.html"},{default:n(()=>[RC]),_:1}),e(),TC]),AC,t("td",DC,[t("a",FC,[e("🀄️"),o(s)]),e(),t("a",GC,[e("🔗"),o(s)])])]),t("tr",null,[HC,JC,MC,t("td",OC,[o(l,{to:"/tag/tree.html"},{default:n(()=>[PC]),_:1}),e(),o(l,{to:"/tag/depth-first-search.html"},{default:n(()=>[QC]),_:1}),e(),o(l,{to:"/tag/breadth-first-search.html"},{default:n(()=>[SC]),_:1}),e(),UC]),WC,t("td",XC,[t("a",YC,[e("🀄️"),o(s)]),e(),t("a",ZC,[e("🔗"),o(s)])])])])])])}const lE=d(i,[["render",$C],["__file","tree.html.vue"]]);export{lE as default};
