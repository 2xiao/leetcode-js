import{_ as l,r as o,o as i,c as u,a as n,b as s,d as a,w as t,e as r}from"./app-fBVbqwGY.js";const d={},m=n("h1",{id:"_2342-数位和相等数对的最大和",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_2342-数位和相等数对的最大和","aria-hidden":"true"},"#"),s(" 2342. 数位和相等数对的最大和")],-1),k=n("code",null,"数组",-1),h=n("code",null,"哈希表",-1),v=n("code",null,"排序",-1),g=n("code",null,"堆（优先队列）",-1),b={href:"https://leetcode.cn/problems/max-sum-of-a-pair-with-equal-sum-of-digits",target:"_blank",rel:"noopener noreferrer"},f=n("code",null,"力扣",-1),_={href:"https://leetcode.com/problems/max-sum-of-a-pair-with-equal-sum-of-digits",target:"_blank",rel:"noopener noreferrer"},x=n("code",null,"LeetCode",-1),w=r(`<h2 id="题目" tabindex="-1"><a class="header-anchor" href="#题目" aria-hidden="true">#</a> 题目</h2><p>You are given a <strong>0-indexed</strong> array <code>nums</code> consisting of <strong>positive</strong> integers. You can choose two indices <code>i</code> and <code>j</code>, such that <code>i != j</code>, and the sum of digits of the number <code>nums[i]</code> is equal to that of <code>nums[j]</code>.</p><p>Return <em>the <strong>maximum</strong> value of</em> <code>nums[i] + nums[j]</code><em>that you can obtain over all possible indices</em> <code>i</code> <em>and</em><code>j</code> <em>that satisfy the conditions.</em></p><p><strong>Example 1:</strong></p><blockquote><p>Input: nums = [18,43,36,13,7]</p><p>Output: 54</p><p>Explanation: The pairs (i, j) that satisfy the conditions are:</p><ul><li>(0, 2), both numbers have a sum of digits equal to 9, and their sum is 18 + 36 = 54.</li><li>(1, 4), both numbers have a sum of digits equal to 7, and their sum is 43 + 7 = 50.</li></ul><p>So the maximum sum that we can obtain is 54.</p></blockquote><p><strong>Example 2:</strong></p><blockquote><p>Input: nums = [10,12,19,14]</p><p>Output: -1</p><p>Explanation: There are no two numbers that satisfy the conditions, so we return -1.</p></blockquote><p><strong>Constraints:</strong></p><ul><li><code>1 &lt;= nums.length &lt;= 10^5</code></li><li><code>1 &lt;= nums[i] &lt;= 10^9</code></li></ul><h2 id="题目大意" tabindex="-1"><a class="header-anchor" href="#题目大意" aria-hidden="true">#</a> 题目大意</h2><p>给你一个下标从 <strong>0</strong> 开始的数组 <code>nums</code> ，数组中的元素都是 <strong>正</strong> 整数。请你选出两个下标 <code>i</code> 和 <code>j</code>（<code>i != j</code>），且 <code>nums[i]</code> 的数位和 与 <code>nums[j]</code> 的数位和相等。</p><p>请你找出所有满足条件的下标 <code>i</code> 和 <code>j</code> ，找出并返回 <strong><code>nums[i] + nums[j]</code></strong> 可以得到的 <strong>最大值</strong> <em>。</em></p><p><strong>示例 1：</strong></p><blockquote><p><strong>输入：</strong> nums = [18,43,36,13,7]</p><p><strong>输出：</strong> 54</p><p><strong>解释：</strong> 满足条件的数对 (i, j) 为：</p><ul><li>(0, 2) ，两个数字的数位和都是 9 ，相加得到 18 + 36 = 54 。</li><li>(1, 4) ，两个数字的数位和都是 7 ，相加得到 43 + 7 = 50 。</li></ul><p>所以可以获得的最大和是 54 。</p></blockquote><p><strong>示例 2：</strong></p><blockquote><p><strong>输入：</strong> nums = [10,12,19,14]</p><p><strong>输出：</strong> -1</p><p><strong>解释：</strong> 不存在满足条件的数对，返回 -1 。</p></blockquote><p><strong>提示：</strong></p><ul><li><code>1 &lt;= nums.length &lt;= 10^5</code></li><li><code>1 &lt;= nums[i] &lt;= 10^9</code></li></ul><h2 id="解题思路" tabindex="-1"><a class="header-anchor" href="#解题思路" aria-hidden="true">#</a> 解题思路</h2><ol><li><strong>遍历 <code>nums</code>，计算每个数的数位和 <code>sum</code></strong></li><li><strong>用哈希表 <code>map</code> 记录每种数位和对应的最大数</strong><ul><li>如果该 <code>sum</code> <strong>已经在 <code>map</code> 中</strong>，则计算该值和当前数的和，并更新最大和： <ul><li>取出之前存储的最大值 <code>another</code>，计算 <code>num + another</code>，更新 <code>max</code>。</li><li>如果 <code>num</code> 比 <code>another</code> 大，则替换 <code>map[sum] = num</code>。</li></ul></li><li>否则，直接存入 <code>map[sum] = num</code>。</li></ul></li><li><strong>返回 <code>max</code>，若无匹配则返回 <code>-1</code></strong>。</li></ol><h4 id="复杂度分析" tabindex="-1"><a class="header-anchor" href="#复杂度分析" aria-hidden="true">#</a> 复杂度分析</h4><ul><li><strong>时间复杂度</strong>：<code>O(n)</code>，其中 <code>n</code> 是 <code>nums</code> 的长度，需要遍历 <code>nums</code>。</li><li><strong>空间复杂度</strong>：<code>O(n)</code>，哈希表最坏情况下要记录 <code>n</code> 个数位和。</li></ul><h2 id="代码" tabindex="-1"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span> <span class="token parameter">nums</span>
 * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">}</span></span>
 */</span>
<span class="token keyword">var</span> <span class="token function-variable function">maximumSum</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">nums</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">let</span> max <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 记录最大数对和</span>
	<span class="token keyword">let</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 记录每个数位和对应的最大数</span>

	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> num <span class="token keyword">of</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token comment">// 计算 num 的数位和</span>
		<span class="token keyword">let</span> temp <span class="token operator">=</span> num<span class="token punctuation">,</span>
			sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
		<span class="token keyword">while</span> <span class="token punctuation">(</span>temp <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			sum <span class="token operator">+=</span> temp <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">;</span>
			temp <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>temp <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>

		<span class="token comment">// 如果这个数位和已经存在，则尝试更新最大和</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">const</span> another <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span>
			max <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>max<span class="token punctuation">,</span> num <span class="token operator">+</span> another<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 计算当前最大和</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span>another <span class="token operator">&lt;</span> num<span class="token punctuation">)</span> <span class="token punctuation">{</span>
				map<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>sum<span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 更新更大的数</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
			map<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>sum<span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 存入初始最大值</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> max<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,24);function y(j,q){const c=o("font"),e=o("RouterLink"),p=o("ExternalLinkIcon");return i(),u("div",null,[m,n("p",null,[s("🟠 "),a(c,{color:"#ffb800"},{default:t(()=>[s("Medium")]),_:1}),s("  🔖  "),a(e,{to:"/tag/array.html"},{default:t(()=>[k]),_:1}),s(),a(e,{to:"/tag/hash-table.html"},{default:t(()=>[h]),_:1}),s(),a(e,{to:"/tag/sorting.html"},{default:t(()=>[v]),_:1}),s(),a(e,{to:"/tag/heap-priority-queue.html"},{default:t(()=>[g]),_:1}),s("  🔗 "),n("a",b,[f,a(p)]),s(),n("a",_,[x,a(p)])]),w])}const L=l(d,[["render",y],["__file","2342.html.vue"]]);export{L as default};
