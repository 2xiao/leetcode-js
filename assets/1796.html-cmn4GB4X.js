import{_ as p,r as c,o as i,c as r,a as n,b as s,d as t,w as e,f as d,e as u}from"./app-fBVbqwGY.js";const k={},h=n("h1",{id:"_1796-字符串中第二大的数字",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_1796-字符串中第二大的数字","aria-hidden":"true"},"#"),s(" 1796. 字符串中第二大的数字")],-1),m=n("code",null,"哈希表",-1),g=n("code",null,"字符串",-1),_={href:"https://leetcode.cn/problems/second-largest-digit-in-a-string",target:"_blank",rel:"noopener noreferrer"},b=n("code",null,"力扣",-1),v={href:"https://leetcode.com/problems/second-largest-digit-in-a-string",target:"_blank",rel:"noopener noreferrer"},f=n("code",null,"LeetCode",-1),x=u(`<h2 id="题目" tabindex="-1"><a class="header-anchor" href="#题目" aria-hidden="true">#</a> 题目</h2><p>Given an alphanumeric string <code>s</code>, return _the<strong>second largest</strong> numerical digit that appears in _<code>s</code> <em>, or</em><code>-1</code> <em>if it does not exist</em>.</p><p>An <strong>alphanumeric****</strong> string is a string consisting of lowercase English letters and digits.</p><p><strong>Example 1:</strong></p><blockquote><p>Input: s = &quot;dfa12321afd&quot;</p><p>Output: 2</p><p>Explanation: The digits that appear in s are [1, 2, 3]. The second largest digit is 2.</p></blockquote><p><strong>Example 2:</strong></p><blockquote><p>Input: s = &quot;abc1111&quot;</p><p>Output: -1</p><p>Explanation: The digits that appear in s are [1]. There is no second largest digit.</p></blockquote><p><strong>Constraints:</strong></p><ul><li><code>1 &lt;= s.length &lt;= 500</code></li><li><code>s</code> consists of only lowercase English letters and digits.</li></ul><h2 id="题目大意" tabindex="-1"><a class="header-anchor" href="#题目大意" aria-hidden="true">#</a> 题目大意</h2><p>给你一个混合字符串 <code>s</code> ，请你返回 <code>s</code> 中 <strong>第二大</strong> 的数字，如果不存在第二大的数字，请你返回 <code>-1</code> 。</p><p><strong>混合字符串</strong> 由小写英文字母和数字组成。</p><p><strong>示例 1：</strong></p><blockquote><p><strong>输入：</strong> s = &quot;dfa12321afd&quot;</p><p><strong>输出：</strong> 2</p><p><strong>解释：</strong> 出现在 s 中的数字包括 [1, 2, 3] 。第二大的数字是 2 。</p></blockquote><p><strong>示例 2：</strong></p><blockquote><p><strong>输入：</strong> s = &quot;abc1111&quot;</p><p><strong>输出：</strong> -1</p><p><strong>解释：</strong> 出现在 s 中的数字只包含 [1] 。没有第二大的数字。</p></blockquote><p><strong>提示：</strong></p><ul><li><code>1 &lt;= s.length &lt;= 500</code></li><li><code>s</code> 只包含小写英文字母和（或）数字。</li></ul><h2 id="解题思路" tabindex="-1"><a class="header-anchor" href="#解题思路" aria-hidden="true">#</a> 解题思路</h2><ul><li>使用 <code>max</code> 来追踪最大数字，<code>second</code> 来追踪第二大的数字。</li><li>遍历字符串，对于每个字符： <ul><li>如果该字符是数字（使用 <code>isNaN(char)</code> 来检查），将其转换为数字。</li><li>如果数字等于当前的最大数字 <code>max</code>，跳过该字符。</li><li>如果数字大于当前最大值 <code>max</code>，则更新 <code>second</code> 为 <code>max</code>，然后更新 <code>max</code>。</li><li>如果数字小于 <code>max</code> 且大于 <code>second</code>，则更新 <code>second</code>。</li></ul></li><li>遍历完成后，如果 <code>second</code> 仍然是初始值 <code>-1</code>，说明没有第二大的数字，返回 <code>-1</code>。</li></ul><h4 id="复杂度分析" tabindex="-1"><a class="header-anchor" href="#复杂度分析" aria-hidden="true">#</a> 复杂度分析</h4><ul><li><strong>时间复杂度</strong>：<code>O(n)</code>，其中 <code>n</code> 是字符串的长度，遍历字符串一次。</li><li><strong>空间复杂度</strong>：<code>O(1)</code>，用了常数空间来存储 <code>max</code> 和 <code>second</code>。</li></ul><h2 id="代码" tabindex="-1"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>string<span class="token punctuation">}</span></span> <span class="token parameter">s</span>
 * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">}</span></span>
 */</span>
<span class="token keyword">var</span> <span class="token function-variable function">secondHighest</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">s</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">let</span> max <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>
		second <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> char <span class="token keyword">of</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isNaN</span><span class="token punctuation">(</span>char<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">const</span> num <span class="token operator">=</span> <span class="token function">Number</span><span class="token punctuation">(</span>char<span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">==</span> max<span class="token punctuation">)</span> <span class="token punctuation">{</span>
				<span class="token keyword">continue</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">&gt;</span> max<span class="token punctuation">)</span> <span class="token punctuation">{</span>
				second <span class="token operator">=</span> max<span class="token punctuation">;</span>
				max <span class="token operator">=</span> num<span class="token punctuation">;</span>
			<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">&gt;</span> second<span class="token punctuation">)</span> <span class="token punctuation">{</span>
				second <span class="token operator">=</span> num<span class="token punctuation">;</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> second<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="相关题目" tabindex="-1"><a class="header-anchor" href="#相关题目" aria-hidden="true">#</a> 相关题目</h2>`,25),y=n("thead",null,[n("tr",null,[n("th",{style:{"text-align":"center"}},"题号"),n("th",{style:{"text-align":"left"}},"标题"),n("th",{style:{"text-align":"center"}},"题解"),n("th",{style:{"text-align":"left"}},"标签"),n("th",{style:{"text-align":"center"}},"难度"),n("th",{style:{"text-align":"center"}},"力扣")])],-1),w=n("td",{style:{"text-align":"center"}},"2259",-1),q=n("td",{style:{"text-align":"left"}},"移除指定数字得到的最大结果",-1),E={style:{"text-align":"center"}},N={style:{"text-align":"left"}},C=n("code",null,"贪心",-1),L=n("code",null,"字符串",-1),T=n("code",null,"枚举",-1),V=n("td",{style:{"text-align":"center"}},"🟢",-1),I={style:{"text-align":"center"}},O={href:"https://leetcode.cn/problems/remove-digit-from-number-to-maximize-result",target:"_blank",rel:"noopener noreferrer"},j={href:"https://leetcode.com/problems/remove-digit-from-number-to-maximize-result",target:"_blank",rel:"noopener noreferrer"};function B(z,R){const l=c("font"),a=c("RouterLink"),o=c("ExternalLinkIcon");return i(),r("div",null,[h,n("p",null,[s("🟢 "),t(l,{color:"#15bd66"},{default:e(()=>[s("Easy")]),_:1}),s("  🔖  "),t(a,{to:"/tag/hash-table.html"},{default:e(()=>[m]),_:1}),s(),t(a,{to:"/tag/string.html"},{default:e(()=>[g]),_:1}),s("  🔗 "),n("a",_,[b,t(o)]),s(),n("a",v,[f,t(o)])]),x,d(" prettier-ignore "),n("table",null,[y,n("tbody",null,[n("tr",null,[w,q,n("td",E,[t(a,{to:"/problem/2259.html"},{default:e(()=>[s("[✓]")]),_:1})]),n("td",N,[t(a,{to:"/tag/greedy.html"},{default:e(()=>[C]),_:1}),s(),t(a,{to:"/tag/string.html"},{default:e(()=>[L]),_:1}),s(),t(a,{to:"/tag/enumeration.html"},{default:e(()=>[T]),_:1})]),V,n("td",I,[n("a",O,[s("🀄️"),t(o)]),s(),n("a",j,[s("🔗"),t(o)])])])])])])}const G=p(k,[["render",B],["__file","1796.html.vue"]]);export{G as default};
