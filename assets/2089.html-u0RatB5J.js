import{_ as c,r,o as p,c as i,a as n,b as t,d as e,w as s,f as d,e as u}from"./app-fBVbqwGY.js";const g={},m=n("h1",{id:"_2089-找出数组排序后的目标下标",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_2089-找出数组排序后的目标下标","aria-hidden":"true"},"#"),t(" 2089. 找出数组排序后的目标下标")],-1),h=n("code",null,"数组",-1),k=n("code",null,"二分查找",-1),_=n("code",null,"排序",-1),f={href:"https://leetcode.cn/problems/find-target-indices-after-sorting-array",target:"_blank",rel:"noopener noreferrer"},b=n("code",null,"力扣",-1),y={href:"https://leetcode.com/problems/find-target-indices-after-sorting-array",target:"_blank",rel:"noopener noreferrer"},v=n("code",null,"LeetCode",-1),x=u(`<h2 id="题目" tabindex="-1"><a class="header-anchor" href="#题目" aria-hidden="true">#</a> 题目</h2><p>You are given a <strong>0-indexed</strong> integer array <code>nums</code> and a target element <code>target</code>.</p><p>A <strong>target index</strong> is an index <code>i</code> such that <code>nums[i] == target</code>.</p><p>Return <em>a list of the target indices of</em> <code>nums</code> after <em>sorting</em><code>nums</code><em>in <strong>non-decreasing</strong> order</em>. If there are no target indices, return <em>an <strong>empty</strong> list</em>. The returned list must be sorted in <strong>increasing</strong> order.</p><p><strong>Example 1:</strong></p><blockquote><p>Input: nums = [1,2,5,2,3], target = 2</p><p>Output: [1,2]</p><p>Explanation: After sorting, nums is [1,<em><strong>2</strong></em> ,<em><strong>2</strong></em> ,3,5].</p><p>The indices where nums[i] == 2 are 1 and 2.</p></blockquote><p><strong>Example 2:</strong></p><blockquote><p>Input: nums = [1,2,5,2,3], target = 3</p><p>Output: [3]</p><p>Explanation: After sorting, nums is [1,2,2,<em><strong>3</strong></em> ,5].</p><p>The index where nums[i] == 3 is 3.</p></blockquote><p><strong>Example 3:</strong></p><blockquote><p>Input: nums = [1,2,5,2,3], target = 5</p><p>Output: [4]</p><p>Explanation: After sorting, nums is [1,2,2,3,<em><strong>5</strong></em>].</p><p>The index where nums[i] == 5 is 4.</p></blockquote><p><strong>Constraints:</strong></p><ul><li><code>1 &lt;= nums.length &lt;= 100</code></li><li><code>1 &lt;= nums[i], target &lt;= 100</code></li></ul><h2 id="题目大意" tabindex="-1"><a class="header-anchor" href="#题目大意" aria-hidden="true">#</a> 题目大意</h2><p>给你一个下标从 <strong>0</strong> 开始的整数数组 <code>nums</code> 以及一个目标元素 <code>target</code> 。</p><p><strong>目标下标</strong> 是一个满足 <code>nums[i] == target</code> 的下标 <code>i</code> 。</p><p>将 <code>nums</code> 按 <strong>非递减</strong> 顺序排序后，返回由 <code>nums</code> 中目标下标组成的列表。如果不存在目标下标，返回一个 <strong>空</strong>列表。返回的列表必须按 <strong>递增</strong> 顺序排列。</p><p><strong>示例 1：</strong></p><blockquote><p><strong>输入：</strong> nums = [1,2,5,2,3], target = 2</p><p><strong>输出：</strong>[1,2]</p><p><strong>解释：</strong> 排序后，nums 变为 [1,<em><strong>2</strong></em> ,<em><strong>2</strong></em> ,3,5] 。</p><p>满足 nums[i] == 2 的下标是 1 和 2 。</p></blockquote><p><strong>示例 2：</strong></p><blockquote><p><strong>输入：</strong> nums = [1,2,5,2,3], target = 3</p><p><strong>输出：</strong>[3]</p><p><strong>解释：</strong> 排序后，nums 变为 [1,2,2,<em><strong>3</strong></em> ,5] 。</p><p>满足 nums[i] == 3 的下标是 3 。</p></blockquote><p><strong>示例 3：</strong></p><blockquote><p><strong>输入：</strong> nums = [1,2,5,2,3], target = 5</p><p><strong>输出：</strong>[4]</p><p><strong>解释：</strong> 排序后，nums 变为 [1,2,2,3,<em><strong>5</strong></em>] 。</p><p>满足 nums[i] == 5 的下标是 4 。</p></blockquote><p><strong>示例 4：</strong></p><blockquote><p><strong>输入：</strong> nums = [1,2,5,2,3], target = 4</p><p><strong>输出：</strong>[]</p><p><strong>解释：</strong> nums 中不含值为 4 的元素。</p></blockquote><p><strong>提示：</strong></p><ul><li><code>1 &lt;= nums.length &lt;= 100</code></li><li><code>1 &lt;= nums[i], target &lt;= 100</code></li></ul><h2 id="解题思路" tabindex="-1"><a class="header-anchor" href="#解题思路" aria-hidden="true">#</a> 解题思路</h2><p>需要找出数组 <code>nums</code> 排序后，目标值 <code>target</code> 的所有索引位置。</p><p>如果直接对数组排序再查找索引，效率较低。因此，可以通过统计的方式在 <strong>不排序</strong> 的情况下解决问题。</p><p>可以直接统计数组中比 <code>target</code> 小的元素个数，以及等于 <code>target</code> 的元素个数。</p><p>因为在排序后的数组中，比 <code>target</code> 小的元素的个数就是 <code>target</code> 出现的最小索引，等于 <code>target</code> 的元素的个数决定了结果的范围。</p><ol><li><p><strong>初始化变量</strong>：</p><ul><li>定义 <code>smaller</code> 表示比 <code>target</code> 小的元素个数。</li><li>定义 <code>equal</code> 表示等于 <code>target</code> 的元素个数。</li></ul></li><li><p><strong>遍历数组</strong>：</p><ul><li>如果当前元素小于 <code>target</code>，增加 <code>smaller</code> 的计数。</li><li>如果当前元素等于 <code>target</code>，增加 <code>equal</code> 的计数。</li></ul></li><li><p><strong>生成结果数组</strong>：</p><ul><li>根据 <code>smaller</code> 和 <code>equal</code> 的值，生成 <code>[smaller, smaller + equal)</code> 范围的索引。</li></ul></li><li><p><strong>返回结果数组</strong>。</p></li></ol><h4 id="复杂度分析" tabindex="-1"><a class="header-anchor" href="#复杂度分析" aria-hidden="true">#</a> 复杂度分析</h4><ul><li><strong>时间复杂度</strong>：<code>O(n)</code>，其中 <code>n</code> 是 <code>nums</code> 数组的长度，遍历 <code>nums</code> 数组一次。</li><li><strong>空间复杂度</strong>：<code>O(equal)</code>，用于存储结果数组。</li></ul><h2 id="代码" tabindex="-1"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span> <span class="token parameter">nums</span>
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">}</span></span> <span class="token parameter">target</span>
 * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span>
 */</span>
<span class="token keyword">var</span> <span class="token function-variable function">targetIndices</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">nums<span class="token punctuation">,</span> target</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">let</span> smaller <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>
		equal <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

	<span class="token comment">// 遍历 nums 统计 smaller 和 equal</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> num <span class="token keyword">of</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">&lt;</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			smaller<span class="token operator">++</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">===</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			equal<span class="token operator">++</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>

	<span class="token comment">// 生成索引数组</span>
	<span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>equal<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">_<span class="token punctuation">,</span> i</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> i <span class="token operator">+</span> smaller<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="相关题目" tabindex="-1"><a class="header-anchor" href="#相关题目" aria-hidden="true">#</a> 相关题目</h2>`,37),q=n("thead",null,[n("tr",null,[n("th",{style:{"text-align":"center"}},"题号"),n("th",{style:{"text-align":"left"}},"标题"),n("th",{style:{"text-align":"center"}},"题解"),n("th",{style:{"text-align":"left"}},"标签"),n("th",{style:{"text-align":"center"}},"难度"),n("th",{style:{"text-align":"center"}},"力扣")])],-1),w=n("td",{style:{"text-align":"center"}},"34",-1),E=n("td",{style:{"text-align":"left"}},"在排序数组中查找元素的第一个和最后一个位置",-1),I={style:{"text-align":"center"}},A={style:{"text-align":"left"}},C=n("code",null,"数组",-1),L=n("code",null,"二分查找",-1),N=n("td",{style:{"text-align":"center"}},"🟠",-1),O={style:{"text-align":"center"}},T={href:"https://leetcode.cn/problems/find-first-and-last-position-of-element-in-sorted-array",target:"_blank",rel:"noopener noreferrer"},V={href:"https://leetcode.com/problems/find-first-and-last-position-of-element-in-sorted-array",target:"_blank",rel:"noopener noreferrer"},j=n("td",{style:{"text-align":"center"}},"1331",-1),B=n("td",{style:{"text-align":"left"}},"数组序号转换",-1),R={style:{"text-align":"center"}},S={style:{"text-align":"left"}},Y=n("code",null,"数组",-1),z=n("code",null,"哈希表",-1),D=n("code",null,"排序",-1),F=n("td",{style:{"text-align":"center"}},"🟢",-1),G={style:{"text-align":"center"}},H={href:"https://leetcode.cn/problems/rank-transform-of-an-array",target:"_blank",rel:"noopener noreferrer"},J={href:"https://leetcode.com/problems/rank-transform-of-an-array",target:"_blank",rel:"noopener noreferrer"},K=n("td",{style:{"text-align":"center"}},"2942",-1),M=n("td",{style:{"text-align":"left"}},"查找包含给定字符的单词",-1),P=n("td",{style:{"text-align":"center"}},null,-1),Q={style:{"text-align":"left"}},U=n("code",null,"数组",-1),W=n("code",null,"字符串",-1),X=n("td",{style:{"text-align":"center"}},"🟢",-1),Z={style:{"text-align":"center"}},$={href:"https://leetcode.cn/problems/find-words-containing-character",target:"_blank",rel:"noopener noreferrer"},nn={href:"https://leetcode.com/problems/find-words-containing-character",target:"_blank",rel:"noopener noreferrer"};function tn(en,sn){const l=r("font"),a=r("RouterLink"),o=r("ExternalLinkIcon");return p(),i("div",null,[m,n("p",null,[t("🟢 "),e(l,{color:"#15bd66"},{default:s(()=>[t("Easy")]),_:1}),t("  🔖  "),e(a,{to:"/tag/array.html"},{default:s(()=>[h]),_:1}),t(),e(a,{to:"/tag/binary-search.html"},{default:s(()=>[k]),_:1}),t(),e(a,{to:"/tag/sorting.html"},{default:s(()=>[_]),_:1}),t("  🔗 "),n("a",f,[b,e(o)]),t(),n("a",y,[v,e(o)])]),x,d(" prettier-ignore "),n("table",null,[q,n("tbody",null,[n("tr",null,[w,E,n("td",I,[e(a,{to:"/problem/0034.html"},{default:s(()=>[t("[✓]")]),_:1})]),n("td",A,[e(a,{to:"/tag/array.html"},{default:s(()=>[C]),_:1}),t(),e(a,{to:"/tag/binary-search.html"},{default:s(()=>[L]),_:1})]),N,n("td",O,[n("a",T,[t("🀄️"),e(o)]),t(),n("a",V,[t("🔗"),e(o)])])]),n("tr",null,[j,B,n("td",R,[e(a,{to:"/problem/1331.html"},{default:s(()=>[t("[✓]")]),_:1})]),n("td",S,[e(a,{to:"/tag/array.html"},{default:s(()=>[Y]),_:1}),t(),e(a,{to:"/tag/hash-table.html"},{default:s(()=>[z]),_:1}),t(),e(a,{to:"/tag/sorting.html"},{default:s(()=>[D]),_:1})]),F,n("td",G,[n("a",H,[t("🀄️"),e(o)]),t(),n("a",J,[t("🔗"),e(o)])])]),n("tr",null,[K,M,P,n("td",Q,[e(a,{to:"/tag/array.html"},{default:s(()=>[U]),_:1}),t(),e(a,{to:"/tag/string.html"},{default:s(()=>[W]),_:1})]),X,n("td",Z,[n("a",$,[t("🀄️"),e(o)]),t(),n("a",nn,[t("🔗"),e(o)])])])])])])}const on=c(g,[["render",tn],["__file","2089.html.vue"]]);export{on as default};
