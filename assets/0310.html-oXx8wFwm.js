import{_ as p,r as c,o as i,c as r,a as n,b as s,d as t,w as e,f as d,e as u}from"./app-aQeLbVW9.js";const h={},k=n("h1",{id:"_310-最小高度树",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_310-最小高度树","aria-hidden":"true"},"#"),s(" 310. 最小高度树")],-1),g=n("code",null,"深度优先搜索",-1),_=n("code",null,"广度优先搜索",-1),m=n("code",null,"图",-1),f=n("code",null,"拓扑排序",-1),b={href:"https://leetcode.cn/problems/minimum-height-trees",target:"_blank",rel:"noopener noreferrer"},v=n("code",null,"力扣",-1),y={href:"https://leetcode.com/problems/minimum-height-trees",target:"_blank",rel:"noopener noreferrer"},x=n("code",null,"LeetCode",-1),w=u(`<h2 id="题目" tabindex="-1"><a class="header-anchor" href="#题目" aria-hidden="true">#</a> 题目</h2><p>A tree is an undirected graph in which any two vertices are connected by <em>exactly</em> one path. In other words, any connected graph without simple cycles is a tree.</p><p>Given a tree of <code>n</code> nodes labelled from <code>0</code> to <code>n - 1</code>, and an array of <code>n - 1</code> <code>edges</code> where <code>edges[i] = [ai, bi]</code> indicates that there is an undirected edge between the two nodes <code>ai</code> and <code>bi</code> in the tree, you can choose any node of the tree as the root. When you select a node <code>x</code> as the root, the result tree has height <code>h</code>. Among all possible rooted trees, those with minimum height (i.e. <code>min(h)</code>) are called <strong>minimum height trees</strong> (MHTs).</p><p>Return <em>a list of all<strong>MHTs &#39;</strong> root labels</em>. You can return the answer in <strong>any order</strong>.</p><p>The <strong>height</strong> of a rooted tree is the number of edges on the longest downward path between the root and a leaf.</p><p><strong>Example 1:</strong></p><figure><img src="https://assets.leetcode.com/uploads/2020/09/01/e1.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><blockquote><p>Input: n = 4, edges = [[1,0],[1,2],[1,3]]</p><p>Output: [1]</p><p>Explanation: As shown, the height of the tree is 1 when the root is the node with label 1 which is the only MHT.</p></blockquote><p><strong>Example 2:</strong></p><figure><img src="https://assets.leetcode.com/uploads/2020/09/01/e2.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><blockquote><p>Input: n = 6, edges = [[3,0],[3,1],[3,2],[3,4],[5,4]]</p><p>Output: [3,4]</p></blockquote><p><strong>Constraints:</strong></p><ul><li><code>1 &lt;= n &lt;= 2 * 10^4</code></li><li><code>edges.length == n - 1</code></li><li><code>0 &lt;= ai, bi &lt; n</code></li><li><code>ai != bi</code></li><li>All the pairs <code>(ai, bi)</code> are distinct.</li><li>The given input is <strong>guaranteed</strong> to be a tree and there will be <strong>no repeated</strong> edges.</li></ul><h2 id="题目大意" tabindex="-1"><a class="header-anchor" href="#题目大意" aria-hidden="true">#</a> 题目大意</h2><p>树是一个无向图，其中任何两个顶点只通过一条路径连接。 换句话说，任何一个没有简单环路的连通图都是一棵树。</p><p>给你一棵包含 <code>n</code> 个节点的树，标记为 <code>0</code> 到 <code>n - 1</code> 。给定数字 <code>n</code> 和一个有 <code>n - 1</code> 条无向边的 <code>edges</code> 列表（每一个边都是一对标签），其中 <code>edges[i] = [ai, bi]</code> 表示树中节点 <code>ai</code> 和 <code>bi</code> 之间存在一条无向边。</p><p>可选择树中任何一个节点作为根。当选择节点 <code>x</code> 作为根节点时，设结果树的高度为 <code>h</code> 。在所有可能的树中，具有最小高度的树（即，<code>min(h)</code>）被称为 <strong>最小高度树</strong> 。</p><p>请你找到所有的 <strong>最小高度树</strong> 并按 <strong>任意顺序</strong> 返回它们的根节点标签列表。</p><p>树的 <strong>高度</strong> 是指根节点和叶子节点之间最长向下路径上边的数量。</p><p><strong>示例 1：</strong></p><figure><img src="https://assets.leetcode.com/uploads/2020/09/01/e1.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><blockquote><p><strong>输入：</strong> n = 4, edges = [[1,0],[1,2],[1,3]]</p><p><strong>输出：</strong>[1]</p><p><strong>解释：</strong> 如图所示，当根是标签为 1 的节点时，树的高度是 1 ，这是唯一的最小高度树。</p></blockquote><p><strong>示例 2：</strong></p><figure><img src="https://assets.leetcode.com/uploads/2020/09/01/e2.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><blockquote><p><strong>输入：</strong> n = 6, edges = [[3,0],[3,1],[3,2],[3,4],[5,4]]</p><p><strong>输出：</strong>[3,4]</p></blockquote><p><strong>提示：</strong></p><ul><li><code>1 &lt;= n &lt;= 2 * 10^4</code></li><li><code>edges.length == n - 1</code></li><li><code>0 &lt;= ai, bi &lt; n</code></li><li><code>ai != bi</code></li><li>所有 <code>(ai, bi)</code> 互不相同</li><li>给定的输入 <strong>保证</strong> 是一棵树，并且 <strong>不会有重复的边</strong></li></ul><h2 id="解题思路" tabindex="-1"><a class="header-anchor" href="#解题思路" aria-hidden="true">#</a> 解题思路</h2><ol><li><p><strong>树的直径特性</strong>：</p><ul><li>最小高度树的根节点一定是树的直径的中点。</li><li>树的直径是指树中任意两个节点之间最长路径的长度。树的直径的中点（1 个或 2 个）就是最小高度树的根节点。</li><li>可以通过逐层移除叶节点的方法，找到树的直径的中点。</li></ul></li><li><p><strong>构造图</strong>：</p><ul><li>用邻接表表示树的结构。</li></ul></li><li><p><strong>找到所有叶节点</strong>：</p><ul><li>叶节点是指度为 <code>1</code> 的节点。</li></ul></li><li><p><strong>逐层移除叶节点</strong>：</p><ul><li>每次将当前所有叶节点移除，同时更新与这些叶节点相连的节点的度数。</li><li>如果某个节点的度数变为 <code>1</code>，它成为新的叶节点。</li></ul></li><li><p><strong>终止条件</strong>：</p><ul><li>当剩余节点数小于或等于 <code>2</code> 时，停止移除。这些剩余的节点就是树的直径的中点，也就是最小高度树的根节点。</li></ul></li></ol><h4 id="复杂度分析" tabindex="-1"><a class="header-anchor" href="#复杂度分析" aria-hidden="true">#</a> 复杂度分析</h4><ul><li><strong>时间复杂度</strong>：<code>O(n)</code>，构建图的时间复杂度为 <code>O(n)</code>，逐层移除叶节点的复杂度也为 <code>O(n)</code>，总体时间复杂度为 <code>O(n)</code>。</li><li><strong>空间复杂度</strong>：<code>O(n)</code>，邻接表的空间复杂度为 <code>O(n)</code>，队列的空间复杂度为 <code>O(n)</code>，总体为 <code>O(n)</code>。</li></ul><h2 id="代码" tabindex="-1"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">}</span></span> <span class="token parameter">n</span>
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span> <span class="token parameter">edges</span>
 * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span>
 */</span>
<span class="token keyword">var</span> <span class="token function-variable function">findMinHeightTrees</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">n<span class="token punctuation">,</span> edges</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 特殊情况：只有一个节点</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">===</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 特殊情况：两个节点</span>

	<span class="token comment">// 构建邻接表</span>
	<span class="token keyword">const</span> graph <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token punctuation">[</span>u<span class="token punctuation">,</span> v<span class="token punctuation">]</span> <span class="token keyword">of</span> edges<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		graph<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>
		graph<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token comment">// 找到所有叶节点（度为 1 的节点）</span>
	<span class="token keyword">const</span> leaves <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token keyword">const</span> degree <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		degree<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> graph<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>degree<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> leaves<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token comment">// 逐层移除叶节点</span>
	<span class="token keyword">let</span> remainingNodes <span class="token operator">=</span> n<span class="token punctuation">;</span>
	<span class="token keyword">while</span> <span class="token punctuation">(</span>remainingNodes <span class="token operator">&gt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">const</span> size <span class="token operator">=</span> leaves<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
		remainingNodes <span class="token operator">-=</span> size<span class="token punctuation">;</span>

		<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">const</span> leaf <span class="token operator">=</span> leaves<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> neighbor <span class="token keyword">of</span> graph<span class="token punctuation">[</span>leaf<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
				degree<span class="token punctuation">[</span>neighbor<span class="token punctuation">]</span><span class="token operator">--</span><span class="token punctuation">;</span>
				<span class="token keyword">if</span> <span class="token punctuation">(</span>degree<span class="token punctuation">[</span>neighbor<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> leaves<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>neighbor<span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>

	<span class="token comment">// 剩余节点即为结果</span>
	<span class="token keyword">return</span> leaves<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="相关题目" tabindex="-1"><a class="header-anchor" href="#相关题目" aria-hidden="true">#</a> 相关题目</h2>`,34),O=n("thead",null,[n("tr",null,[n("th",{style:{"text-align":"center"}},"题号"),n("th",{style:{"text-align":"left"}},"标题"),n("th",{style:{"text-align":"center"}},"题解"),n("th",{style:{"text-align":"left"}},"标签"),n("th",{style:{"text-align":"center"}},"难度"),n("th",{style:{"text-align":"center"}},"力扣")])],-1),q=n("td",{style:{"text-align":"center"}},"207",-1),N=n("td",{style:{"text-align":"left"}},"课程表",-1),j={style:{"text-align":"center"}},z={style:{"text-align":"left"}},I=n("code",null,"深度优先搜索",-1),T=n("code",null,"广度优先搜索",-1),A=n("code",null,"图",-1),E=n("code",null,"1+",-1),C=n("td",{style:{"text-align":"center"}},"🟠",-1),L={style:{"text-align":"center"}},M={href:"https://leetcode.cn/problems/course-schedule",target:"_blank",rel:"noopener noreferrer"},V={href:"https://leetcode.com/problems/course-schedule",target:"_blank",rel:"noopener noreferrer"},H=n("td",{style:{"text-align":"center"}},"210",-1),B=n("td",{style:{"text-align":"left"}},"课程表 II",-1),R={style:{"text-align":"center"}},G={style:{"text-align":"left"}},S=n("code",null,"深度优先搜索",-1),W=n("code",null,"广度优先搜索",-1),Y=n("code",null,"图",-1),D=n("code",null,"1+",-1),F=n("td",{style:{"text-align":"center"}},"🟠",-1),J={style:{"text-align":"center"}},K={href:"https://leetcode.cn/problems/course-schedule-ii",target:"_blank",rel:"noopener noreferrer"},P={href:"https://leetcode.com/problems/course-schedule-ii",target:"_blank",rel:"noopener noreferrer"},Q=n("td",{style:{"text-align":"center"}},"2603",-1),U=n("td",{style:{"text-align":"left"}},"收集树中金币",-1),X=n("td",{style:{"text-align":"center"}},null,-1),Z={style:{"text-align":"left"}},$=n("code",null,"树",-1),nn=n("code",null,"图",-1),sn=n("code",null,"拓扑排序",-1),tn=n("code",null,"1+",-1),en=n("td",{style:{"text-align":"center"}},"🔴",-1),an={style:{"text-align":"center"}},on={href:"https://leetcode.cn/problems/collect-coins-in-a-tree",target:"_blank",rel:"noopener noreferrer"},cn={href:"https://leetcode.com/problems/collect-coins-in-a-tree",target:"_blank",rel:"noopener noreferrer"},ln=n("td",{style:{"text-align":"center"}},"3067",-1),pn=n("td",{style:{"text-align":"left"}},"在带权树网络中统计可连接服务器对数目",-1),rn=n("td",{style:{"text-align":"center"}},null,-1),dn={style:{"text-align":"left"}},un=n("code",null,"树",-1),hn=n("code",null,"深度优先搜索",-1),kn=n("code",null,"数组",-1),gn=n("td",{style:{"text-align":"center"}},"🟠",-1),_n={style:{"text-align":"center"}},mn={href:"https://leetcode.cn/problems/count-pairs-of-connectable-servers-in-a-weighted-tree-network",target:"_blank",rel:"noopener noreferrer"},fn={href:"https://leetcode.com/problems/count-pairs-of-connectable-servers-in-a-weighted-tree-network",target:"_blank",rel:"noopener noreferrer"},bn=n("td",{style:{"text-align":"center"}},"3203",-1),vn=n("td",{style:{"text-align":"left"}},"合并两棵树后的最小直径",-1),yn={style:{"text-align":"center"}},xn={style:{"text-align":"left"}},wn=n("code",null,"树",-1),On=n("code",null,"深度优先搜索",-1),qn=n("code",null,"广度优先搜索",-1),Nn=n("code",null,"1+",-1),jn=n("td",{style:{"text-align":"center"}},"🔴",-1),zn={style:{"text-align":"center"}},In={href:"https://leetcode.cn/problems/find-minimum-diameter-after-merging-two-trees",target:"_blank",rel:"noopener noreferrer"},Tn={href:"https://leetcode.com/problems/find-minimum-diameter-after-merging-two-trees",target:"_blank",rel:"noopener noreferrer"};function An(En,Cn){const l=c("font"),a=c("RouterLink"),o=c("ExternalLinkIcon");return i(),r("div",null,[k,n("p",null,[s("🟠 "),t(l,{color:"#ffb800"},{default:e(()=>[s("Medium")]),_:1}),s("  🔖  "),t(a,{to:"/tag/depth-first-search.html"},{default:e(()=>[g]),_:1}),s(),t(a,{to:"/tag/breadth-first-search.html"},{default:e(()=>[_]),_:1}),s(),t(a,{to:"/tag/graph.html"},{default:e(()=>[m]),_:1}),s(),t(a,{to:"/tag/topological-sort.html"},{default:e(()=>[f]),_:1}),s("  🔗 "),n("a",b,[v,t(o)]),s(),n("a",y,[x,t(o)])]),w,d(" prettier-ignore "),n("table",null,[O,n("tbody",null,[n("tr",null,[q,N,n("td",j,[t(a,{to:"/problem/0207.html"},{default:e(()=>[s("[✓]")]),_:1})]),n("td",z,[t(a,{to:"/tag/depth-first-search.html"},{default:e(()=>[I]),_:1}),s(),t(a,{to:"/tag/breadth-first-search.html"},{default:e(()=>[T]),_:1}),s(),t(a,{to:"/tag/graph.html"},{default:e(()=>[A]),_:1}),s(),E]),C,n("td",L,[n("a",M,[s("🀄️"),t(o)]),s(),n("a",V,[s("🔗"),t(o)])])]),n("tr",null,[H,B,n("td",R,[t(a,{to:"/problem/0210.html"},{default:e(()=>[s("[✓]")]),_:1})]),n("td",G,[t(a,{to:"/tag/depth-first-search.html"},{default:e(()=>[S]),_:1}),s(),t(a,{to:"/tag/breadth-first-search.html"},{default:e(()=>[W]),_:1}),s(),t(a,{to:"/tag/graph.html"},{default:e(()=>[Y]),_:1}),s(),D]),F,n("td",J,[n("a",K,[s("🀄️"),t(o)]),s(),n("a",P,[s("🔗"),t(o)])])]),n("tr",null,[Q,U,X,n("td",Z,[t(a,{to:"/tag/tree.html"},{default:e(()=>[$]),_:1}),s(),t(a,{to:"/tag/graph.html"},{default:e(()=>[nn]),_:1}),s(),t(a,{to:"/tag/topological-sort.html"},{default:e(()=>[sn]),_:1}),s(),tn]),en,n("td",an,[n("a",on,[s("🀄️"),t(o)]),s(),n("a",cn,[s("🔗"),t(o)])])]),n("tr",null,[ln,pn,rn,n("td",dn,[t(a,{to:"/tag/tree.html"},{default:e(()=>[un]),_:1}),s(),t(a,{to:"/tag/depth-first-search.html"},{default:e(()=>[hn]),_:1}),s(),t(a,{to:"/tag/array.html"},{default:e(()=>[kn]),_:1})]),gn,n("td",_n,[n("a",mn,[s("🀄️"),t(o)]),s(),n("a",fn,[s("🔗"),t(o)])])]),n("tr",null,[bn,vn,n("td",yn,[t(a,{to:"/problem/3203.html"},{default:e(()=>[s("[✓]")]),_:1})]),n("td",xn,[t(a,{to:"/tag/tree.html"},{default:e(()=>[wn]),_:1}),s(),t(a,{to:"/tag/depth-first-search.html"},{default:e(()=>[On]),_:1}),s(),t(a,{to:"/tag/breadth-first-search.html"},{default:e(()=>[qn]),_:1}),s(),Nn]),jn,n("td",zn,[n("a",In,[s("🀄️"),t(o)]),s(),n("a",Tn,[s("🔗"),t(o)])])])])])])}const Mn=p(h,[["render",An],["__file","0310.html.vue"]]);export{Mn as default};
