import{_ as c,r as p,o as r,c as i,a as n,b as t,d as e,w as s,f as d,e as u}from"./app-aQeLbVW9.js";const h={},k=n("h1",{id:"_486-预测赢家",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_486-预测赢家","aria-hidden":"true"},"#"),t(" 486. 预测赢家")],-1),m=n("code",null,"递归",-1),_=n("code",null,"数组",-1),g=n("code",null,"数学",-1),f=n("code",null,"动态规划",-1),y=n("code",null,"博弈",-1),b={href:"https://leetcode.cn/problems/predict-the-winner",target:"_blank",rel:"noopener noreferrer"},v=n("code",null,"力扣",-1),x={href:"https://leetcode.com/problems/predict-the-winner",target:"_blank",rel:"noopener noreferrer"},w=n("code",null,"LeetCode",-1),j=u(`<h2 id="题目" tabindex="-1"><a class="header-anchor" href="#题目" aria-hidden="true">#</a> 题目</h2><p>You are given an integer array <code>nums</code>. Two players are playing a game with this array: player 1 and player 2.</p><p>Player 1 and player 2 take turns, with player 1 starting first. Both players start the game with a score of <code>0</code>. At each turn, the player takes one of the numbers from either end of the array (i.e., <code>nums[0]</code> or <code>nums[nums.length - 1]</code>) which reduces the size of the array by <code>1</code>. The player adds the chosen number to their score. The game ends when there are no more elements in the array.</p><p>Return <code>true</code> if Player 1 can win the game. If the scores of both players are equal, then player 1 is still the winner, and you should also return <code>true</code>. You may assume that both players are playing optimally.</p><p><strong>Example 1:</strong></p><blockquote><p>Input: nums = [1,5,2]</p><p>Output: false</p><p>Explanation: Initially, player 1 can choose between 1 and 2.</p><p>If he chooses 2 (or 1), then player 2 can choose from 1 (or 2) and 5. If player 2 chooses 5, then player 1 will be left with 1 (or 2).</p><p>So, final score of player 1 is 1 + 2 = 3, and player 2 is 5.</p><p>Hence, player 1 will never be the winner and you need to return false.</p></blockquote><p><strong>Example 2:</strong></p><blockquote><p>Input: nums = [1,5,233,7]</p><p>Output: true</p><p>Explanation: Player 1 first chooses 1. Then player 2 has to choose between 5 and 7. No matter which number player 2 choose, player 1 can choose 233.</p><p>Finally, player 1 has more score (234) than player 2 (12), so you need to return True representing player1 can win.</p></blockquote><p><strong>Constraints:</strong></p><ul><li><code>1 &lt;= nums.length &lt;= 20</code></li><li><code>0 &lt;= nums[i] &lt;= 10^7</code></li></ul><h2 id="题目大意" tabindex="-1"><a class="header-anchor" href="#题目大意" aria-hidden="true">#</a> 题目大意</h2><p>给你一个整数数组 <code>nums</code> 。玩家 1 和玩家 2 基于这个数组设计了一个游戏。</p><p>玩家 1 和玩家 2 轮流进行自己的回合，玩家 1 先手。开始时，两个玩家的初始分值都是 <code>0</code> 。每一回合，玩家从数组的任意一端取一个数字（即，<code>nums[0]</code> 或 <code>nums[nums.length - 1]</code>），取到的数字将会从数组中移除（数组长度减 <code>1</code> ）。玩家选中的数字将会加到他的得分上。当数组中没有剩余数字可取时，游戏结束。</p><p>如果玩家 1 能成为赢家，返回 <code>true</code> 。如果两个玩家得分相等，同样认为玩家 1 是游戏的赢家，也返回 <code>true</code> 。你可以假设每个玩家的玩法都会使他的分数最大化。</p><p><strong>示例 1：</strong></p><blockquote><p><strong>输入：</strong> nums = [1,5,2]</p><p><strong>输出：</strong> false</p><p><strong>解释：</strong> 一开始，玩家 1 可以从 1 和 2 中进行选择。</p><p>如果他选择 2（或者 1 ），那么玩家 2 可以从 1（或者 2 ）和 5 中进行选择。如果玩家 2 选择了 5 ，那么玩家 1 则只剩下 1（或者 2 ）可选。</p><p>所以，玩家 1 的最终分数为 1 + 2 = 3，而玩家 2 为 5 。</p><p>因此，玩家 1 永远不会成为赢家，返回 false 。</p></blockquote><p><strong>示例 2：</strong></p><blockquote><p><strong>输入：</strong> nums = [1,5,233,7]</p><p><strong>输出：</strong> true</p><p><strong>解释：</strong> 玩家 1 一开始选择 1 。然后玩家 2 必须从 5 和 7 中进行选择。无论玩家 2 选择了哪个，玩家 1 都可以选择 233 。</p><p>最终，玩家 1（234 分）比玩家 2（12 分）获得更多的分数，所以返回 true，表示玩家 1 可以成为赢家。</p></blockquote><p><strong>提示：</strong></p><ul><li><code>1 &lt;= nums.length &lt;= 20</code></li><li><code>0 &lt;= nums[i] &lt;= 10^7</code></li></ul><h2 id="解题思路" tabindex="-1"><a class="header-anchor" href="#解题思路" aria-hidden="true">#</a> 解题思路</h2><p>你的 <code>predictTheWinner</code> 实现采用的是 <strong>动态规划 (DP)</strong> 方法，利用 <strong>区间 DP</strong> 来计算玩家 1 和玩家 2 的最大得分差值。<br> 这个方法的核心思想是：<strong>当前玩家的得分 = 选取的数字 - 剩下部分的最优策略得分</strong>。</p><p><strong>1. 定义状态 <code>dp[i][j]</code></strong></p><ul><li><code>dp[i][j]</code> 表示 <strong>当前玩家</strong> 在选择 <code>nums[i:j]</code> 这段子数组时，比对手多获得的分数。</li><li>如果 <code>dp[0][n-1] &gt;= 0</code>，说明玩家 1 至少不会输，返回 <code>true</code>，否则返回 <code>false</code>。</li></ul><p><strong>2. 状态转移方程</strong></p><ul><li>玩家 <strong>可以选择 <code>nums[i]</code> 或 <code>nums[j]</code></strong>，然后 <strong>轮到对手</strong> 继续玩： <ul><li>选择 <code>nums[i]</code>，则收益 = <code>nums[i] - dp[i+1][j]</code>（对手会在 <code>nums[i+1:j]</code> 里采取最优策略）</li><li>选择 <code>nums[j]</code>，则收益 = <code>nums[j] - dp[i][j-1]</code>（对手会在 <code>nums[i:j-1]</code> 里采取最优策略）</li><li>取 <strong>最优选择</strong>： <code>dp[i][j] = max(nums[i] - dp[i + 1][j], nums[j] - dp[i][j - 1])</code></li></ul></li></ul><p><strong>3. 初始化</strong></p><ul><li>当 <code>i == j</code> 时，即子数组只剩一个元素，当前玩家的得分就是 <code>nums[i]</code>：<code>dp[i][i] = nums[i]</code></li></ul><p><strong>4. 计算顺序</strong></p><ul><li><code>dp[i][j]</code> 依赖 <code>dp[i+1][j]</code> 和 <code>dp[i][j-1]</code>，所以需要从小区间递推到大区间： <ul><li>先遍历 <strong>区间长度 <code>len</code></strong>，从 <code>1</code> 到 <code>n-1</code></li><li>然后 <strong>从左往右遍历起点 <code>i</code></strong>，计算 <code>dp[i][j]</code></li></ul></li></ul><h4 id="复杂度分析" tabindex="-1"><a class="header-anchor" href="#复杂度分析" aria-hidden="true">#</a> 复杂度分析</h4><ul><li><strong>时间复杂度</strong>：<code>O(n^2)</code>，因为有两个嵌套循环。</li><li><strong>空间复杂度</strong>：<code>O(n^2)</code>，由于使用了 <code>dp</code> 矩阵。</li></ul><h2 id="代码" tabindex="-1"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span> <span class="token parameter">nums</span>
 * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>boolean<span class="token punctuation">}</span></span>
 */</span>
<span class="token keyword">var</span> <span class="token function-variable function">predictTheWinner</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">nums</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">const</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
	<span class="token keyword">let</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> len <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> len <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> len<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n <span class="token operator">-</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">const</span> j <span class="token operator">=</span> i <span class="token operator">+</span> len<span class="token punctuation">;</span>
			dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> dp<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">-</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">return</span> dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="相关题目" tabindex="-1"><a class="header-anchor" href="#相关题目" aria-hidden="true">#</a> 相关题目</h2>`,35),q=n("thead",null,[n("tr",null,[n("th",{style:{"text-align":"center"}},"题号"),n("th",{style:{"text-align":"left"}},"标题"),n("th",{style:{"text-align":"center"}},"题解"),n("th",{style:{"text-align":"left"}},"标签"),n("th",{style:{"text-align":"center"}},"难度"),n("th",{style:{"text-align":"center"}},"力扣")])],-1),I=n("td",{style:{"text-align":"center"}},"464",-1),T=n("td",{style:{"text-align":"left"}},"我能赢吗",-1),E={style:{"text-align":"center"}},N={style:{"text-align":"left"}},C=n("code",null,"位运算",-1),L=n("code",null,"记忆化搜索",-1),P=n("code",null,"数学",-1),V=n("code",null,"3+",-1),B=n("td",{style:{"text-align":"center"}},"🟠",-1),O={style:{"text-align":"center"}},A={href:"https://leetcode.cn/problems/can-i-win",target:"_blank",rel:"noopener noreferrer"},R={href:"https://leetcode.com/problems/can-i-win",target:"_blank",rel:"noopener noreferrer"},z=n("td",{style:{"text-align":"center"}},"3222",-1),D=n("td",{style:{"text-align":"left"}},"求出硬币游戏的赢家",-1),M=n("td",{style:{"text-align":"center"}},null,-1),S={style:{"text-align":"left"}},W=n("code",null,"数学",-1),Y=n("code",null,"博弈",-1),F=n("code",null,"模拟",-1),H=n("td",{style:{"text-align":"center"}},"🟢",-1),G={style:{"text-align":"center"}},J={href:"https://leetcode.cn/problems/find-the-winning-player-in-coin-game",target:"_blank",rel:"noopener noreferrer"},K={href:"https://leetcode.com/problems/find-the-winning-player-in-coin-game",target:"_blank",rel:"noopener noreferrer"},Q=n("td",{style:{"text-align":"center"}},"3238",-1),U=n("td",{style:{"text-align":"left"}},"求出胜利玩家的数目",-1),X=n("td",{style:{"text-align":"center"}},null,-1),Z={style:{"text-align":"left"}},$=n("code",null,"数组",-1),nn=n("code",null,"哈希表",-1),tn=n("code",null,"计数",-1),en=n("td",{style:{"text-align":"center"}},"🟢",-1),sn={style:{"text-align":"center"}},an={href:"https://leetcode.cn/problems/find-the-number-of-winning-players",target:"_blank",rel:"noopener noreferrer"},on={href:"https://leetcode.com/problems/find-the-number-of-winning-players",target:"_blank",rel:"noopener noreferrer"},pn=n("td",{style:{"text-align":"center"}},"3320",-1),ln=n("td",{style:{"text-align":"left"}},"统计能获胜的出招序列数",-1),cn=n("td",{style:{"text-align":"center"}},null,-1),rn={style:{"text-align":"left"}},dn=n("code",null,"字符串",-1),un=n("code",null,"动态规划",-1),hn=n("td",{style:{"text-align":"center"}},"🔴",-1),kn={style:{"text-align":"center"}},mn={href:"https://leetcode.cn/problems/count-the-number-of-winning-sequences",target:"_blank",rel:"noopener noreferrer"},_n={href:"https://leetcode.com/problems/count-the-number-of-winning-sequences",target:"_blank",rel:"noopener noreferrer"};function gn(fn,yn){const l=p("font"),a=p("RouterLink"),o=p("ExternalLinkIcon");return r(),i("div",null,[k,n("p",null,[t("🟠 "),e(l,{color:"#ffb800"},{default:s(()=>[t("Medium")]),_:1}),t("  🔖  "),e(a,{to:"/tag/recursion.html"},{default:s(()=>[m]),_:1}),t(),e(a,{to:"/tag/array.html"},{default:s(()=>[_]),_:1}),t(),e(a,{to:"/tag/math.html"},{default:s(()=>[g]),_:1}),t(),e(a,{to:"/tag/dynamic-programming.html"},{default:s(()=>[f]),_:1}),t(),e(a,{to:"/tag/game-theory.html"},{default:s(()=>[y]),_:1}),t("  🔗 "),n("a",b,[v,e(o)]),t(),n("a",x,[w,e(o)])]),j,d(" prettier-ignore "),n("table",null,[q,n("tbody",null,[n("tr",null,[I,T,n("td",E,[e(a,{to:"/problem/0464.html"},{default:s(()=>[t("[✓]")]),_:1})]),n("td",N,[e(a,{to:"/tag/bit-manipulation.html"},{default:s(()=>[C]),_:1}),t(),e(a,{to:"/tag/memoization.html"},{default:s(()=>[L]),_:1}),t(),e(a,{to:"/tag/math.html"},{default:s(()=>[P]),_:1}),t(),V]),B,n("td",O,[n("a",A,[t("🀄️"),e(o)]),t(),n("a",R,[t("🔗"),e(o)])])]),n("tr",null,[z,D,M,n("td",S,[e(a,{to:"/tag/math.html"},{default:s(()=>[W]),_:1}),t(),e(a,{to:"/tag/game-theory.html"},{default:s(()=>[Y]),_:1}),t(),e(a,{to:"/tag/simulation.html"},{default:s(()=>[F]),_:1})]),H,n("td",G,[n("a",J,[t("🀄️"),e(o)]),t(),n("a",K,[t("🔗"),e(o)])])]),n("tr",null,[Q,U,X,n("td",Z,[e(a,{to:"/tag/array.html"},{default:s(()=>[$]),_:1}),t(),e(a,{to:"/tag/hash-table.html"},{default:s(()=>[nn]),_:1}),t(),e(a,{to:"/tag/counting.html"},{default:s(()=>[tn]),_:1})]),en,n("td",sn,[n("a",an,[t("🀄️"),e(o)]),t(),n("a",on,[t("🔗"),e(o)])])]),n("tr",null,[pn,ln,cn,n("td",rn,[e(a,{to:"/tag/string.html"},{default:s(()=>[dn]),_:1}),t(),e(a,{to:"/tag/dynamic-programming.html"},{default:s(()=>[un]),_:1})]),hn,n("td",kn,[n("a",mn,[t("🀄️"),e(o)]),t(),n("a",_n,[t("🔗"),e(o)])])])])])])}const vn=c(h,[["render",gn],["__file","0486.html.vue"]]);export{vn as default};
