import{_ as r,r as t,o as l,c as i,a as s,b as n,d as o,w as e,e as d}from"./app-B5EG-zH0.js";const u={},g=s("h1",{id:"_3208-交替组-ii",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#_3208-交替组-ii","aria-hidden":"true"},"#"),n(" 3208. 交替组 II")],-1),k=s("code",null,"数组",-1),h=s("code",null,"滑动窗口",-1),m={href:"https://leetcode.cn/problems/alternating-groups-ii",target:"_blank",rel:"noopener noreferrer"},v=s("code",null,"力扣",-1),b={href:"https://leetcode.com/problems/alternating-groups-ii",target:"_blank",rel:"noopener noreferrer"},f=s("code",null,"LeetCode",-1),_=d(`<h2 id="题目" tabindex="-1"><a class="header-anchor" href="#题目" aria-hidden="true">#</a> 题目</h2><p>There is a circle of red and blue tiles. You are given an array of integers <code>colors</code> and an integer <code>k</code>. The color of tile <code>i</code> is represented by <code>colors[i]</code>:</p><ul><li><code>colors[i] == 0</code> means that tile <code>i</code> is <strong>red</strong>.</li><li><code>colors[i] == 1</code> means that tile <code>i</code> is <strong>blue</strong>.</li></ul><p>An <strong>alternating</strong> group is every <code>k</code> contiguous tiles in the circle with <strong>alternating</strong> colors (each tile in the group except the first and last one has a different color from its <strong>left</strong> and <strong>right</strong> tiles).</p><p>Return the number of <strong>alternating</strong> groups.</p><p><strong>Note</strong> that since <code>colors</code> represents a <strong>circle</strong> , the <strong>first</strong> and the <strong>last</strong> tiles are considered to be next to each other.</p><p><strong>Example 1:</strong></p><p><strong>Input:</strong> colors = [0,1,0,1,0], k = 3</p><p><strong>Output:</strong> 3</p><p><strong>Explanation:</strong></p><p><strong><img src="https://assets.leetcode.com/uploads/2024/06/19/screenshot-2024-05-28-183519.png" alt="" loading="lazy"></strong></p><p>Alternating groups:</p><p><img src="https://assets.leetcode.com/uploads/2024/05/28/screenshot-2024-05-28-182448.png" alt="" loading="lazy"><img src="https://assets.leetcode.com/uploads/2024/05/28/screenshot-2024-05-28-182844.png" alt="" loading="lazy"><img src="https://assets.leetcode.com/uploads/2024/05/28/screenshot-2024-05-28-183057.png" alt="" loading="lazy"></p><p><strong>Example 2:</strong></p><p><strong>Input:</strong> colors = [0,1,0,0,1,0,1], k = 6</p><p><strong>Output:</strong> 2</p><p><strong>Explanation:</strong></p><p><strong><img src="https://assets.leetcode.com/uploads/2024/06/19/screenshot-2024-05-28-183907.png" alt="" loading="lazy"></strong></p><p>Alternating groups:</p><p><img src="https://assets.leetcode.com/uploads/2024/06/19/screenshot-2024-05-28-184128.png" alt="" loading="lazy"><img src="https://assets.leetcode.com/uploads/2024/06/19/screenshot-2024-05-28-184240.png" alt="" loading="lazy"></p><p><strong>Example 3:</strong></p><p><strong>Input:</strong> colors = [1,1,0,1], k = 4</p><p><strong>Output:</strong> 0</p><p><strong>Explanation:</strong></p><figure><img src="https://assets.leetcode.com/uploads/2024/06/19/screenshot-2024-05-28-184516.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>Constraints:</strong></p><ul><li><code>3 &lt;= colors.length &lt;= 10^5</code></li><li><code>0 &lt;= colors[i] &lt;= 1</code></li><li><code>3 &lt;= k &lt;= colors.length</code></li></ul><h2 id="题目大意" tabindex="-1"><a class="header-anchor" href="#题目大意" aria-hidden="true">#</a> 题目大意</h2><p>给你一个整数数组 <code>colors</code> 和一个整数 <code>k</code> ，<code>colors</code>表示一个由红色和蓝色瓷砖组成的环，第 <code>i</code> 块瓷砖的颜色为 <code>colors[i]</code> ：</p><ul><li><code>colors[i] == 0</code> 表示第 <code>i</code> 块瓷砖的颜色是 <strong>红色</strong> 。</li><li><code>colors[i] == 1</code> 表示第 <code>i</code> 块瓷砖的颜色是 <strong>蓝色</strong> 。</li></ul><p>环中连续 <code>k</code> 块瓷砖的颜色如果是 <strong>交替</strong> 颜色（也就是说除了第一块和最后一块瓷砖以外，中间瓷砖的颜色与它 <strong>左边</strong> 和 <strong>右边</strong> 的颜色都不同），那么它被称为一个 <strong>交替</strong> 组。</p><p>请你返回 <strong>交替</strong> 组的数目。</p><p><strong>注意</strong> ，由于 <code>colors</code> 表示一个 <strong>环</strong> ，<strong>第一块</strong> 瓷砖和 <strong>最后一块</strong> 瓷砖是相邻的。</p><p><strong>示例 1：</strong></p><p><strong>输入：</strong> colors = [0,1,0,1,0], k = 3</p><p><strong>输出：</strong> 3</p><p><strong>解释：</strong></p><figure><img src="https://assets.leetcode.com/uploads/2024/06/19/screenshot-2024-05-28-183519.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>交替组包括：</p><p><strong><img src="https://assets.leetcode.com/uploads/2024/05/28/screenshot-2024-05-28-182448.png" alt="" loading="lazy"></strong><img src="https://assets.leetcode.com/uploads/2024/05/28/screenshot-2024-05-28-182844.png" alt="" loading="lazy"><strong><img src="https://assets.leetcode.com/uploads/2024/05/28/screenshot-2024-05-28-183057.png" alt="" loading="lazy"></strong></p><p><strong>示例 2：</strong></p><p><strong>输入：</strong> colors = [0,1,0,0,1,0,1], k = 6</p><p><strong>输出：</strong> 2</p><p><strong>解释：</strong></p><figure><img src="https://assets.leetcode.com/uploads/2024/06/19/screenshot-2024-05-28-183907.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>交替组包括：</p><p><strong><img src="https://assets.leetcode.com/uploads/2024/06/19/screenshot-2024-05-28-184128.png" alt="" loading="lazy"></strong><img src="https://assets.leetcode.com/uploads/2024/06/19/screenshot-2024-05-28-184240.png" alt="" loading="lazy"></p><p><strong>示例 3：</strong></p><p><strong>输入：</strong> colors = [1,1,0,1], k = 4</p><p><strong>输出：</strong> 0</p><p><strong>解释：</strong></p><figure><img src="https://assets.leetcode.com/uploads/2024/06/19/screenshot-2024-05-28-184516.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>提示：</strong></p><ul><li><code>3 &lt;= colors.length &lt;= 10^5</code></li><li><code>0 &lt;= colors[i] &lt;= 1</code></li><li><code>3 &lt;= k &lt;= colors.length</code></li></ul><h2 id="解题思路" tabindex="-1"><a class="header-anchor" href="#解题思路" aria-hidden="true">#</a> 解题思路</h2><p>使用 <strong>滑动窗口</strong> 结合 <strong>循环数组索引</strong> 来统计满足 <code>k</code> 的子序列数量：</p><ol><li><p><strong>初始化变量</strong>：</p><ul><li><code>result = 0</code> 记录满足 <code>k</code> 的交替子序列数量。</li><li><code>groupLen = 1</code> 记录当前交替子序列的长度。</li><li><code>prevColor = colors[0]</code> 记录上一个颜色值。</li></ul></li><li><p><strong>遍历所有可能的子序列</strong>：</p><ul><li><code>n</code> 轮遍历：确保每个元素都至少成为 <strong>起点</strong> 一次。</li><li><code>k - 1</code> 额外遍历：确保即使在数组末尾，仍然可以形成长度至少为 <code>k</code> 的交替子序列。</li><li>因此，循环条件 <code>i &lt; n + k - 1</code> 让我们 多走 <code>k - 1</code> 步，确保所有可能的 <code>k</code> 长度子序列都被统计到。</li><li>计算循环索引 <code>idx = i % n</code> 访问颜色数组。</li><li>如果当前颜色和上一个颜色相同，重置 <code>groupLen = 1</code>，重新开始计算交替子序列。</li><li>如果当前颜色不同，<code>groupLen++</code>，如果 <code>groupLen &gt;= k</code>，则 <code>result++</code>。</li></ul></li><li><p><strong>返回 <code>result</code></strong>。</p></li></ol><h4 id="复杂度分析" tabindex="-1"><a class="header-anchor" href="#复杂度分析" aria-hidden="true">#</a> 复杂度分析</h4><ul><li><strong>时间复杂度</strong>：<code>O(n + k)</code>，遍历 <code>n + k</code> 次。</li><li><strong>空间复杂度</strong>：<code>O(1)</code>，只使用了常数变量。</li></ul><h2 id="代码" tabindex="-1"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span> <span class="token parameter">colors</span>
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">}</span></span> <span class="token parameter">k</span>
 * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">}</span></span>
 */</span>
<span class="token keyword">var</span> <span class="token function-variable function">numberOfAlternatingGroups</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">colors<span class="token punctuation">,</span> k</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">const</span> n <span class="token operator">=</span> colors<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
	<span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">let</span> groupLen <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token keyword">let</span> prevColor <span class="token operator">=</span> colors<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n <span class="token operator">+</span> k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">let</span> idx <span class="token operator">=</span> i <span class="token operator">%</span> n<span class="token punctuation">;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>prevColor <span class="token operator">==</span> colors<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			groupLen <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 重新开始计算</span>
		<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
			groupLen<span class="token operator">++</span><span class="token punctuation">;</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span>groupLen <span class="token operator">&gt;=</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>
				result<span class="token operator">++</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
		prevColor <span class="token operator">=</span> colors<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,61);function y(x,w){const c=t("font"),a=t("RouterLink"),p=t("ExternalLinkIcon");return l(),i("div",null,[g,s("p",null,[n("🟠 "),o(c,{color:"#ffb800"},{default:e(()=>[n("Medium")]),_:1}),n("  🔖  "),o(a,{to:"/tag/array.html"},{default:e(()=>[k]),_:1}),n(),o(a,{to:"/tag/sliding-window.html"},{default:e(()=>[h]),_:1}),n("  🔗 "),s("a",m,[v,o(p)]),n(),s("a",b,[f,o(p)])]),_])}const L=r(u,[["render",y],["__file","3208.html.vue"]]);export{L as default};
