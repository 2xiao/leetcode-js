import{_ as p,r as c,o as r,c as i,a as n,b as e,d as s,w as o,f as d,e as u}from"./app-aQeLbVW9.js";const h={},k=n("h1",{id:"_1784-检查二进制字符串字段",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_1784-检查二进制字符串字段","aria-hidden":"true"},"#"),e(" 1784. 检查二进制字符串字段")],-1),g=n("code",null,"字符串",-1),m={href:"https://leetcode.cn/problems/check-if-binary-string-has-at-most-one-segment-of-ones",target:"_blank",rel:"noopener noreferrer"},_=n("code",null,"力扣",-1),b={href:"https://leetcode.com/problems/check-if-binary-string-has-at-most-one-segment-of-ones",target:"_blank",rel:"noopener noreferrer"},f=n("code",null,"LeetCode",-1),v=u(`<h2 id="题目" tabindex="-1"><a class="header-anchor" href="#题目" aria-hidden="true">#</a> 题目</h2><p>Given a binary string <code>s</code> <strong>​​​​​without leading zeros</strong> , return <code>true</code>​​​ <em>if</em><code>s</code> <em>contains<strong>at most one contiguous segment of ones</strong></em>. Otherwise, return <code>false</code>.</p><p><strong>Example 1:</strong></p><blockquote><p>Input: s = &quot;1001&quot;</p><p>Output: false</p><p>Explanation: The ones do not form a contiguous segment.</p></blockquote><p><strong>Example 2:</strong></p><blockquote><p>Input: s = &quot;110&quot;</p><p>Output: true</p></blockquote><p><strong>Constraints:</strong></p><ul><li><code>1 &lt;= s.length &lt;= 100</code></li><li><code>s[i]</code>​​​​ is either <code>&#39;0&#39;</code> or <code>&#39;1&#39;</code>.</li><li><code>s[0]</code> is <code>&#39;1&#39;</code>.</li></ul><h2 id="题目大意" tabindex="-1"><a class="header-anchor" href="#题目大意" aria-hidden="true">#</a> 题目大意</h2><p>给你一个二进制字符串 <code>s</code> ，该字符串 <strong>不含前导零</strong> 。</p><p>如果 <code>s</code> 包含 <strong>零个或一个由连续的<code>&#39;1&#39;</code> 组成的字段</strong> ，返回 <code>true</code>​​​ 。否则，返回 <code>false</code> 。</p><p><strong>示例 1：</strong></p><blockquote><p><strong>输入：</strong> s = &quot;1001&quot;</p><p><strong>输出：</strong> false</p><p><strong>解释：</strong> 由连续若干个 &#39;1&#39; 组成的字段数量为 2，返回 false</p></blockquote><p><strong>示例 2：</strong></p><blockquote><p><strong>输入：</strong> s = &quot;110&quot;</p><p><strong>输出：</strong> true</p></blockquote><p><strong>提示：</strong></p><ul><li><code>1 &lt;= s.length &lt;= 100</code></li><li><code>s[i]</code>​​​​ 为 <code>&#39;0&#39;</code> 或 <code>&#39;1&#39;</code></li><li><code>s[0]</code> 为 <code>&#39;1&#39;</code></li></ul><h2 id="解题思路" tabindex="-1"><a class="header-anchor" href="#解题思路" aria-hidden="true">#</a> 解题思路</h2><p>由于字符串 <strong>不含前导零</strong>，说明字符串一定是由 <code>&#39;1&#39;</code> 开头，因此符合要求的字符串：</p><ul><li>要么全是 <code>&#39;1&#39;</code>，如 <code>&#39;111111&#39;</code>；</li><li>要么 <code>&#39;1&#39;</code> 之后全是 <code>&#39;0&#39;</code>，如 <code>&#39;111000&#39;</code>；</li></ul><p>因此，我们只需要从后往前遍历字符串，看是否有 <code>&#39;0&#39;</code> 之后又出现 <code>&#39;1&#39;</code> 的情况。</p><ol><li><p>从字符串的最后一位开始遍历字符串，判断段内是否有 <code>&#39;0&#39;</code>：</p><ul><li>遇到第一个 <code>&#39;1&#39;</code> 后，标记 <code>hasOne</code> 为 <code>true</code>。</li><li>如果在已经标记了 <code>hasOne</code> 的情况下，继续遇到 <code>&#39;0&#39;</code>，说明至少存在两个连续的 <code>&#39;1&#39;</code> 段，所以返回 <code>false</code>。</li></ul></li><li><p>如果遍历完字符串没有发现多个 <code>&#39;1&#39;</code> 段的分隔符，则返回 <code>true</code>。</p></li></ol><h4 id="复杂度分析" tabindex="-1"><a class="header-anchor" href="#复杂度分析" aria-hidden="true">#</a> 复杂度分析</h4><ul><li><strong>时间复杂度</strong>：<code>O(n)</code>，其中 <code>n</code> 是字符串的长度，只遍历字符串一次。</li><li><strong>空间复杂度</strong>：<code>O(1)</code>，仅使用了常量空间来存储变量。</li></ul><h2 id="代码" tabindex="-1"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>string<span class="token punctuation">}</span></span> <span class="token parameter">s</span>
 * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>boolean<span class="token punctuation">}</span></span>
 */</span>
<span class="token keyword">var</span> <span class="token function-variable function">checkOnesSegment</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">s</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">let</span> hasOne <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> s<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">&#39;1&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			hasOne <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>hasOne <span class="token operator">&amp;&amp;</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">&#39;0&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="相关题目" tabindex="-1"><a class="header-anchor" href="#相关题目" aria-hidden="true">#</a> 相关题目</h2>`,27),x=n("thead",null,[n("tr",null,[n("th",{style:{"text-align":"center"}},"题号"),n("th",{style:{"text-align":"left"}},"标题"),n("th",{style:{"text-align":"center"}},"题解"),n("th",{style:{"text-align":"left"}},"标签"),n("th",{style:{"text-align":"center"}},"难度"),n("th",{style:{"text-align":"center"}},"力扣")])],-1),y=n("td",{style:{"text-align":"center"}},"1869",-1),q=n("td",{style:{"text-align":"left"}},"哪种连续子字符串更长",-1),w={style:{"text-align":"center"}},O={style:{"text-align":"left"}},E=n("code",null,"字符串",-1),C=n("td",{style:{"text-align":"center"}},"🟢",-1),L={style:{"text-align":"center"}},N={href:"https://leetcode.cn/problems/longer-contiguous-segments-of-ones-than-zeros",target:"_blank",rel:"noopener noreferrer"},V={href:"https://leetcode.com/problems/longer-contiguous-segments-of-ones-than-zeros",target:"_blank",rel:"noopener noreferrer"};function I(j,z){const l=c("font"),a=c("RouterLink"),t=c("ExternalLinkIcon");return r(),i("div",null,[k,n("p",null,[e("🟢 "),s(l,{color:"#15bd66"},{default:o(()=>[e("Easy")]),_:1}),e("  🔖  "),s(a,{to:"/tag/string.html"},{default:o(()=>[g]),_:1}),e("  🔗 "),n("a",m,[_,s(t)]),e(),n("a",b,[f,s(t)])]),v,d(" prettier-ignore "),n("table",null,[x,n("tbody",null,[n("tr",null,[y,q,n("td",w,[s(a,{to:"/problem/1869.html"},{default:o(()=>[e("[✓]")]),_:1})]),n("td",O,[s(a,{to:"/tag/string.html"},{default:o(()=>[E]),_:1})]),C,n("td",L,[n("a",N,[e("🀄️"),s(t)]),e(),n("a",V,[e("🔗"),s(t)])])])])])])}const R=p(h,[["render",I],["__file","1784.html.vue"]]);export{R as default};
