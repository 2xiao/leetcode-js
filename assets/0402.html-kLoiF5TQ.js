import{_ as i,r as l,o as r,c as p,a as t,b as n,d as e,w as s,f as d,e as u}from"./app-B5EG-zH0.js";const h={},_=t("h1",{id:"_402-移掉-k-位数字",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#_402-移掉-k-位数字","aria-hidden":"true"},"#"),n(" 402. 移掉 K 位数字")],-1),m=t("code",null,"栈",-1),k=t("code",null,"贪心",-1),g=t("code",null,"字符串",-1),f=t("code",null,"单调栈",-1),b={href:"https://leetcode.cn/problems/remove-k-digits",target:"_blank",rel:"noopener noreferrer"},v=t("code",null,"力扣",-1),x={href:"https://leetcode.com/problems/remove-k-digits",target:"_blank",rel:"noopener noreferrer"},y=t("code",null,"LeetCode",-1),q=u(`<h2 id="题目" tabindex="-1"><a class="header-anchor" href="#题目" aria-hidden="true">#</a> 题目</h2><p>Given string num representing a non-negative integer <code>num</code>, and an integer <code>k</code>, return <em>the smallest possible integer after removing</em> <code>k</code> <em>digits from</em><code>num</code>.</p><p><strong>Example 1:</strong></p><blockquote><p>Input: num = &quot;1432219&quot;, k = 3</p><p>Output: &quot;1219&quot;</p><p>Explanation: Remove the three digits 4, 3, and 2 to form the new number 1219 which is the smallest.</p></blockquote><p><strong>Example 2:</strong></p><blockquote><p>Input: num = &quot;10200&quot;, k = 1</p><p>Output: &quot;200&quot;</p><p>Explanation: Remove the leading 1 and the number is 200. Note that the output must not contain leading zeroes.</p></blockquote><p><strong>Example 3:</strong></p><blockquote><p>Input: num = &quot;10&quot;, k = 2</p><p>Output: &quot;0&quot;</p><p>Explanation: Remove all the digits from the number and it is left with nothing which is 0.</p></blockquote><p><strong>Constraints:</strong></p><ul><li><code>1 &lt;= k &lt;= num.length &lt;= 10^5</code></li><li><code>num</code> consists of only digits.</li><li><code>num</code> does not have any leading zeros except for the zero itself.</li></ul><h2 id="题目大意" tabindex="-1"><a class="header-anchor" href="#题目大意" aria-hidden="true">#</a> 题目大意</h2><p>给你一个以字符串表示的非负整数 <code>num</code> 和一个整数 <code>k</code> ，移除这个数中的 <code>k</code> 位数字，使得剩下的数字最小。请你以字符串形式返回这个最小的数字。</p><p><strong>示例 1 ：</strong></p><blockquote><p><strong>输入：</strong> num = &quot;1432219&quot;, k = 3</p><p><strong>输出：</strong> &quot;1219&quot;</p><p><strong>解释：</strong> 移除掉三个数字 4, 3, 和 2 形成一个新的最小的数字 1219 。</p></blockquote><p><strong>示例 2 ：</strong></p><blockquote><p><strong>输入：</strong> num = &quot;10200&quot;, k = 1</p><p><strong>输出：</strong> &quot;200&quot;</p><p><strong>解释：</strong> 移掉首位的 1 剩下的数字为 200. 注意输出不能有任何前导零。</p></blockquote><p><strong>示例 3 ：</strong></p><blockquote><p><strong>输入：</strong> num = &quot;10&quot;, k = 2</p><p><strong>输出：</strong> &quot;0&quot;</p><p><strong>解释：</strong> 从原数字移除所有的数字，剩余为空就是 0 。</p></blockquote><p><strong>提示：</strong></p><ul><li><code>1 &lt;= k &lt;= num.length &lt;= 10^5</code></li><li><code>num</code> 仅由若干位数字（0 - 9）组成</li><li>除了 <strong>0</strong> 本身之外，<code>num</code> 不含任何前导零</li></ul><h2 id="解题思路" tabindex="-1"><a class="header-anchor" href="#解题思路" aria-hidden="true">#</a> 解题思路</h2><ul><li><strong>贪心策略 + 单调栈</strong><ul><li>使用单调递增栈存储候选数字，确保栈中元素构成的数最小。</li><li>遍历字符串 <code>num</code> 时，遇到比栈顶元素更小的数字，将栈顶元素弹出以获得更小的结果。</li></ul></li></ul><ol><li><strong>维护单调栈</strong>： <ul><li>遍历 <code>num</code>，当栈不为空、<code>k &gt; 0</code> 且当前字符小于栈顶时弹出栈顶，并减少 <code>k</code>。</li></ul></li><li><strong>处理剩余移除需求</strong>： <ul><li>若 <code>k &gt; 0</code>，说明字符串 <code>num</code>中递增的数字超过所需个数，从栈尾继续移除 <code>k</code> 个字符。</li></ul></li><li><strong>去除前导零</strong>： <ul><li>使用 <code>shift()</code> 去掉栈中多余的前导零。</li></ul></li><li><strong>返回结果</strong>： <ul><li>若栈为空返回 <code>&quot;0&quot;</code>，否则返回拼接后的数字字符串。</li></ul></li></ol><h4 id="复杂度分析" tabindex="-1"><a class="header-anchor" href="#复杂度分析" aria-hidden="true">#</a> 复杂度分析</h4><ul><li><strong>时间复杂度</strong>：<code>O(n)</code>，遍历字符串一次并维护栈操作。</li><li><strong>空间复杂度</strong>：<code>O(n)</code>，栈的空间消耗。</li></ul><h2 id="代码" tabindex="-1"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>string<span class="token punctuation">}</span></span> <span class="token parameter">num</span>
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">}</span></span> <span class="token parameter">k</span>
 * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>string<span class="token punctuation">}</span></span>
 */</span>
<span class="token keyword">var</span> <span class="token function-variable function">removeKdigits</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">num<span class="token punctuation">,</span> k</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">let</span> stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> char <span class="token keyword">of</span> num<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">while</span> <span class="token punctuation">(</span>stack<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> k <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> stack<span class="token punctuation">[</span>stack<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&gt;</span> char<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			k<span class="token operator">--</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>char<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token comment">// 如果 k 还大于 0，从末尾继续删除</span>
	stack <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> stack<span class="token punctuation">.</span>length <span class="token operator">-</span> k<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token comment">// 去除前导零</span>
	<span class="token keyword">while</span> <span class="token punctuation">(</span>stack<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">&#39;0&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		stack<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">return</span> stack<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">?</span> stack<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token string">&#39;0&#39;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="相关题目" tabindex="-1"><a class="header-anchor" href="#相关题目" aria-hidden="true">#</a> 相关题目</h2>`,28),w=t("thead",null,[t("tr",null,[t("th",{style:{"text-align":"center"}},"题号"),t("th",{style:{"text-align":"left"}},"标题"),t("th",{style:{"text-align":"center"}},"题解"),t("th",{style:{"text-align":"left"}},"标签"),t("th",{style:{"text-align":"center"}},"难度"),t("th",{style:{"text-align":"center"}},"力扣")])],-1),E=t("td",{style:{"text-align":"center"}},"321",-1),N=t("td",{style:{"text-align":"left"}},"拼接最大数",-1),z=t("td",{style:{"text-align":"center"}},null,-1),C={style:{"text-align":"left"}},I=t("code",null,"栈",-1),L=t("code",null,"贪心",-1),O=t("code",null,"数组",-1),R=t("code",null,"2+",-1),V=t("td",{style:{"text-align":"center"}},"🔴",-1),j={style:{"text-align":"center"}},B={href:"https://leetcode.cn/problems/create-maximum-number",target:"_blank",rel:"noopener noreferrer"},K={href:"https://leetcode.com/problems/create-maximum-number",target:"_blank",rel:"noopener noreferrer"},G=t("td",{style:{"text-align":"center"}},"738",-1),M=t("td",{style:{"text-align":"left"}},"单调递增的数字",-1),S=t("td",{style:{"text-align":"center"}},null,-1),T={style:{"text-align":"left"}},A=t("code",null,"贪心",-1),D=t("code",null,"数学",-1),F=t("td",{style:{"text-align":"center"}},"🟠",-1),H={style:{"text-align":"center"}},J={href:"https://leetcode.cn/problems/monotone-increasing-digits",target:"_blank",rel:"noopener noreferrer"},P={href:"https://leetcode.com/problems/monotone-increasing-digits",target:"_blank",rel:"noopener noreferrer"},Q=t("td",{style:{"text-align":"center"}},"1673",-1),U=t("td",{style:{"text-align":"left"}},"找出最具竞争力的子序列",-1),W=t("td",{style:{"text-align":"center"}},null,-1),X={style:{"text-align":"left"}},Y=t("code",null,"栈",-1),Z=t("code",null,"贪心",-1),$=t("code",null,"数组",-1),tt=t("code",null,"1+",-1),nt=t("td",{style:{"text-align":"center"}},"🟠",-1),et={style:{"text-align":"center"}},st={href:"https://leetcode.cn/problems/find-the-most-competitive-subsequence",target:"_blank",rel:"noopener noreferrer"},ot={href:"https://leetcode.com/problems/find-the-most-competitive-subsequence",target:"_blank",rel:"noopener noreferrer"},at=t("td",{style:{"text-align":"center"}},"2195",-1),lt=t("td",{style:{"text-align":"left"}},"向数组中追加 K 个整数",-1),ct=t("td",{style:{"text-align":"center"}},null,-1),it={style:{"text-align":"left"}},rt=t("code",null,"贪心",-1),pt=t("code",null,"数组",-1),dt=t("code",null,"数学",-1),ut=t("code",null,"1+",-1),ht=t("td",{style:{"text-align":"center"}},"🟠",-1),_t={style:{"text-align":"center"}},mt={href:"https://leetcode.cn/problems/append-k-integers-with-minimal-sum",target:"_blank",rel:"noopener noreferrer"},kt={href:"https://leetcode.com/problems/append-k-integers-with-minimal-sum",target:"_blank",rel:"noopener noreferrer"},gt=t("td",{style:{"text-align":"center"}},"2259",-1),ft=t("td",{style:{"text-align":"left"}},"移除指定数字得到的最大结果",-1),bt={style:{"text-align":"center"}},vt={style:{"text-align":"left"}},xt=t("code",null,"贪心",-1),yt=t("code",null,"字符串",-1),qt=t("code",null,"枚举",-1),wt=t("td",{style:{"text-align":"center"}},"🟢",-1),Et={style:{"text-align":"center"}},Nt={href:"https://leetcode.cn/problems/remove-digit-from-number-to-maximize-result",target:"_blank",rel:"noopener noreferrer"},zt={href:"https://leetcode.com/problems/remove-digit-from-number-to-maximize-result",target:"_blank",rel:"noopener noreferrer"},Ct=t("td",{style:{"text-align":"center"}},"2844",-1),It=t("td",{style:{"text-align":"left"}},"生成特殊数字的最少操作",-1),Lt=t("td",{style:{"text-align":"center"}},null,-1),Ot={style:{"text-align":"left"}},Rt=t("code",null,"贪心",-1),Vt=t("code",null,"数学",-1),jt=t("code",null,"字符串",-1),Bt=t("code",null,"1+",-1),Kt=t("td",{style:{"text-align":"center"}},"🟠",-1),Gt={style:{"text-align":"center"}},Mt={href:"https://leetcode.cn/problems/minimum-operations-to-make-a-special-number",target:"_blank",rel:"noopener noreferrer"},St={href:"https://leetcode.com/problems/minimum-operations-to-make-a-special-number",target:"_blank",rel:"noopener noreferrer"};function Tt(At,Dt){const c=l("font"),o=l("RouterLink"),a=l("ExternalLinkIcon");return r(),p("div",null,[_,t("p",null,[n("🟠 "),e(c,{color:"#ffb800"},{default:s(()=>[n("Medium")]),_:1}),n("  🔖  "),e(o,{to:"/tag/stack.html"},{default:s(()=>[m]),_:1}),n(),e(o,{to:"/tag/greedy.html"},{default:s(()=>[k]),_:1}),n(),e(o,{to:"/tag/string.html"},{default:s(()=>[g]),_:1}),n(),e(o,{to:"/tag/monotonic-stack.html"},{default:s(()=>[f]),_:1}),n("  🔗 "),t("a",b,[v,e(a)]),n(),t("a",x,[y,e(a)])]),q,d(" prettier-ignore "),t("table",null,[w,t("tbody",null,[t("tr",null,[E,N,z,t("td",C,[e(o,{to:"/tag/stack.html"},{default:s(()=>[I]),_:1}),n(),e(o,{to:"/tag/greedy.html"},{default:s(()=>[L]),_:1}),n(),e(o,{to:"/tag/array.html"},{default:s(()=>[O]),_:1}),n(),R]),V,t("td",j,[t("a",B,[n("🀄️"),e(a)]),n(),t("a",K,[n("🔗"),e(a)])])]),t("tr",null,[G,M,S,t("td",T,[e(o,{to:"/tag/greedy.html"},{default:s(()=>[A]),_:1}),n(),e(o,{to:"/tag/math.html"},{default:s(()=>[D]),_:1})]),F,t("td",H,[t("a",J,[n("🀄️"),e(a)]),n(),t("a",P,[n("🔗"),e(a)])])]),t("tr",null,[Q,U,W,t("td",X,[e(o,{to:"/tag/stack.html"},{default:s(()=>[Y]),_:1}),n(),e(o,{to:"/tag/greedy.html"},{default:s(()=>[Z]),_:1}),n(),e(o,{to:"/tag/array.html"},{default:s(()=>[$]),_:1}),n(),tt]),nt,t("td",et,[t("a",st,[n("🀄️"),e(a)]),n(),t("a",ot,[n("🔗"),e(a)])])]),t("tr",null,[at,lt,ct,t("td",it,[e(o,{to:"/tag/greedy.html"},{default:s(()=>[rt]),_:1}),n(),e(o,{to:"/tag/array.html"},{default:s(()=>[pt]),_:1}),n(),e(o,{to:"/tag/math.html"},{default:s(()=>[dt]),_:1}),n(),ut]),ht,t("td",_t,[t("a",mt,[n("🀄️"),e(a)]),n(),t("a",kt,[n("🔗"),e(a)])])]),t("tr",null,[gt,ft,t("td",bt,[e(o,{to:"/problem/2259.html"},{default:s(()=>[n("[✓]")]),_:1})]),t("td",vt,[e(o,{to:"/tag/greedy.html"},{default:s(()=>[xt]),_:1}),n(),e(o,{to:"/tag/string.html"},{default:s(()=>[yt]),_:1}),n(),e(o,{to:"/tag/enumeration.html"},{default:s(()=>[qt]),_:1})]),wt,t("td",Et,[t("a",Nt,[n("🀄️"),e(a)]),n(),t("a",zt,[n("🔗"),e(a)])])]),t("tr",null,[Ct,It,Lt,t("td",Ot,[e(o,{to:"/tag/greedy.html"},{default:s(()=>[Rt]),_:1}),n(),e(o,{to:"/tag/math.html"},{default:s(()=>[Vt]),_:1}),n(),e(o,{to:"/tag/string.html"},{default:s(()=>[jt]),_:1}),n(),Bt]),Kt,t("td",Gt,[t("a",Mt,[n("🀄️"),e(a)]),n(),t("a",St,[n("🔗"),e(a)])])])])])])}const Ht=i(h,[["render",Tt],["__file","0402.html.vue"]]);export{Ht as default};
