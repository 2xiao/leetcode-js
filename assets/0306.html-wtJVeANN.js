import{_ as r,r as c,o as k,c as d,a as n,b as s,d as t,w as a,f as m,e as b}from"./app-fBVbqwGY.js";const h={},g=n("h1",{id:"_306-累加数",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_306-累加数","aria-hidden":"true"},"#"),s(" 306. 累加数")],-1),v=n("code",null,"字符串",-1),f=n("code",null,"回溯",-1),_={href:"https://leetcode.cn/problems/additive-number",target:"_blank",rel:"noopener noreferrer"},y=n("code",null,"力扣",-1),w={href:"https://leetcode.com/problems/additive-number",target:"_blank",rel:"noopener noreferrer"},x=n("code",null,"LeetCode",-1),q=b('<h2 id="题目" tabindex="-1"><a class="header-anchor" href="#题目" aria-hidden="true">#</a> 题目</h2><p>An <strong>additive number</strong> is a string whose digits can form an <strong>additive sequence</strong>.</p><p>A valid <strong>additive sequence</strong> should contain <strong>at least</strong> three numbers. Except for the first two numbers, each subsequent number in the sequence must be the sum of the preceding two.</p><p>Given a string containing only digits, return <code>true</code> if it is an <strong>additive number</strong> or <code>false</code> otherwise.</p><p><strong>Note:</strong> Numbers in the additive sequence <strong>cannot</strong> have leading zeros, so sequence <code>1, 2, 03</code> or <code>1, 02, 3</code> is invalid.</p><p><strong>Example 1:</strong></p><blockquote><p>Input: &quot;112358&quot;</p><p>Output: true</p><p>Explanation:</p><p>The digits can form an additive sequence: 1, 1, 2, 3, 5, 8.</p><p>1 + 1 = 2, 1 + 2 = 3, 2 + 3 = 5, 3 + 5 = 8</p></blockquote><p><strong>Example 2:</strong></p><blockquote><p>Input: &quot;199100199&quot;</p><p>Output: true</p><p>Explanation:</p><p>The additive sequence is: 1, 99, 100, 199.</p><p>1 + 99 = 100, 99 + 100 = 199</p></blockquote><p><strong>Constraints:</strong></p><ul><li><code>1 &lt;= num.length &lt;= 35</code></li><li><code>num</code> consists only of digits.</li></ul><p><strong>Follow up:</strong> How would you handle overflow for very large input integers?</p><h2 id="题目大意" tabindex="-1"><a class="header-anchor" href="#题目大意" aria-hidden="true">#</a> 题目大意</h2><p><strong>累加数</strong> 是一个字符串，组成它的数字可以形成累加序列。</p><p>一个有效的 <strong>累加序列</strong> 必须<strong>至少</strong> 包含 3 个数。除了最开始的两个数以外，序列中的每个后续数字必须是它之前两个数字之和。</p><p>给你一个只包含数字 <code>&#39;0&#39;-&#39;9&#39;</code> 的字符串，编写一个算法来判断给定输入是否是 <strong>累加数</strong> 。如果是，返回 <code>true</code> ；否则，返回 <code>false</code> 。</p><p><strong>说明：</strong> 累加序列里的数，除数字 0 之外，<strong>不会</strong> 以 0 开头，所以不会出现 <code>1, 2, 03</code> 或者 <code>1, 02, 3</code> 的情况。</p><p><strong>示例 1：</strong></p><blockquote><p><strong>输入：</strong>&quot;112358&quot;</p><p><strong>输出：</strong> true</p><p><strong>解释：</strong> 累加序列为: 1, 1, 2, 3, 5, 8 。1 + 1 = 2, 1 + 2 = 3, 2 + 3 = 5, 3 + 5 = 8</p></blockquote><p><strong>示例 2：</strong></p><blockquote><p><strong>输入：</strong>&quot;199100199&quot;</p><p><strong>输出：</strong> true</p><p><strong>解释：</strong> 累加序列为: 1, 99, 100, 199。1 + 99 = 100, 99 + 100 = 199</p></blockquote><p><strong>提示：</strong></p><ul><li><code>1 &lt;= num.length &lt;= 35</code></li><li><code>num</code> 仅由数字（<code>0 - 9</code>）组成</li></ul><p><strong>进阶：</strong> 你计划如何处理由过大的整数输入导致的溢出?</p><h2 id="解题思路" tabindex="-1"><a class="header-anchor" href="#解题思路" aria-hidden="true">#</a> 解题思路</h2><h3 id="思路一-回溯法" tabindex="-1"><a class="header-anchor" href="#思路一-回溯法" aria-hidden="true">#</a> 思路一：回溯法</h3><ol><li>定义一个数组 <code>track</code>，存储当前选取的累加数序列。</li><li>从字符串的起始位置 <code>start</code> 开始递归： <ul><li>终止条件：当字符串遍历完且累加数序列长度 ≥ 3 时，返回 <code>true</code>。</li><li>枚举从 <code>start</code> 到 <code>num.length</code> 的所有子串： <ol><li>如果子串有前导零且长度大于 1，则跳过。</li><li>将子串转换为数字 <code>next</code>，判断是否满足累加数性质： <ul><li>如果满足，将其加入 <code>track</code> 并递归。</li><li>如果递归成功，则直接返回 <code>true</code>。</li><li>否则，回溯，移除当前数字。</li></ul></li></ol></li><li>剪枝优化：如果当前子串的值不等于前两个数字之和，直接跳过当前分割。</li></ul></li><li>如果所有分割均不满足条件，返回 <code>false</code>。</li></ol><h4 id="复杂度分析" tabindex="-1"><a class="header-anchor" href="#复杂度分析" aria-hidden="true">#</a> 复杂度分析</h4><ul><li><strong>时间复杂度</strong>：<code>O(2^n)</code>，每个字符都有两种选择（加入当前数字或不加入）。</li><li><strong>空间复杂度</strong>：<code>O(n)</code>，递归栈和存储路径的数组。</li></ul><hr><h3 id="思路二-迭代法" tabindex="-1"><a class="header-anchor" href="#思路二-迭代法" aria-hidden="true">#</a> 思路二：迭代法</h3><ol><li>使用两层循环枚举前两个数字的分割位置，确定初始的两个累加数： <ul><li>第一层循环确定第一个数字的长度。</li><li>第二层循环确定第二个数字的长度。</li></ul></li><li>从第三个数字开始，逐步验证剩余部分是否满足累加数性质。</li><li>验证过程： <ul><li>初始化两个累加数 <code>first</code> 和 <code>second</code>。</li><li>从剩余字符串中逐个匹配累加和： <ul><li>如果匹配成功，则更新累加数，继续验证下一个数字。</li><li>如果不匹配，立即终止当前分割。</li></ul></li></ul></li><li>如果某种分割方式成功匹配完整个字符串，则返回 <code>true</code>；否则，返回 <code>false</code>。</li></ol><h4 id="复杂度分析-1" tabindex="-1"><a class="header-anchor" href="#复杂度分析-1" aria-hidden="true">#</a> 复杂度分析</h4><ul><li><strong>时间复杂度</strong>：<code>O(2^n)</code>，两层循环枚举所有可能的分割点。</li><li><strong>空间复杂度</strong>：<code>O(1)</code>，无需额外的递归栈或路径存储。</li></ul><h2 id="代码" tabindex="-1"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h2>',35),j=n("div",{class:"language-javascript line-numbers-mode","data-ext":"js"},[n("pre",{class:"language-javascript"},[n("code",null,[n("span",{class:"token doc-comment comment"},[s(`/**
 * `),n("span",{class:"token keyword"},"@param"),s(),n("span",{class:"token class-name"},[n("span",{class:"token punctuation"},"{"),s("string"),n("span",{class:"token punctuation"},"}")]),s(),n("span",{class:"token parameter"},"num"),s(`
 * `),n("span",{class:"token keyword"},"@return"),s(),n("span",{class:"token class-name"},[n("span",{class:"token punctuation"},"{"),s("boolean"),n("span",{class:"token punctuation"},"}")]),s(`
 */`)]),s(`
`),n("span",{class:"token keyword"},"var"),s(),n("span",{class:"token function-variable function"},"isAdditiveNumber"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"function"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"num"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
	`),n("span",{class:"token keyword"},"let"),s(" track "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),s(`

	`),n("span",{class:"token keyword"},"const"),s(),n("span",{class:"token function-variable function"},"backtrack"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"start"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"=>"),s(),n("span",{class:"token punctuation"},"{"),s(`
		`),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("start "),n("span",{class:"token operator"},"==="),s(" num"),n("span",{class:"token punctuation"},"."),s("length "),n("span",{class:"token operator"},"&&"),s(" track"),n("span",{class:"token punctuation"},"."),s("length "),n("span",{class:"token operator"},">="),s(),n("span",{class:"token number"},"3"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token boolean"},"true"),n("span",{class:"token punctuation"},";"),s(`

		`),n("span",{class:"token keyword"},"for"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"let"),s(" i "),n("span",{class:"token operator"},"="),s(" start"),n("span",{class:"token punctuation"},";"),s(" i "),n("span",{class:"token operator"},"<"),s(" num"),n("span",{class:"token punctuation"},"."),s("length"),n("span",{class:"token punctuation"},";"),s(" i"),n("span",{class:"token operator"},"++"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
			`),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("num"),n("span",{class:"token punctuation"},"["),s("start"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token operator"},"==="),s(),n("span",{class:"token string"},"'0'"),s(),n("span",{class:"token operator"},"&&"),s(" i "),n("span",{class:"token operator"},">"),s(" start"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token keyword"},"break"),n("span",{class:"token punctuation"},";"),s(),n("span",{class:"token comment"},"// 前导零"),s(`
			`),n("span",{class:"token keyword"},"const"),s(" next "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token function"},"Number"),n("span",{class:"token punctuation"},"("),s("num"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"slice"),n("span",{class:"token punctuation"},"("),s("start"),n("span",{class:"token punctuation"},","),s(" i "),n("span",{class:"token operator"},"+"),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`

			`),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s(`
				track`),n("span",{class:"token punctuation"},"."),s("length "),n("span",{class:"token operator"},">="),s(),n("span",{class:"token number"},"2"),s(),n("span",{class:"token operator"},"&&"),s(`
				track`),n("span",{class:"token punctuation"},"["),s("track"),n("span",{class:"token punctuation"},"."),s("length "),n("span",{class:"token operator"},"-"),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token operator"},"+"),s(" track"),n("span",{class:"token punctuation"},"["),s("track"),n("span",{class:"token punctuation"},"."),s("length "),n("span",{class:"token operator"},"-"),s(),n("span",{class:"token number"},"2"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token operator"},"!=="),s(` next
			`),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
				`),n("span",{class:"token keyword"},"continue"),n("span",{class:"token punctuation"},";"),s(`
			`),n("span",{class:"token punctuation"},"}"),s(`

			track`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"push"),n("span",{class:"token punctuation"},"("),s("next"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
			`),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token function"},"backtrack"),n("span",{class:"token punctuation"},"("),s("i "),n("span",{class:"token operator"},"+"),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token boolean"},"true"),n("span",{class:"token punctuation"},";"),s(`
			track`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"pop"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
		`),n("span",{class:"token punctuation"},"}"),s(`
		`),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token boolean"},"false"),n("span",{class:"token punctuation"},";"),s(`
	`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";"),s(`

	`),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token function"},"backtrack"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),N=n("div",{class:"language-javascript line-numbers-mode","data-ext":"js"},[n("pre",{class:"language-javascript"},[n("code",null,[n("span",{class:"token doc-comment comment"},[s(`/**
 * `),n("span",{class:"token keyword"},"@param"),s(),n("span",{class:"token class-name"},[n("span",{class:"token punctuation"},"{"),s("string"),n("span",{class:"token punctuation"},"}")]),s(),n("span",{class:"token parameter"},"num"),s(`
 * `),n("span",{class:"token keyword"},"@return"),s(),n("span",{class:"token class-name"},[n("span",{class:"token punctuation"},"{"),s("boolean"),n("span",{class:"token punctuation"},"}")]),s(`
 */`)]),s(`
`),n("span",{class:"token keyword"},"var"),s(),n("span",{class:"token function-variable function"},"isAdditiveNumber"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"function"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"num"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
	`),n("span",{class:"token keyword"},"const"),s(" n "),n("span",{class:"token operator"},"="),s(" num"),n("span",{class:"token punctuation"},"."),s("length"),n("span",{class:"token punctuation"},";"),s(`

	`),n("span",{class:"token keyword"},"const"),s(),n("span",{class:"token function-variable function"},"isValid"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},[s("first"),n("span",{class:"token punctuation"},","),s(" second"),n("span",{class:"token punctuation"},","),s(" start")]),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"=>"),s(),n("span",{class:"token punctuation"},"{"),s(`
		`),n("span",{class:"token keyword"},"while"),s(),n("span",{class:"token punctuation"},"("),s("start "),n("span",{class:"token operator"},"<"),s(" n"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
			`),n("span",{class:"token keyword"},"const"),s(" sum "),n("span",{class:"token operator"},"="),s(" first "),n("span",{class:"token operator"},"+"),s(" second"),n("span",{class:"token punctuation"},";"),s(`
			`),n("span",{class:"token keyword"},"const"),s(" sumStr "),n("span",{class:"token operator"},"="),s(" sum"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"toString"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`

			`),n("span",{class:"token comment"},"// 如果剩余的字符串不以 sumStr 开头，直接返回 false"),s(`
			`),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token operator"},"!"),s("num"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"startsWith"),n("span",{class:"token punctuation"},"("),s("sumStr"),n("span",{class:"token punctuation"},","),s(" start"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token boolean"},"false"),n("span",{class:"token punctuation"},";"),s(`

			`),n("span",{class:"token comment"},"// 移动到下一段"),s(`
			start `),n("span",{class:"token operator"},"+="),s(" sumStr"),n("span",{class:"token punctuation"},"."),s("length"),n("span",{class:"token punctuation"},";"),s(`

			`),n("span",{class:"token comment"},"// 更新 first 和 second"),s(`
			`),n("span",{class:"token punctuation"},"["),s("first"),n("span",{class:"token punctuation"},","),s(" second"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"["),s("second"),n("span",{class:"token punctuation"},","),s(" sum"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),s(`
		`),n("span",{class:"token punctuation"},"}"),s(`
		`),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token boolean"},"true"),n("span",{class:"token punctuation"},";"),s(`
	`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";"),s(`

	`),n("span",{class:"token keyword"},"for"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"let"),s(" i "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},";"),s(" i "),n("span",{class:"token operator"},"<"),s(" n"),n("span",{class:"token punctuation"},";"),s(" i"),n("span",{class:"token operator"},"++"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
		`),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("i "),n("span",{class:"token operator"},">"),s(),n("span",{class:"token number"},"1"),s(),n("span",{class:"token operator"},"&&"),s(" num"),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token operator"},"==="),s(),n("span",{class:"token string"},"'0'"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token keyword"},"break"),n("span",{class:"token punctuation"},";"),s(),n("span",{class:"token comment"},"// 第一个数字不能有前导零"),s(`
		`),n("span",{class:"token keyword"},"const"),s(" first "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token function"},"Number"),n("span",{class:"token punctuation"},"("),s("num"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"slice"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},","),s(" i"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`

		`),n("span",{class:"token keyword"},"for"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"let"),s(" j "),n("span",{class:"token operator"},"="),s(" i "),n("span",{class:"token operator"},"+"),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},";"),s(" j "),n("span",{class:"token operator"},"<"),s(" n"),n("span",{class:"token punctuation"},";"),s(" j"),n("span",{class:"token operator"},"++"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
			`),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("j "),n("span",{class:"token operator"},">"),s(" i "),n("span",{class:"token operator"},"+"),s(),n("span",{class:"token number"},"1"),s(),n("span",{class:"token operator"},"&&"),s(" num"),n("span",{class:"token punctuation"},"["),s("i"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token operator"},"==="),s(),n("span",{class:"token string"},"'0'"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token keyword"},"break"),n("span",{class:"token punctuation"},";"),s(),n("span",{class:"token comment"},"// 第二个数字不能有前导零"),s(`
			`),n("span",{class:"token keyword"},"const"),s(" second "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token function"},"Number"),n("span",{class:"token punctuation"},"("),s("num"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"slice"),n("span",{class:"token punctuation"},"("),s("i"),n("span",{class:"token punctuation"},","),s(" j"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`

			`),n("span",{class:"token comment"},"// 检查从 j 开始的序列是否满足累加数性质"),s(`
			`),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token function"},"isValid"),n("span",{class:"token punctuation"},"("),s("first"),n("span",{class:"token punctuation"},","),s(" second"),n("span",{class:"token punctuation"},","),s(" j"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token boolean"},"true"),n("span",{class:"token punctuation"},";"),s(`
		`),n("span",{class:"token punctuation"},"}"),s(`
	`),n("span",{class:"token punctuation"},"}"),s(`

	`),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token boolean"},"false"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),A=n("h2",{id:"相关题目",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#相关题目","aria-hidden":"true"},"#"),s(" 相关题目")],-1),E=n("thead",null,[n("tr",null,[n("th",{style:{"text-align":"center"}},"题号"),n("th",{style:{"text-align":"left"}},"标题"),n("th",{style:{"text-align":"center"}},"题解"),n("th",{style:{"text-align":"left"}},"标签"),n("th",{style:{"text-align":"center"}},"难度"),n("th",{style:{"text-align":"center"}},"力扣")])],-1),C=n("td",{style:{"text-align":"center"}},"842",-1),V=n("td",{style:{"text-align":"left"}},"将数组拆分成斐波那契序列",-1),O=n("td",{style:{"text-align":"center"}},null,-1),S={style:{"text-align":"left"}},L=n("code",null,"字符串",-1),T=n("code",null,"回溯",-1),I=n("td",{style:{"text-align":"center"}},"🟠",-1),B={style:{"text-align":"center"}},R={href:"https://leetcode.cn/problems/split-array-into-fibonacci-sequence",target:"_blank",rel:"noopener noreferrer"},z={href:"https://leetcode.com/problems/split-array-into-fibonacci-sequence",target:"_blank",rel:"noopener noreferrer"};function F(G,H){const i=c("font"),e=c("RouterLink"),o=c("ExternalLinkIcon"),u=c("CodeTabs");return k(),d("div",null,[g,n("p",null,[s("🟠 "),t(i,{color:"#ffb800"},{default:a(()=>[s("Medium")]),_:1}),s("  🔖  "),t(e,{to:"/tag/string.html"},{default:a(()=>[v]),_:1}),s(),t(e,{to:"/tag/backtracking.html"},{default:a(()=>[f]),_:1}),s("  🔗 "),n("a",_,[y,t(o)]),s(),n("a",w,[x,t(o)])]),q,t(u,{id:"304",data:[{id:"回溯法"},{id:"迭代法"}]},{title0:a(({value:l,isActive:p})=>[s("回溯法")]),title1:a(({value:l,isActive:p})=>[s("迭代法")]),tab0:a(({value:l,isActive:p})=>[j]),tab1:a(({value:l,isActive:p})=>[N]),_:1}),A,m(" prettier-ignore "),n("table",null,[E,n("tbody",null,[n("tr",null,[C,V,O,n("td",S,[t(e,{to:"/tag/string.html"},{default:a(()=>[L]),_:1}),s(),t(e,{to:"/tag/backtracking.html"},{default:a(()=>[T]),_:1})]),I,n("td",B,[n("a",R,[s("🀄️"),t(o)]),s(),n("a",z,[s("🔗"),t(o)])])])])])])}const W=r(h,[["render",F],["__file","0306.html.vue"]]);export{W as default};
