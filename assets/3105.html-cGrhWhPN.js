import{_ as d,r as a,o as r,c as l,a as n,b as s,d as e,w as c,e as i}from"./app-B5EG-zH0.js";const u={},k=n("h1",{id:"_3105-最长的严格递增或递减子数组",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_3105-最长的严格递增或递减子数组","aria-hidden":"true"},"#"),s(" 3105. 最长的严格递增或递减子数组")],-1),m=n("code",null,"数组",-1),g={href:"https://leetcode.cn/problems/longest-strictly-increasing-or-strictly-decreasing-subarray",target:"_blank",rel:"noopener noreferrer"},v=n("code",null,"力扣",-1),h={href:"https://leetcode.com/problems/longest-strictly-increasing-or-strictly-decreasing-subarray",target:"_blank",rel:"noopener noreferrer"},b=n("code",null,"LeetCode",-1),y=i(`<h2 id="题目" tabindex="-1"><a class="header-anchor" href="#题目" aria-hidden="true">#</a> 题目</h2><p>You are given an array of integers <code>nums</code>. Return _the length of the<strong>longest</strong> subarray of _<code>nums</code> <em>which is either<strong>strictly increasing</strong> or <strong>strictly decreasing</strong></em>.</p><p><strong>Example 1:</strong></p><p><strong>Input:</strong> nums = [1,4,3,3,2]</p><p><strong>Output:</strong> 2</p><p><strong>Explanation:</strong></p><p>The strictly increasing subarrays of <code>nums</code> are <code>[1]</code>, <code>[2]</code>, <code>[3]</code>, <code>[3]</code>, <code>[4]</code>, and <code>[1,4]</code>.</p><p>The strictly decreasing subarrays of <code>nums</code> are <code>[1]</code>, <code>[2]</code>, <code>[3]</code>, <code>[3]</code>, <code>[4]</code>, <code>[3,2]</code>, and <code>[4,3]</code>.</p><p>Hence, we return <code>2</code>.</p><p><strong>Example 2:</strong></p><p><strong>Input:</strong> nums = [3,3,3,3]</p><p><strong>Output:</strong> 1</p><p><strong>Explanation:</strong></p><p>The strictly increasing subarrays of <code>nums</code> are <code>[3]</code>, <code>[3]</code>, <code>[3]</code>, and <code>[3]</code>.</p><p>The strictly decreasing subarrays of <code>nums</code> are <code>[3]</code>, <code>[3]</code>, <code>[3]</code>, and <code>[3]</code>.</p><p>Hence, we return <code>1</code>.</p><p><strong>Example 3:</strong></p><p><strong>Input:</strong> nums = [3,2,1]</p><p><strong>Output:</strong> 3</p><p><strong>Explanation:</strong></p><p>The strictly increasing subarrays of <code>nums</code> are <code>[3]</code>, <code>[2]</code>, and <code>[1]</code>.</p><p>The strictly decreasing subarrays of <code>nums</code> are <code>[3]</code>, <code>[2]</code>, <code>[1]</code>, <code>[3,2]</code>, <code>[2,1]</code>, and <code>[3,2,1]</code>.</p><p>Hence, we return <code>3</code>.</p><p><strong>Constraints:</strong></p><ul><li><code>1 &lt;= nums.length &lt;= 50</code></li><li><code>1 &lt;= nums[i] &lt;= 50</code></li></ul><h2 id="题目大意" tabindex="-1"><a class="header-anchor" href="#题目大意" aria-hidden="true">#</a> 题目大意</h2><p>给你一个整数数组 <code>nums</code> 。</p><p>返回数组 <code>nums</code> 中 <strong>严格递增</strong> 或 **严格递减 **的最长非空子数组的长度。</p><p><strong>示例 1：</strong></p><p><strong>输入：</strong> nums = [1,4,3,3,2]</p><p><strong>输出：</strong> 2</p><p><strong>解释：</strong></p><p><code>nums</code> 中严格递增的子数组有<code>[1]</code>、<code>[2]</code>、<code>[3]</code>、<code>[3]</code>、<code>[4]</code> 以及 <code>[1,4]</code> 。</p><p><code>nums</code> 中严格递减的子数组有<code>[1]</code>、<code>[2]</code>、<code>[3]</code>、<code>[3]</code>、<code>[4]</code>、<code>[3,2]</code> 以及 <code>[4,3]</code> 。</p><p>因此，返回 <code>2</code> 。</p><p><strong>示例 2：</strong></p><p><strong>输入：</strong> nums = [3,3,3,3]</p><p><strong>输出：</strong> 1</p><p><strong>解释：</strong></p><p><code>nums</code> 中严格递增的子数组有 <code>[3]</code>、<code>[3]</code>、<code>[3]</code> 以及 <code>[3]</code> 。</p><p><code>nums</code> 中严格递减的子数组有 <code>[3]</code>、<code>[3]</code>、<code>[3]</code> 以及 <code>[3]</code> 。</p><p>因此，返回 <code>1</code> 。</p><p><strong>示例 3：</strong></p><p><strong>输入：</strong> nums = [3,2,1]</p><p><strong>输出：</strong> 3</p><p><strong>解释：</strong></p><p><code>nums</code> 中严格递增的子数组有 <code>[3]</code>、<code>[2]</code> 以及 <code>[1]</code> 。</p><p><code>nums</code> 中严格递减的子数组有 <code>[3]</code>、<code>[2]</code>、<code>[1]</code>、<code>[3,2]</code>、<code>[2,1]</code> 以及 <code>[3,2,1]</code> 。</p><p>因此，返回 <code>3</code> 。</p><p><strong>提示：</strong></p><ul><li><code>1 &lt;= nums.length &lt;= 50</code></li><li><code>1 &lt;= nums[i] &lt;= 50</code></li></ul><h2 id="解题思路" tabindex="-1"><a class="header-anchor" href="#解题思路" aria-hidden="true">#</a> 解题思路</h2><ol><li><p><strong>变量定义</strong></p><ul><li><code>prev</code>: 记录前一个元素值，用于比较。</li><li><code>increase</code>: 当前递增子数组长度。</li><li><code>decrease</code>: 当前递减子数组长度。</li><li><code>maxIncrease</code>: 遍历过程中记录的最大递增长度。</li><li><code>maxDecrease</code>: 遍历过程中记录的最大递减长度。</li></ul></li><li><p><strong>遍历规则</strong></p><ul><li><strong>递增情况 (<code>num &gt; prev</code>)</strong>： <ul><li>重置 <code>decrease</code> 为 <code>1</code>。</li><li>递增长度 <code>increase</code> 加 1，并更新 <code>maxIncrease</code>。</li></ul></li><li><strong>递减情况 (<code>num &lt; prev</code>)</strong>： <ul><li>重置 <code>increase</code> 为 <code>1</code>。</li><li>递减长度 <code>decrease</code> 加 1，并更新 <code>maxDecrease</code>。</li></ul></li><li><strong>相等情况 (<code>num == prev</code>)</strong>： <ul><li>同时重置 <code>increase</code> 和 <code>decrease</code> 为 <code>1</code>。</li></ul></li></ul></li><li><p><strong>终止条件</strong> 遍历完成后，返回 <code>maxIncrease</code> 和 <code>maxDecrease</code> 中的较大值，即为最终结果。</p></li></ol><h4 id="复杂度分析" tabindex="-1"><a class="header-anchor" href="#复杂度分析" aria-hidden="true">#</a> 复杂度分析</h4><ul><li><strong>时间复杂度</strong>：<code>O(n)</code>，只需一次线性遍历。</li><li><strong>空间复杂度</strong>：<code>O(1)</code>，仅使用常数额外空间。</li></ul><h2 id="代码" tabindex="-1"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span> <span class="token parameter">nums</span>
 * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">}</span></span>
 */</span>
<span class="token keyword">var</span> <span class="token function-variable function">longestMonotonicSubarray</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">nums</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">let</span> prev <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token keyword">let</span> increase <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token keyword">let</span> decrease <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token keyword">let</span> maxIncrease <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token keyword">let</span> maxDecrease <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">const</span> num <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">&gt;</span> prev<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			decrease <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
			increase<span class="token operator">++</span><span class="token punctuation">;</span>
			maxIncrease <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>increase<span class="token punctuation">,</span> maxIncrease<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">&lt;</span> prev<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			increase <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
			decrease<span class="token operator">++</span><span class="token punctuation">;</span>
			maxDecrease <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>decrease<span class="token punctuation">,</span> maxDecrease<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
			increase <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
			decrease <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		prev <span class="token operator">=</span> num<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>maxIncrease<span class="token punctuation">,</span> maxDecrease<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,57);function _(f,x){const t=a("font"),p=a("RouterLink"),o=a("ExternalLinkIcon");return r(),l("div",null,[k,n("p",null,[s("🟢 "),e(t,{color:"#15bd66"},{default:c(()=>[s("Easy")]),_:1}),s("  🔖  "),e(p,{to:"/tag/array.html"},{default:c(()=>[m]),_:1}),s("  🔗 "),n("a",g,[v,e(o)]),s(),n("a",h,[b,e(o)])]),y])}const I=d(u,[["render",_],["__file","3105.html.vue"]]);export{I as default};
