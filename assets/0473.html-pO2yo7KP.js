import{_ as l,r as c,o as i,c as r,a as n,b as s,d as a,w as t,f as u,e as d}from"./app-aQeLbVW9.js";const k={},m=n("h1",{id:"_473-火柴拼正方形",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_473-火柴拼正方形","aria-hidden":"true"},"#"),s(" 473. 火柴拼正方形")],-1),h=n("code",null,"位运算",-1),g=n("code",null,"数组",-1),b=n("code",null,"动态规划",-1),_=n("code",null,"回溯",-1),f=n("code",null,"状态压缩",-1),v={href:"https://leetcode.cn/problems/matchsticks-to-square",target:"_blank",rel:"noopener noreferrer"},y=n("code",null,"力扣",-1),x={href:"https://leetcode.com/problems/matchsticks-to-square",target:"_blank",rel:"noopener noreferrer"},w=n("code",null,"LeetCode",-1),q=d(`<h2 id="题目" tabindex="-1"><a class="header-anchor" href="#题目" aria-hidden="true">#</a> 题目</h2><p>You are given an integer array <code>matchsticks</code> where <code>matchsticks[i]</code> is the length of the <code>ith</code> matchstick. You want to use <strong>all the matchsticks</strong> to make one square. You <strong>should not break</strong> any stick, but you can link them up, and each matchstick must be used <strong>exactly one time</strong>.</p><p>Return <code>true</code> if you can make this square and <code>false</code> otherwise.</p><p><strong>Example 1:</strong></p><figure><img src="https://assets.leetcode.com/uploads/2021/04/09/matchsticks1-grid.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><blockquote><p>Input: matchsticks = [1,1,2,2,2]</p><p>Output: true</p><p>Explanation: You can form a square with length 2, one side of the square came two sticks with length 1.</p></blockquote><p><strong>Example 2:</strong></p><blockquote><p>Input: matchsticks = [3,3,3,3,4]</p><p>Output: false</p><p>Explanation: You cannot find a way to form a square with all the matchsticks.</p></blockquote><p><strong>Constraints:</strong></p><ul><li><code>1 &lt;= matchsticks.length &lt;= 15</code></li><li><code>1 &lt;= matchsticks[i] &lt;= 10^8</code></li></ul><h2 id="题目大意" tabindex="-1"><a class="header-anchor" href="#题目大意" aria-hidden="true">#</a> 题目大意</h2><p>你将得到一个整数数组 <code>matchsticks</code> ，其中 <code>matchsticks[i]</code> 是第 <code>i</code> 个火柴棒的长度。你要用 <strong>所有的火柴棍</strong> 拼成一个正方形。你 <strong>不能折断</strong> 任何一根火柴棒，但你可以把它们连在一起，而且每根火柴棒必须 <strong>使用一次</strong> 。</p><p>如果你能使这个正方形，则返回 <code>true</code> ，否则返回 <code>false</code> 。</p><p><strong>示例 1:</strong></p><figure><img src="https://assets.leetcode.com/uploads/2021/04/09/matchsticks1-grid.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><blockquote><p><strong>输入:</strong> matchsticks = [1,1,2,2,2]</p><p><strong>输出:</strong> true</p><p><strong>解释:</strong> 能拼成一个边长为 2 的正方形，每边两根火柴。</p></blockquote><p><strong>示例 2:</strong></p><blockquote><p><strong>输入:</strong> matchsticks = [3,3,3,3,4]</p><p><strong>输出:</strong> false</p><p><strong>解释:</strong> 不能用所有火柴拼成一个正方形。</p></blockquote><p><strong>提示:</strong></p><ul><li><code>1 &lt;= matchsticks.length &lt;= 15</code></li><li><code>1 &lt;= matchsticks[i] &lt;= 10^8</code></li></ul><h2 id="解题思路" tabindex="-1"><a class="header-anchor" href="#解题思路" aria-hidden="true">#</a> 解题思路</h2><ol><li><p><strong>基础检查</strong></p><ul><li>计算所有火柴的长度总和 <code>sum</code>，如果 <code>sum % 4 !== 0</code> 或者火柴数量小于 <code>4</code>，直接返回 <code>false</code>。</li><li><code>sum / 4</code> 作为正方形的边长 <code>sideLen</code>。</li></ul></li><li><p><strong>预处理</strong></p><ul><li><strong>降序排序</strong>：<code>matchsticks.sort((a, b) =&gt; b - a)</code><br><strong>剪枝优化</strong>：尽量先放长的火柴，如果最长的火柴都无法成功填充某个边，则不需要尝试更短的火柴。</li></ul></li><li><p><strong>回溯搜索</strong></p><ul><li><strong><code>sides[i]</code> 记录当前 <code>4</code> 条边的长度</strong>。</li><li>遍历所有火柴，每次尝试将当前火柴放到 <code>4</code> 条边的某一条上： <ul><li>如果 <code>sides[i] + matchsticks[x] &gt; sideLen</code>，说明放不下，跳过。</li><li><strong>回溯 + 递归</strong>：放置后继续尝试下一个火柴。</li><li><strong>回溯撤销</strong>：如果当前分支失败，撤回 <code>sides[i]</code> 的加法，尝试其他方案。</li></ul></li></ul></li><li><p><strong>剪枝优化</strong></p><ul><li>如果某条边 <code>sides[i]</code> 还未填充，但和前一条边 <code>sides[i-1]</code> 相等，则可以跳过，减少重复搜索。</li></ul></li></ol><h4 id="复杂度分析" tabindex="-1"><a class="header-anchor" href="#复杂度分析" aria-hidden="true">#</a> 复杂度分析</h4><ul><li><strong>时间复杂度</strong>：<code>O(4^n)</code>（最坏情况），但剪枝优化后，实际远小于指数级，在 <code>n &lt;= 15</code> 以内的情况下能快速求解。</li><li><strong>空间复杂度</strong>：<code>O(n)</code>，递归调用栈深度最多 <code>n</code>。</li></ul><h2 id="代码" tabindex="-1"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> <span class="token function-variable function">makesquare</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">matchsticks</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">const</span> sum <span class="token operator">=</span> matchsticks<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">acc<span class="token punctuation">,</span> cur</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> acc <span class="token operator">+</span> cur<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>sum <span class="token operator">%</span> <span class="token number">4</span> <span class="token operator">!==</span> <span class="token number">0</span> <span class="token operator">||</span> matchsticks<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>

	matchsticks<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> b <span class="token operator">-</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 先排序，优先放大火柴</span>
	<span class="token keyword">const</span> sideLen <span class="token operator">=</span> sum <span class="token operator">/</span> <span class="token number">4</span><span class="token punctuation">;</span>
	<span class="token keyword">const</span> sides <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">const</span> <span class="token function-variable function">backtrack</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">index</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">===</span> matchsticks<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> sides<span class="token punctuation">.</span><span class="token function">every</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">side</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> side <span class="token operator">===</span> sideLen<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>

		<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span>sides<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> matchsticks<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">&gt;</span> sideLen<span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span> <span class="token comment">// 剪枝 1: 剪掉无效选择</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> sides<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">===</span> sides<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span> <span class="token comment">// 剪枝 2: 避免相同状态重复搜索</span>

			sides<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span> matchsticks<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">backtrack</span><span class="token punctuation">(</span>index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
			sides<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-=</span> matchsticks<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 回溯</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span><span class="token punctuation">;</span>

	<span class="token keyword">return</span> <span class="token function">backtrack</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="相关题目" tabindex="-1"><a class="header-anchor" href="#相关题目" aria-hidden="true">#</a> 相关题目</h2>`,27),L=n("thead",null,[n("tr",null,[n("th",{style:{"text-align":"center"}},"题号"),n("th",{style:{"text-align":"left"}},"标题"),n("th",{style:{"text-align":"center"}},"题解"),n("th",{style:{"text-align":"left"}},"标签"),n("th",{style:{"text-align":"center"}},"难度"),n("th",{style:{"text-align":"center"}},"力扣")])],-1),E=n("td",{style:{"text-align":"center"}},"2397",-1),j=n("td",{style:{"text-align":"left"}},"被列覆盖的最多行数",-1),C=n("td",{style:{"text-align":"center"}},null,-1),N={style:{"text-align":"left"}},V=n("code",null,"位运算",-1),Y=n("code",null,"数组",-1),I=n("code",null,"回溯",-1),O=n("code",null,"2+",-1),B=n("td",{style:{"text-align":"center"}},"🟠",-1),R={style:{"text-align":"center"}},z={href:"https://leetcode.cn/problems/maximum-rows-covered-by-columns",target:"_blank",rel:"noopener noreferrer"},A={href:"https://leetcode.com/problems/maximum-rows-covered-by-columns",target:"_blank",rel:"noopener noreferrer"};function M(S,T){const p=c("font"),e=c("RouterLink"),o=c("ExternalLinkIcon");return i(),r("div",null,[m,n("p",null,[s("🟠 "),a(p,{color:"#ffb800"},{default:t(()=>[s("Medium")]),_:1}),s("  🔖  "),a(e,{to:"/tag/bit-manipulation.html"},{default:t(()=>[h]),_:1}),s(),a(e,{to:"/tag/array.html"},{default:t(()=>[g]),_:1}),s(),a(e,{to:"/tag/dynamic-programming.html"},{default:t(()=>[b]),_:1}),s(),a(e,{to:"/tag/backtracking.html"},{default:t(()=>[_]),_:1}),s(),a(e,{to:"/tag/bitmask.html"},{default:t(()=>[f]),_:1}),s("  🔗 "),n("a",v,[y,a(o)]),s(),n("a",x,[w,a(o)])]),q,u(" prettier-ignore "),n("table",null,[L,n("tbody",null,[n("tr",null,[E,j,C,n("td",N,[a(e,{to:"/tag/bit-manipulation.html"},{default:t(()=>[V]),_:1}),s(),a(e,{to:"/tag/array.html"},{default:t(()=>[Y]),_:1}),s(),a(e,{to:"/tag/backtracking.html"},{default:t(()=>[I]),_:1}),s(),O]),B,n("td",R,[n("a",z,[s("🀄️"),a(o)]),s(),n("a",A,[s("🔗"),a(o)])])])])])])}const F=l(k,[["render",M],["__file","0473.html.vue"]]);export{F as default};
