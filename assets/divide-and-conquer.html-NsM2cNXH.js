import{_,r as d,o as r,c,a as t,d as o,w as n,b as e,f as a}from"./app-aQeLbVW9.js";const i={},h=t("h1",{id:"分治",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#分治","aria-hidden":"true"},"#"),e(" 分治")],-1),u=t("summary",null,"全部标签",-1),g=t("p",null,[t("strong",null,"数据结构")],-1),f=t("code",null,"数组",-1),m=t("code",null,"矩阵",-1),y=t("code",null,"链表",-1),p=t("code",null,"双向链表",-1),x=t("code",null,"栈",-1),b=t("code",null,"单调栈",-1),k=t("code",null,"队列",-1),q=t("code",null,"单调队列",-1),v=t("code",null,"堆（优先队列）",-1),z=t("code",null,"哈希表",-1),w=t("code",null,"字符串",-1),I=t("code",null,"字符串匹配",-1),j=t("code",null,"树",-1),K=t("code",null,"二叉树",-1),O=t("code",null,"二叉搜索树",-1),B=t("code",null,"最小生成树",-1),C=t("code",null,"图",-1),L=t("code",null,"有序集合",-1),N=t("code",null,"拓扑排序",-1),V=t("code",null,"最短路",-1),E=t("code",null,"强连通分量",-1),R=t("code",null,"欧拉回路",-1),T=t("code",null,"双连通分量",-1),W=t("code",null,"并查集",-1),A=t("code",null,"字典树",-1),H=t("code",null,"线段树",-1),S=t("code",null,"树状数组",-1),X=t("code",null,"后缀数组",-1),D=t("p",null,[t("strong",null,"算法")],-1),F=t("code",null,"枚举",-1),G=t("code",null,"递归",-1),J=t("span",{class:"blue"},"分治",-1),M=t("code",null,"回溯",-1),P=t("code",null,"贪心",-1),Q=t("code",null,"动态规划",-1),U=t("code",null,"排序",-1),Y=t("code",null,"桶排序",-1),Z=t("code",null,"计数排序",-1),$=t("code",null,"基数排序",-1),tt=t("code",null,"归并排序",-1),et=t("code",null,"快速选择",-1),ot=t("code",null,"二分查找",-1),lt=t("code",null,"记忆化搜索",-1),nt=t("code",null,"深度优先搜索",-1),st=t("code",null,"广度优先搜索",-1),dt=t("code",null,"双指针",-1),_t=t("code",null,"位运算",-1),rt=t("code",null,"前缀和",-1),ct=t("code",null,"计数",-1),at=t("code",null,"滑动窗口",-1),it=t("code",null,"状态压缩",-1),ht=t("code",null,"哈希函数",-1),ut=t("code",null,"滚动哈希",-1),gt=t("code",null,"扫描线",-1),ft=t("p",null,[t("strong",null,"其他")],-1),mt=t("code",null,"数学",-1),yt=t("code",null,"数论",-1),pt=t("code",null,"几何",-1),xt=t("code",null,"博弈",-1),bt=t("code",null,"模拟",-1),kt=t("code",null,"组合数学",-1),qt=t("code",null,"随机化",-1),vt=t("code",null,"概率与统计",-1),zt=t("code",null,"水塘抽样",-1),wt=t("code",null,"拒绝采样",-1),It=t("code",null,"数据库",-1),jt=t("code",null,"设计",-1),Kt=t("code",null,"数据流",-1),Ot=t("code",null,"脑筋急转弯",-1),Bt=t("code",null,"交互",-1),Ct=t("code",null,"迭代器",-1),Lt=t("code",null,"多线程",-1),Nt=t("hr",null,null,-1),Vt=t("thead",null,[t("tr",null,[t("th",{style:{"text-align":"center"}},"题号"),t("th",{style:{"text-align":"left"}},"标题"),t("th",{style:{"text-align":"center"}},"题解"),t("th",{style:{"text-align":"left"}},"标签"),t("th",{style:{"text-align":"center"}},"难度"),t("th",{style:{"text-align":"center"}},"力扣")])],-1),Et=t("td",{style:{"text-align":"center"}},"4",-1),Rt=t("td",{style:{"text-align":"left"}},"寻找两个正序数组的中位数",-1),Tt={style:{"text-align":"center"}},Wt={style:{"text-align":"left"}},At=t("code",null,"数组",-1),Ht=t("code",null,"二分查找",-1),St=t("code",null,"分治",-1),Xt=t("td",{style:{"text-align":"center"}},"🔴",-1),Dt={style:{"text-align":"center"}},Ft={href:"https://leetcode.cn/problems/median-of-two-sorted-arrays",target:"_blank",rel:"noopener noreferrer"},Gt={href:"https://leetcode.com/problems/median-of-two-sorted-arrays",target:"_blank",rel:"noopener noreferrer"},Jt=t("td",{style:{"text-align":"center"}},"23",-1),Mt=t("td",{style:{"text-align":"left"}},"合并 K 个升序链表",-1),Pt={style:{"text-align":"center"}},Qt={style:{"text-align":"left"}},Ut=t("code",null,"链表",-1),Yt=t("code",null,"分治",-1),Zt=t("code",null,"堆（优先队列）",-1),$t=t("code",null,"1+",-1),te=t("td",{style:{"text-align":"center"}},"🔴",-1),ee={style:{"text-align":"center"}},oe={href:"https://leetcode.cn/problems/merge-k-sorted-lists",target:"_blank",rel:"noopener noreferrer"},le={href:"https://leetcode.com/problems/merge-k-sorted-lists",target:"_blank",rel:"noopener noreferrer"},ne=t("td",{style:{"text-align":"center"}},"53",-1),se=t("td",{style:{"text-align":"left"}},"最大子数组和",-1),de={style:{"text-align":"center"}},_e={style:{"text-align":"left"}},re=t("code",null,"数组",-1),ce=t("code",null,"分治",-1),ae=t("code",null,"动态规划",-1),ie=t("td",{style:{"text-align":"center"}},"🟠",-1),he={style:{"text-align":"center"}},ue={href:"https://leetcode.cn/problems/maximum-subarray",target:"_blank",rel:"noopener noreferrer"},ge={href:"https://leetcode.com/problems/maximum-subarray",target:"_blank",rel:"noopener noreferrer"},fe=t("td",{style:{"text-align":"center"}},"105",-1),me=t("td",{style:{"text-align":"left"}},"从前序与中序遍历序列构造二叉树",-1),ye={style:{"text-align":"center"}},pe={style:{"text-align":"left"}},xe=t("code",null,"树",-1),be=t("code",null,"数组",-1),ke=t("code",null,"哈希表",-1),qe=t("code",null,"2+",-1),ve=t("td",{style:{"text-align":"center"}},"🟠",-1),ze={style:{"text-align":"center"}},we={href:"https://leetcode.cn/problems/construct-binary-tree-from-preorder-and-inorder-traversal",target:"_blank",rel:"noopener noreferrer"},Ie={href:"https://leetcode.com/problems/construct-binary-tree-from-preorder-and-inorder-traversal",target:"_blank",rel:"noopener noreferrer"},je=t("td",{style:{"text-align":"center"}},"106",-1),Ke=t("td",{style:{"text-align":"left"}},"从中序与后序遍历序列构造二叉树",-1),Oe={style:{"text-align":"center"}},Be={style:{"text-align":"left"}},Ce=t("code",null,"树",-1),Le=t("code",null,"数组",-1),Ne=t("code",null,"哈希表",-1),Ve=t("code",null,"2+",-1),Ee=t("td",{style:{"text-align":"center"}},"🟠",-1),Re={style:{"text-align":"center"}},Te={href:"https://leetcode.cn/problems/construct-binary-tree-from-inorder-and-postorder-traversal",target:"_blank",rel:"noopener noreferrer"},We={href:"https://leetcode.com/problems/construct-binary-tree-from-inorder-and-postorder-traversal",target:"_blank",rel:"noopener noreferrer"},Ae=t("td",{style:{"text-align":"center"}},"108",-1),He=t("td",{style:{"text-align":"left"}},"将有序数组转换为二叉搜索树",-1),Se={style:{"text-align":"center"}},Xe={style:{"text-align":"left"}},De=t("code",null,"树",-1),Fe=t("code",null,"二叉搜索树",-1),Ge=t("code",null,"数组",-1),Je=t("code",null,"2+",-1),Me=t("td",{style:{"text-align":"center"}},"🟢",-1),Pe={style:{"text-align":"center"}},Qe={href:"https://leetcode.cn/problems/convert-sorted-array-to-binary-search-tree",target:"_blank",rel:"noopener noreferrer"},Ue={href:"https://leetcode.com/problems/convert-sorted-array-to-binary-search-tree",target:"_blank",rel:"noopener noreferrer"},Ye=t("td",{style:{"text-align":"center"}},"109",-1),Ze=t("td",{style:{"text-align":"left"}},"有序链表转换二叉搜索树",-1),$e={style:{"text-align":"center"}},to={style:{"text-align":"left"}},eo=t("code",null,"树",-1),oo=t("code",null,"二叉搜索树",-1),lo=t("code",null,"链表",-1),no=t("code",null,"2+",-1),so=t("td",{style:{"text-align":"center"}},"🟠",-1),_o={style:{"text-align":"center"}},ro={href:"https://leetcode.cn/problems/convert-sorted-list-to-binary-search-tree",target:"_blank",rel:"noopener noreferrer"},co={href:"https://leetcode.com/problems/convert-sorted-list-to-binary-search-tree",target:"_blank",rel:"noopener noreferrer"},ao=t("td",{style:{"text-align":"center"}},"148",-1),io=t("td",{style:{"text-align":"left"}},"排序链表",-1),ho={style:{"text-align":"center"}},uo={style:{"text-align":"left"}},go=t("code",null,"链表",-1),fo=t("code",null,"双指针",-1),mo=t("code",null,"分治",-1),yo=t("code",null,"2+",-1),po=t("td",{style:{"text-align":"center"}},"🟠",-1),xo={style:{"text-align":"center"}},bo={href:"https://leetcode.cn/problems/sort-list",target:"_blank",rel:"noopener noreferrer"},ko={href:"https://leetcode.com/problems/sort-list",target:"_blank",rel:"noopener noreferrer"},qo=t("td",{style:{"text-align":"center"}},"169",-1),vo=t("td",{style:{"text-align":"left"}},"多数元素",-1),zo={style:{"text-align":"center"}},wo={style:{"text-align":"left"}},Io=t("code",null,"数组",-1),jo=t("code",null,"哈希表",-1),Ko=t("code",null,"分治",-1),Oo=t("code",null,"2+",-1),Bo=t("td",{style:{"text-align":"center"}},"🟢",-1),Co={style:{"text-align":"center"}},Lo={href:"https://leetcode.cn/problems/majority-element",target:"_blank",rel:"noopener noreferrer"},No={href:"https://leetcode.com/problems/majority-element",target:"_blank",rel:"noopener noreferrer"},Vo=t("td",{style:{"text-align":"center"}},"190",-1),Eo=t("td",{style:{"text-align":"left"}},"颠倒二进制位",-1),Ro={style:{"text-align":"center"}},To={style:{"text-align":"left"}},Wo=t("code",null,"位运算",-1),Ao=t("code",null,"分治",-1),Ho=t("td",{style:{"text-align":"center"}},"🟢",-1),So={style:{"text-align":"center"}},Xo={href:"https://leetcode.cn/problems/reverse-bits",target:"_blank",rel:"noopener noreferrer"},Do={href:"https://leetcode.com/problems/reverse-bits",target:"_blank",rel:"noopener noreferrer"},Fo=t("td",{style:{"text-align":"center"}},"191",-1),Go=t("td",{style:{"text-align":"left"}},"位1的个数",-1),Jo={style:{"text-align":"center"}},Mo={style:{"text-align":"left"}},Po=t("code",null,"位运算",-1),Qo=t("code",null,"分治",-1),Uo=t("td",{style:{"text-align":"center"}},"🟢",-1),Yo={style:{"text-align":"center"}},Zo={href:"https://leetcode.cn/problems/number-of-1-bits",target:"_blank",rel:"noopener noreferrer"},$o={href:"https://leetcode.com/problems/number-of-1-bits",target:"_blank",rel:"noopener noreferrer"},tl=t("td",{style:{"text-align":"center"}},"215",-1),el=t("td",{style:{"text-align":"left"}},"数组中的第K个最大元素",-1),ol={style:{"text-align":"center"}},ll={style:{"text-align":"left"}},nl=t("code",null,"数组",-1),sl=t("code",null,"分治",-1),dl=t("code",null,"快速选择",-1),_l=t("code",null,"2+",-1),rl=t("td",{style:{"text-align":"center"}},"🟠",-1),cl={style:{"text-align":"center"}},al={href:"https://leetcode.cn/problems/kth-largest-element-in-an-array",target:"_blank",rel:"noopener noreferrer"},il={href:"https://leetcode.com/problems/kth-largest-element-in-an-array",target:"_blank",rel:"noopener noreferrer"},hl=t("td",{style:{"text-align":"center"}},"218",-1),ul=t("td",{style:{"text-align":"left"}},"天际线问题",-1),gl=t("td",{style:{"text-align":"center"}},null,-1),fl={style:{"text-align":"left"}},ml=t("code",null,"树状数组",-1),yl=t("code",null,"线段树",-1),pl=t("code",null,"数组",-1),xl=t("code",null,"4+",-1),bl=t("td",{style:{"text-align":"center"}},"🔴",-1),kl={style:{"text-align":"center"}},ql={href:"https://leetcode.cn/problems/the-skyline-problem",target:"_blank",rel:"noopener noreferrer"},vl={href:"https://leetcode.com/problems/the-skyline-problem",target:"_blank",rel:"noopener noreferrer"},zl=t("td",{style:{"text-align":"center"}},"240",-1),wl=t("td",{style:{"text-align":"left"}},"搜索二维矩阵 II",-1),Il={style:{"text-align":"center"}},jl={style:{"text-align":"left"}},Kl=t("code",null,"数组",-1),Ol=t("code",null,"二分查找",-1),Bl=t("code",null,"分治",-1),Cl=t("code",null,"1+",-1),Ll=t("td",{style:{"text-align":"center"}},"🟠",-1),Nl={style:{"text-align":"center"}},Vl={href:"https://leetcode.cn/problems/search-a-2d-matrix-ii",target:"_blank",rel:"noopener noreferrer"},El={href:"https://leetcode.com/problems/search-a-2d-matrix-ii",target:"_blank",rel:"noopener noreferrer"},Rl=t("td",{style:{"text-align":"center"}},"315",-1),Tl=t("td",{style:{"text-align":"left"}},"计算右侧小于当前元素的个数",-1),Wl=t("td",{style:{"text-align":"center"}},null,-1),Al={style:{"text-align":"left"}},Hl=t("code",null,"树状数组",-1),Sl=t("code",null,"线段树",-1),Xl=t("code",null,"数组",-1),Dl=t("code",null,"4+",-1),Fl=t("td",{style:{"text-align":"center"}},"🔴",-1),Gl={style:{"text-align":"center"}},Jl={href:"https://leetcode.cn/problems/count-of-smaller-numbers-after-self",target:"_blank",rel:"noopener noreferrer"},Ml={href:"https://leetcode.com/problems/count-of-smaller-numbers-after-self",target:"_blank",rel:"noopener noreferrer"},Pl=t("td",{style:{"text-align":"center"}},"324",-1),Ql=t("td",{style:{"text-align":"left"}},"摆动排序 II",-1),Ul=t("td",{style:{"text-align":"center"}},null,-1),Yl={style:{"text-align":"left"}},Zl=t("code",null,"贪心",-1),$l=t("code",null,"数组",-1),tn=t("code",null,"分治",-1),en=t("code",null,"2+",-1),on=t("td",{style:{"text-align":"center"}},"🟠",-1),ln={style:{"text-align":"center"}},nn={href:"https://leetcode.cn/problems/wiggle-sort-ii",target:"_blank",rel:"noopener noreferrer"},sn={href:"https://leetcode.com/problems/wiggle-sort-ii",target:"_blank",rel:"noopener noreferrer"},dn=t("td",{style:{"text-align":"center"}},"327",-1),_n=t("td",{style:{"text-align":"left"}},"区间和的个数",-1),rn=t("td",{style:{"text-align":"center"}},null,-1),cn={style:{"text-align":"left"}},an=t("code",null,"树状数组",-1),hn=t("code",null,"线段树",-1),un=t("code",null,"数组",-1),gn=t("code",null,"4+",-1),fn=t("td",{style:{"text-align":"center"}},"🔴",-1),mn={style:{"text-align":"center"}},yn={href:"https://leetcode.cn/problems/count-of-range-sum",target:"_blank",rel:"noopener noreferrer"},pn={href:"https://leetcode.com/problems/count-of-range-sum",target:"_blank",rel:"noopener noreferrer"},xn=t("td",{style:{"text-align":"center"}},"347",-1),bn=t("td",{style:{"text-align":"left"}},"前 K 个高频元素",-1),kn={style:{"text-align":"center"}},qn={style:{"text-align":"left"}},vn=t("code",null,"数组",-1),zn=t("code",null,"哈希表",-1),wn=t("code",null,"分治",-1),In=t("code",null,"5+",-1),jn=t("td",{style:{"text-align":"center"}},"🟠",-1),Kn={style:{"text-align":"center"}},On={href:"https://leetcode.cn/problems/top-k-frequent-elements",target:"_blank",rel:"noopener noreferrer"},Bn={href:"https://leetcode.com/problems/top-k-frequent-elements",target:"_blank",rel:"noopener noreferrer"},Cn=t("td",{style:{"text-align":"center"}},"372",-1),Ln=t("td",{style:{"text-align":"left"}},"超级次方",-1),Nn={style:{"text-align":"center"}},Vn={style:{"text-align":"left"}},En=t("code",null,"数学",-1),Rn=t("code",null,"分治",-1),Tn=t("td",{style:{"text-align":"center"}},"🟠",-1),Wn={style:{"text-align":"center"}},An={href:"https://leetcode.cn/problems/super-pow",target:"_blank",rel:"noopener noreferrer"},Hn={href:"https://leetcode.com/problems/super-pow",target:"_blank",rel:"noopener noreferrer"},Sn=t("td",{style:{"text-align":"center"}},"395",-1),Xn=t("td",{style:{"text-align":"left"}},"至少有 K 个重复字符的最长子串",-1),Dn={style:{"text-align":"center"}},Fn={style:{"text-align":"left"}},Gn=t("code",null,"哈希表",-1),Jn=t("code",null,"字符串",-1),Mn=t("code",null,"分治",-1),Pn=t("code",null,"1+",-1),Qn=t("td",{style:{"text-align":"center"}},"🟠",-1),Un={style:{"text-align":"center"}},Yn={href:"https://leetcode.cn/problems/longest-substring-with-at-least-k-repeating-characters",target:"_blank",rel:"noopener noreferrer"},Zn={href:"https://leetcode.com/problems/longest-substring-with-at-least-k-repeating-characters",target:"_blank",rel:"noopener noreferrer"},$n=t("td",{style:{"text-align":"center"}},"427",-1),ts=t("td",{style:{"text-align":"left"}},"建立四叉树",-1),es={style:{"text-align":"center"}},os={style:{"text-align":"left"}},ls=t("code",null,"树",-1),ns=t("code",null,"数组",-1),ss=t("code",null,"分治",-1),ds=t("code",null,"1+",-1),_s=t("td",{style:{"text-align":"center"}},"🟠",-1),rs={style:{"text-align":"center"}},cs={href:"https://leetcode.cn/problems/construct-quad-tree",target:"_blank",rel:"noopener noreferrer"},as={href:"https://leetcode.com/problems/construct-quad-tree",target:"_blank",rel:"noopener noreferrer"},is=t("td",{style:{"text-align":"center"}},"493",-1),hs=t("td",{style:{"text-align":"left"}},"翻转对",-1),us=t("td",{style:{"text-align":"center"}},null,-1),gs={style:{"text-align":"left"}},fs=t("code",null,"树状数组",-1),ms=t("code",null,"线段树",-1),ys=t("code",null,"数组",-1),ps=t("code",null,"4+",-1),xs=t("td",{style:{"text-align":"center"}},"🔴",-1),bs={style:{"text-align":"center"}},ks={href:"https://leetcode.cn/problems/reverse-pairs",target:"_blank",rel:"noopener noreferrer"},qs={href:"https://leetcode.com/problems/reverse-pairs",target:"_blank",rel:"noopener noreferrer"},vs=t("td",{style:{"text-align":"center"}},"558",-1),zs=t("td",{style:{"text-align":"left"}},"四叉树交集",-1),ws=t("td",{style:{"text-align":"center"}},null,-1),Is={style:{"text-align":"left"}},js=t("code",null,"树",-1),Ks=t("code",null,"分治",-1),Os=t("td",{style:{"text-align":"center"}},"🟠",-1),Bs={style:{"text-align":"center"}},Cs={href:"https://leetcode.cn/problems/logical-or-of-two-binary-grids-represented-as-quad-trees",target:"_blank",rel:"noopener noreferrer"},Ls={href:"https://leetcode.com/problems/logical-or-of-two-binary-grids-represented-as-quad-trees",target:"_blank",rel:"noopener noreferrer"},Ns=t("td",{style:{"text-align":"center"}},"654",-1),Vs=t("td",{style:{"text-align":"left"}},"最大二叉树",-1),Es={style:{"text-align":"center"}},Rs={style:{"text-align":"left"}},Ts=t("code",null,"栈",-1),Ws=t("code",null,"树",-1),As=t("code",null,"数组",-1),Hs=t("code",null,"3+",-1),Ss=t("td",{style:{"text-align":"center"}},"🟠",-1),Xs={style:{"text-align":"center"}},Ds={href:"https://leetcode.cn/problems/maximum-binary-tree",target:"_blank",rel:"noopener noreferrer"},Fs={href:"https://leetcode.com/problems/maximum-binary-tree",target:"_blank",rel:"noopener noreferrer"},Gs=t("td",{style:{"text-align":"center"}},"889",-1),Js=t("td",{style:{"text-align":"left"}},"根据前序和后序遍历构造二叉树",-1),Ms={style:{"text-align":"center"}},Ps={style:{"text-align":"left"}},Qs=t("code",null,"树",-1),Us=t("code",null,"数组",-1),Ys=t("code",null,"哈希表",-1),Zs=t("code",null,"2+",-1),$s=t("td",{style:{"text-align":"center"}},"🟠",-1),td={style:{"text-align":"center"}},ed={href:"https://leetcode.cn/problems/construct-binary-tree-from-preorder-and-postorder-traversal",target:"_blank",rel:"noopener noreferrer"},od={href:"https://leetcode.com/problems/construct-binary-tree-from-preorder-and-postorder-traversal",target:"_blank",rel:"noopener noreferrer"},ld=t("td",{style:{"text-align":"center"}},"912",-1),nd=t("td",{style:{"text-align":"left"}},"排序数组",-1),sd=t("td",{style:{"text-align":"center"}},null,-1),dd={style:{"text-align":"left"}},_d=t("code",null,"数组",-1),rd=t("code",null,"分治",-1),cd=t("code",null,"桶排序",-1),ad=t("code",null,"5+",-1),id=t("td",{style:{"text-align":"center"}},"🟠",-1),hd={style:{"text-align":"center"}},ud={href:"https://leetcode.cn/problems/sort-an-array",target:"_blank",rel:"noopener noreferrer"},gd={href:"https://leetcode.com/problems/sort-an-array",target:"_blank",rel:"noopener noreferrer"},fd=t("td",{style:{"text-align":"center"}},"918",-1),md=t("td",{style:{"text-align":"left"}},"环形子数组的最大和",-1),yd={style:{"text-align":"center"}},pd={style:{"text-align":"left"}},xd=t("code",null,"队列",-1),bd=t("code",null,"数组",-1),kd=t("code",null,"分治",-1),qd=t("code",null,"2+",-1),vd=t("td",{style:{"text-align":"center"}},"🟠",-1),zd={style:{"text-align":"center"}},wd={href:"https://leetcode.cn/problems/maximum-sum-circular-subarray",target:"_blank",rel:"noopener noreferrer"},Id={href:"https://leetcode.com/problems/maximum-sum-circular-subarray",target:"_blank",rel:"noopener noreferrer"},jd=t("td",{style:{"text-align":"center"}},"932",-1),Kd=t("td",{style:{"text-align":"left"}},"漂亮数组",-1),Od=t("td",{style:{"text-align":"center"}},null,-1),Bd={style:{"text-align":"left"}},Cd=t("code",null,"数组",-1),Ld=t("code",null,"数学",-1),Nd=t("code",null,"分治",-1),Vd=t("td",{style:{"text-align":"center"}},"🟠",-1),Ed={style:{"text-align":"center"}},Rd={href:"https://leetcode.cn/problems/beautiful-array",target:"_blank",rel:"noopener noreferrer"},Td={href:"https://leetcode.com/problems/beautiful-array",target:"_blank",rel:"noopener noreferrer"},Wd=t("td",{style:{"text-align":"center"}},"973",-1),Ad=t("td",{style:{"text-align":"left"}},"最接近原点的 K 个点",-1),Hd={style:{"text-align":"center"}},Sd={style:{"text-align":"left"}},Xd=t("code",null,"几何",-1),Dd=t("code",null,"数组",-1),Fd=t("code",null,"数学",-1),Gd=t("code",null,"4+",-1),Jd=t("td",{style:{"text-align":"center"}},"🟠",-1),Md={style:{"text-align":"center"}},Pd={href:"https://leetcode.cn/problems/k-closest-points-to-origin",target:"_blank",rel:"noopener noreferrer"},Qd={href:"https://leetcode.com/problems/k-closest-points-to-origin",target:"_blank",rel:"noopener noreferrer"},Ud=t("td",{style:{"text-align":"center"}},"1274",-1),Yd=t("td",{style:{"text-align":"left"}},"矩形内船只的数目 🔒",-1),Zd=t("td",{style:{"text-align":"center"}},null,-1),$d={style:{"text-align":"left"}},t_=t("code",null,"数组",-1),e_=t("code",null,"分治",-1),o_=t("code",null,"交互",-1),l_=t("td",{style:{"text-align":"center"}},"🔴",-1),n_={style:{"text-align":"center"}},s_={href:"https://leetcode.cn/problems/number-of-ships-in-a-rectangle",target:"_blank",rel:"noopener noreferrer"},d_={href:"https://leetcode.com/problems/number-of-ships-in-a-rectangle",target:"_blank",rel:"noopener noreferrer"},__=t("td",{style:{"text-align":"center"}},"1382",-1),r_=t("td",{style:{"text-align":"left"}},"将二叉搜索树变平衡",-1),c_=t("td",{style:{"text-align":"center"}},null,-1),a_={style:{"text-align":"left"}},i_=t("code",null,"贪心",-1),h_=t("code",null,"树",-1),u_=t("code",null,"深度优先搜索",-1),g_=t("code",null,"3+",-1),f_=t("td",{style:{"text-align":"center"}},"🟠",-1),m_={style:{"text-align":"center"}},y_={href:"https://leetcode.cn/problems/balance-a-binary-search-tree",target:"_blank",rel:"noopener noreferrer"},p_={href:"https://leetcode.com/problems/balance-a-binary-search-tree",target:"_blank",rel:"noopener noreferrer"},x_=t("td",{style:{"text-align":"center"}},"1569",-1),b_=t("td",{style:{"text-align":"left"}},"将子数组重新排序得到同一个二叉搜索树的方案数",-1),k_=t("td",{style:{"text-align":"center"}},null,-1),q_={style:{"text-align":"left"}},v_=t("code",null,"树",-1),z_=t("code",null,"并查集",-1),w_=t("code",null,"二叉搜索树",-1),I_=t("code",null,"7+",-1),j_=t("td",{style:{"text-align":"center"}},"🔴",-1),K_={style:{"text-align":"center"}},O_={href:"https://leetcode.cn/problems/number-of-ways-to-reorder-array-to-get-same-bst",target:"_blank",rel:"noopener noreferrer"},B_={href:"https://leetcode.com/problems/number-of-ways-to-reorder-array-to-get-same-bst",target:"_blank",rel:"noopener noreferrer"},C_=t("td",{style:{"text-align":"center"}},"1649",-1),L_=t("td",{style:{"text-align":"left"}},"通过指令创建有序数组",-1),N_=t("td",{style:{"text-align":"center"}},null,-1),V_={style:{"text-align":"left"}},E_=t("code",null,"树状数组",-1),R_=t("code",null,"线段树",-1),T_=t("code",null,"数组",-1),W_=t("code",null,"4+",-1),A_=t("td",{style:{"text-align":"center"}},"🔴",-1),H_={style:{"text-align":"center"}},S_={href:"https://leetcode.cn/problems/create-sorted-array-through-instructions",target:"_blank",rel:"noopener noreferrer"},X_={href:"https://leetcode.com/problems/create-sorted-array-through-instructions",target:"_blank",rel:"noopener noreferrer"},D_=t("td",{style:{"text-align":"center"}},"1738",-1),F_=t("td",{style:{"text-align":"left"}},"找出第 K 大的异或坐标值",-1),G_=t("td",{style:{"text-align":"center"}},null,-1),J_={style:{"text-align":"left"}},M_=t("code",null,"位运算",-1),P_=t("code",null,"数组",-1),Q_=t("code",null,"分治",-1),U_=t("code",null,"5+",-1),Y_=t("td",{style:{"text-align":"center"}},"🟠",-1),Z_={style:{"text-align":"center"}},$_={href:"https://leetcode.cn/problems/find-kth-largest-xor-coordinate-value",target:"_blank",rel:"noopener noreferrer"},tr={href:"https://leetcode.com/problems/find-kth-largest-xor-coordinate-value",target:"_blank",rel:"noopener noreferrer"},er=t("td",{style:{"text-align":"center"}},"1763",-1),or=t("td",{style:{"text-align":"left"}},"最长的美好子字符串",-1),lr={style:{"text-align":"center"}},nr={style:{"text-align":"left"}},sr=t("code",null,"位运算",-1),dr=t("code",null,"哈希表",-1),_r=t("code",null,"字符串",-1),rr=t("code",null,"2+",-1),cr=t("td",{style:{"text-align":"center"}},"🟢",-1),ar={style:{"text-align":"center"}},ir={href:"https://leetcode.cn/problems/longest-nice-substring",target:"_blank",rel:"noopener noreferrer"},hr={href:"https://leetcode.com/problems/longest-nice-substring",target:"_blank",rel:"noopener noreferrer"},ur=t("td",{style:{"text-align":"center"}},"1982",-1),gr=t("td",{style:{"text-align":"left"}},"从子集的和还原数组",-1),fr=t("td",{style:{"text-align":"center"}},null,-1),mr={style:{"text-align":"left"}},yr=t("code",null,"数组",-1),pr=t("code",null,"分治",-1),xr=t("td",{style:{"text-align":"center"}},"🔴",-1),br={style:{"text-align":"center"}},kr={href:"https://leetcode.cn/problems/find-array-given-subset-sums",target:"_blank",rel:"noopener noreferrer"},qr={href:"https://leetcode.com/problems/find-array-given-subset-sums",target:"_blank",rel:"noopener noreferrer"},vr=t("td",{style:{"text-align":"center"}},"1985",-1),zr=t("td",{style:{"text-align":"left"}},"找出数组中的第 K 大整数",-1),wr=t("td",{style:{"text-align":"center"}},null,-1),Ir={style:{"text-align":"left"}},jr=t("code",null,"数组",-1),Kr=t("code",null,"字符串",-1),Or=t("code",null,"分治",-1),Br=t("code",null,"3+",-1),Cr=t("td",{style:{"text-align":"center"}},"🟠",-1),Lr={style:{"text-align":"center"}},Nr={href:"https://leetcode.cn/problems/find-the-kth-largest-integer-in-the-array",target:"_blank",rel:"noopener noreferrer"},Vr={href:"https://leetcode.com/problems/find-the-kth-largest-integer-in-the-array",target:"_blank",rel:"noopener noreferrer"},Er=t("td",{style:{"text-align":"center"}},"2031",-1),Rr=t("td",{style:{"text-align":"left"}},"1 比 0 多的子数组个数 🔒",-1),Tr=t("td",{style:{"text-align":"center"}},null,-1),Wr={style:{"text-align":"left"}},Ar=t("code",null,"树状数组",-1),Hr=t("code",null,"线段树",-1),Sr=t("code",null,"数组",-1),Xr=t("code",null,"4+",-1),Dr=t("td",{style:{"text-align":"center"}},"🟠",-1),Fr={style:{"text-align":"center"}},Gr={href:"https://leetcode.cn/problems/count-subarrays-with-more-ones-than-zeros",target:"_blank",rel:"noopener noreferrer"},Jr={href:"https://leetcode.com/problems/count-subarrays-with-more-ones-than-zeros",target:"_blank",rel:"noopener noreferrer"},Mr=t("td",{style:{"text-align":"center"}},"2179",-1),Pr=t("td",{style:{"text-align":"left"}},"统计数组中好三元组数目",-1),Qr=t("td",{style:{"text-align":"center"}},null,-1),Ur={style:{"text-align":"left"}},Yr=t("code",null,"树状数组",-1),Zr=t("code",null,"线段树",-1),$r=t("code",null,"数组",-1),tc=t("code",null,"4+",-1),ec=t("td",{style:{"text-align":"center"}},"🔴",-1),oc={style:{"text-align":"center"}},lc={href:"https://leetcode.cn/problems/count-good-triplets-in-an-array",target:"_blank",rel:"noopener noreferrer"},nc={href:"https://leetcode.com/problems/count-good-triplets-in-an-array",target:"_blank",rel:"noopener noreferrer"},sc=t("td",{style:{"text-align":"center"}},"2343",-1),dc=t("td",{style:{"text-align":"left"}},"裁剪数字后查询第 K 小的数字",-1),_c=t("td",{style:{"text-align":"center"}},null,-1),rc={style:{"text-align":"left"}},cc=t("code",null,"数组",-1),ac=t("code",null,"字符串",-1),ic=t("code",null,"分治",-1),hc=t("code",null,"4+",-1),uc=t("td",{style:{"text-align":"center"}},"🟠",-1),gc={style:{"text-align":"center"}},fc={href:"https://leetcode.cn/problems/query-kth-smallest-trimmed-number",target:"_blank",rel:"noopener noreferrer"},mc={href:"https://leetcode.com/problems/query-kth-smallest-trimmed-number",target:"_blank",rel:"noopener noreferrer"},yc=t("td",{style:{"text-align":"center"}},"2407",-1),pc=t("td",{style:{"text-align":"left"}},"最长递增子序列 II",-1),xc=t("td",{style:{"text-align":"center"}},null,-1),bc={style:{"text-align":"left"}},kc=t("code",null,"树状数组",-1),qc=t("code",null,"线段树",-1),vc=t("code",null,"队列",-1),zc=t("code",null,"4+",-1),wc=t("td",{style:{"text-align":"center"}},"🔴",-1),Ic={style:{"text-align":"center"}},jc={href:"https://leetcode.cn/problems/longest-increasing-subsequence-ii",target:"_blank",rel:"noopener noreferrer"},Kc={href:"https://leetcode.com/problems/longest-increasing-subsequence-ii",target:"_blank",rel:"noopener noreferrer"},Oc=t("td",{style:{"text-align":"center"}},"2426",-1),Bc=t("td",{style:{"text-align":"left"}},"满足不等式的数对数目",-1),Cc=t("td",{style:{"text-align":"center"}},null,-1),Lc={style:{"text-align":"left"}},Nc=t("code",null,"树状数组",-1),Vc=t("code",null,"线段树",-1),Ec=t("code",null,"数组",-1),Rc=t("code",null,"4+",-1),Tc=t("td",{style:{"text-align":"center"}},"🔴",-1),Wc={style:{"text-align":"center"}},Ac={href:"https://leetcode.cn/problems/number-of-pairs-satisfying-inequality",target:"_blank",rel:"noopener noreferrer"},Hc={href:"https://leetcode.com/problems/number-of-pairs-satisfying-inequality",target:"_blank",rel:"noopener noreferrer"},Sc=t("td",{style:{"text-align":"center"}},"2519",-1),Xc=t("td",{style:{"text-align":"left"}},"统计 K-Big 索引的数量 🔒",-1),Dc=t("td",{style:{"text-align":"center"}},null,-1),Fc={style:{"text-align":"left"}},Gc=t("code",null,"树状数组",-1),Jc=t("code",null,"线段树",-1),Mc=t("code",null,"数组",-1),Pc=t("code",null,"4+",-1),Qc=t("td",{style:{"text-align":"center"}},"🔴",-1),Uc={style:{"text-align":"center"}},Yc={href:"https://leetcode.cn/problems/count-the-number-of-k-big-indices",target:"_blank",rel:"noopener noreferrer"},Zc={href:"https://leetcode.com/problems/count-the-number-of-k-big-indices",target:"_blank",rel:"noopener noreferrer"},$c=t("td",{style:{"text-align":"center"}},"2613",-1),ta=t("td",{style:{"text-align":"left"}},"美数对 🔒",-1),ea=t("td",{style:{"text-align":"center"}},null,-1),oa={style:{"text-align":"left"}},la=t("code",null,"几何",-1),na=t("code",null,"数组",-1),sa=t("code",null,"数学",-1),da=t("code",null,"3+",-1),_a=t("td",{style:{"text-align":"center"}},"🔴",-1),ra={style:{"text-align":"center"}},ca={href:"https://leetcode.cn/problems/beautiful-pairs",target:"_blank",rel:"noopener noreferrer"},aa={href:"https://leetcode.com/problems/beautiful-pairs",target:"_blank",rel:"noopener noreferrer"},ia=t("td",{style:{"text-align":"center"}},"2792",-1),ha=t("td",{style:{"text-align":"left"}},"计算足够大的节点数 🔒",-1),ua=t("td",{style:{"text-align":"center"}},null,-1),ga={style:{"text-align":"left"}},fa=t("code",null,"树",-1),ma=t("code",null,"深度优先搜索",-1),ya=t("code",null,"分治",-1),pa=t("code",null,"1+",-1),xa=t("td",{style:{"text-align":"center"}},"🔴",-1),ba={style:{"text-align":"center"}},ka={href:"https://leetcode.cn/problems/count-nodes-that-are-great-enough",target:"_blank",rel:"noopener noreferrer"},qa={href:"https://leetcode.com/problems/count-nodes-that-are-great-enough",target:"_blank",rel:"noopener noreferrer"},va=t("td",{style:{"text-align":"center"}},"3109",-1),za=t("td",{style:{"text-align":"left"}},"查找排列的下标 🔒",-1),wa=t("td",{style:{"text-align":"center"}},null,-1),Ia={style:{"text-align":"left"}},ja=t("code",null,"树状数组",-1),Ka=t("code",null,"线段树",-1),Oa=t("code",null,"数组",-1),Ba=t("code",null,"4+",-1),Ca=t("td",{style:{"text-align":"center"}},"🟠",-1),La={style:{"text-align":"center"}},Na={href:"https://leetcode.cn/problems/find-the-index-of-permutation",target:"_blank",rel:"noopener noreferrer"},Va={href:"https://leetcode.com/problems/find-the-index-of-permutation",target:"_blank",rel:"noopener noreferrer"},Ea=t("td",{style:{"text-align":"center"}},"3165",-1),Ra=t("td",{style:{"text-align":"left"}},"不包含相邻元素的子序列的最大和",-1),Ta=t("td",{style:{"text-align":"center"}},null,-1),Wa={style:{"text-align":"left"}},Aa=t("code",null,"线段树",-1),Ha=t("code",null,"数组",-1),Sa=t("code",null,"分治",-1),Xa=t("code",null,"1+",-1),Da=t("td",{style:{"text-align":"center"}},"🔴",-1),Fa={style:{"text-align":"center"}},Ga={href:"https://leetcode.cn/problems/maximum-sum-of-subsequence-with-non-adjacent-elements",target:"_blank",rel:"noopener noreferrer"},Ja={href:"https://leetcode.com/problems/maximum-sum-of-subsequence-with-non-adjacent-elements",target:"_blank",rel:"noopener noreferrer"},Ma=t("td",{style:{"text-align":"center"}},"剑指 Offer 39",-1),Pa=t("td",{style:{"text-align":"left"}},"数组中出现次数超过一半的数字",-1),Qa={style:{"text-align":"center"}},Ua={style:{"text-align":"left"}},Ya=t("code",null,"数组",-1),Za=t("code",null,"哈希表",-1),$a=t("code",null,"分治",-1),ti=t("code",null,"2+",-1),ei=t("td",{style:{"text-align":"center"}},"🟢",-1),oi={style:{"text-align":"center"}},li={href:"https://leetcode.cn/problems/shu-zu-zhong-chu-xian-ci-shu-chao-guo-yi-ban-de-shu-zi-lcof",target:"_blank",rel:"noopener noreferrer"},ni=t("td",{style:{"text-align":"center"}},"剑指 Offer 4",-1),si=t("td",{style:{"text-align":"left"}},"二维数组中的查找",-1),di={style:{"text-align":"center"}},_i={style:{"text-align":"left"}},ri=t("code",null,"数组",-1),ci=t("code",null,"二分查找",-1),ai=t("code",null,"分治",-1),ii=t("code",null,"1+",-1),hi=t("td",{style:{"text-align":"center"}},"🟠",-1),ui={style:{"text-align":"center"}},gi={href:"https://leetcode.cn/problems/er-wei-shu-zu-zhong-de-cha-zhao-lcof",target:"_blank",rel:"noopener noreferrer"},fi=t("td",{style:{"text-align":"center"}},"剑指 Offer 40",-1),mi=t("td",{style:{"text-align":"left"}},"最小的k个数",-1),yi={style:{"text-align":"center"}},pi={style:{"text-align":"left"}},xi=t("code",null,"数组",-1),bi=t("code",null,"分治",-1),ki=t("code",null,"快速选择",-1),qi=t("code",null,"2+",-1),vi=t("td",{style:{"text-align":"center"}},"🟢",-1),zi={style:{"text-align":"center"}},wi={href:"https://leetcode.cn/problems/zui-xiao-de-kge-shu-lcof",target:"_blank",rel:"noopener noreferrer"},Ii=t("td",{style:{"text-align":"center"}},"剑指 Offer 42",-1),ji=t("td",{style:{"text-align":"left"}},"连续子数组的最大和",-1),Ki={style:{"text-align":"center"}},Oi={style:{"text-align":"left"}},Bi=t("code",null,"数组",-1),Ci=t("code",null,"分治",-1),Li=t("code",null,"动态规划",-1),Ni=t("td",{style:{"text-align":"center"}},"🟢",-1),Vi={style:{"text-align":"center"}},Ei={href:"https://leetcode.cn/problems/lian-xu-zi-shu-zu-de-zui-da-he-lcof",target:"_blank",rel:"noopener noreferrer"},Ri=t("td",{style:{"text-align":"center"}},"剑指 Offer 51",-1),Ti=t("td",{style:{"text-align":"left"}},"数组中的逆序对",-1),Wi={style:{"text-align":"center"}},Ai={style:{"text-align":"left"}},Hi=t("code",null,"树状数组",-1),Si=t("code",null,"线段树",-1),Xi=t("code",null,"数组",-1),Di=t("code",null,"4+",-1),Fi=t("td",{style:{"text-align":"center"}},"🔴",-1),Gi={style:{"text-align":"center"}},Ji={href:"https://leetcode.cn/problems/shu-zu-zhong-de-ni-xu-dui-lcof",target:"_blank",rel:"noopener noreferrer"},Mi=t("td",{style:{"text-align":"center"}},"剑指 Offer 7",-1),Pi=t("td",{style:{"text-align":"left"}},"重建二叉树",-1),Qi={style:{"text-align":"center"}},Ui={style:{"text-align":"left"}},Yi=t("code",null,"树",-1),Zi=t("code",null,"数组",-1),$i=t("code",null,"哈希表",-1),th=t("code",null,"2+",-1),eh=t("td",{style:{"text-align":"center"}},"🟠",-1),oh={style:{"text-align":"center"}},lh={href:"https://leetcode.cn/problems/zhong-jian-er-cha-shu-lcof",target:"_blank",rel:"noopener noreferrer"},nh=t("td",{style:{"text-align":"center"}},"剑指 Offer II 60",-1),sh=t("td",{style:{"text-align":"left"}},"出现频率最高的 k 个数字",-1),dh={style:{"text-align":"center"}},_h={style:{"text-align":"left"}},rh=t("code",null,"数组",-1),ch=t("code",null,"哈希表",-1),ah=t("code",null,"分治",-1),ih=t("code",null,"5+",-1),hh=t("td",{style:{"text-align":"center"}},"🟠",-1),uh={style:{"text-align":"center"}},gh={href:"https://leetcode.cn/problems/g5c51o",target:"_blank",rel:"noopener noreferrer"},fh=t("td",{style:{"text-align":"center"}},"剑指 Offer II 76",-1),mh=t("td",{style:{"text-align":"left"}},"数组中的第 k 大的数字",-1),yh={style:{"text-align":"center"}},ph={style:{"text-align":"left"}},xh=t("code",null,"数组",-1),bh=t("code",null,"分治",-1),kh=t("code",null,"快速选择",-1),qh=t("code",null,"2+",-1),vh=t("td",{style:{"text-align":"center"}},"🟠",-1),zh={style:{"text-align":"center"}},wh={href:"https://leetcode.cn/problems/xx4gT2",target:"_blank",rel:"noopener noreferrer"},Ih=t("td",{style:{"text-align":"center"}},"剑指 Offer II 77",-1),jh=t("td",{style:{"text-align":"left"}},"链表排序",-1),Kh={style:{"text-align":"center"}},Oh={style:{"text-align":"left"}},Bh=t("code",null,"链表",-1),Ch=t("code",null,"双指针",-1),Lh=t("code",null,"分治",-1),Nh=t("code",null,"2+",-1),Vh=t("td",{style:{"text-align":"center"}},"🟠",-1),Eh={style:{"text-align":"center"}},Rh={href:"https://leetcode.cn/problems/7WHec2",target:"_blank",rel:"noopener noreferrer"},Th=t("td",{style:{"text-align":"center"}},"剑指 Offer II 78",-1),Wh=t("td",{style:{"text-align":"left"}},"合并排序链表",-1),Ah={style:{"text-align":"center"}},Hh={style:{"text-align":"left"}},Sh=t("code",null,"链表",-1),Xh=t("code",null,"分治",-1),Dh=t("code",null,"堆（优先队列）",-1),Fh=t("code",null,"1+",-1),Gh=t("td",{style:{"text-align":"center"}},"🔴",-1),Jh={style:{"text-align":"center"}},Mh={href:"https://leetcode.cn/problems/vvXgSW",target:"_blank",rel:"noopener noreferrer"},Ph=t("td",{style:{"text-align":"center"}},"面试题 04.02",-1),Qh=t("td",{style:{"text-align":"left"}},"最小高度树",-1),Uh=t("td",{style:{"text-align":"center"}},null,-1),Yh={style:{"text-align":"left"}},Zh=t("code",null,"树",-1),$h=t("code",null,"二叉搜索树",-1),t1=t("code",null,"数组",-1),e1=t("code",null,"2+",-1),o1=t("td",{style:{"text-align":"center"}},"🟢",-1),l1={style:{"text-align":"center"}},n1={href:"https://leetcode.cn/problems/minimum-height-tree-lcci",target:"_blank",rel:"noopener noreferrer"},s1=t("td",{style:{"text-align":"center"}},"面试题 10.09",-1),d1=t("td",{style:{"text-align":"left"}},"排序矩阵查找",-1),_1=t("td",{style:{"text-align":"center"}},null,-1),r1={style:{"text-align":"left"}},c1=t("code",null,"数组",-1),a1=t("code",null,"二分查找",-1),i1=t("code",null,"分治",-1),h1=t("code",null,"1+",-1),u1=t("td",{style:{"text-align":"center"}},"🟠",-1),g1={style:{"text-align":"center"}},f1={href:"https://leetcode.cn/problems/sorted-matrix-search-lcci",target:"_blank",rel:"noopener noreferrer"},m1=t("td",{style:{"text-align":"center"}},"面试题 16.17",-1),y1=t("td",{style:{"text-align":"left"}},"连续数列",-1),p1=t("td",{style:{"text-align":"center"}},null,-1),x1={style:{"text-align":"left"}},b1=t("code",null,"数组",-1),k1=t("code",null,"分治",-1),q1=t("code",null,"动态规划",-1),v1=t("td",{style:{"text-align":"center"}},"🟢",-1),z1={style:{"text-align":"center"}},w1={href:"https://leetcode.cn/problems/contiguous-sequence-lcci",target:"_blank",rel:"noopener noreferrer"},I1=t("td",{style:{"text-align":"center"}},"面试题 17.14",-1),j1=t("td",{style:{"text-align":"left"}},"最小K个数",-1),K1=t("td",{style:{"text-align":"center"}},null,-1),O1={style:{"text-align":"left"}},B1=t("code",null,"数组",-1),C1=t("code",null,"分治",-1),L1=t("code",null,"快速选择",-1),N1=t("code",null,"2+",-1),V1=t("td",{style:{"text-align":"center"}},"🟠",-1),E1={style:{"text-align":"center"}},R1={href:"https://leetcode.cn/problems/smallest-k-lcci",target:"_blank",rel:"noopener noreferrer"};function T1(W1,A1){const l=d("RouterLink"),s=d("ExternalLinkIcon");return r(),c("div",null,[h,t("details",null,[u,g,t("p",null,[o(l,{to:"/tag/array.html"},{default:n(()=>[f]),_:1}),e(),o(l,{to:"/tag/matrix.html"},{default:n(()=>[m]),_:1}),e(),o(l,{to:"/tag/linked-list.html"},{default:n(()=>[y]),_:1}),e(),o(l,{to:"/tag/doubly-linked-list.html"},{default:n(()=>[p]),_:1}),e(),o(l,{to:"/tag/stack.html"},{default:n(()=>[x]),_:1}),e(),o(l,{to:"/tag/monotonic-stack.html"},{default:n(()=>[b]),_:1}),e(),o(l,{to:"/tag/queue.html"},{default:n(()=>[k]),_:1}),e(),o(l,{to:"/tag/monotonic-queue.html"},{default:n(()=>[q]),_:1}),e(),o(l,{to:"/tag/heap-priority-queue.html"},{default:n(()=>[v]),_:1}),e(),o(l,{to:"/tag/hash-table.html"},{default:n(()=>[z]),_:1}),e(),o(l,{to:"/tag/string.html"},{default:n(()=>[w]),_:1}),e(),o(l,{to:"/tag/string-matching.html"},{default:n(()=>[I]),_:1}),e(),o(l,{to:"/tag/tree.html"},{default:n(()=>[j]),_:1}),e(),o(l,{to:"/tag/binary-tree.html"},{default:n(()=>[K]),_:1}),e(),o(l,{to:"/tag/binary-search-tree.html"},{default:n(()=>[O]),_:1}),e(),o(l,{to:"/tag/minimum-spanning-tree.html"},{default:n(()=>[B]),_:1}),e(),o(l,{to:"/tag/graph.html"},{default:n(()=>[C]),_:1}),e(),o(l,{to:"/tag/ordered-set.html"},{default:n(()=>[L]),_:1}),e(),o(l,{to:"/tag/topological-sort.html"},{default:n(()=>[N]),_:1}),e(),o(l,{to:"/tag/shortest-path.html"},{default:n(()=>[V]),_:1}),e(),o(l,{to:"/tag/strongly-connected-component.html"},{default:n(()=>[E]),_:1}),e(),o(l,{to:"/tag/eulerian-circuit.html"},{default:n(()=>[R]),_:1}),e(),o(l,{to:"/tag/biconnected-component.html"},{default:n(()=>[T]),_:1}),e(),o(l,{to:"/tag/union-find.html"},{default:n(()=>[W]),_:1}),e(),o(l,{to:"/tag/trie.html"},{default:n(()=>[A]),_:1}),e(),o(l,{to:"/tag/segment-tree.html"},{default:n(()=>[H]),_:1}),e(),o(l,{to:"/tag/binary-indexed-tree.html"},{default:n(()=>[S]),_:1}),e(),o(l,{to:"/tag/suffix-array.html"},{default:n(()=>[X]),_:1})]),D,t("p",null,[o(l,{to:"/tag/enumeration.html"},{default:n(()=>[F]),_:1}),e(),o(l,{to:"/tag/recursion.html"},{default:n(()=>[G]),_:1}),e(),J,e(),o(l,{to:"/tag/backtracking.html"},{default:n(()=>[M]),_:1}),e(),o(l,{to:"/tag/greedy.html"},{default:n(()=>[P]),_:1}),e(),o(l,{to:"/tag/dynamic-programming.html"},{default:n(()=>[Q]),_:1}),e(),o(l,{to:"/tag/sorting.html"},{default:n(()=>[U]),_:1}),e(),o(l,{to:"/tag/bucket-sort.html"},{default:n(()=>[Y]),_:1}),e(),o(l,{to:"/tag/counting-sort.html"},{default:n(()=>[Z]),_:1}),e(),o(l,{to:"/tag/radix-sort.html"},{default:n(()=>[$]),_:1}),e(),o(l,{to:"/tag/merge-sort.html"},{default:n(()=>[tt]),_:1}),e(),o(l,{to:"/tag/quickselect.html"},{default:n(()=>[et]),_:1}),e(),o(l,{to:"/tag/binary-search.html"},{default:n(()=>[ot]),_:1}),e(),o(l,{to:"/tag/memoization.html"},{default:n(()=>[lt]),_:1}),e(),o(l,{to:"/tag/depth-first-search.html"},{default:n(()=>[nt]),_:1}),e(),o(l,{to:"/tag/breadth-first-search.html"},{default:n(()=>[st]),_:1}),e(),o(l,{to:"/tag/two-pointers.html"},{default:n(()=>[dt]),_:1}),e(),o(l,{to:"/tag/bit-manipulation.html"},{default:n(()=>[_t]),_:1}),e(),o(l,{to:"/tag/prefix-sum.html"},{default:n(()=>[rt]),_:1}),e(),o(l,{to:"/tag/counting.html"},{default:n(()=>[ct]),_:1}),e(),o(l,{to:"/tag/sliding-window.html"},{default:n(()=>[at]),_:1}),e(),o(l,{to:"/tag/bitmask.html"},{default:n(()=>[it]),_:1}),e(),o(l,{to:"/tag/hash-function.html"},{default:n(()=>[ht]),_:1}),e(),o(l,{to:"/tag/rolling-hash.html"},{default:n(()=>[ut]),_:1}),e(),o(l,{to:"/tag/line-sweep.html"},{default:n(()=>[gt]),_:1})]),ft,t("p",null,[o(l,{to:"/tag/math.html"},{default:n(()=>[mt]),_:1}),e(),o(l,{to:"/tag/number-theory.html"},{default:n(()=>[yt]),_:1}),e(),o(l,{to:"/tag/geometry.html"},{default:n(()=>[pt]),_:1}),e(),o(l,{to:"/tag/game-theory.html"},{default:n(()=>[xt]),_:1}),e(),o(l,{to:"/tag/simulation.html"},{default:n(()=>[bt]),_:1}),e(),o(l,{to:"/tag/combinatorics.html"},{default:n(()=>[kt]),_:1}),e(),o(l,{to:"/tag/randomized.html"},{default:n(()=>[qt]),_:1}),e(),o(l,{to:"/tag/probability-and-statistics.html"},{default:n(()=>[vt]),_:1}),e(),o(l,{to:"/tag/reservoir-sampling.html"},{default:n(()=>[zt]),_:1}),e(),o(l,{to:"/tag/rejection-sampling.html"},{default:n(()=>[wt]),_:1}),e(),o(l,{to:"/tag/database.html"},{default:n(()=>[It]),_:1}),e(),o(l,{to:"/tag/design.html"},{default:n(()=>[jt]),_:1}),e(),o(l,{to:"/tag/data-stream.html"},{default:n(()=>[Kt]),_:1}),e(),o(l,{to:"/tag/brainteaser.html"},{default:n(()=>[Ot]),_:1}),e(),o(l,{to:"/tag/interactive.html"},{default:n(()=>[Bt]),_:1}),e(),o(l,{to:"/tag/iterator.html"},{default:n(()=>[Ct]),_:1}),e(),o(l,{to:"/tag/concurrency.html"},{default:n(()=>[Lt]),_:1})])]),Nt,a(" prettier-ignore "),t("table",null,[Vt,t("tbody",null,[t("tr",null,[Et,Rt,t("td",Tt,[o(l,{to:"/problem/0004.html"},{default:n(()=>[e("[✓]")]),_:1})]),t("td",Wt,[o(l,{to:"/tag/array.html"},{default:n(()=>[At]),_:1}),e(),o(l,{to:"/tag/binary-search.html"},{default:n(()=>[Ht]),_:1}),e(),o(l,{to:"/tag/divide-and-conquer.html"},{default:n(()=>[St]),_:1})]),Xt,t("td",Dt,[t("a",Ft,[e("🀄️"),o(s)]),e(),t("a",Gt,[e("🔗"),o(s)])])]),t("tr",null,[Jt,Mt,t("td",Pt,[o(l,{to:"/problem/0023.html"},{default:n(()=>[e("[✓]")]),_:1})]),t("td",Qt,[o(l,{to:"/tag/linked-list.html"},{default:n(()=>[Ut]),_:1}),e(),o(l,{to:"/tag/divide-and-conquer.html"},{default:n(()=>[Yt]),_:1}),e(),o(l,{to:"/tag/heap-priority-queue.html"},{default:n(()=>[Zt]),_:1}),e(),$t]),te,t("td",ee,[t("a",oe,[e("🀄️"),o(s)]),e(),t("a",le,[e("🔗"),o(s)])])]),t("tr",null,[ne,se,t("td",de,[o(l,{to:"/problem/0053.html"},{default:n(()=>[e("[✓]")]),_:1})]),t("td",_e,[o(l,{to:"/tag/array.html"},{default:n(()=>[re]),_:1}),e(),o(l,{to:"/tag/divide-and-conquer.html"},{default:n(()=>[ce]),_:1}),e(),o(l,{to:"/tag/dynamic-programming.html"},{default:n(()=>[ae]),_:1})]),ie,t("td",he,[t("a",ue,[e("🀄️"),o(s)]),e(),t("a",ge,[e("🔗"),o(s)])])]),t("tr",null,[fe,me,t("td",ye,[o(l,{to:"/problem/0105.html"},{default:n(()=>[e("[✓]")]),_:1})]),t("td",pe,[o(l,{to:"/tag/tree.html"},{default:n(()=>[xe]),_:1}),e(),o(l,{to:"/tag/array.html"},{default:n(()=>[be]),_:1}),e(),o(l,{to:"/tag/hash-table.html"},{default:n(()=>[ke]),_:1}),e(),qe]),ve,t("td",ze,[t("a",we,[e("🀄️"),o(s)]),e(),t("a",Ie,[e("🔗"),o(s)])])]),t("tr",null,[je,Ke,t("td",Oe,[o(l,{to:"/problem/0106.html"},{default:n(()=>[e("[✓]")]),_:1})]),t("td",Be,[o(l,{to:"/tag/tree.html"},{default:n(()=>[Ce]),_:1}),e(),o(l,{to:"/tag/array.html"},{default:n(()=>[Le]),_:1}),e(),o(l,{to:"/tag/hash-table.html"},{default:n(()=>[Ne]),_:1}),e(),Ve]),Ee,t("td",Re,[t("a",Te,[e("🀄️"),o(s)]),e(),t("a",We,[e("🔗"),o(s)])])]),t("tr",null,[Ae,He,t("td",Se,[o(l,{to:"/problem/0108.html"},{default:n(()=>[e("[✓]")]),_:1})]),t("td",Xe,[o(l,{to:"/tag/tree.html"},{default:n(()=>[De]),_:1}),e(),o(l,{to:"/tag/binary-search-tree.html"},{default:n(()=>[Fe]),_:1}),e(),o(l,{to:"/tag/array.html"},{default:n(()=>[Ge]),_:1}),e(),Je]),Me,t("td",Pe,[t("a",Qe,[e("🀄️"),o(s)]),e(),t("a",Ue,[e("🔗"),o(s)])])]),t("tr",null,[Ye,Ze,t("td",$e,[o(l,{to:"/problem/0109.html"},{default:n(()=>[e("[✓]")]),_:1})]),t("td",to,[o(l,{to:"/tag/tree.html"},{default:n(()=>[eo]),_:1}),e(),o(l,{to:"/tag/binary-search-tree.html"},{default:n(()=>[oo]),_:1}),e(),o(l,{to:"/tag/linked-list.html"},{default:n(()=>[lo]),_:1}),e(),no]),so,t("td",_o,[t("a",ro,[e("🀄️"),o(s)]),e(),t("a",co,[e("🔗"),o(s)])])]),t("tr",null,[ao,io,t("td",ho,[o(l,{to:"/problem/0148.html"},{default:n(()=>[e("[✓]")]),_:1})]),t("td",uo,[o(l,{to:"/tag/linked-list.html"},{default:n(()=>[go]),_:1}),e(),o(l,{to:"/tag/two-pointers.html"},{default:n(()=>[fo]),_:1}),e(),o(l,{to:"/tag/divide-and-conquer.html"},{default:n(()=>[mo]),_:1}),e(),yo]),po,t("td",xo,[t("a",bo,[e("🀄️"),o(s)]),e(),t("a",ko,[e("🔗"),o(s)])])]),t("tr",null,[qo,vo,t("td",zo,[o(l,{to:"/problem/0169.html"},{default:n(()=>[e("[✓]")]),_:1})]),t("td",wo,[o(l,{to:"/tag/array.html"},{default:n(()=>[Io]),_:1}),e(),o(l,{to:"/tag/hash-table.html"},{default:n(()=>[jo]),_:1}),e(),o(l,{to:"/tag/divide-and-conquer.html"},{default:n(()=>[Ko]),_:1}),e(),Oo]),Bo,t("td",Co,[t("a",Lo,[e("🀄️"),o(s)]),e(),t("a",No,[e("🔗"),o(s)])])]),t("tr",null,[Vo,Eo,t("td",Ro,[o(l,{to:"/problem/0190.html"},{default:n(()=>[e("[✓]")]),_:1})]),t("td",To,[o(l,{to:"/tag/bit-manipulation.html"},{default:n(()=>[Wo]),_:1}),e(),o(l,{to:"/tag/divide-and-conquer.html"},{default:n(()=>[Ao]),_:1})]),Ho,t("td",So,[t("a",Xo,[e("🀄️"),o(s)]),e(),t("a",Do,[e("🔗"),o(s)])])]),t("tr",null,[Fo,Go,t("td",Jo,[o(l,{to:"/problem/0191.html"},{default:n(()=>[e("[✓]")]),_:1})]),t("td",Mo,[o(l,{to:"/tag/bit-manipulation.html"},{default:n(()=>[Po]),_:1}),e(),o(l,{to:"/tag/divide-and-conquer.html"},{default:n(()=>[Qo]),_:1})]),Uo,t("td",Yo,[t("a",Zo,[e("🀄️"),o(s)]),e(),t("a",$o,[e("🔗"),o(s)])])]),t("tr",null,[tl,el,t("td",ol,[o(l,{to:"/problem/0215.html"},{default:n(()=>[e("[✓]")]),_:1})]),t("td",ll,[o(l,{to:"/tag/array.html"},{default:n(()=>[nl]),_:1}),e(),o(l,{to:"/tag/divide-and-conquer.html"},{default:n(()=>[sl]),_:1}),e(),o(l,{to:"/tag/quickselect.html"},{default:n(()=>[dl]),_:1}),e(),_l]),rl,t("td",cl,[t("a",al,[e("🀄️"),o(s)]),e(),t("a",il,[e("🔗"),o(s)])])]),t("tr",null,[hl,ul,gl,t("td",fl,[o(l,{to:"/tag/binary-indexed-tree.html"},{default:n(()=>[ml]),_:1}),e(),o(l,{to:"/tag/segment-tree.html"},{default:n(()=>[yl]),_:1}),e(),o(l,{to:"/tag/array.html"},{default:n(()=>[pl]),_:1}),e(),xl]),bl,t("td",kl,[t("a",ql,[e("🀄️"),o(s)]),e(),t("a",vl,[e("🔗"),o(s)])])]),t("tr",null,[zl,wl,t("td",Il,[o(l,{to:"/problem/0240.html"},{default:n(()=>[e("[✓]")]),_:1})]),t("td",jl,[o(l,{to:"/tag/array.html"},{default:n(()=>[Kl]),_:1}),e(),o(l,{to:"/tag/binary-search.html"},{default:n(()=>[Ol]),_:1}),e(),o(l,{to:"/tag/divide-and-conquer.html"},{default:n(()=>[Bl]),_:1}),e(),Cl]),Ll,t("td",Nl,[t("a",Vl,[e("🀄️"),o(s)]),e(),t("a",El,[e("🔗"),o(s)])])]),t("tr",null,[Rl,Tl,Wl,t("td",Al,[o(l,{to:"/tag/binary-indexed-tree.html"},{default:n(()=>[Hl]),_:1}),e(),o(l,{to:"/tag/segment-tree.html"},{default:n(()=>[Sl]),_:1}),e(),o(l,{to:"/tag/array.html"},{default:n(()=>[Xl]),_:1}),e(),Dl]),Fl,t("td",Gl,[t("a",Jl,[e("🀄️"),o(s)]),e(),t("a",Ml,[e("🔗"),o(s)])])]),t("tr",null,[Pl,Ql,Ul,t("td",Yl,[o(l,{to:"/tag/greedy.html"},{default:n(()=>[Zl]),_:1}),e(),o(l,{to:"/tag/array.html"},{default:n(()=>[$l]),_:1}),e(),o(l,{to:"/tag/divide-and-conquer.html"},{default:n(()=>[tn]),_:1}),e(),en]),on,t("td",ln,[t("a",nn,[e("🀄️"),o(s)]),e(),t("a",sn,[e("🔗"),o(s)])])]),t("tr",null,[dn,_n,rn,t("td",cn,[o(l,{to:"/tag/binary-indexed-tree.html"},{default:n(()=>[an]),_:1}),e(),o(l,{to:"/tag/segment-tree.html"},{default:n(()=>[hn]),_:1}),e(),o(l,{to:"/tag/array.html"},{default:n(()=>[un]),_:1}),e(),gn]),fn,t("td",mn,[t("a",yn,[e("🀄️"),o(s)]),e(),t("a",pn,[e("🔗"),o(s)])])]),t("tr",null,[xn,bn,t("td",kn,[o(l,{to:"/problem/0347.html"},{default:n(()=>[e("[✓]")]),_:1})]),t("td",qn,[o(l,{to:"/tag/array.html"},{default:n(()=>[vn]),_:1}),e(),o(l,{to:"/tag/hash-table.html"},{default:n(()=>[zn]),_:1}),e(),o(l,{to:"/tag/divide-and-conquer.html"},{default:n(()=>[wn]),_:1}),e(),In]),jn,t("td",Kn,[t("a",On,[e("🀄️"),o(s)]),e(),t("a",Bn,[e("🔗"),o(s)])])]),t("tr",null,[Cn,Ln,t("td",Nn,[o(l,{to:"/problem/0372.html"},{default:n(()=>[e("[✓]")]),_:1})]),t("td",Vn,[o(l,{to:"/tag/math.html"},{default:n(()=>[En]),_:1}),e(),o(l,{to:"/tag/divide-and-conquer.html"},{default:n(()=>[Rn]),_:1})]),Tn,t("td",Wn,[t("a",An,[e("🀄️"),o(s)]),e(),t("a",Hn,[e("🔗"),o(s)])])]),t("tr",null,[Sn,Xn,t("td",Dn,[o(l,{to:"/problem/0395.html"},{default:n(()=>[e("[✓]")]),_:1})]),t("td",Fn,[o(l,{to:"/tag/hash-table.html"},{default:n(()=>[Gn]),_:1}),e(),o(l,{to:"/tag/string.html"},{default:n(()=>[Jn]),_:1}),e(),o(l,{to:"/tag/divide-and-conquer.html"},{default:n(()=>[Mn]),_:1}),e(),Pn]),Qn,t("td",Un,[t("a",Yn,[e("🀄️"),o(s)]),e(),t("a",Zn,[e("🔗"),o(s)])])]),t("tr",null,[$n,ts,t("td",es,[o(l,{to:"/problem/0427.html"},{default:n(()=>[e("[✓]")]),_:1})]),t("td",os,[o(l,{to:"/tag/tree.html"},{default:n(()=>[ls]),_:1}),e(),o(l,{to:"/tag/array.html"},{default:n(()=>[ns]),_:1}),e(),o(l,{to:"/tag/divide-and-conquer.html"},{default:n(()=>[ss]),_:1}),e(),ds]),_s,t("td",rs,[t("a",cs,[e("🀄️"),o(s)]),e(),t("a",as,[e("🔗"),o(s)])])]),t("tr",null,[is,hs,us,t("td",gs,[o(l,{to:"/tag/binary-indexed-tree.html"},{default:n(()=>[fs]),_:1}),e(),o(l,{to:"/tag/segment-tree.html"},{default:n(()=>[ms]),_:1}),e(),o(l,{to:"/tag/array.html"},{default:n(()=>[ys]),_:1}),e(),ps]),xs,t("td",bs,[t("a",ks,[e("🀄️"),o(s)]),e(),t("a",qs,[e("🔗"),o(s)])])]),t("tr",null,[vs,zs,ws,t("td",Is,[o(l,{to:"/tag/tree.html"},{default:n(()=>[js]),_:1}),e(),o(l,{to:"/tag/divide-and-conquer.html"},{default:n(()=>[Ks]),_:1})]),Os,t("td",Bs,[t("a",Cs,[e("🀄️"),o(s)]),e(),t("a",Ls,[e("🔗"),o(s)])])]),t("tr",null,[Ns,Vs,t("td",Es,[o(l,{to:"/problem/0654.html"},{default:n(()=>[e("[✓]")]),_:1})]),t("td",Rs,[o(l,{to:"/tag/stack.html"},{default:n(()=>[Ts]),_:1}),e(),o(l,{to:"/tag/tree.html"},{default:n(()=>[Ws]),_:1}),e(),o(l,{to:"/tag/array.html"},{default:n(()=>[As]),_:1}),e(),Hs]),Ss,t("td",Xs,[t("a",Ds,[e("🀄️"),o(s)]),e(),t("a",Fs,[e("🔗"),o(s)])])]),t("tr",null,[Gs,Js,t("td",Ms,[o(l,{to:"/problem/0889.html"},{default:n(()=>[e("[✓]")]),_:1})]),t("td",Ps,[o(l,{to:"/tag/tree.html"},{default:n(()=>[Qs]),_:1}),e(),o(l,{to:"/tag/array.html"},{default:n(()=>[Us]),_:1}),e(),o(l,{to:"/tag/hash-table.html"},{default:n(()=>[Ys]),_:1}),e(),Zs]),$s,t("td",td,[t("a",ed,[e("🀄️"),o(s)]),e(),t("a",od,[e("🔗"),o(s)])])]),t("tr",null,[ld,nd,sd,t("td",dd,[o(l,{to:"/tag/array.html"},{default:n(()=>[_d]),_:1}),e(),o(l,{to:"/tag/divide-and-conquer.html"},{default:n(()=>[rd]),_:1}),e(),o(l,{to:"/tag/bucket-sort.html"},{default:n(()=>[cd]),_:1}),e(),ad]),id,t("td",hd,[t("a",ud,[e("🀄️"),o(s)]),e(),t("a",gd,[e("🔗"),o(s)])])]),t("tr",null,[fd,md,t("td",yd,[o(l,{to:"/problem/0918.html"},{default:n(()=>[e("[✓]")]),_:1})]),t("td",pd,[o(l,{to:"/tag/queue.html"},{default:n(()=>[xd]),_:1}),e(),o(l,{to:"/tag/array.html"},{default:n(()=>[bd]),_:1}),e(),o(l,{to:"/tag/divide-and-conquer.html"},{default:n(()=>[kd]),_:1}),e(),qd]),vd,t("td",zd,[t("a",wd,[e("🀄️"),o(s)]),e(),t("a",Id,[e("🔗"),o(s)])])]),t("tr",null,[jd,Kd,Od,t("td",Bd,[o(l,{to:"/tag/array.html"},{default:n(()=>[Cd]),_:1}),e(),o(l,{to:"/tag/math.html"},{default:n(()=>[Ld]),_:1}),e(),o(l,{to:"/tag/divide-and-conquer.html"},{default:n(()=>[Nd]),_:1})]),Vd,t("td",Ed,[t("a",Rd,[e("🀄️"),o(s)]),e(),t("a",Td,[e("🔗"),o(s)])])]),t("tr",null,[Wd,Ad,t("td",Hd,[o(l,{to:"/problem/0973.html"},{default:n(()=>[e("[✓]")]),_:1})]),t("td",Sd,[o(l,{to:"/tag/geometry.html"},{default:n(()=>[Xd]),_:1}),e(),o(l,{to:"/tag/array.html"},{default:n(()=>[Dd]),_:1}),e(),o(l,{to:"/tag/math.html"},{default:n(()=>[Fd]),_:1}),e(),Gd]),Jd,t("td",Md,[t("a",Pd,[e("🀄️"),o(s)]),e(),t("a",Qd,[e("🔗"),o(s)])])]),t("tr",null,[Ud,Yd,Zd,t("td",$d,[o(l,{to:"/tag/array.html"},{default:n(()=>[t_]),_:1}),e(),o(l,{to:"/tag/divide-and-conquer.html"},{default:n(()=>[e_]),_:1}),e(),o(l,{to:"/tag/interactive.html"},{default:n(()=>[o_]),_:1})]),l_,t("td",n_,[t("a",s_,[e("🀄️"),o(s)]),e(),t("a",d_,[e("🔗"),o(s)])])]),t("tr",null,[__,r_,c_,t("td",a_,[o(l,{to:"/tag/greedy.html"},{default:n(()=>[i_]),_:1}),e(),o(l,{to:"/tag/tree.html"},{default:n(()=>[h_]),_:1}),e(),o(l,{to:"/tag/depth-first-search.html"},{default:n(()=>[u_]),_:1}),e(),g_]),f_,t("td",m_,[t("a",y_,[e("🀄️"),o(s)]),e(),t("a",p_,[e("🔗"),o(s)])])]),t("tr",null,[x_,b_,k_,t("td",q_,[o(l,{to:"/tag/tree.html"},{default:n(()=>[v_]),_:1}),e(),o(l,{to:"/tag/union-find.html"},{default:n(()=>[z_]),_:1}),e(),o(l,{to:"/tag/binary-search-tree.html"},{default:n(()=>[w_]),_:1}),e(),I_]),j_,t("td",K_,[t("a",O_,[e("🀄️"),o(s)]),e(),t("a",B_,[e("🔗"),o(s)])])]),t("tr",null,[C_,L_,N_,t("td",V_,[o(l,{to:"/tag/binary-indexed-tree.html"},{default:n(()=>[E_]),_:1}),e(),o(l,{to:"/tag/segment-tree.html"},{default:n(()=>[R_]),_:1}),e(),o(l,{to:"/tag/array.html"},{default:n(()=>[T_]),_:1}),e(),W_]),A_,t("td",H_,[t("a",S_,[e("🀄️"),o(s)]),e(),t("a",X_,[e("🔗"),o(s)])])]),t("tr",null,[D_,F_,G_,t("td",J_,[o(l,{to:"/tag/bit-manipulation.html"},{default:n(()=>[M_]),_:1}),e(),o(l,{to:"/tag/array.html"},{default:n(()=>[P_]),_:1}),e(),o(l,{to:"/tag/divide-and-conquer.html"},{default:n(()=>[Q_]),_:1}),e(),U_]),Y_,t("td",Z_,[t("a",$_,[e("🀄️"),o(s)]),e(),t("a",tr,[e("🔗"),o(s)])])]),t("tr",null,[er,or,t("td",lr,[o(l,{to:"/problem/1763.html"},{default:n(()=>[e("[✓]")]),_:1})]),t("td",nr,[o(l,{to:"/tag/bit-manipulation.html"},{default:n(()=>[sr]),_:1}),e(),o(l,{to:"/tag/hash-table.html"},{default:n(()=>[dr]),_:1}),e(),o(l,{to:"/tag/string.html"},{default:n(()=>[_r]),_:1}),e(),rr]),cr,t("td",ar,[t("a",ir,[e("🀄️"),o(s)]),e(),t("a",hr,[e("🔗"),o(s)])])]),t("tr",null,[ur,gr,fr,t("td",mr,[o(l,{to:"/tag/array.html"},{default:n(()=>[yr]),_:1}),e(),o(l,{to:"/tag/divide-and-conquer.html"},{default:n(()=>[pr]),_:1})]),xr,t("td",br,[t("a",kr,[e("🀄️"),o(s)]),e(),t("a",qr,[e("🔗"),o(s)])])]),t("tr",null,[vr,zr,wr,t("td",Ir,[o(l,{to:"/tag/array.html"},{default:n(()=>[jr]),_:1}),e(),o(l,{to:"/tag/string.html"},{default:n(()=>[Kr]),_:1}),e(),o(l,{to:"/tag/divide-and-conquer.html"},{default:n(()=>[Or]),_:1}),e(),Br]),Cr,t("td",Lr,[t("a",Nr,[e("🀄️"),o(s)]),e(),t("a",Vr,[e("🔗"),o(s)])])]),t("tr",null,[Er,Rr,Tr,t("td",Wr,[o(l,{to:"/tag/binary-indexed-tree.html"},{default:n(()=>[Ar]),_:1}),e(),o(l,{to:"/tag/segment-tree.html"},{default:n(()=>[Hr]),_:1}),e(),o(l,{to:"/tag/array.html"},{default:n(()=>[Sr]),_:1}),e(),Xr]),Dr,t("td",Fr,[t("a",Gr,[e("🀄️"),o(s)]),e(),t("a",Jr,[e("🔗"),o(s)])])]),t("tr",null,[Mr,Pr,Qr,t("td",Ur,[o(l,{to:"/tag/binary-indexed-tree.html"},{default:n(()=>[Yr]),_:1}),e(),o(l,{to:"/tag/segment-tree.html"},{default:n(()=>[Zr]),_:1}),e(),o(l,{to:"/tag/array.html"},{default:n(()=>[$r]),_:1}),e(),tc]),ec,t("td",oc,[t("a",lc,[e("🀄️"),o(s)]),e(),t("a",nc,[e("🔗"),o(s)])])]),t("tr",null,[sc,dc,_c,t("td",rc,[o(l,{to:"/tag/array.html"},{default:n(()=>[cc]),_:1}),e(),o(l,{to:"/tag/string.html"},{default:n(()=>[ac]),_:1}),e(),o(l,{to:"/tag/divide-and-conquer.html"},{default:n(()=>[ic]),_:1}),e(),hc]),uc,t("td",gc,[t("a",fc,[e("🀄️"),o(s)]),e(),t("a",mc,[e("🔗"),o(s)])])]),t("tr",null,[yc,pc,xc,t("td",bc,[o(l,{to:"/tag/binary-indexed-tree.html"},{default:n(()=>[kc]),_:1}),e(),o(l,{to:"/tag/segment-tree.html"},{default:n(()=>[qc]),_:1}),e(),o(l,{to:"/tag/queue.html"},{default:n(()=>[vc]),_:1}),e(),zc]),wc,t("td",Ic,[t("a",jc,[e("🀄️"),o(s)]),e(),t("a",Kc,[e("🔗"),o(s)])])]),t("tr",null,[Oc,Bc,Cc,t("td",Lc,[o(l,{to:"/tag/binary-indexed-tree.html"},{default:n(()=>[Nc]),_:1}),e(),o(l,{to:"/tag/segment-tree.html"},{default:n(()=>[Vc]),_:1}),e(),o(l,{to:"/tag/array.html"},{default:n(()=>[Ec]),_:1}),e(),Rc]),Tc,t("td",Wc,[t("a",Ac,[e("🀄️"),o(s)]),e(),t("a",Hc,[e("🔗"),o(s)])])]),t("tr",null,[Sc,Xc,Dc,t("td",Fc,[o(l,{to:"/tag/binary-indexed-tree.html"},{default:n(()=>[Gc]),_:1}),e(),o(l,{to:"/tag/segment-tree.html"},{default:n(()=>[Jc]),_:1}),e(),o(l,{to:"/tag/array.html"},{default:n(()=>[Mc]),_:1}),e(),Pc]),Qc,t("td",Uc,[t("a",Yc,[e("🀄️"),o(s)]),e(),t("a",Zc,[e("🔗"),o(s)])])]),t("tr",null,[$c,ta,ea,t("td",oa,[o(l,{to:"/tag/geometry.html"},{default:n(()=>[la]),_:1}),e(),o(l,{to:"/tag/array.html"},{default:n(()=>[na]),_:1}),e(),o(l,{to:"/tag/math.html"},{default:n(()=>[sa]),_:1}),e(),da]),_a,t("td",ra,[t("a",ca,[e("🀄️"),o(s)]),e(),t("a",aa,[e("🔗"),o(s)])])]),t("tr",null,[ia,ha,ua,t("td",ga,[o(l,{to:"/tag/tree.html"},{default:n(()=>[fa]),_:1}),e(),o(l,{to:"/tag/depth-first-search.html"},{default:n(()=>[ma]),_:1}),e(),o(l,{to:"/tag/divide-and-conquer.html"},{default:n(()=>[ya]),_:1}),e(),pa]),xa,t("td",ba,[t("a",ka,[e("🀄️"),o(s)]),e(),t("a",qa,[e("🔗"),o(s)])])]),t("tr",null,[va,za,wa,t("td",Ia,[o(l,{to:"/tag/binary-indexed-tree.html"},{default:n(()=>[ja]),_:1}),e(),o(l,{to:"/tag/segment-tree.html"},{default:n(()=>[Ka]),_:1}),e(),o(l,{to:"/tag/array.html"},{default:n(()=>[Oa]),_:1}),e(),Ba]),Ca,t("td",La,[t("a",Na,[e("🀄️"),o(s)]),e(),t("a",Va,[e("🔗"),o(s)])])]),t("tr",null,[Ea,Ra,Ta,t("td",Wa,[o(l,{to:"/tag/segment-tree.html"},{default:n(()=>[Aa]),_:1}),e(),o(l,{to:"/tag/array.html"},{default:n(()=>[Ha]),_:1}),e(),o(l,{to:"/tag/divide-and-conquer.html"},{default:n(()=>[Sa]),_:1}),e(),Xa]),Da,t("td",Fa,[t("a",Ga,[e("🀄️"),o(s)]),e(),t("a",Ja,[e("🔗"),o(s)])])]),t("tr",null,[Ma,Pa,t("td",Qa,[o(l,{to:"/offer/jz_offer_39_1.html"},{default:n(()=>[e("[✓]")]),_:1})]),t("td",Ua,[o(l,{to:"/tag/array.html"},{default:n(()=>[Ya]),_:1}),e(),o(l,{to:"/tag/hash-table.html"},{default:n(()=>[Za]),_:1}),e(),o(l,{to:"/tag/divide-and-conquer.html"},{default:n(()=>[$a]),_:1}),e(),ti]),ei,t("td",oi,[t("a",li,[e("🀄️"),o(s)])])]),t("tr",null,[ni,si,t("td",di,[o(l,{to:"/offer/jz_offer_04_1.html"},{default:n(()=>[e("[✓]")]),_:1})]),t("td",_i,[o(l,{to:"/tag/array.html"},{default:n(()=>[ri]),_:1}),e(),o(l,{to:"/tag/binary-search.html"},{default:n(()=>[ci]),_:1}),e(),o(l,{to:"/tag/divide-and-conquer.html"},{default:n(()=>[ai]),_:1}),e(),ii]),hi,t("td",ui,[t("a",gi,[e("🀄️"),o(s)])])]),t("tr",null,[fi,mi,t("td",yi,[o(l,{to:"/offer/jz_offer_40_1.html"},{default:n(()=>[e("[✓]")]),_:1})]),t("td",pi,[o(l,{to:"/tag/array.html"},{default:n(()=>[xi]),_:1}),e(),o(l,{to:"/tag/divide-and-conquer.html"},{default:n(()=>[bi]),_:1}),e(),o(l,{to:"/tag/quickselect.html"},{default:n(()=>[ki]),_:1}),e(),qi]),vi,t("td",zi,[t("a",wi,[e("🀄️"),o(s)])])]),t("tr",null,[Ii,ji,t("td",Ki,[o(l,{to:"/offer/jz_offer_42_1.html"},{default:n(()=>[e("[✓]")]),_:1})]),t("td",Oi,[o(l,{to:"/tag/array.html"},{default:n(()=>[Bi]),_:1}),e(),o(l,{to:"/tag/divide-and-conquer.html"},{default:n(()=>[Ci]),_:1}),e(),o(l,{to:"/tag/dynamic-programming.html"},{default:n(()=>[Li]),_:1})]),Ni,t("td",Vi,[t("a",Ei,[e("🀄️"),o(s)])])]),t("tr",null,[Ri,Ti,t("td",Wi,[o(l,{to:"/offer/jz_offer_51_1.html"},{default:n(()=>[e("[✓]")]),_:1})]),t("td",Ai,[o(l,{to:"/tag/binary-indexed-tree.html"},{default:n(()=>[Hi]),_:1}),e(),o(l,{to:"/tag/segment-tree.html"},{default:n(()=>[Si]),_:1}),e(),o(l,{to:"/tag/array.html"},{default:n(()=>[Xi]),_:1}),e(),Di]),Fi,t("td",Gi,[t("a",Ji,[e("🀄️"),o(s)])])]),t("tr",null,[Mi,Pi,t("td",Qi,[o(l,{to:"/offer/jz_offer_07_1.html"},{default:n(()=>[e("[✓]")]),_:1})]),t("td",Ui,[o(l,{to:"/tag/tree.html"},{default:n(()=>[Yi]),_:1}),e(),o(l,{to:"/tag/array.html"},{default:n(()=>[Zi]),_:1}),e(),o(l,{to:"/tag/hash-table.html"},{default:n(()=>[$i]),_:1}),e(),th]),eh,t("td",oh,[t("a",lh,[e("🀄️"),o(s)])])]),t("tr",null,[nh,sh,t("td",dh,[o(l,{to:"/offer2/jz_offer_II_060.html"},{default:n(()=>[e("[✓]")]),_:1})]),t("td",_h,[o(l,{to:"/tag/array.html"},{default:n(()=>[rh]),_:1}),e(),o(l,{to:"/tag/hash-table.html"},{default:n(()=>[ch]),_:1}),e(),o(l,{to:"/tag/divide-and-conquer.html"},{default:n(()=>[ah]),_:1}),e(),ih]),hh,t("td",uh,[t("a",gh,[e("🀄️"),o(s)])])]),t("tr",null,[fh,mh,t("td",yh,[o(l,{to:"/offer2/jz_offer_II_076.html"},{default:n(()=>[e("[✓]")]),_:1})]),t("td",ph,[o(l,{to:"/tag/array.html"},{default:n(()=>[xh]),_:1}),e(),o(l,{to:"/tag/divide-and-conquer.html"},{default:n(()=>[bh]),_:1}),e(),o(l,{to:"/tag/quickselect.html"},{default:n(()=>[kh]),_:1}),e(),qh]),vh,t("td",zh,[t("a",wh,[e("🀄️"),o(s)])])]),t("tr",null,[Ih,jh,t("td",Kh,[o(l,{to:"/offer2/jz_offer_II_077.html"},{default:n(()=>[e("[✓]")]),_:1})]),t("td",Oh,[o(l,{to:"/tag/linked-list.html"},{default:n(()=>[Bh]),_:1}),e(),o(l,{to:"/tag/two-pointers.html"},{default:n(()=>[Ch]),_:1}),e(),o(l,{to:"/tag/divide-and-conquer.html"},{default:n(()=>[Lh]),_:1}),e(),Nh]),Vh,t("td",Eh,[t("a",Rh,[e("🀄️"),o(s)])])]),t("tr",null,[Th,Wh,t("td",Ah,[o(l,{to:"/offer2/jz_offer_II_078.html"},{default:n(()=>[e("[✓]")]),_:1})]),t("td",Hh,[o(l,{to:"/tag/linked-list.html"},{default:n(()=>[Sh]),_:1}),e(),o(l,{to:"/tag/divide-and-conquer.html"},{default:n(()=>[Xh]),_:1}),e(),o(l,{to:"/tag/heap-priority-queue.html"},{default:n(()=>[Dh]),_:1}),e(),Fh]),Gh,t("td",Jh,[t("a",Mh,[e("🀄️"),o(s)])])]),t("tr",null,[Ph,Qh,Uh,t("td",Yh,[o(l,{to:"/tag/tree.html"},{default:n(()=>[Zh]),_:1}),e(),o(l,{to:"/tag/binary-search-tree.html"},{default:n(()=>[$h]),_:1}),e(),o(l,{to:"/tag/array.html"},{default:n(()=>[t1]),_:1}),e(),e1]),o1,t("td",l1,[t("a",n1,[e("🀄️"),o(s)])])]),t("tr",null,[s1,d1,_1,t("td",r1,[o(l,{to:"/tag/array.html"},{default:n(()=>[c1]),_:1}),e(),o(l,{to:"/tag/binary-search.html"},{default:n(()=>[a1]),_:1}),e(),o(l,{to:"/tag/divide-and-conquer.html"},{default:n(()=>[i1]),_:1}),e(),h1]),u1,t("td",g1,[t("a",f1,[e("🀄️"),o(s)])])]),t("tr",null,[m1,y1,p1,t("td",x1,[o(l,{to:"/tag/array.html"},{default:n(()=>[b1]),_:1}),e(),o(l,{to:"/tag/divide-and-conquer.html"},{default:n(()=>[k1]),_:1}),e(),o(l,{to:"/tag/dynamic-programming.html"},{default:n(()=>[q1]),_:1})]),v1,t("td",z1,[t("a",w1,[e("🀄️"),o(s)])])]),t("tr",null,[I1,j1,K1,t("td",O1,[o(l,{to:"/tag/array.html"},{default:n(()=>[B1]),_:1}),e(),o(l,{to:"/tag/divide-and-conquer.html"},{default:n(()=>[C1]),_:1}),e(),o(l,{to:"/tag/quickselect.html"},{default:n(()=>[L1]),_:1}),e(),N1]),V1,t("td",E1,[t("a",R1,[e("🀄️"),o(s)])])])])])])}const S1=_(i,[["render",T1],["__file","divide-and-conquer.html.vue"]]);export{S1 as default};
