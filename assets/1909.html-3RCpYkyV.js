import{_ as c,r as l,o as p,c as i,a as e,b as n,d as t,w as o,f as d,e as u}from"./app-B5EG-zH0.js";const g={},m=e("h1",{id:"_1909-删除一个元素使数组严格递增",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#_1909-删除一个元素使数组严格递增","aria-hidden":"true"},"#"),n(" 1909. 删除一个元素使数组严格递增")],-1),h=e("code",null,"数组",-1),k={href:"https://leetcode.cn/problems/remove-one-element-to-make-the-array-strictly-increasing",target:"_blank",rel:"noopener noreferrer"},_=e("code",null,"力扣",-1),f={href:"https://leetcode.com/problems/remove-one-element-to-make-the-array-strictly-increasing",target:"_blank",rel:"noopener noreferrer"},b=e("code",null,"LeetCode",-1),v=u(`<h2 id="题目" tabindex="-1"><a class="header-anchor" href="#题目" aria-hidden="true">#</a> 题目</h2><p>Given a <strong>0-indexed</strong> integer array <code>nums</code>, return <code>true</code> _if it can be made <strong>strictly increasing</strong> after removing <strong>exactly one</strong> element, or _<code>false</code> <em>otherwise. If the array is already strictly increasing, return</em><code>true</code>.</p><p>The array <code>nums</code> is <strong>strictly increasing</strong> if <code>nums[i - 1] &lt; nums[i]</code> for each index <code>(1 &lt;= i &lt; nums.length).</code></p><p><strong>Example 1:</strong></p><blockquote><p>Input: nums = [1,2,<em>10</em> ,5,7]</p><p>Output: true</p><p>Explanation: By removing 10 at index 2 from nums, it becomes [1,2,5,7].</p><p>[1,2,5,7] is strictly increasing, so return true.</p></blockquote><p><strong>Example 2:</strong></p><blockquote><p>Input: nums = [2,3,1,2]</p><p>Output: false</p><p>Explanation:</p><p>[3,1,2] is the result of removing the element at index 0.</p><p>[2,1,2] is the result of removing the element at index 1.</p><p>[2,3,2] is the result of removing the element at index 2.</p><p>[2,3,1] is the result of removing the element at index 3.</p><p>No resulting array is strictly increasing, so return false.</p></blockquote><p><strong>Example 3:</strong></p><blockquote><p>Input: nums = [1,1,1]</p><p>Output: false</p><p>Explanation: The result of removing any element is [1,1].</p><p>[1,1] is not strictly increasing, so return false.</p></blockquote><p><strong>Constraints:</strong></p><ul><li><code>2 &lt;= nums.length &lt;= 1000</code></li><li><code>1 &lt;= nums[i] &lt;= 1000</code></li></ul><h2 id="题目大意" tabindex="-1"><a class="header-anchor" href="#题目大意" aria-hidden="true">#</a> 题目大意</h2><p>给你一个下标从 <strong>0</strong> 开始的整数数组 <code>nums</code> ，如果 <strong>恰好</strong> 删除 <strong>一个</strong> 元素后，数组 <strong>严格递增</strong> ，那么请你返回 <code>true</code> ，否则返回 <code>false</code> 。如果数组本身已经是严格递增的，请你也返回 <code>true</code> 。</p><p>数组 <code>nums</code> 是 <strong>严格递增</strong> 的定义为：对于任意下标的 <code>1 &lt;= i &lt; nums.length</code> 都满足 <code>nums[i - 1] &lt; nums[i]</code> 。</p><p><strong>示例 1：</strong></p><blockquote><p><strong>输入：</strong> nums = [1,2,<strong>10</strong> ,5,7]</p><p><strong>输出：</strong> true</p><p><strong>解释：</strong> 从 nums 中删除下标 2 处的 10 ，得到 [1,2,5,7] 。</p><p>[1,2,5,7] 是严格递增的，所以返回 true 。</p></blockquote><p><strong>示例 2：</strong></p><blockquote><p><strong>输入：</strong> nums = [2,3,1,2]</p><p><strong>输出：</strong> false</p><p><strong>解释：</strong></p><p>[3,1,2] 是删除下标 0 处元素后得到的结果。</p><p>[2,1,2] 是删除下标 1 处元素后得到的结果。</p><p>[2,3,2] 是删除下标 2 处元素后得到的结果。</p><p>[2,3,1] 是删除下标 3 处元素后得到的结果。</p><p>没有任何结果数组是严格递增的，所以返回 false 。</p></blockquote><p><strong>示例 3：</strong></p><blockquote><p><strong>输入：</strong> nums = [1,1,1]</p><p><strong>输出：</strong> false</p><p><strong>解释：</strong> 删除任意元素后的结果都是 [1,1] 。</p><p>[1,1] 不是严格递增的，所以返回 false 。</p></blockquote><p><strong>示例 4：</strong></p><blockquote><p><strong>输入：</strong> nums = [1,2,3]</p><p><strong>输出：</strong> true</p><p><strong>解释：</strong>[1,2,3] 已经是严格递增的，所以返回 true 。</p></blockquote><p><strong>提示：</strong></p><ul><li><code>2 &lt;= nums.length &lt;= 1000</code></li><li><code>1 &lt;= nums[i] &lt;= 1000</code></li></ul><h2 id="解题思路" tabindex="-1"><a class="header-anchor" href="#解题思路" aria-hidden="true">#</a> 解题思路</h2><ol><li><p><strong>定义变量</strong>：</p><ul><li><code>top</code>：记录当前最大的元素，初始化为 <code>0</code>。</li><li><code>secondTop</code>：记录倒数第二大的元素，初始化为 <code>0</code>。</li><li><code>deleteCount</code>：记录需要删除的元素个数。</li></ul></li><li><p><strong>遍历数组</strong>：</p><ul><li>如果当前元素大于 <code>top</code>，说明当前元素可以加入递增序列： <ul><li>将 <code>secondTop</code> 更新为 <code>top</code>。</li><li>将 <code>top</code> 更新为当前元素。</li></ul></li><li>如果当前元素小于或等于 <code>top</code>，说明当前元素破坏了递增性： <ul><li>检查当前元素是否大于 <code>secondTop</code>： <ul><li>是：将 <code>top</code> 更新为当前元素（删除之前的 <code>top</code> 元素）。</li><li>否：说明需要删除当前元素。</li></ul></li><li>增加 <code>deleteCount</code>，并检查是否已经超过 1： <ul><li>如果超过 1，返回 <code>false</code>（不能通过删除一个元素满足条件）。</li></ul></li></ul></li></ul></li><li><p><strong>返回结果</strong>：</p><ul><li>如果遍历完成后 <code>deleteCount</code> 小于等于 1，返回 <code>true</code>，否则返回 <code>false</code>。</li></ul></li></ol><h4 id="复杂度分析" tabindex="-1"><a class="header-anchor" href="#复杂度分析" aria-hidden="true">#</a> 复杂度分析</h4><ul><li><strong>时间复杂度</strong>：<code>O(n)</code>，其中 <code>n</code> 是数组的长度，单次遍历数组。</li><li><strong>空间复杂度</strong>：<code>O(1)</code>，只使用了常数变量。</li></ul><h2 id="代码" tabindex="-1"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> <span class="token function-variable function">canBeIncreasing</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">nums</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">let</span> top <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>
		secondTop <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>
		deleteCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> num <span class="token keyword">of</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">&gt;</span> top<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			secondTop <span class="token operator">=</span> top<span class="token punctuation">;</span> <span class="token comment">// 更新倒数第二大的元素</span>
			top <span class="token operator">=</span> num<span class="token punctuation">;</span> <span class="token comment">// 更新当前最大的元素</span>
		<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">&gt;</span> secondTop<span class="token punctuation">)</span> <span class="token punctuation">{</span>
				<span class="token comment">// 判断是否可以通过删除前面的元素解决问题</span>
				top <span class="token operator">=</span> num<span class="token punctuation">;</span>
			<span class="token punctuation">}</span>
			deleteCount<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment">// 增加需要删除的元素计数</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span>deleteCount <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment">// 如果删除的元素超过一个，返回 false</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment">// 如果只需要删除一个或不需要删除，返回 true</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="相关题目" tabindex="-1"><a class="header-anchor" href="#相关题目" aria-hidden="true">#</a> 相关题目</h2>`,31),y=e("thead",null,[e("tr",null,[e("th",{style:{"text-align":"center"}},"题号"),e("th",{style:{"text-align":"left"}},"标题"),e("th",{style:{"text-align":"center"}},"题解"),e("th",{style:{"text-align":"left"}},"标签"),e("th",{style:{"text-align":"center"}},"难度"),e("th",{style:{"text-align":"center"}},"力扣")])],-1),x=e("td",{style:{"text-align":"center"}},"2289",-1),w=e("td",{style:{"text-align":"left"}},"使数组按非递减顺序排列",-1),q=e("td",{style:{"text-align":"center"}},null,-1),C={style:{"text-align":"left"}},E=e("code",null,"栈",-1),T=e("code",null,"数组",-1),I=e("code",null,"链表",-1),N=e("code",null,"1+",-1),B=e("td",{style:{"text-align":"center"}},"🟠",-1),L={style:{"text-align":"center"}},O={href:"https://leetcode.cn/problems/steps-to-make-array-non-decreasing",target:"_blank",rel:"noopener noreferrer"},V={href:"https://leetcode.com/problems/steps-to-make-array-non-decreasing",target:"_blank",rel:"noopener noreferrer"},j=e("td",{style:{"text-align":"center"}},"3334",-1),R=e("td",{style:{"text-align":"left"}},"数组的最大因子得分",-1),G=e("td",{style:{"text-align":"center"}},null,-1),S=e("td",{style:{"text-align":"left"}},null,-1),z=e("td",{style:{"text-align":"center"}},"🟠",-1),A={style:{"text-align":"center"}},D={href:"https://leetcode.cn/problems/find-the-maximum-factor-score-of-array",target:"_blank",rel:"noopener noreferrer"},F={href:"https://leetcode.com/problems/find-the-maximum-factor-score-of-array",target:"_blank",rel:"noopener noreferrer"};function H(J,K){const r=l("font"),a=l("RouterLink"),s=l("ExternalLinkIcon");return p(),i("div",null,[m,e("p",null,[n("🟢 "),t(r,{color:"#15bd66"},{default:o(()=>[n("Easy")]),_:1}),n("  🔖  "),t(a,{to:"/tag/array.html"},{default:o(()=>[h]),_:1}),n("  🔗 "),e("a",k,[_,t(s)]),n(),e("a",f,[b,t(s)])]),v,d(" prettier-ignore "),e("table",null,[y,e("tbody",null,[e("tr",null,[x,w,q,e("td",C,[t(a,{to:"/tag/stack.html"},{default:o(()=>[E]),_:1}),n(),t(a,{to:"/tag/array.html"},{default:o(()=>[T]),_:1}),n(),t(a,{to:"/tag/linked-list.html"},{default:o(()=>[I]),_:1}),n(),N]),B,e("td",L,[e("a",O,[n("🀄️"),t(s)]),n(),e("a",V,[n("🔗"),t(s)])])]),e("tr",null,[j,R,G,S,z,e("td",A,[e("a",D,[n("🀄️"),t(s)]),n(),e("a",F,[n("🔗"),t(s)])])])])])])}const P=c(g,[["render",H],["__file","1909.html.vue"]]);export{P as default};
