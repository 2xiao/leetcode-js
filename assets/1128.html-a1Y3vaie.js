import{_ as i,r as t,o as l,c as d,a as n,b as s,d as a,w as o,e as r}from"./app-B5EG-zH0.js";const u={},k=n("h1",{id:"_1128-等价多米诺骨牌对的数量",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_1128-等价多米诺骨牌对的数量","aria-hidden":"true"},"#"),s(" 1128. 等价多米诺骨牌对的数量")],-1),m=n("code",null,"数组",-1),h=n("code",null,"哈希表",-1),b=n("code",null,"计数",-1),g={href:"https://leetcode.cn/problems/number-of-equivalent-domino-pairs",target:"_blank",rel:"noopener noreferrer"},v=n("code",null,"力扣",-1),_={href:"https://leetcode.com/problems/number-of-equivalent-domino-pairs",target:"_blank",rel:"noopener noreferrer"},f=n("code",null,"LeetCode",-1),y=r(`<h2 id="题目" tabindex="-1"><a class="header-anchor" href="#题目" aria-hidden="true">#</a> 题目</h2><p>Given a list of <code>dominoes</code>, <code>dominoes[i] = [a, b]</code> is <strong>equivalent to</strong><code>dominoes[j] = [c, d]</code> if and only if either (<code>a == c</code> and <code>b == d</code>), or (<code>a == d</code> and <code>b == c</code>) - that is, one domino can be rotated to be equal to another domino.</p><p>Return <em>the number of pairs</em><code>(i, j)</code><em>for which</em><code>0 &lt;= i &lt; j &lt; dominoes.length</code><em>, and</em><code>dominoes[i]</code>_is <strong>equivalent to</strong> _<code>dominoes[j]</code>.</p><p><strong>Example 1:</strong></p><blockquote><p>Input: dominoes = [[1,2],[2,1],[3,4],[5,6]]</p><p>Output: 1</p></blockquote><p><strong>Example 2:</strong></p><blockquote><p>Input: dominoes = [[1,2],[1,2],[1,1],[1,2],[2,2]]</p><p>Output: 3</p></blockquote><p><strong>Constraints:</strong></p><ul><li><code>1 &lt;= dominoes.length &lt;= 4 * 10^4</code></li><li><code>dominoes[i].length == 2</code></li><li><code>1 &lt;= dominoes[i][j] &lt;= 9</code></li></ul><h2 id="题目大意" tabindex="-1"><a class="header-anchor" href="#题目大意" aria-hidden="true">#</a> 题目大意</h2><p>给你一组多米诺骨牌 <code>dominoes</code> 。</p><p>形式上，<code>dominoes[i] = [a, b]</code> 与 <code>dominoes[j] = [c, d]</code> <strong>等价</strong> 当且仅当 (<code>a == c</code> 且 <code>b == d</code>) 或者 (<code>a == d</code> 且 <code>b == c</code>) 。即一张骨牌可以通过旋转 <code>0</code> 度或 <code>180</code> 度得到另一张多米诺骨牌。</p><p>在 <code>0 &lt;= i &lt; j &lt; dominoes.length</code> 的前提下，找出满足 <code>dominoes[i]</code> 和 <code>dominoes[j]</code> 等价的骨牌对 <code>(i, j)</code> 的数量。</p><p><strong>示例 1：</strong></p><blockquote><p><strong>输入：</strong> dominoes = [[1,2],[2,1],[3,4],[5,6]]</p><p><strong>输出：</strong> 1</p></blockquote><p><strong>示例 2：</strong></p><blockquote><p><strong>输入：</strong> dominoes = [[1,2],[1,2],[1,1],[1,2],[2,2]]</p><p><strong>输出：</strong> 3</p></blockquote><p><strong>提示：</strong></p><ul><li><code>1 &lt;= dominoes.length &lt;= 4 * 10^4</code></li><li><code>dominoes[i].length == 2</code></li><li><code>1 &lt;= dominoes[i][j] &lt;= 9</code></li></ul><h2 id="解题思路" tabindex="-1"><a class="header-anchor" href="#解题思路" aria-hidden="true">#</a> 解题思路</h2><ol><li><p><strong>统计出现次数</strong></p><ul><li>遍历输入数组 <code>dominoes</code>，用哈希表 <code>map</code> 统计不同多米诺骨牌的出现次数。</li><li>对于每个骨牌 <code>[a, b]</code>，将其键表示为 <code>a,b</code>，如果 <code>a &gt; b</code>，则交换位置表示为 <code>b,a</code>，确保小的数在前。</li></ul></li><li><p><strong>计算等价对数</strong></p><ul><li>如果某种多米诺骨牌出现 <code>n</code> 次，那么从这些骨牌中可以组合出 <code>C(n, 2) = n * (n - 1) / 2</code> 对等价的骨牌。</li><li>遍历哈希表，累加所有等价对的数量。</li></ul></li></ol><h4 id="复杂度分析" tabindex="-1"><a class="header-anchor" href="#复杂度分析" aria-hidden="true">#</a> 复杂度分析</h4><ul><li><strong>时间复杂度</strong>：<code>O(n)</code>，其中 <code>n</code> 为 <code>dominoes</code> 的长度。 <ul><li>统计多米诺骨牌出现次数：<code>O(n)</code>。</li><li>计算等价对数：<code>O(m)</code>，其中 <code>m</code> 是不等价多米诺骨牌的数量。</li><li>总时间复杂度为 <code>O(n)</code>。</li></ul></li><li><strong>空间复杂度</strong>：<code>O(m)</code>，使用了哈希表存储多米诺骨牌和计数。</li></ul><h2 id="代码" tabindex="-1"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> <span class="token function-variable function">numEquivDominoPairs</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">dominoes</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">let</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token comment">// 统计每种多米诺骨牌的出现次数</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> <span class="token punctuation">[</span>a<span class="token punctuation">,</span> b<span class="token punctuation">]</span> <span class="token keyword">of</span> dominoes<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token comment">// 等价的多米诺骨牌统一计数</span>
		<span class="token keyword">let</span> key <span class="token operator">=</span> a <span class="token operator">&gt;</span> b <span class="token operator">?</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>b<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">,</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>a<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span> <span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>a<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">,</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>b<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
		map<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token comment">// 计算等价对数</span>
	<span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> count <span class="token keyword">of</span> map<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		res <span class="token operator">+=</span> <span class="token punctuation">(</span>count <span class="token operator">*</span> <span class="token punctuation">(</span>count <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment">// 直接用公式计算</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">return</span> res<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,25);function w(x,q){const c=t("font"),e=t("RouterLink"),p=t("ExternalLinkIcon");return l(),d("div",null,[k,n("p",null,[s("🟢 "),a(c,{color:"#15bd66"},{default:o(()=>[s("Easy")]),_:1}),s("  🔖  "),a(e,{to:"/tag/array.html"},{default:o(()=>[m]),_:1}),s(),a(e,{to:"/tag/hash-table.html"},{default:o(()=>[h]),_:1}),s(),a(e,{to:"/tag/counting.html"},{default:o(()=>[b]),_:1}),s("  🔗 "),n("a",g,[v,a(p)]),s(),n("a",_,[f,a(p)])]),y])}const E=i(u,[["render",w],["__file","1128.html.vue"]]);export{E as default};
