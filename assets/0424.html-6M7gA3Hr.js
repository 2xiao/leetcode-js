import{_ as p,r as l,o as r,c as i,a as t,b as n,d as e,w as s,f as d,e as u}from"./app-fBVbqwGY.js";const h={},_=t("h1",{id:"_424-替换后的最长重复字符",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#_424-替换后的最长重复字符","aria-hidden":"true"},"#"),n(" 424. 替换后的最长重复字符")],-1),k=t("code",null,"哈希表",-1),g=t("code",null,"字符串",-1),m=t("code",null,"滑动窗口",-1),f={href:"https://leetcode.cn/problems/longest-repeating-character-replacement",target:"_blank",rel:"noopener noreferrer"},b=t("code",null,"力扣",-1),v={href:"https://leetcode.com/problems/longest-repeating-character-replacement",target:"_blank",rel:"noopener noreferrer"},x=t("code",null,"LeetCode",-1),y=u(`<h2 id="题目" tabindex="-1"><a class="header-anchor" href="#题目" aria-hidden="true">#</a> 题目</h2><p>You are given a string <code>s</code> and an integer <code>k</code>. You can choose any character of the string and change it to any other uppercase English character. You can perform this operation at most <code>k</code> times.</p><p>Return <em>the length of the longest substring containing the same letter you can get after performing the above operations</em>.</p><p><strong>Example 1:</strong></p><blockquote><p>Input: s = &quot;ABAB&quot;, k = 2</p><p>Output: 4</p><p>Explanation: Replace the two &#39;A&#39;s with two &#39;B&#39;s or vice versa.</p></blockquote><p><strong>Example 2:</strong></p><blockquote><p>Input: s = &quot;AABABBA&quot;, k = 1</p><p>Output: 4</p><p>Explanation: Replace the one &#39;A&#39; in the middle with &#39;B&#39; and form &quot;AABBBBA&quot;.</p><p>The substring &quot;BBBB&quot; has the longest repeating letters, which is 4.</p><p>There may exists other ways to achieve this answer too.</p></blockquote><p><strong>Constraints:</strong></p><ul><li><code>1 &lt;= s.length &lt;= 10^5</code></li><li><code>s</code> consists of only uppercase English letters.</li><li><code>0 &lt;= k &lt;= s.length</code></li></ul><h2 id="题目大意" tabindex="-1"><a class="header-anchor" href="#题目大意" aria-hidden="true">#</a> 题目大意</h2><p>给你一个字符串 <code>s</code> 和一个整数 <code>k</code> 。你可以选择字符串中的任一字符，并将其更改为任何其他大写英文字符。该操作最多可执行 <code>k</code> 次。</p><p>在执行上述操作后，返回 <em>包含相同字母的最长子字符串的长度。</em></p><p><strong>示例 1：</strong></p><blockquote><p><strong>输入：</strong> s = &quot;ABAB&quot;, k = 2</p><p><strong>输出：</strong> 4</p><p><strong>解释：</strong> 用两个&#39;A&#39;替换为两个&#39;B&#39;,反之亦然。</p></blockquote><p><strong>示例 2：</strong></p><blockquote><p><strong>输入：</strong> s = &quot;AABABBA&quot;, k = 1</p><p><strong>输出：</strong> 4</p><p><strong>解释：</strong></p><p>将中间的一个&#39;A&#39;替换为&#39;B&#39;,字符串变为 &quot;AABBBBA&quot;。</p><p>子串 &quot;BBBB&quot; 有最长重复字母, 答案为 4。</p><p>可能存在其他的方法来得到同样的结果。</p></blockquote><p><strong>提示：</strong></p><ul><li><code>1 &lt;= s.length &lt;= 10^5</code></li><li><code>s</code> 仅由大写英文字母组成</li><li><code>0 &lt;= k &lt;= s.length</code></li></ul><h2 id="解题思路" tabindex="-1"><a class="header-anchor" href="#解题思路" aria-hidden="true">#</a> 解题思路</h2><ol><li><p><strong>使用滑动窗口</strong></p><ul><li>维护一个窗口 <code>[left, right]</code>，表示当前子串。</li><li>计算窗口中出现最多的字符 <code>maxFreq</code>。</li><li>计算窗口大小 <code>(right - left + 1)</code> 与 <code>maxFreq</code> 的差值，判断是否能通过 <code>k</code> 次替换使整个窗口变成相同字符。</li></ul></li><li><p><strong>窗口扩展</strong></p><ul><li>右指针 <code>right</code> 向右移动，记录字符出现频次，并更新 <code>maxFreq</code>。</li></ul></li><li><p><strong>窗口收缩</strong></p><ul><li>如果窗口大小 <code>&gt; maxFreq + k</code>，表示需要替换的字符超过 <code>k</code>，因此左指针 <code>left</code> 右移收缩窗口。</li></ul></li><li><p><strong>更新最大子串长度</strong></p><ul><li>在窗口满足条件时，更新 <code>res = max(res, right - left + 1)</code>。</li></ul></li></ol><h4 id="复杂度分析" tabindex="-1"><a class="header-anchor" href="#复杂度分析" aria-hidden="true">#</a> 复杂度分析</h4><ul><li><strong>时间复杂度</strong>：<code>O(n)</code>，右指针 <code>right</code> 线性扫描 <code>s</code>，每个字符最多被左指针 <code>left</code> 访问一次。</li><li><strong>空间复杂度</strong>：<code>O(1)</code>，仅使用一个 <code>Map</code> 统计字符频次，最多 26 个英文字母。</li></ul><h2 id="代码" tabindex="-1"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>string<span class="token punctuation">}</span></span> <span class="token parameter">s</span>
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">}</span></span> <span class="token parameter">k</span>
 * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">}</span></span>
 */</span>
<span class="token keyword">var</span> <span class="token function-variable function">characterReplacement</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">s<span class="token punctuation">,</span> k</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">let</span> maxFreq <span class="token operator">=</span> <span class="token punctuation">(</span>res <span class="token operator">=</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token comment">// 窗口扩展</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> right <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> right <span class="token operator">&lt;</span> s<span class="token punctuation">.</span>length<span class="token punctuation">;</span> right<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">const</span> char <span class="token operator">=</span> s<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">;</span>
		<span class="token keyword">const</span> freq <span class="token operator">=</span> <span class="token punctuation">(</span>count<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>char<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
		count<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>char<span class="token punctuation">,</span> freq<span class="token punctuation">)</span><span class="token punctuation">;</span>

		<span class="token comment">// 计算窗口中出现最多的字符</span>
		maxFreq <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>freq<span class="token punctuation">,</span> maxFreq<span class="token punctuation">)</span><span class="token punctuation">;</span>

		<span class="token comment">// 窗口收缩</span>
		<span class="token keyword">while</span> <span class="token punctuation">(</span>right <span class="token operator">-</span> left <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">-</span> maxFreq <span class="token operator">&gt;</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			count<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">,</span> count<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			left<span class="token operator">++</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>

		<span class="token comment">// 更新最大子串长度</span>
		res <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> right <span class="token operator">-</span> left <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> res<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="相关题目" tabindex="-1"><a class="header-anchor" href="#相关题目" aria-hidden="true">#</a> 相关题目</h2>`,25),q=t("thead",null,[t("tr",null,[t("th",{style:{"text-align":"center"}},"题号"),t("th",{style:{"text-align":"left"}},"标题"),t("th",{style:{"text-align":"center"}},"题解"),t("th",{style:{"text-align":"left"}},"标签"),t("th",{style:{"text-align":"center"}},"难度"),t("th",{style:{"text-align":"center"}},"力扣")])],-1),B=t("td",{style:{"text-align":"center"}},"340",-1),w=t("td",{style:{"text-align":"left"}},"至多包含 K 个不同字符的最长子串 🔒",-1),A=t("td",{style:{"text-align":"center"}},null,-1),E={style:{"text-align":"left"}},F=t("code",null,"哈希表",-1),I=t("code",null,"字符串",-1),R=t("code",null,"滑动窗口",-1),C=t("td",{style:{"text-align":"center"}},"🟠",-1),L={style:{"text-align":"center"}},M={href:"https://leetcode.cn/problems/longest-substring-with-at-most-k-distinct-characters",target:"_blank",rel:"noopener noreferrer"},N={href:"https://leetcode.com/problems/longest-substring-with-at-most-k-distinct-characters",target:"_blank",rel:"noopener noreferrer"},V=t("td",{style:{"text-align":"center"}},"1004",-1),O=t("td",{style:{"text-align":"left"}},"最大连续1的个数 III",-1),j={style:{"text-align":"center"}},T={style:{"text-align":"left"}},Y=t("code",null,"数组",-1),z=t("code",null,"二分查找",-1),K=t("code",null,"前缀和",-1),S=t("code",null,"1+",-1),D=t("td",{style:{"text-align":"center"}},"🟠",-1),G={style:{"text-align":"center"}},H={href:"https://leetcode.cn/problems/max-consecutive-ones-iii",target:"_blank",rel:"noopener noreferrer"},J={href:"https://leetcode.com/problems/max-consecutive-ones-iii",target:"_blank",rel:"noopener noreferrer"},P=t("td",{style:{"text-align":"center"}},"2009",-1),Q=t("td",{style:{"text-align":"left"}},"使数组连续的最少操作数",-1),U=t("td",{style:{"text-align":"center"}},null,-1),W={style:{"text-align":"left"}},X=t("code",null,"数组",-1),Z=t("code",null,"哈希表",-1),$=t("code",null,"二分查找",-1),tt=t("code",null,"1+",-1),nt=t("td",{style:{"text-align":"center"}},"🔴",-1),et={style:{"text-align":"center"}},st={href:"https://leetcode.cn/problems/minimum-number-of-operations-to-make-array-continuous",target:"_blank",rel:"noopener noreferrer"},at={href:"https://leetcode.com/problems/minimum-number-of-operations-to-make-array-continuous",target:"_blank",rel:"noopener noreferrer"},ot=t("td",{style:{"text-align":"center"}},"2024",-1),lt=t("td",{style:{"text-align":"left"}},"考试的最大困扰度",-1),ct=t("td",{style:{"text-align":"center"}},null,-1),pt={style:{"text-align":"left"}},rt=t("code",null,"字符串",-1),it=t("code",null,"二分查找",-1),dt=t("code",null,"前缀和",-1),ut=t("code",null,"1+",-1),ht=t("td",{style:{"text-align":"center"}},"🟠",-1),_t={style:{"text-align":"center"}},kt={href:"https://leetcode.cn/problems/maximize-the-confusion-of-an-exam",target:"_blank",rel:"noopener noreferrer"},gt={href:"https://leetcode.com/problems/maximize-the-confusion-of-an-exam",target:"_blank",rel:"noopener noreferrer"},mt=t("td",{style:{"text-align":"center"}},"2213",-1),ft=t("td",{style:{"text-align":"left"}},"由单个字符重复的最长子字符串",-1),bt=t("td",{style:{"text-align":"center"}},null,-1),vt={style:{"text-align":"left"}},xt=t("code",null,"线段树",-1),yt=t("code",null,"数组",-1),qt=t("code",null,"字符串",-1),Bt=t("code",null,"1+",-1),wt=t("td",{style:{"text-align":"center"}},"🔴",-1),At={style:{"text-align":"center"}},Et={href:"https://leetcode.cn/problems/longest-substring-of-one-repeating-character",target:"_blank",rel:"noopener noreferrer"},Ft={href:"https://leetcode.com/problems/longest-substring-of-one-repeating-character",target:"_blank",rel:"noopener noreferrer"};function It(Rt,Ct){const c=l("font"),a=l("RouterLink"),o=l("ExternalLinkIcon");return r(),i("div",null,[_,t("p",null,[n("🟠 "),e(c,{color:"#ffb800"},{default:s(()=>[n("Medium")]),_:1}),n("  🔖  "),e(a,{to:"/tag/hash-table.html"},{default:s(()=>[k]),_:1}),n(),e(a,{to:"/tag/string.html"},{default:s(()=>[g]),_:1}),n(),e(a,{to:"/tag/sliding-window.html"},{default:s(()=>[m]),_:1}),n("  🔗 "),t("a",f,[b,e(o)]),n(),t("a",v,[x,e(o)])]),y,d(" prettier-ignore "),t("table",null,[q,t("tbody",null,[t("tr",null,[B,w,A,t("td",E,[e(a,{to:"/tag/hash-table.html"},{default:s(()=>[F]),_:1}),n(),e(a,{to:"/tag/string.html"},{default:s(()=>[I]),_:1}),n(),e(a,{to:"/tag/sliding-window.html"},{default:s(()=>[R]),_:1})]),C,t("td",L,[t("a",M,[n("🀄️"),e(o)]),n(),t("a",N,[n("🔗"),e(o)])])]),t("tr",null,[V,O,t("td",j,[e(a,{to:"/problem/1004.html"},{default:s(()=>[n("[✓]")]),_:1})]),t("td",T,[e(a,{to:"/tag/array.html"},{default:s(()=>[Y]),_:1}),n(),e(a,{to:"/tag/binary-search.html"},{default:s(()=>[z]),_:1}),n(),e(a,{to:"/tag/prefix-sum.html"},{default:s(()=>[K]),_:1}),n(),S]),D,t("td",G,[t("a",H,[n("🀄️"),e(o)]),n(),t("a",J,[n("🔗"),e(o)])])]),t("tr",null,[P,Q,U,t("td",W,[e(a,{to:"/tag/array.html"},{default:s(()=>[X]),_:1}),n(),e(a,{to:"/tag/hash-table.html"},{default:s(()=>[Z]),_:1}),n(),e(a,{to:"/tag/binary-search.html"},{default:s(()=>[$]),_:1}),n(),tt]),nt,t("td",et,[t("a",st,[n("🀄️"),e(o)]),n(),t("a",at,[n("🔗"),e(o)])])]),t("tr",null,[ot,lt,ct,t("td",pt,[e(a,{to:"/tag/string.html"},{default:s(()=>[rt]),_:1}),n(),e(a,{to:"/tag/binary-search.html"},{default:s(()=>[it]),_:1}),n(),e(a,{to:"/tag/prefix-sum.html"},{default:s(()=>[dt]),_:1}),n(),ut]),ht,t("td",_t,[t("a",kt,[n("🀄️"),e(o)]),n(),t("a",gt,[n("🔗"),e(o)])])]),t("tr",null,[mt,ft,bt,t("td",vt,[e(a,{to:"/tag/segment-tree.html"},{default:s(()=>[xt]),_:1}),n(),e(a,{to:"/tag/array.html"},{default:s(()=>[yt]),_:1}),n(),e(a,{to:"/tag/string.html"},{default:s(()=>[qt]),_:1}),n(),Bt]),wt,t("td",At,[t("a",Et,[n("🀄️"),e(o)]),n(),t("a",Ft,[n("🔗"),e(o)])])])])])])}const Mt=p(h,[["render",It],["__file","0424.html.vue"]]);export{Mt as default};
