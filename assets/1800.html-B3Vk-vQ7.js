import{_ as p,r as c,o as r,c as i,a as n,b as t,d as s,w as e,f as u,e as d}from"./app-B5EG-zH0.js";const m={},h=n("h1",{id:"_1800-最大升序子数组和",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_1800-最大升序子数组和","aria-hidden":"true"},"#"),t(" 1800. 最大升序子数组和")],-1),g=n("code",null,"数组",-1),k={href:"https://leetcode.cn/problems/maximum-ascending-subarray-sum",target:"_blank",rel:"noopener noreferrer"},_=n("code",null,"力扣",-1),b={href:"https://leetcode.com/problems/maximum-ascending-subarray-sum",target:"_blank",rel:"noopener noreferrer"},f=n("code",null,"LeetCode",-1),x=d(`<h2 id="题目" tabindex="-1"><a class="header-anchor" href="#题目" aria-hidden="true">#</a> 题目</h2><p>Given an array of positive integers <code>nums</code>, return the _maximum possible sum of an<strong>ascending</strong> subarray in _<code>nums</code>.</p><p>A subarray is defined as a contiguous sequence of numbers in an array.</p><p>A subarray <code>[numsl, numsl+1, ..., numsr-1, numsr]</code> is <strong>ascending</strong> if for all <code>i</code> where <code>l &lt;= i &lt; r</code>, <code>numsi &lt; numsi+1</code>. Note that a subarray of size <code>1</code> is <strong>ascending</strong>.</p><p><strong>Example 1:</strong></p><blockquote><p>Input: nums = [10,20,30,5,10,50]</p><p>Output: 65</p><p>Explanation:[5,10,50] is the ascending subarray with the maximum sum of 65.</p></blockquote><p><strong>Example 2:</strong></p><blockquote><p>Input: nums = [10,20,30,40,50]</p><p>Output: 150</p><p>Explanation:[10,20,30,40,50] is the ascending subarray with the maximum sum of 150.</p></blockquote><p><strong>Example 3:</strong></p><blockquote><p>Input: nums = [12,17,15,13,10,11,12]</p><p>Output: 33</p><p>Explanation:[10,11,12] is the ascending subarray with the maximum sum of 33.</p></blockquote><p><strong>Constraints:</strong></p><ul><li><code>1 &lt;= nums.length &lt;= 100</code></li><li><code>1 &lt;= nums[i] &lt;= 100</code></li></ul><h2 id="题目大意" tabindex="-1"><a class="header-anchor" href="#题目大意" aria-hidden="true">#</a> 题目大意</h2><p>给你一个正整数组成的数组 <code>nums</code> ，返回 <code>nums</code> 中一个 <strong>升序</strong> 子数组的最大可能元素和。</p><p>子数组是数组中的一个连续数字序列。</p><p>已知子数组 <code>[numsl, numsl+1, ..., numsr-1, numsr]</code> ，若对所有 <code>i</code>（<code>l &lt;= i &lt; r</code>），<code>numsi &lt; numsi+1</code> 都成立，则称这一子数组为 <strong>升序</strong> 子数组。注意，大小为 <code>1</code> 的子数组也视作 <strong>升序</strong> 子数组。</p><p><strong>示例 1：</strong></p><blockquote><p><strong>输入：</strong> nums = [10,20,30,5,10,50]</p><p><strong>输出：</strong> 65</p><p><strong>解释：</strong>[5,10,50] 是元素和最大的升序子数组，最大元素和为 65 。</p></blockquote><p><strong>示例 2：</strong></p><blockquote><p><strong>输入：</strong> nums = [10,20,30,40,50]</p><p><strong>输出：</strong> 150</p><p><strong>解释：</strong>[10,20,30,40,50] 是元素和最大的升序子数组，最大元素和为 150 。</p></blockquote><p><strong>示例 3：</strong></p><blockquote><p><strong>输入：</strong> nums = [12,17,15,13,10,11,12]</p><p><strong>输出：</strong> 33</p><p><strong>解释：</strong>[10,11,12] 是元素和最大的升序子数组，最大元素和为 33 。</p></blockquote><p><strong>示例 4：</strong></p><blockquote><p><strong>输入：</strong> nums = [100,10,1]</p><p><strong>输出：</strong> 100</p></blockquote><p><strong>提示：</strong></p><ul><li><code>1 &lt;= nums.length &lt;= 100</code></li><li><code>1 &lt;= nums[i] &lt;= 100</code></li></ul><h2 id="解题思路" tabindex="-1"><a class="header-anchor" href="#解题思路" aria-hidden="true">#</a> 解题思路</h2><ol><li><p>初始化 <code>sum</code> 和 <code>maxSum</code> 为数组的第一个元素。</p></li><li><p>遍历数组，从第二个元素开始：</p><ul><li>如果当前元素大于前一个元素，说明当前递增子数组还在继续，累加当前元素到 <code>sum</code>。</li><li>如果当前元素不大于前一个元素，说明递增子数组结束了，更新 <code>maxSum</code> 为当前的 <code>sum</code>，然后重置 <code>sum</code> 为当前元素。</li></ul></li><li><p>遍历完成后，我们需要再返回一次 <code>maxSum</code> 或 <code>sum</code> 中的较大值，确保计算包括最后一个递增子数组。</p></li></ol><h4 id="复杂度分析" tabindex="-1"><a class="header-anchor" href="#复杂度分析" aria-hidden="true">#</a> 复杂度分析</h4><ul><li><strong>时间复杂度</strong>：<code>O(n)</code>，其中 <code>n</code> 是数组的长度，遍历数组一次。</li><li><strong>空间复杂度</strong>：<code>O(1)</code>，只使用常数空间来存储 <code>sum</code> 和 <code>maxSum</code>。</li></ul><h2 id="代码" tabindex="-1"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span> <span class="token parameter">nums</span>
 * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">}</span></span>
 */</span>
<span class="token keyword">var</span> <span class="token function-variable function">maxAscendingSum</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">nums</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">let</span> sum <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
		maxSum <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;</span> nums<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			sum <span class="token operator">+=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
			maxSum <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>maxSum<span class="token punctuation">,</span> sum<span class="token punctuation">)</span><span class="token punctuation">;</span>
			sum <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>maxSum<span class="token punctuation">,</span> sum<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="相关题目" tabindex="-1"><a class="header-anchor" href="#相关题目" aria-hidden="true">#</a> 相关题目</h2>`,33),y=n("thead",null,[n("tr",null,[n("th",{style:{"text-align":"center"}},"题号"),n("th",{style:{"text-align":"left"}},"标题"),n("th",{style:{"text-align":"center"}},"题解"),n("th",{style:{"text-align":"left"}},"标签"),n("th",{style:{"text-align":"center"}},"难度"),n("th",{style:{"text-align":"center"}},"力扣")])],-1),v=n("td",{style:{"text-align":"center"}},"2100",-1),w=n("td",{style:{"text-align":"left"}},"适合野炊的日子",-1),q=n("td",{style:{"text-align":"center"}},null,-1),E={style:{"text-align":"left"}},S=n("code",null,"数组",-1),N=n("code",null,"动态规划",-1),C=n("code",null,"前缀和",-1),I=n("td",{style:{"text-align":"center"}},"🟠",-1),L={style:{"text-align":"center"}},O={href:"https://leetcode.cn/problems/find-good-days-to-rob-the-bank",target:"_blank",rel:"noopener noreferrer"},V={href:"https://leetcode.com/problems/find-good-days-to-rob-the-bank",target:"_blank",rel:"noopener noreferrer"},j=n("td",{style:{"text-align":"center"}},"2355",-1),A=n("td",{style:{"text-align":"left"}},"你能拿走的最大图书数量 🔒",-1),B=n("td",{style:{"text-align":"center"}},null,-1),M={style:{"text-align":"left"}},R=n("code",null,"栈",-1),z=n("code",null,"数组",-1),G=n("code",null,"动态规划",-1),T=n("code",null,"1+",-1),D=n("td",{style:{"text-align":"center"}},"🔴",-1),F={style:{"text-align":"center"}},H={href:"https://leetcode.cn/problems/maximum-number-of-books-you-can-take",target:"_blank",rel:"noopener noreferrer"},J={href:"https://leetcode.com/problems/maximum-number-of-books-you-can-take",target:"_blank",rel:"noopener noreferrer"},K=n("td",{style:{"text-align":"center"}},"2393",-1),P=n("td",{style:{"text-align":"left"}},"严格递增的子数组个数 🔒",-1),Q=n("td",{style:{"text-align":"center"}},null,-1),U={style:{"text-align":"left"}},W=n("code",null,"数组",-1),X=n("code",null,"数学",-1),Y=n("code",null,"动态规划",-1),Z=n("td",{style:{"text-align":"center"}},"🟠",-1),$={style:{"text-align":"center"}},nn={href:"https://leetcode.cn/problems/count-strictly-increasing-subarrays",target:"_blank",rel:"noopener noreferrer"},tn={href:"https://leetcode.com/problems/count-strictly-increasing-subarrays",target:"_blank",rel:"noopener noreferrer"};function sn(en,an){const l=c("font"),a=c("RouterLink"),o=c("ExternalLinkIcon");return r(),i("div",null,[h,n("p",null,[t("🟢 "),s(l,{color:"#15bd66"},{default:e(()=>[t("Easy")]),_:1}),t("  🔖  "),s(a,{to:"/tag/array.html"},{default:e(()=>[g]),_:1}),t("  🔗 "),n("a",k,[_,s(o)]),t(),n("a",b,[f,s(o)])]),x,u(" prettier-ignore "),n("table",null,[y,n("tbody",null,[n("tr",null,[v,w,q,n("td",E,[s(a,{to:"/tag/array.html"},{default:e(()=>[S]),_:1}),t(),s(a,{to:"/tag/dynamic-programming.html"},{default:e(()=>[N]),_:1}),t(),s(a,{to:"/tag/prefix-sum.html"},{default:e(()=>[C]),_:1})]),I,n("td",L,[n("a",O,[t("🀄️"),s(o)]),t(),n("a",V,[t("🔗"),s(o)])])]),n("tr",null,[j,A,B,n("td",M,[s(a,{to:"/tag/stack.html"},{default:e(()=>[R]),_:1}),t(),s(a,{to:"/tag/array.html"},{default:e(()=>[z]),_:1}),t(),s(a,{to:"/tag/dynamic-programming.html"},{default:e(()=>[G]),_:1}),t(),T]),D,n("td",F,[n("a",H,[t("🀄️"),s(o)]),t(),n("a",J,[t("🔗"),s(o)])])]),n("tr",null,[K,P,Q,n("td",U,[s(a,{to:"/tag/array.html"},{default:e(()=>[W]),_:1}),t(),s(a,{to:"/tag/math.html"},{default:e(()=>[X]),_:1}),t(),s(a,{to:"/tag/dynamic-programming.html"},{default:e(()=>[Y]),_:1})]),Z,n("td",$,[n("a",nn,[t("🀄️"),s(o)]),t(),n("a",tn,[t("🔗"),s(o)])])])])])])}const cn=p(m,[["render",sn],["__file","1800.html.vue"]]);export{cn as default};
