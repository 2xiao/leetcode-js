import{_ as i,r as o,o as l,c as r,a as n,b as s,d as a,w as e,e as u}from"./app-aQeLbVW9.js";const d={},k=n("h1",{id:"_2551-将珠子放入背包中",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_2551-将珠子放入背包中","aria-hidden":"true"},"#"),s(" 2551. 将珠子放入背包中")],-1),m=n("code",null,"贪心",-1),h=n("code",null,"数组",-1),g=n("code",null,"排序",-1),b=n("code",null,"堆（优先队列）",-1),v={href:"https://leetcode.cn/problems/put-marbles-in-bags",target:"_blank",rel:"noopener noreferrer"},f=n("code",null,"力扣",-1),w={href:"https://leetcode.com/problems/put-marbles-in-bags",target:"_blank",rel:"noopener noreferrer"},_=n("code",null,"LeetCode",-1),x=u(`<h2 id="题目" tabindex="-1"><a class="header-anchor" href="#题目" aria-hidden="true">#</a> 题目</h2><p>You have <code>k</code> bags. You are given a <strong>0-indexed</strong> integer array <code>weights</code> where <code>weights[i]</code> is the weight of the <code>ith</code> marble. You are also given the integer <code>k.</code></p><p>Divide the marbles into the <code>k</code> bags according to the following rules:</p><ul><li>No bag is empty.</li><li>If the <code>ith</code> marble and <code>jth</code> marble are in a bag, then all marbles with an index between the <code>ith</code> and <code>jth</code> indices should also be in that same bag.</li><li>If a bag consists of all the marbles with an index from <code>i</code> to <code>j</code> inclusively, then the cost of the bag is <code>weights[i] + weights[j]</code>.</li></ul><p>The <strong>score</strong> after distributing the marbles is the sum of the costs of all the <code>k</code> bags.</p><p>Return <em>the <strong>difference</strong> between the <strong>maximum</strong> and <strong>minimum</strong> scores among marble distributions</em>.</p><p><strong>Example 1:</strong></p><blockquote><p>Input: weights = [1,3,5,1], k = 2</p><p>Output: 4</p><p>Explanation:</p><p>The distribution [1],[3,5,1] results in the minimal score of (1+1) + (3+1) = 6.</p><p>The distribution [1,3],[5,1], results in the maximal score of (1+3) + (5+1) = 10.</p><p>Thus, we return their difference 10 - 6 = 4.</p></blockquote><p><strong>Example 2:</strong></p><blockquote><p>Input: weights = [1, 3], k = 2</p><p>Output: 0</p><p>Explanation: The only distribution possible is [1],[3].</p><p>Since both the maximal and minimal score are the same, we return 0.</p></blockquote><p><strong>Constraints:</strong></p><ul><li><code>1 &lt;= k &lt;= weights.length &lt;= 10^5</code></li><li><code>1 &lt;= weights[i] &lt;= 10^9</code></li></ul><h2 id="题目大意" tabindex="-1"><a class="header-anchor" href="#题目大意" aria-hidden="true">#</a> 题目大意</h2><p>你有 <code>k</code> 个背包。给你一个下标从 <strong>0</strong> 开始的整数数组 <code>weights</code> ，其中 <code>weights[i]</code> 是第 <code>i</code> 个珠子的重量。同时给你整数 <code>k</code> 。</p><p>请你按照如下规则将所有的珠子放进 <code>k</code> 个背包。</p><ul><li>没有背包是空的。</li><li>如果第 <code>i</code> 个珠子和第 <code>j</code> 个珠子在同一个背包里，那么下标在 <code>i</code> 到 <code>j</code> 之间的所有珠子都必须在这同一个背包中。</li><li>如果一个背包有下标从 <code>i</code> 到 <code>j</code> 的所有珠子，那么这个背包的价格是 <code>weights[i] + weights[j]</code> 。</li></ul><p>一个珠子分配方案的 <strong>分数</strong> 是所有 <code>k</code> 个背包的价格之和。</p><p>请你返回所有分配方案中，<strong>最大分数</strong> 与 <strong>最小分数</strong> 的 <strong>差值</strong> 为多少。</p><p><strong>示例 1：</strong></p><blockquote><p><strong>输入：</strong> weights = [1,3,5,1], k = 2</p><p><strong>输出：</strong> 4</p><p><strong>解释：</strong></p><p>分配方案 [1],[3,5,1] 得到最小得分 (1+1) + (3+1) = 6 。</p><p>分配方案 [1,3],[5,1] 得到最大得分 (1+3) + (5+1) = 10 。</p><p>所以差值为 10 - 6 = 4 。</p></blockquote><p><strong>示例 2：</strong></p><blockquote><p><strong>输入：</strong> weights = [1, 3], k = 2</p><p><strong>输出：</strong> 0</p><p><strong>解释：</strong> 唯一的分配方案为 [1],[3] 。</p><p>最大最小得分相等，所以返回 0 。</p></blockquote><p><strong>提示：</strong></p><ul><li><code>1 &lt;= k &lt;= weights.length &lt;= 10^5</code></li><li><code>1 &lt;= weights[i] &lt;= 10^9</code></li></ul><h2 id="解题思路" tabindex="-1"><a class="header-anchor" href="#解题思路" aria-hidden="true">#</a> 解题思路</h2><ol><li><p><strong>边界权重和的计算</strong>：</p><ul><li>设定每一组的边界权重为该组的第一个和最后一个元素之和。</li><li><code>k = 1</code> 时，不进行任何划分，返回 <code>0</code>。</li><li><code>k &gt; 1</code> 时，我们需要找到最大和最小的“边界权重和”之差。</li></ul></li><li><p><strong>计算所有相邻元素的和</strong></p><ul><li>构造一个数组 <code>pairSums</code>，存储 <code>weights[i] + weights[i+1]</code> 的值，这些值代表可能的“边界权重和”。</li><li>排序 <code>pairSums</code>，这样： <ul><li><strong>最小的 <code>k-1</code> 个元素</strong> 可以用于构造最小的边界权重和 <code>minSum</code>。</li><li><strong>最大的 <code>k-1</code> 个元素</strong> 可以用于构造最大的边界权重和 <code>maxSum</code>。</li></ul></li></ul></li><li><p><strong>计算结果</strong></p><ul><li>计算 <code>minSum</code>：取 <code>pairSums</code> 最小的 <code>k-1</code> 项之和。</li><li>计算 <code>maxSum</code>：取 <code>pairSums</code> 最大的 <code>k-1</code> 项之和。</li><li>返回 <code>maxSum - minSum</code> 作为最终结果。</li></ul></li></ol><h4 id="复杂度分析" tabindex="-1"><a class="header-anchor" href="#复杂度分析" aria-hidden="true">#</a> 复杂度分析</h4><ul><li><strong>时间复杂度</strong>：<code>O(n log n)</code>，排序是主要的瓶颈。 <ul><li><strong>计算 <code>pairSums</code></strong>：<code>O(n)</code></li><li><strong>排序 <code>pairSums</code></strong>：<code>O(n log n)</code></li><li><strong>遍历计算 <code>minSum</code> 和 <code>maxSum</code></strong>：<code>O(k)</code></li></ul></li><li><strong>空间复杂度</strong>：<code>O(n)</code>，存储 <code>pairSums</code>。</li></ul><h2 id="代码" tabindex="-1"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span> <span class="token parameter">weights</span>
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">}</span></span> <span class="token parameter">k</span>
 * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">}</span></span>
 */</span>
<span class="token keyword">var</span> <span class="token function-variable function">putMarbles</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">weights<span class="token punctuation">,</span> k</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>k <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">let</span> pairSums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> weights<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		pairSums<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>weights<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> weights<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	pairSums<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> a <span class="token operator">-</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">let</span> minSum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>
		maxSum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		minSum <span class="token operator">+=</span> pairSums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
		maxSum <span class="token operator">+=</span> pairSums<span class="token punctuation">[</span>pairSums<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">-</span> i<span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> maxSum <span class="token operator">-</span> minSum<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,30);function S(y,j){const c=o("font"),t=o("RouterLink"),p=o("ExternalLinkIcon");return l(),r("div",null,[k,n("p",null,[s("🔴 "),a(c,{color:"#ff334b"},{default:e(()=>[s("Hard")]),_:1}),s("  🔖  "),a(t,{to:"/tag/greedy.html"},{default:e(()=>[m]),_:1}),s(),a(t,{to:"/tag/array.html"},{default:e(()=>[h]),_:1}),s(),a(t,{to:"/tag/sorting.html"},{default:e(()=>[g]),_:1}),s(),a(t,{to:"/tag/heap-priority-queue.html"},{default:e(()=>[b]),_:1}),s("  🔗 "),n("a",v,[f,a(p)]),s(),n("a",w,[_,a(p)])]),x])}const E=i(d,[["render",S],["__file","2551.html.vue"]]);export{E as default};
