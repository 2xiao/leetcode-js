import{_ as l,r,o as i,c,a as n,b as t,d as e,w as s,f as u,e as d}from"./app-aQeLbVW9.js";const m={},h=n("h1",{id:"_3396-使数组元素互不相同所需的最少操作次数",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_3396-使数组元素互不相同所需的最少操作次数","aria-hidden":"true"},"#"),t(" 3396. 使数组元素互不相同所需的最少操作次数")],-1),g=n("code",null,"数组",-1),k=n("code",null,"哈希表",-1),_={href:"https://leetcode.cn/problems/minimum-number-of-operations-to-make-elements-in-array-distinct",target:"_blank",rel:"noopener noreferrer"},f=n("code",null,"力扣",-1),b={href:"https://leetcode.com/problems/minimum-number-of-operations-to-make-elements-in-array-distinct",target:"_blank",rel:"noopener noreferrer"},v=n("code",null,"LeetCode",-1),y=d(`<h2 id="题目" tabindex="-1"><a class="header-anchor" href="#题目" aria-hidden="true">#</a> 题目</h2><p>You are given an integer array <code>nums</code>. You need to ensure that the elements in the array are <strong>distinct</strong>. To achieve this, you can perform the following operation any number of times:</p><ul><li>Remove 3 elements from the beginning of the array. If the array has fewer than 3 elements, remove all remaining elements.</li></ul><p><strong>Note</strong> that an empty array is considered to have distinct elements. Return the <strong>minimum</strong> number of operations needed to make the elements in the array distinct.</p><p><strong>Example 1:</strong></p><p><strong>Input:</strong> nums = [1,2,3,4,2,3,3,5,7]</p><p><strong>Output:</strong> 2</p><p><strong>Explanation:</strong></p><ul><li>In the first operation, the first 3 elements are removed, resulting in the array <code>[4, 2, 3, 3, 5, 7]</code>.</li><li>In the second operation, the next 3 elements are removed, resulting in the array <code>[3, 5, 7]</code>, which has distinct elements.</li></ul><p>Therefore, the answer is 2.</p><p><strong>Example 2:</strong></p><p><strong>Input:</strong> nums = [4,5,6,4,4]</p><p><strong>Output:</strong> 2</p><p><strong>Explanation:</strong></p><ul><li>In the first operation, the first 3 elements are removed, resulting in the array <code>[4, 4]</code>.</li><li>In the second operation, all remaining elements are removed, resulting in an empty array.</li></ul><p>Therefore, the answer is 2.</p><p><strong>Example 3:</strong></p><p><strong>Input:</strong> nums = [6,7,8,9]</p><p><strong>Output:</strong> 0</p><p><strong>Explanation:</strong></p><p>The array already contains distinct elements. Therefore, the answer is 0.</p><p><strong>Constraints:</strong></p><ul><li><code>1 &lt;= nums.length &lt;= 100</code></li><li><code>1 &lt;= nums[i] &lt;= 100</code></li></ul><h2 id="题目大意" tabindex="-1"><a class="header-anchor" href="#题目大意" aria-hidden="true">#</a> 题目大意</h2><p>给你一个整数数组 <code>nums</code>，你需要确保数组中的元素 **互不相同 **。为此，你可以执行以下操作任意次：</p><ul><li>从数组的开头移除 3 个元素。如果数组中元素少于 3 个，则移除所有剩余元素。</li></ul><p><strong>注意：</strong> 空数组也视作为数组元素互不相同。返回使数组元素互不相同所需的 **最少操作次数 **。</p><p><strong>示例 1：</strong></p><p><strong>输入：</strong> nums = [1,2,3,4,2,3,3,5,7]</p><p><strong>输出：</strong> 2</p><p><strong>解释：</strong></p><ul><li>第一次操作：移除前 3 个元素，数组变为 <code>[4, 2, 3, 3, 5, 7]</code>。</li><li>第二次操作：再次移除前 3 个元素，数组变为 <code>[3, 5, 7]</code>，此时数组中的元素互不相同。</li></ul><p>因此，答案是 2。</p><p><strong>示例 2：</strong></p><p><strong>输入：</strong> nums = [4,5,6,4,4]</p><p><strong>输出：</strong> 2</p><p><strong>解释：</strong></p><ul><li>第一次操作：移除前 3 个元素，数组变为 <code>[4, 4]</code>。</li><li>第二次操作：移除所有剩余元素，数组变为空。</li></ul><p>因此，答案是 2。</p><p><strong>示例 3：</strong></p><p><strong>输入：</strong> nums = [6,7,8,9]</p><p><strong>输出：</strong> 0</p><p><strong>解释：</strong></p><p>数组中的元素已经互不相同，因此不需要进行任何操作，答案是 0。</p><p><strong>提示：</strong></p><ul><li><code>1 &lt;= nums.length &lt;= 100</code></li><li><code>1 &lt;= nums[i] &lt;= 100</code></li></ul><h2 id="解题思路" tabindex="-1"><a class="header-anchor" href="#解题思路" aria-hidden="true">#</a> 解题思路</h2><ol><li><p><strong>使用 Set 记录已出现的元素</strong><br> 我们用一个 <code>Set</code> 来存储已经遍历过的元素，用于检测是否有重复元素出现。</p></li><li><p><strong>从数组末尾向前遍历</strong><br> 从数组最后一个元素开始，向前遍历，这样做的目的可能是为了确保第一次重复出现的元素是离数组末尾越近越好。</p></li><li><p><strong>检测重复</strong><br> 每次遍历到一个元素时，如果这个元素已经存在于 <code>seen</code> 集合中，说明它是一个重复值。</p></li><li><p><strong>计算结果</strong><br> 一旦找到重复元素，用下标 <code>i</code> 计算出操作次数 <code>Math.floor(i / 3) + 1</code>，返回这个结果。</p></li><li><p><strong>无重复时返回 0</strong><br> 如果遍历完成都没有发现重复元素，则返回 0。</p></li></ol><h4 id="复杂度分析" tabindex="-1"><a class="header-anchor" href="#复杂度分析" aria-hidden="true">#</a> 复杂度分析</h4><ul><li><strong>时间复杂度</strong>：<code>O(n)</code>，最多遍历数组一次。</li><li><strong>空间复杂度</strong>：<code>O(n)</code>，哈希表中最多存储 <code>n</code> 个数字。</li></ul><h2 id="代码" tabindex="-1"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span> <span class="token parameter">nums</span>
 * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">}</span></span>
 */</span>
<span class="token keyword">var</span> <span class="token function-variable function">minimumOperations</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">nums</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">let</span> seen <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> nums<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>seen<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>i <span class="token operator">/</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		seen<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="相关题目" tabindex="-1"><a class="header-anchor" href="#相关题目" aria-hidden="true">#</a> 相关题目</h2>`,53),x=n("thead",null,[n("tr",null,[n("th",{style:{"text-align":"center"}},"题号"),n("th",{style:{"text-align":"left"}},"标题"),n("th",{style:{"text-align":"center"}},"题解"),n("th",{style:{"text-align":"left"}},"标签"),n("th",{style:{"text-align":"center"}},"难度"),n("th",{style:{"text-align":"center"}},"力扣")])],-1),w=n("td",{style:{"text-align":"center"}},"945",-1),E=n("td",{style:{"text-align":"left"}},"使数组唯一的最小增量",-1),I={style:{"text-align":"center"}},N={style:{"text-align":"left"}},O=n("code",null,"贪心",-1),T=n("code",null,"数组",-1),C=n("code",null,"计数",-1),L=n("code",null,"1+",-1),V=n("td",{style:{"text-align":"center"}},"🟠",-1),R={style:{"text-align":"center"}},S={href:"https://leetcode.cn/problems/minimum-increment-to-make-array-unique",target:"_blank",rel:"noopener noreferrer"},j={href:"https://leetcode.com/problems/minimum-increment-to-make-array-unique",target:"_blank",rel:"noopener noreferrer"};function B(q,M){const p=r("font"),a=r("RouterLink"),o=r("ExternalLinkIcon");return i(),c("div",null,[h,n("p",null,[t("🟢 "),e(p,{color:"#15bd66"},{default:s(()=>[t("Easy")]),_:1}),t("  🔖  "),e(a,{to:"/tag/array.html"},{default:s(()=>[g]),_:1}),t(),e(a,{to:"/tag/hash-table.html"},{default:s(()=>[k]),_:1}),t("  🔗 "),n("a",_,[f,e(o)]),t(),n("a",b,[v,e(o)])]),y,u(" prettier-ignore "),n("table",null,[x,n("tbody",null,[n("tr",null,[w,E,n("td",I,[e(a,{to:"/problem/0945.html"},{default:s(()=>[t("[✓]")]),_:1})]),n("td",N,[e(a,{to:"/tag/greedy.html"},{default:s(()=>[O]),_:1}),t(),e(a,{to:"/tag/array.html"},{default:s(()=>[T]),_:1}),t(),e(a,{to:"/tag/counting.html"},{default:s(()=>[C]),_:1}),t(),L]),V,n("td",R,[n("a",S,[t("🀄️"),e(o)]),t(),n("a",j,[t("🔗"),e(o)])])])])])])}const z=l(m,[["render",B],["__file","3396.html.vue"]]);export{z as default};
