import{_ as l,r as a,o as i,c as r,a as n,b as s,d as e,w as o,e as d}from"./app-B5EG-zH0.js";const u={},k=n("h1",{id:"_1704-判断字符串的两半是否相似",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_1704-判断字符串的两半是否相似","aria-hidden":"true"},"#"),s(" 1704. 判断字符串的两半是否相似")],-1),h=n("code",null,"字符串",-1),m=n("code",null,"计数",-1),b={href:"https://leetcode.cn/problems/determine-if-string-halves-are-alike",target:"_blank",rel:"noopener noreferrer"},g=n("code",null,"力扣",-1),v={href:"https://leetcode.com/problems/determine-if-string-halves-are-alike",target:"_blank",rel:"noopener noreferrer"},f=n("code",null,"LeetCode",-1),_=d(`<h2 id="题目" tabindex="-1"><a class="header-anchor" href="#题目" aria-hidden="true">#</a> 题目</h2><p>You are given a string <code>s</code> of even length. Split this string into two halves of equal lengths, and let <code>a</code> be the first half and <code>b</code> be the second half.</p><p>Two strings are <strong>alike</strong> if they have the same number of vowels (<code>&#39;a&#39;</code>, <code>&#39;e&#39;</code>, <code>&#39;i&#39;</code>, <code>&#39;o&#39;</code>, <code>&#39;u&#39;</code>, <code>&#39;A&#39;</code>, <code>&#39;E&#39;</code>, <code>&#39;I&#39;</code>, <code>&#39;O&#39;</code>, <code>&#39;U&#39;</code>). Notice that <code>s</code> contains uppercase and lowercase letters.</p><p>Return <code>true</code> <em>if</em><code>a</code> <em>and</em><code>b</code> <em>are <strong>alike</strong></em>. Otherwise, return <code>false</code>.</p><p><strong>Example 1:</strong></p><blockquote><p>Input: s = &quot;book&quot;</p><p>Output: true</p><p>Explanation: a = &quot;b <em>o</em> &quot; and b = &quot;<em>o</em> k&quot;. a has 1 vowel and b has 1 vowel. Therefore, they are alike.</p></blockquote><p><strong>Example 2:</strong></p><blockquote><p>Input: s = &quot;textbook&quot;</p><p>Output: false</p><p>Explanation: a = &quot;t <em>e</em> xt&quot; and b = &quot;b <em>oo</em> k&quot;. a has 1 vowel whereas b has 2. Therefore, they are not alike.</p><p>Notice that the vowel o is counted twice.</p></blockquote><p><strong>Constraints:</strong></p><ul><li><code>2 &lt;= s.length &lt;= 1000</code></li><li><code>s.length</code> is even.</li><li><code>s</code> consists of <strong>uppercase and lowercase</strong> letters.</li></ul><h2 id="题目大意" tabindex="-1"><a class="header-anchor" href="#题目大意" aria-hidden="true">#</a> 题目大意</h2><p>给你一个偶数长度的字符串 <code>s</code> 。将其拆分成长度相同的两半，前一半为 <code>a</code> ，后一半为 <code>b</code> 。</p><p>两个字符串 <strong>相似</strong> 的前提是它们都含有相同数目的元音（<code>&#39;a&#39;</code>，<code>&#39;e&#39;</code>，<code>&#39;i&#39;</code>，<code>&#39;o&#39;</code>，<code>&#39;u&#39;</code>，<code>&#39;A&#39;</code>，<code>&#39;E&#39;</code>，<code>&#39;I&#39;</code>，<code>&#39;O&#39;</code>，<code>&#39;U&#39;</code>）。注意，<code>s</code> 可能同时含有大写和小写字母。</p><p>如果 <code>a</code> 和 <code>b</code> 相似，返回 <code>true</code> ；否则，返回 <code>false</code> 。</p><p><strong>示例 1：</strong></p><blockquote><p><strong>输入：</strong> s = &quot;book&quot;</p><p><strong>输出：</strong> true</p><p><strong>解释：</strong> a = &quot;b<strong>o</strong> &quot; 且 b = &quot;<strong>o</strong> k&quot; 。a 中有 1 个元音，b 也有 1 个元音。所以，a 和 b 相似。</p></blockquote><p><strong>示例 2：</strong></p><blockquote><p><strong>输入：</strong> s = &quot;textbook&quot;</p><p><strong>输出：</strong> false</p><p><strong>解释：</strong> a = &quot;t<strong>e</strong> xt&quot; 且 b = &quot;b<strong>oo</strong> k&quot; 。a 中有 1 个元音，b 中有 2 个元音。因此，a 和 b 不相似。</p><p>注意，元音 o 在 b 中出现两次，记为 2 个。</p></blockquote><p><strong>提示：</strong></p><ul><li><code>2 &lt;= s.length &lt;= 1000</code></li><li><code>s.length</code> 是偶数</li><li><code>s</code> 由 <strong>大写和小写</strong> 字母组成</li></ul><h2 id="解题思路" tabindex="-1"><a class="header-anchor" href="#解题思路" aria-hidden="true">#</a> 解题思路</h2><ol><li><p>使用一个函数 <code>isVowel</code> 来判断字符是否为元音。元音字母包括 <code>a, e, i, o, u</code>（大小写均需考虑）。</p></li><li><p><strong>双指针遍历</strong>：</p><ul><li>使用双指针分别从字符串的左侧和右侧向中间移动。</li><li>左指针统计左半部分元音数量，右指针统计右半部分元音数量。</li></ul></li><li><p>当两指针相遇后统计结束，只需比较两部分的元音数量是否相等。</p></li></ol><h4 id="复杂度分析" tabindex="-1"><a class="header-anchor" href="#复杂度分析" aria-hidden="true">#</a> 复杂度分析</h4><ul><li><strong>时间复杂度</strong>：<code>O(n)</code>，遍历字符串一次（<code>n</code> 为字符串长度）。</li><li><strong>空间复杂度</strong>：<code>O(1)</code>，只使用了常数额外空间。</li></ul><h2 id="代码" tabindex="-1"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>string<span class="token punctuation">}</span></span> <span class="token parameter">s</span>
 * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>boolean<span class="token punctuation">}</span></span>
 */</span>
<span class="token keyword">var</span> <span class="token function-variable function">halvesAreAlike</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">s</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">// 判断是否为元音</span>
	<span class="token keyword">const</span> <span class="token function-variable function">isVowel</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">char</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token string">&#39;aeiouAEIOU&#39;</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>char<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">let</span> leftVowels <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// 左半部分元音计数</span>
	<span class="token keyword">let</span> rightVowels <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// 右半部分元音计数</span>
	<span class="token keyword">let</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// 左指针</span>
	<span class="token keyword">let</span> right <span class="token operator">=</span> s<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 右指针</span>

	<span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token comment">// 左半部分统计</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isVowel</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>left<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			leftVowels<span class="token operator">++</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		<span class="token comment">// 右半部分统计</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isVowel</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>right<span class="token operator">--</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			rightVowels<span class="token operator">++</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>

	<span class="token comment">// 比较元音数量是否相等</span>
	<span class="token keyword">return</span> leftVowels <span class="token operator">==</span> rightVowels<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,26);function w(q,x){const p=a("font"),t=a("RouterLink"),c=a("ExternalLinkIcon");return i(),r("div",null,[k,n("p",null,[s("🟢 "),e(p,{color:"#15bd66"},{default:o(()=>[s("Easy")]),_:1}),s("  🔖  "),e(t,{to:"/tag/string.html"},{default:o(()=>[h]),_:1}),s(),e(t,{to:"/tag/counting.html"},{default:o(()=>[m]),_:1}),s("  🔗 "),n("a",b,[g,e(c)]),s(),n("a",v,[f,e(c)])]),_])}const V=l(u,[["render",w],["__file","1704.html.vue"]]);export{V as default};
