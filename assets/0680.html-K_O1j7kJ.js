import{_ as p,r as l,o as i,c as r,a as n,b as t,d as s,w as e,f as d,e as u}from"./app-fBVbqwGY.js";const k={},h=n("h1",{id:"_680-验证回文串-ii",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_680-验证回文串-ii","aria-hidden":"true"},"#"),t(" 680. 验证回文串 II")],-1),g=n("code",null,"贪心",-1),_=n("code",null,"双指针",-1),m=n("code",null,"字符串",-1),b={href:"https://leetcode.cn/problems/valid-palindrome-ii",target:"_blank",rel:"noopener noreferrer"},v=n("code",null,"力扣",-1),f={href:"https://leetcode.com/problems/valid-palindrome-ii",target:"_blank",rel:"noopener noreferrer"},x=n("code",null,"LeetCode",-1),y=u(`<h2 id="题目" tabindex="-1"><a class="header-anchor" href="#题目" aria-hidden="true">#</a> 题目</h2><p>Given a string <code>s</code>, return <code>true</code> <em>if the</em><code>s</code> <em>can be palindrome after deleting<strong>at most one</strong> character from it</em>.</p><p><strong>Example 1:</strong></p><blockquote><p>Input: s = &quot;aba&quot;</p><p>Output: true</p></blockquote><p><strong>Example 2:</strong></p><blockquote><p>Input: s = &quot;abca&quot;</p><p>Output: true</p><p>Explanation: You could delete the character &#39;c&#39;.</p></blockquote><p><strong>Example 3:</strong></p><blockquote><p>Input: s = &quot;abc&quot;</p><p>Output: false</p></blockquote><p><strong>Constraints:</strong></p><ul><li><code>1 &lt;= s.length &lt;= 10^5</code></li><li><code>s</code> consists of lowercase English letters.</li></ul><h2 id="题目大意" tabindex="-1"><a class="header-anchor" href="#题目大意" aria-hidden="true">#</a> 题目大意</h2><p>给你一个字符串 <code>s</code>，<strong>最多</strong> 可以从中删除一个字符。</p><p>请你判断 <code>s</code> 是否能成为回文字符串：如果能，返回 <code>true</code> ；否则，返回 <code>false</code> 。</p><p><strong>示例 1：</strong></p><blockquote><p><strong>输入：</strong> s = &quot;aba&quot;</p><p><strong>输出：</strong> true</p></blockquote><p><strong>示例 2：</strong></p><blockquote><p><strong>输入：</strong> s = &quot;abca&quot;</p><p><strong>输出：</strong> true</p><p><strong>解释：</strong> 你可以删除字符 &#39;c&#39; 。</p></blockquote><p><strong>示例 3：</strong></p><blockquote><p><strong>输入：</strong> s = &quot;abc&quot;</p><p><strong>输出：</strong> false</p></blockquote><p><strong>提示：</strong></p><ul><li><code>1 &lt;= s.length &lt;= 10^5</code></li><li><code>s</code> 由小写英文字母组成</li></ul><h2 id="解题思路" tabindex="-1"><a class="header-anchor" href="#解题思路" aria-hidden="true">#</a> 解题思路</h2><ol><li><p><strong>判断回文</strong>：</p><ul><li>一个字符串 <code>s</code> 是回文，当且仅当 <code>s[i] == s[s.length - 1 - i]</code>，对于所有的 <code>i</code>，满足这个条件。</li><li>定义辅助函数 <code>isPalindrome</code>，用于判断子字符串是否为回文字符串，使用双指针从两端向中间推进。</li></ul></li><li><p><strong>具体步骤</strong>：</p><ul><li>使用双指针 <code>left</code> 和 <code>right</code> 从字符串两端向中间进行遍历。</li><li>如果 <code>s[left] === s[right]</code>，则继续向中间推进，检查下一个字符。</li><li>如果 <code>s[left] !== s[right]</code>，我们有两种选择： <ol><li>删除 <code>left</code> 指针指向的字符，检查从 <code>left + 1</code> 到 <code>right</code> 的子字符串是否为回文。</li><li>删除 <code>right</code> 指针指向的字符，检查从 <code>left</code> 到 <code>right - 1</code> 的子字符串是否为回文。</li></ol></li><li>如果两种删除方式中有一种能让字符串成为回文，则返回 <code>true</code>；否则返回 <code>false</code>。</li></ul></li><li><p><strong>边界条件</strong>：</p><ul><li>如果字符串本身已经是回文，直接返回 <code>true</code>。</li></ul></li></ol><h4 id="复杂度分析" tabindex="-1"><a class="header-anchor" href="#复杂度分析" aria-hidden="true">#</a> 复杂度分析</h4><ul><li><strong>时间复杂度</strong>：<code>O(n)</code>，其中 <code>n</code> 是字符串 <code>s</code> 的长度。最坏情况下，最多需要两次遍历整个字符串。</li><li><strong>空间复杂度</strong>：<code>O(1)</code>，只使用了常数空间来进行计算。</li></ul><h2 id="代码" tabindex="-1"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>string<span class="token punctuation">}</span></span> <span class="token parameter">s</span>
 * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>boolean<span class="token punctuation">}</span></span>
 */</span>
<span class="token keyword">var</span> <span class="token function-variable function">validPalindrome</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">s</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">// 判断字符串是否是回文</span>
	<span class="token keyword">const</span> <span class="token function-variable function">isPalindrome</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">str<span class="token punctuation">,</span> left<span class="token punctuation">,</span> right</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
		<span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span>str<span class="token punctuation">[</span>left<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">!==</span> str<span class="token punctuation">[</span>right<span class="token operator">--</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span><span class="token punctuation">;</span>

	<span class="token keyword">let</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>
		right <span class="token operator">=</span> s<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>

	<span class="token comment">// 双指针检查是否是回文</span>
	<span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">===</span> s<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			left<span class="token operator">++</span><span class="token punctuation">;</span>
			right<span class="token operator">--</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
			<span class="token comment">// 尝试删除一个字符，检查两种情况</span>
			<span class="token keyword">return</span> <span class="token punctuation">(</span>
				<span class="token function">isPalindrome</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> left <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> right<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">isPalindrome</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> left<span class="token punctuation">,</span> right <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>
			<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>

	<span class="token comment">// 如果经过上述检查后仍然是回文</span>
	<span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="相关题目" tabindex="-1"><a class="header-anchor" href="#相关题目" aria-hidden="true">#</a> 相关题目</h2>`,28),q=n("thead",null,[n("tr",null,[n("th",{style:{"text-align":"center"}},"题号"),n("th",{style:{"text-align":"left"}},"标题"),n("th",{style:{"text-align":"center"}},"题解"),n("th",{style:{"text-align":"left"}},"标签"),n("th",{style:{"text-align":"center"}},"难度"),n("th",{style:{"text-align":"center"}},"力扣")])],-1),w=n("td",{style:{"text-align":"center"}},"125",-1),I=n("td",{style:{"text-align":"left"}},"验证回文串",-1),E={style:{"text-align":"center"}},V={style:{"text-align":"left"}},C=n("code",null,"双指针",-1),L=n("code",null,"字符串",-1),N=n("td",{style:{"text-align":"center"}},"🟢",-1),O={style:{"text-align":"center"}},P={href:"https://leetcode.cn/problems/valid-palindrome",target:"_blank",rel:"noopener noreferrer"},j={href:"https://leetcode.com/problems/valid-palindrome",target:"_blank",rel:"noopener noreferrer"},B=n("td",{style:{"text-align":"center"}},"1216",-1),R=n("td",{style:{"text-align":"left"}},"验证回文串 III 🔒",-1),G=n("td",{style:{"text-align":"center"}},null,-1),S={style:{"text-align":"left"}},T=n("code",null,"字符串",-1),Y=n("code",null,"动态规划",-1),z=n("td",{style:{"text-align":"center"}},"🔴",-1),A={style:{"text-align":"center"}},D={href:"https://leetcode.cn/problems/valid-palindrome-iii",target:"_blank",rel:"noopener noreferrer"},F={href:"https://leetcode.com/problems/valid-palindrome-iii",target:"_blank",rel:"noopener noreferrer"},H=n("td",{style:{"text-align":"center"}},"2330",-1),J=n("td",{style:{"text-align":"left"}},"验证回文串 IV 🔒",-1),K=n("td",{style:{"text-align":"center"}},null,-1),M={style:{"text-align":"left"}},Q=n("code",null,"双指针",-1),U=n("code",null,"字符串",-1),W=n("td",{style:{"text-align":"center"}},"🟠",-1),X={style:{"text-align":"center"}},Z={href:"https://leetcode.cn/problems/valid-palindrome-iv",target:"_blank",rel:"noopener noreferrer"},$={href:"https://leetcode.com/problems/valid-palindrome-iv",target:"_blank",rel:"noopener noreferrer"};function nn(tn,sn){const c=l("font"),a=l("RouterLink"),o=l("ExternalLinkIcon");return i(),r("div",null,[h,n("p",null,[t("🟢 "),s(c,{color:"#15bd66"},{default:e(()=>[t("Easy")]),_:1}),t("  🔖  "),s(a,{to:"/tag/greedy.html"},{default:e(()=>[g]),_:1}),t(),s(a,{to:"/tag/two-pointers.html"},{default:e(()=>[_]),_:1}),t(),s(a,{to:"/tag/string.html"},{default:e(()=>[m]),_:1}),t("  🔗 "),n("a",b,[v,s(o)]),t(),n("a",f,[x,s(o)])]),y,d(" prettier-ignore "),n("table",null,[q,n("tbody",null,[n("tr",null,[w,I,n("td",E,[s(a,{to:"/problem/0125.html"},{default:e(()=>[t("[✓]")]),_:1})]),n("td",V,[s(a,{to:"/tag/two-pointers.html"},{default:e(()=>[C]),_:1}),t(),s(a,{to:"/tag/string.html"},{default:e(()=>[L]),_:1})]),N,n("td",O,[n("a",P,[t("🀄️"),s(o)]),t(),n("a",j,[t("🔗"),s(o)])])]),n("tr",null,[B,R,G,n("td",S,[s(a,{to:"/tag/string.html"},{default:e(()=>[T]),_:1}),t(),s(a,{to:"/tag/dynamic-programming.html"},{default:e(()=>[Y]),_:1})]),z,n("td",A,[n("a",D,[t("🀄️"),s(o)]),t(),n("a",F,[t("🔗"),s(o)])])]),n("tr",null,[H,J,K,n("td",M,[s(a,{to:"/tag/two-pointers.html"},{default:e(()=>[Q]),_:1}),t(),s(a,{to:"/tag/string.html"},{default:e(()=>[U]),_:1})]),W,n("td",X,[n("a",Z,[t("🀄️"),s(o)]),t(),n("a",$,[t("🔗"),s(o)])])])])])])}const an=p(k,[["render",nn],["__file","0680.html.vue"]]);export{an as default};
