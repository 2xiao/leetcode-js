import{_ as p,r as c,o as r,c as i,f as l,a as t,d as s,w as a,b as n,e as d}from"./app-aQeLbVW9.js";const u="/leetcode-js/assets/3-8-1-iT-WwoJ7.png",_="/leetcode-js/assets/3-8-2-QfXJz8bw.png",h="/leetcode-js/assets/3-8-3-a_6Sr1pw.png",k="/leetcode-js/assets/3-8-4-z3t45buZ.png",g="/leetcode-js/assets/3-8-5-fdOtm4YE.png",m="/leetcode-js/assets/3-8-6-N3GEHDda.png",f="/leetcode-js/assets/3-8-7-9X6nt6Rg.png",y={},b=d('<h1 id="_3-8-排序算法" tabindex="-1"><a class="header-anchor" href="#_3-8-排序算法" aria-hidden="true">#</a> 3.8 排序算法</h1><h2 id="评价排序算法的指标" tabindex="-1"><a class="header-anchor" href="#评价排序算法的指标" aria-hidden="true">#</a> 评价排序算法的指标</h2><h4 id="_1-执行效率" tabindex="-1"><a class="header-anchor" href="#_1-执行效率" aria-hidden="true">#</a> 1. 执行效率</h4><p>在分析排序算法的时间复杂度时，要分别给出<strong>最好情况</strong>、<strong>最坏情况</strong>、<strong>平均情况下的时间复杂度</strong>。</p><h4 id="_2-内存消耗" tabindex="-1"><a class="header-anchor" href="#_2-内存消耗" aria-hidden="true">#</a> 2. 内存消耗</h4><p>算法的内存消耗可以通过<strong>空间复杂度</strong>来衡量。</p><p>空间复杂度是 O(1)的排序算法，称为<strong>原地排序（Sorted in place）</strong>。</p><h4 id="_3-稳定性" tabindex="-1"><a class="header-anchor" href="#_3-稳定性" aria-hidden="true">#</a> 3. 稳定性</h4><p><strong>稳定性</strong>是指，如果待排序的序列中存在值相等的元素，经过排序之后，相等元素之间原有的先后顺序不变。</p><p>很多数据结构和算法课程，在讲排序的时候，都是用整数来举例，但在真正软件开发中，我们要排序的往往不是单纯的整数，而是一组对象，我们需要按照对象的某个 key 来排序。当需要先按 key1 排序，key1 值相同的再按照 key2 排序时，就需要使用稳定的排序算法。</p><hr><p>常见排序算法的各项指标如下：</p><table style="width:100%;"><tr><th style="width:15%;">排序算法</th><th style="width:15%;">平均时间复杂度</th><th style="width:13%;">最好情况</th><th style="width:15%;">最坏情况</th><th style="width:12%;">空间复杂度</th><th style="width:15%;">排序方式</th><th style="width:15%;">稳定性</th></tr><tr><td>冒泡排序</td><td>O(n^2)</td><td>O(n)</td><td>O(n^2)</td><td>O(1)</td><td>in-place</td><td>稳定</td></tr><tr><td>选择排序</td><td>O(n^2)</td><td>O(n^2)</td><td>O(n^2)</td><td>O(1)</td><td>in-place</td><td>不稳定</td></tr><tr><td>插入排序</td><td>O(n^2)</td><td>O(n)</td><td>O(n^2)</td><td>O(1)</td><td>in-place</td><td>稳定</td></tr><tr><td>希尔排序</td><td>O(nlogn)</td><td>O(nlog^2n)</td><td>O(nlog^2n)</td><td>O(1)</td><td>in-place</td><td>不稳定</td></tr><tr><td>归并排序</td><td>O(nlogn)</td><td>O(nlogn)</td><td>O(nlogn)</td><td>O(n)</td><td>out-place</td><td>稳定</td></tr><tr><td>快速排序</td><td>O(nlogn)</td><td>O(nlogn)</td><td>O(n^2)</td><td>O(logn)</td><td>in-place</td><td>不稳定</td></tr><tr><td>堆排序</td><td>O(nlogn)</td><td>O(nlogn)</td><td>O(nlogn)</td><td>O(1)</td><td>in-place</td><td>不稳定</td></tr><tr><td>桶排序</td><td>O(n+k)</td><td>O(n+k)</td><td>O(n^2)</td><td>O(n+k)</td><td>out-place</td><td>稳定</td></tr><tr><td>计数排序</td><td>O(n+k)</td><td>O(n+k)</td><td>O(n+k)</td><td>O(k)</td><td>out-place</td><td>稳定</td></tr><tr><td>基数排序</td><td>O(n*k)</td><td>O(n*k)</td><td>O(n*k)</td><td>O(n+k)</td><td>out-place</td><td>稳定</td></tr></table><h2 id="冒泡排序-bubble-sort" tabindex="-1"><a class="header-anchor" href="#冒泡排序-bubble-sort" aria-hidden="true">#</a> 冒泡排序（Bubble Sort）</h2><p>冒泡排序只会操作相邻的两个数据。每次冒泡操作都会对<strong>相邻的两个元素进行比较</strong>，看是否满足大小关系要求。如果不满足就让它俩互换。一次冒泡会让至少一个元素移动到它应该在的位置，重复 n 次，就完成了 n 个数据的排序工作。 <img src="'+u+'" alt="" loading="lazy"><img src="'+_+`" alt="" loading="lazy"></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">bubbleSort</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">let</span> n <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">-</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&gt;</span> arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
				<span class="token comment">// 相邻数据比较</span>
				<span class="token keyword">let</span> temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 交换</span>
				arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
				arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> arr<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>冒泡排序的平均时间复杂度是 O(n^2)，冒泡的过程只涉及相邻数据的交换操作，只需要常量级的临时空间，所以它的空间复杂度为 O(1)，是一个原地排序算法。相同大小的数据在排序前后不会改变顺序，所以冒泡排序是稳定的排序算法。</p><h2 id="选择排序-selection-sort" tabindex="-1"><a class="header-anchor" href="#选择排序-selection-sort" aria-hidden="true">#</a> 选择排序（Selection Sort）</h2><p>选择排序将数组中的数据分为两个区间，已排序区间和未排序区间。每次会从未排序区间中<strong>找到最小的元素</strong>，将其放到已排序区间的末尾，共执行 n - 1 轮。</p><figure><img src="`+h+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">selectionSort</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">const</span> n <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
	<span class="token keyword">let</span> temp<span class="token punctuation">,</span> minIndex<span class="token punctuation">;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		minIndex <span class="token operator">=</span> i<span class="token punctuation">;</span>
		<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>minIndex<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
				<span class="token comment">// 寻找最小值</span>
				minIndex <span class="token operator">=</span> j<span class="token punctuation">;</span> <span class="token comment">// 暂存最小值的索引</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
		temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 将最小值和第一个未排序的数交换</span>
		arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>minIndex<span class="token punctuation">]</span><span class="token punctuation">;</span>
		arr<span class="token punctuation">[</span>minIndex<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> arr<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>选择排序空间复杂度为 O(1)，是一种原地排序算法。选择排序的最好情况时间复杂度、最坏情况和平均情况时间复杂度都为 O(n2)。选择排序是一种不稳定的排序算法。选择排序每次都要找剩余未排序元素中的最小值，并和前面的元素交换位置，这样破坏了稳定性。</p><h2 id="插入排序-insertion-sort" tabindex="-1"><a class="header-anchor" href="#插入排序-insertion-sort" aria-hidden="true">#</a> 插入排序（Insertion Sort）</h2><p>插入排序将数组中的数据分为两个区间，已排序区间和未排序区间。初始已排序区间只有一个元素，就是数组的第一个元素。插入算法的核心思想是取未排序区间中的元素，在已排序区间中<strong>找到合适的插入位置将其插入</strong>，并保证已排序区间数据一直有序。重复这个过程，直到未排序区间中元素为空，算法结束。 <img src="`+k+`" alt="" loading="lazy"></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">insertionSort</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token comment">// 当前要处理的数</span>
		<span class="token keyword">let</span> temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
		<span class="token keyword">let</span> j <span class="token operator">=</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
		<span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&gt;</span> temp<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token comment">// 如果前一个数大于后一个数,将前一个数往后移一位</span>
			arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
			j<span class="token operator">--</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		<span class="token comment">// 此时的j是要处理的数排序后应该在的位置</span>
		arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> arr<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>插入排序的平均时间复杂度是 O(n^2)，冒泡的过程只涉及相邻数据的交换操作，只需要常量级的临时空间，所以它的空间复杂度为 O(1)，是一个原地排序算法。相同大小的数据在排序前后不会改变顺序，所以冒泡排序是稳定的排序算法。</p><h2 id="希尔排序-shell-sort" tabindex="-1"><a class="header-anchor" href="#希尔排序-shell-sort" aria-hidden="true">#</a> 希尔排序（Shell Sort）</h2><p>希尔排序，也称递减增量排序算法，是插入排序的一种更高效的改进版本。</p><p>希尔排序是基于插入排序的以下两点性质而提出改进方法的：</p><ul><li>插入排序在对几乎已经排好序的数据操作时，效率高，即可以达到线性排序的效率；</li><li>但插入排序一般来说是低效的，因为插入排序每次只能将数据移动一位；</li></ul><p>希尔排序通过将比较的全部元素分为几个区域来提升插入排序的性能。这样可以让一个元素可以一次性地朝最终位置前进一大步。然后算法再取越来越小的步长进行排序，算法的最后一步就是普通的插入排序，但是到了这步，需排序的数据几乎是已排好的了。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">shellSort</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> gap <span class="token operator">=</span> arr<span class="token punctuation">.</span>length <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">;</span> gap <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">;</span> gap <span class="token operator">&gt;&gt;=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> gap<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">let</span> temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>
				j<span class="token punctuation">;</span>
			<span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> i <span class="token operator">-</span> gap<span class="token punctuation">;</span> j <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&gt;</span> temp<span class="token punctuation">;</span> j <span class="token operator">-=</span> gap<span class="token punctuation">)</span> <span class="token punctuation">{</span>
				arr<span class="token punctuation">[</span>j <span class="token operator">+</span> gap<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span>
			arr<span class="token punctuation">[</span>j <span class="token operator">+</span> gap<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> arr<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>希尔排序的平均时间复杂度是 O(nlogn)，空间复杂度为 O(1)，希尔排序是非稳定排序算法。</p><h2 id="归并排序-merge-sort" tabindex="-1"><a class="header-anchor" href="#归并排序-merge-sort" aria-hidden="true">#</a> 归并排序（Merge Sort）</h2><p>归并排序的核心思想是分治思想。分治，将一个大问题分解成小的子问题来解决。小的子问题解决了，大问题也就解决了。</p><p>如果要排序一个数组，先把数组从中间分成前后两部分，然后对前后两部分分别排序，再将排好序的两部分合并在一起，这样整个数组就都有序了。</p><ul><li><p>分：把数组分成两半，递归子数组,进行分割操作，直到分成一个数</p></li><li><p>合：把两个字数组合并成一个有序数组，直到全部子数组合并完毕，合并前先准备一个空数组，存放合并之后的结果，然后不断取出两个子数组的第一个元素，比较他们的大小，小的先进入之前准备的空数组中，然后继续遍历其他元素，直到子数组中的元素都完成遍历</p></li></ul><figure><img src="`+g+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">mergeSort</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">//采用自上而下的递归方法</span>
	<span class="token keyword">var</span> len <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>len <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> arr<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">var</span> middle <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>len <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
		left <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> middle<span class="token punctuation">)</span><span class="token punctuation">,</span>
		right <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>middle<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token function">merge</span><span class="token punctuation">(</span><span class="token function">mergeSort</span><span class="token punctuation">(</span>left<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">mergeSort</span><span class="token punctuation">(</span>right<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">merge</span><span class="token punctuation">(</span><span class="token parameter">left<span class="token punctuation">,</span> right</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

	<span class="token keyword">while</span> <span class="token punctuation">(</span>left<span class="token punctuation">.</span>length <span class="token operator">&amp;&amp;</span> right<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>left<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&lt;=</span> right<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>left<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
			result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>right<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">while</span> <span class="token punctuation">(</span>left<span class="token punctuation">.</span>length<span class="token punctuation">)</span> result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>left<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">while</span> <span class="token punctuation">(</span>right<span class="token punctuation">.</span>length<span class="token punctuation">)</span> result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>right<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>时间复杂度 O(nlogn)，分的时间复杂度 O(logn)，合并的过程的复杂度是 O(n)。</p><p>尽管每次合并操作都需要申请额外的内存空间，但在合并完成之后，临时开辟的内存空间就被释放掉了。在任意时刻，CPU 只会有一个函数在执行，也就只会有一个临时的内存空间在使用。临时内存空间最大也不会超过 n 个数据的大小，所以空间复杂度是 O(n)。</p><p>归并排序不是原地排序算法，归并排序是一个稳定的排序算法。</p><h2 id="快速排序-quick-sort" tabindex="-1"><a class="header-anchor" href="#快速排序-quick-sort" aria-hidden="true">#</a> 快速排序（Quick Sort）</h2><p>快排利用的也是分治思想。</p><ul><li>分区：从数组中选一个基准值，比基准值小的放在它的前面，比基准值大的放在它的后面</li><li>递归：对基准值前后的子数组进行第一步的递归操作</li></ul><p>快排是一种原地、不稳定的排序算法。时间复杂度 O(nlogn)，递归复杂度是 O(logn),分区复杂度 O(n)；空间复杂度是 O(1)。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">quickSort</span><span class="token punctuation">(</span><span class="token parameter">arr<span class="token punctuation">,</span> left<span class="token punctuation">,</span> right</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">var</span> len <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">,</span>
		partitionIndex<span class="token punctuation">,</span>
		left <span class="token operator">=</span> <span class="token keyword">typeof</span> left <span class="token operator">!=</span> <span class="token string">&#39;number&#39;</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> left<span class="token punctuation">,</span>
		right <span class="token operator">=</span> <span class="token keyword">typeof</span> right <span class="token operator">!=</span> <span class="token string">&#39;number&#39;</span> <span class="token operator">?</span> len <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">:</span> right<span class="token punctuation">;</span>

	<span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		partitionIndex <span class="token operator">=</span> <span class="token function">partition</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> left<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">quickSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> left<span class="token punctuation">,</span> partitionIndex <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">quickSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> partitionIndex <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> arr<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">//分区操作</span>
<span class="token keyword">function</span> <span class="token function">partition</span><span class="token punctuation">(</span><span class="token parameter">arr<span class="token punctuation">,</span> left<span class="token punctuation">,</span> right</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">// 设定基准值位置 pivot</span>
	<span class="token comment">// 当然也可以选择最右边的元素为基准</span>
	<span class="token comment">// 也可以随机选择然后和最左或最右元素交换</span>
	<span class="token keyword">var</span> pivot <span class="token operator">=</span> left<span class="token punctuation">,</span>
		index <span class="token operator">=</span> pivot <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> index<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> right<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>pivot<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> i<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>
			index<span class="token operator">++</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> pivot<span class="token punctuation">,</span> index <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> index <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token parameter">arr<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">var</span> temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
	arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
	arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+m+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>快排和归并用的都是分治思想，递推公式和递归代码也非常相似，它们的区别是：</p><ul><li>归并排序的处理过程是由下到上的，先处理子问题，然后再合并。而快排正好相反，它的处理过程是由上到下的，先分区，然后再处理子问题。</li><li>归并排序虽然是稳定的、时间复杂度为 O(nlogn)的排序算法，但是它是非原地排序算法，它的合并函数无法在原地执行。快速排序通过设计巧妙的原地分区函数，可以实现原地排序，解决了归并排序占用太多内存的问题。</li></ul><h2 id="桶排序-bucket-sort" tabindex="-1"><a class="header-anchor" href="#桶排序-bucket-sort" aria-hidden="true">#</a> 桶排序（Bucket sort）</h2><p>桶排序，顾名思义，会用到“桶”，核心思想是将要排序的数据分到几个有序的桶里，每个桶里的数据再单独进行排序。桶内排完序之后，再把每个桶里的数据按照顺序依次取出，组成的序列就是有序的了。</p><figure><img src="'+f+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>桶排序的时间复杂度是 O(n)。如果要排序的数据有 n 个，我们把它们均匀地划分到 m 个桶内，每个桶里就有 k=n/m 个元素。每个桶内部使用快速排序，时间复杂度为 O(k _ logk)。m 个桶排序的时间复杂度就是 O(m _ k * logk)，因为 k=n/m，所以整个桶排序的时间复杂度就是 O(n*log(n/m))。当桶的个数 m 接近数据个数 n 时，log(n/m)就是一个非常小的常量，这个时候桶排序的时间复杂度接近 O(n)。</p><p>桶排序对要排序数据的要求是非常苛刻的。要求数据在各个桶之间的分布是比较均匀的。如果数据经过桶的划分之后，有些桶里的数据非常多，有些非常少，很不平均，那桶内数据排序的时间复杂度就不是常量级了。在极端情况下，如果数据都被划分到一个桶里，那就退化为 O(nlogn)的排序算法了。</p><p>桶排序比较适合用在外部排序中。所谓的外部排序就是数据存储在外部磁盘中，数据量比较大，内存有限，无法将数据全部加载到内存中。</p><p>比如有 10GB 的订单数据，希望按订单金额（假设金额都是正整数）进行排序，但是内存有限，只有几百 MB，没办法一次性把 10GB 的数据都加载到内存中。</p><p>可以先扫描一遍文件，看订单金额所处的数据范围。假设经过扫描之后得到，订单金额最小是 1 元，最大是 10 万元。将所有订单根据金额划分到 100 个桶里，第一个桶存储金额在 1 元到 1000 元之内的订单，第二桶存储金额在 1001 元到 2000 元之内的订单，以此类推。每一个桶对应一个文件，并且按照金额范围的大小顺序编号命名（00，01，02…99）。</p><p>不过，订单按照金额在 1 元到 10 万元之间并不一定是均匀分布的 ，所以 10GB 订单数据无法均匀地被划分到 100 个文件中的。有可能某个金额区间的数据特别多，划分之后对应的文件就会很大，没法一次性读入内存。这时可以继续划分，比如，订单金额在 1 元到 1000 元之间的比较多，就将这个区间继续划分为 10 个小区间，1 元到 100 元，101 元到 200 元，201 元到 300 元…901 元到 1000 元。如果划分之后，101 元到 200 元之间的订单还是太多，无法一次性读入内存，那就继续再划分，直到所有的文件都能读入内存为止。</p><ul><li>平均时间复杂度：O(n + k)，其中 n 是待排序数组的大小，k 是整数范围；</li><li>最坏时间复杂度：O(n^2)；</li><li>最佳时间复杂度：O(n + k)；</li><li>空间复杂度：O(n + k)，需要额外的计数数组和结果数组；</li><li>稳定性：桶排序是一种稳定的排序算法，不改变相同元素的相对顺序；</li></ul><h2 id="计数排序-counting-sort" tabindex="-1"><a class="header-anchor" href="#计数排序-counting-sort" aria-hidden="true">#</a> 计数排序（Counting sort）</h2><p>计数排序是一种非比较排序算法，其核心思想是通过计数每个元素的出现次数来进行排序，适用于整数或有限范围内的非负整数排序。这个算法的特点是速度快且稳定，适用于某些特定场景。</p><p>计数排序其实是桶排序的一种特殊情况。当要排序的 n 个数据，所处的范围并不大的时候，比如最大值是 k，我们就可以把数据划分成 k 个桶。每个桶内的数据值都是相同的，省掉了桶内排序的时间。</p><p>比如高考查分数系统，查分数的时候，系统会显示成绩以及所在省的排名。如果所在省有 50 万考生，如何通过成绩快速排序得出名次。</p><p>考生的满分是 900 分，最小是 0 分，这个数据的范围很小，可以分成 901 个桶，对应分数从 0 分到 900 分。根据考生的成绩，将这 50 万考生划分到这 901 个桶里。桶内的数据都是分数相同的考生，所以并不需要再进行排序。只需要依次扫描每个桶，将桶内的考生依次输出到一个数组中，就实现了 50 万考生的排序。因为只涉及扫描遍历操作，所以时间复杂度是 O(k)。</p><ul><li>平均时间复杂度：O(n + k)，其中 n 是待排序数组的大小，k 是整数范围；</li><li>最坏时间复杂度：O(n + k)；</li><li>最佳时间复杂度：O(n + k)；</li><li>空间复杂度：O(k)；</li><li>稳定性：计数排序是一种稳定的排序算法，不改变相同元素的相对顺序；</li></ul><h2 id="基数排序-radix-sort" tabindex="-1"><a class="header-anchor" href="#基数排序-radix-sort" aria-hidden="true">#</a> 基数排序（Radix sort）</h2><p>基数排序是一种非比较型整数排序算法，其原理是将整数按位数切割成不同的数字，然后按每个位数分别比较。由于整数也可以表达字符串（比如名字或日期）和特定格式的浮点数，所以基数排序也不是只能使用于整数。</p><p>它是这样实现的：将所有待比较数值（正整数）统一为同样的数位长度，数位较短的数前面补零。然后，从最低位开始，依次进行一次排序。这样从最低位排序一直到最高位排序完成以后，数列就变成一个有序序列。</p><ul><li>平均时间复杂度：<code>O(n * k)</code>，其中 n 是待排序数组的大小，k 是整数范围；</li><li>最坏时间复杂度：<code>O(n * k)</code>；</li><li>最佳时间复杂度：<code>O(n * k)</code>；</li><li>空间复杂度：O(n + k)，需要额外的计数数组和结果数组；</li><li>稳定性：基数排序是一种稳定的排序算法，不改变相同元素的相对顺序；</li></ul><p>上述三种排序算法都利用了桶的概念，但对桶的使用方法上有明显差异：</p><ul><li>桶排序：每个桶存储一定范围的数值；</li><li>计数排序：每个桶只存储单一键值；</li><li>基数排序：根据键值的每位数字来分配桶；</li></ul>',72),v=t("h2",{id:"相关题目",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#相关题目","aria-hidden":"true"},"#"),n(" 相关题目")],-1),x=t("h4",{id:"数组排序",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#数组排序","aria-hidden":"true"},"#"),n(" 数组排序")],-1),w=t("ul",null,[t("li",null,"冒泡排序")],-1),O=t("thead",null,[t("tr",null,[t("th",{style:{"text-align":"center"}},"题号"),t("th",{style:{"text-align":"left"}},"标题"),t("th",{style:{"text-align":"center"}},"题解"),t("th",{style:{"text-align":"left"}},"标签"),t("th",{style:{"text-align":"center"}},"难度"),t("th",{style:{"text-align":"center"}},"力扣")])],-1),j=t("td",{style:{"text-align":"center"}},"剑指 Offer 45",-1),S=t("td",{style:{"text-align":"left"}},"把数组排成最小的数",-1),z={style:{"text-align":"center"}},I={style:{"text-align":"left"}},q=t("code",null,"贪心",-1),T=t("code",null,"字符串",-1),E=t("code",null,"排序",-1),B=t("td",{style:{"text-align":"center"}},"🟠",-1),N={style:{"text-align":"center"}},R={href:"https://leetcode.cn/problems/ba-shu-zu-pai-cheng-zui-xiao-de-shu-lcof",target:"_blank",rel:"noopener noreferrer"},C=t("td",{style:{"text-align":"center"}},"283",-1),D=t("td",{style:{"text-align":"left"}},"移动零",-1),L={style:{"text-align":"center"}},V={style:{"text-align":"left"}},A=t("code",null,"数组",-1),G=t("code",null,"双指针",-1),M=t("td",{style:{"text-align":"center"}},"🟢",-1),P={style:{"text-align":"center"}},U={href:"https://leetcode.cn/problems/move-zeroes",target:"_blank",rel:"noopener noreferrer"},H={href:"https://leetcode.com/problems/move-zeroes",target:"_blank",rel:"noopener noreferrer"},J=t("ul",null,[t("li",null,"选择排序")],-1),K=t("thead",null,[t("tr",null,[t("th",{style:{"text-align":"center"}},"题号"),t("th",{style:{"text-align":"left"}},"标题"),t("th",{style:{"text-align":"center"}},"题解"),t("th",{style:{"text-align":"left"}},"标签"),t("th",{style:{"text-align":"center"}},"难度"),t("th",{style:{"text-align":"center"}},"力扣")])],-1),Q=t("td",{style:{"text-align":"center"}},"215",-1),X=t("td",{style:{"text-align":"left"}},"数组中的第K个最大元素",-1),W={style:{"text-align":"center"}},Y={style:{"text-align":"left"}},Z=t("code",null,"数组",-1),F=t("code",null,"分治",-1),$=t("code",null,"快速选择",-1),tt=t("code",null,"2+",-1),nt=t("td",{style:{"text-align":"center"}},"🟠",-1),st={style:{"text-align":"center"}},et={href:"https://leetcode.cn/problems/kth-largest-element-in-an-array",target:"_blank",rel:"noopener noreferrer"},at={href:"https://leetcode.com/problems/kth-largest-element-in-an-array",target:"_blank",rel:"noopener noreferrer"},ot=t("ul",null,[t("li",null,"插入排序")],-1),lt=t("thead",null,[t("tr",null,[t("th",{style:{"text-align":"center"}},"题号"),t("th",{style:{"text-align":"left"}},"标题"),t("th",{style:{"text-align":"center"}},"题解"),t("th",{style:{"text-align":"left"}},"标签"),t("th",{style:{"text-align":"center"}},"难度"),t("th",{style:{"text-align":"center"}},"力扣")])],-1),ct=t("td",{style:{"text-align":"center"}},"75",-1),pt=t("td",{style:{"text-align":"left"}},"颜色分类",-1),rt={style:{"text-align":"center"}},it={style:{"text-align":"left"}},dt=t("code",null,"数组",-1),ut=t("code",null,"双指针",-1),_t=t("code",null,"排序",-1),ht=t("td",{style:{"text-align":"center"}},"🟠",-1),kt={style:{"text-align":"center"}},gt={href:"https://leetcode.cn/problems/sort-colors",target:"_blank",rel:"noopener noreferrer"},mt={href:"https://leetcode.com/problems/sort-colors",target:"_blank",rel:"noopener noreferrer"},ft=t("ul",null,[t("li",null,"希尔排序")],-1),yt=t("thead",null,[t("tr",null,[t("th",{style:{"text-align":"center"}},"题号"),t("th",{style:{"text-align":"left"}},"标题"),t("th",{style:{"text-align":"center"}},"题解"),t("th",{style:{"text-align":"left"}},"标签"),t("th",{style:{"text-align":"center"}},"难度"),t("th",{style:{"text-align":"center"}},"力扣")])],-1),bt=t("td",{style:{"text-align":"center"}},"912",-1),vt=t("td",{style:{"text-align":"left"}},"排序数组",-1),xt=t("td",{style:{"text-align":"center"}},null,-1),wt={style:{"text-align":"left"}},Ot=t("code",null,"数组",-1),jt=t("code",null,"分治",-1),St=t("code",null,"桶排序",-1),zt=t("code",null,"5+",-1),It=t("td",{style:{"text-align":"center"}},"🟠",-1),qt={style:{"text-align":"center"}},Tt={href:"https://leetcode.cn/problems/sort-an-array",target:"_blank",rel:"noopener noreferrer"},Et={href:"https://leetcode.com/problems/sort-an-array",target:"_blank",rel:"noopener noreferrer"},Bt=t("td",{style:{"text-align":"center"}},"506",-1),Nt=t("td",{style:{"text-align":"left"}},"相对名次",-1),Rt={style:{"text-align":"center"}},Ct={style:{"text-align":"left"}},Dt=t("code",null,"数组",-1),Lt=t("code",null,"排序",-1),Vt=t("code",null,"堆（优先队列）",-1),At=t("td",{style:{"text-align":"center"}},"🟢",-1),Gt={style:{"text-align":"center"}},Mt={href:"https://leetcode.cn/problems/relative-ranks",target:"_blank",rel:"noopener noreferrer"},Pt={href:"https://leetcode.com/problems/relative-ranks",target:"_blank",rel:"noopener noreferrer"},Ut=t("ul",null,[t("li",null,"归并排序")],-1),Ht=t("thead",null,[t("tr",null,[t("th",{style:{"text-align":"center"}},"题号"),t("th",{style:{"text-align":"left"}},"标题"),t("th",{style:{"text-align":"center"}},"题解"),t("th",{style:{"text-align":"left"}},"标签"),t("th",{style:{"text-align":"center"}},"难度"),t("th",{style:{"text-align":"center"}},"力扣")])],-1),Jt=t("td",{style:{"text-align":"center"}},"912",-1),Kt=t("td",{style:{"text-align":"left"}},"排序数组",-1),Qt=t("td",{style:{"text-align":"center"}},null,-1),Xt={style:{"text-align":"left"}},Wt=t("code",null,"数组",-1),Yt=t("code",null,"分治",-1),Zt=t("code",null,"桶排序",-1),Ft=t("code",null,"5+",-1),$t=t("td",{style:{"text-align":"center"}},"🟠",-1),tn={style:{"text-align":"center"}},nn={href:"https://leetcode.cn/problems/sort-an-array",target:"_blank",rel:"noopener noreferrer"},sn={href:"https://leetcode.com/problems/sort-an-array",target:"_blank",rel:"noopener noreferrer"},en=t("td",{style:{"text-align":"center"}},"88",-1),an=t("td",{style:{"text-align":"left"}},"合并两个有序数组",-1),on={style:{"text-align":"center"}},ln={style:{"text-align":"left"}},cn=t("code",null,"数组",-1),pn=t("code",null,"双指针",-1),rn=t("code",null,"排序",-1),dn=t("td",{style:{"text-align":"center"}},"🟢",-1),un={style:{"text-align":"center"}},_n={href:"https://leetcode.cn/problems/merge-sorted-array",target:"_blank",rel:"noopener noreferrer"},hn={href:"https://leetcode.com/problems/merge-sorted-array",target:"_blank",rel:"noopener noreferrer"},kn=t("td",{style:{"text-align":"center"}},"剑指 Offer 51",-1),gn=t("td",{style:{"text-align":"left"}},"数组中的逆序对",-1),mn={style:{"text-align":"center"}},fn={style:{"text-align":"left"}},yn=t("code",null,"树状数组",-1),bn=t("code",null,"线段树",-1),vn=t("code",null,"数组",-1),xn=t("code",null,"4+",-1),wn=t("td",{style:{"text-align":"center"}},"🔴",-1),On={style:{"text-align":"center"}},jn={href:"https://leetcode.cn/problems/shu-zu-zhong-de-ni-xu-dui-lcof",target:"_blank",rel:"noopener noreferrer"},Sn=t("td",{style:{"text-align":"center"}},"315",-1),zn=t("td",{style:{"text-align":"left"}},"计算右侧小于当前元素的个数",-1),In=t("td",{style:{"text-align":"center"}},null,-1),qn={style:{"text-align":"left"}},Tn=t("code",null,"树状数组",-1),En=t("code",null,"线段树",-1),Bn=t("code",null,"数组",-1),Nn=t("code",null,"4+",-1),Rn=t("td",{style:{"text-align":"center"}},"🔴",-1),Cn={style:{"text-align":"center"}},Dn={href:"https://leetcode.cn/problems/count-of-smaller-numbers-after-self",target:"_blank",rel:"noopener noreferrer"},Ln={href:"https://leetcode.com/problems/count-of-smaller-numbers-after-self",target:"_blank",rel:"noopener noreferrer"},Vn=t("ul",null,[t("li",null,"快速排序")],-1),An=t("thead",null,[t("tr",null,[t("th",{style:{"text-align":"center"}},"题号"),t("th",{style:{"text-align":"left"}},"标题"),t("th",{style:{"text-align":"center"}},"题解"),t("th",{style:{"text-align":"left"}},"标签"),t("th",{style:{"text-align":"center"}},"难度"),t("th",{style:{"text-align":"center"}},"力扣")])],-1),Gn=t("td",{style:{"text-align":"center"}},"912",-1),Mn=t("td",{style:{"text-align":"left"}},"排序数组",-1),Pn=t("td",{style:{"text-align":"center"}},null,-1),Un={style:{"text-align":"left"}},Hn=t("code",null,"数组",-1),Jn=t("code",null,"分治",-1),Kn=t("code",null,"桶排序",-1),Qn=t("code",null,"5+",-1),Xn=t("td",{style:{"text-align":"center"}},"🟠",-1),Wn={style:{"text-align":"center"}},Yn={href:"https://leetcode.cn/problems/sort-an-array",target:"_blank",rel:"noopener noreferrer"},Zn={href:"https://leetcode.com/problems/sort-an-array",target:"_blank",rel:"noopener noreferrer"},Fn=t("td",{style:{"text-align":"center"}},"169",-1),$n=t("td",{style:{"text-align":"left"}},"多数元素",-1),ts={style:{"text-align":"center"}},ns={style:{"text-align":"left"}},ss=t("code",null,"数组",-1),es=t("code",null,"哈希表",-1),as=t("code",null,"分治",-1),os=t("code",null,"2+",-1),ls=t("td",{style:{"text-align":"center"}},"🟢",-1),cs={style:{"text-align":"center"}},ps={href:"https://leetcode.cn/problems/majority-element",target:"_blank",rel:"noopener noreferrer"},rs={href:"https://leetcode.com/problems/majority-element",target:"_blank",rel:"noopener noreferrer"},is=t("ul",null,[t("li",null,"堆排序")],-1),ds=t("thead",null,[t("tr",null,[t("th",{style:{"text-align":"center"}},"题号"),t("th",{style:{"text-align":"left"}},"标题"),t("th",{style:{"text-align":"center"}},"题解"),t("th",{style:{"text-align":"left"}},"标签"),t("th",{style:{"text-align":"center"}},"难度"),t("th",{style:{"text-align":"center"}},"力扣")])],-1),us=t("td",{style:{"text-align":"center"}},"912",-1),_s=t("td",{style:{"text-align":"left"}},"排序数组",-1),hs=t("td",{style:{"text-align":"center"}},null,-1),ks={style:{"text-align":"left"}},gs=t("code",null,"数组",-1),ms=t("code",null,"分治",-1),fs=t("code",null,"桶排序",-1),ys=t("code",null,"5+",-1),bs=t("td",{style:{"text-align":"center"}},"🟠",-1),vs={style:{"text-align":"center"}},xs={href:"https://leetcode.cn/problems/sort-an-array",target:"_blank",rel:"noopener noreferrer"},ws={href:"https://leetcode.com/problems/sort-an-array",target:"_blank",rel:"noopener noreferrer"},Os=t("td",{style:{"text-align":"center"}},"215",-1),js=t("td",{style:{"text-align":"left"}},"数组中的第K个最大元素",-1),Ss={style:{"text-align":"center"}},zs={style:{"text-align":"left"}},Is=t("code",null,"数组",-1),qs=t("code",null,"分治",-1),Ts=t("code",null,"快速选择",-1),Es=t("code",null,"2+",-1),Bs=t("td",{style:{"text-align":"center"}},"🟠",-1),Ns={style:{"text-align":"center"}},Rs={href:"https://leetcode.cn/problems/kth-largest-element-in-an-array",target:"_blank",rel:"noopener noreferrer"},Cs={href:"https://leetcode.com/problems/kth-largest-element-in-an-array",target:"_blank",rel:"noopener noreferrer"},Ds=t("td",{style:{"text-align":"center"}},"剑指 Offer 40",-1),Ls=t("td",{style:{"text-align":"left"}},"最小的k个数",-1),Vs={style:{"text-align":"center"}},As={style:{"text-align":"left"}},Gs=t("code",null,"数组",-1),Ms=t("code",null,"分治",-1),Ps=t("code",null,"快速选择",-1),Us=t("code",null,"2+",-1),Hs=t("td",{style:{"text-align":"center"}},"🟢",-1),Js={style:{"text-align":"center"}},Ks={href:"https://leetcode.cn/problems/zui-xiao-de-kge-shu-lcof",target:"_blank",rel:"noopener noreferrer"},Qs=t("ul",null,[t("li",null,"计数排序")],-1),Xs=t("thead",null,[t("tr",null,[t("th",{style:{"text-align":"center"}},"题号"),t("th",{style:{"text-align":"left"}},"标题"),t("th",{style:{"text-align":"center"}},"题解"),t("th",{style:{"text-align":"left"}},"标签"),t("th",{style:{"text-align":"center"}},"难度"),t("th",{style:{"text-align":"center"}},"力扣")])],-1),Ws=t("td",{style:{"text-align":"center"}},"912",-1),Ys=t("td",{style:{"text-align":"left"}},"排序数组",-1),Zs=t("td",{style:{"text-align":"center"}},null,-1),Fs={style:{"text-align":"left"}},$s=t("code",null,"数组",-1),te=t("code",null,"分治",-1),ne=t("code",null,"桶排序",-1),se=t("code",null,"5+",-1),ee=t("td",{style:{"text-align":"center"}},"🟠",-1),ae={style:{"text-align":"center"}},oe={href:"https://leetcode.cn/problems/sort-an-array",target:"_blank",rel:"noopener noreferrer"},le={href:"https://leetcode.com/problems/sort-an-array",target:"_blank",rel:"noopener noreferrer"},ce=t("td",{style:{"text-align":"center"}},"1122",-1),pe=t("td",{style:{"text-align":"left"}},"数组的相对排序",-1),re={style:{"text-align":"center"}},ie={style:{"text-align":"left"}},de=t("code",null,"数组",-1),ue=t("code",null,"哈希表",-1),_e=t("code",null,"计数排序",-1),he=t("code",null,"1+",-1),ke=t("td",{style:{"text-align":"center"}},"🟢",-1),ge={style:{"text-align":"center"}},me={href:"https://leetcode.cn/problems/relative-sort-array",target:"_blank",rel:"noopener noreferrer"},fe={href:"https://leetcode.com/problems/relative-sort-array",target:"_blank",rel:"noopener noreferrer"},ye=t("ul",null,[t("li",null,"桶排序")],-1),be=t("thead",null,[t("tr",null,[t("th",{style:{"text-align":"center"}},"题号"),t("th",{style:{"text-align":"left"}},"标题"),t("th",{style:{"text-align":"center"}},"题解"),t("th",{style:{"text-align":"left"}},"标签"),t("th",{style:{"text-align":"center"}},"难度"),t("th",{style:{"text-align":"center"}},"力扣")])],-1),ve=t("td",{style:{"text-align":"center"}},"912",-1),xe=t("td",{style:{"text-align":"left"}},"排序数组",-1),we=t("td",{style:{"text-align":"center"}},null,-1),Oe={style:{"text-align":"left"}},je=t("code",null,"数组",-1),Se=t("code",null,"分治",-1),ze=t("code",null,"桶排序",-1),Ie=t("code",null,"5+",-1),qe=t("td",{style:{"text-align":"center"}},"🟠",-1),Te={style:{"text-align":"center"}},Ee={href:"https://leetcode.cn/problems/sort-an-array",target:"_blank",rel:"noopener noreferrer"},Be={href:"https://leetcode.com/problems/sort-an-array",target:"_blank",rel:"noopener noreferrer"},Ne=t("td",{style:{"text-align":"center"}},"220",-1),Re=t("td",{style:{"text-align":"left"}},"存在重复元素 III",-1),Ce=t("td",{style:{"text-align":"center"}},null,-1),De={style:{"text-align":"left"}},Le=t("code",null,"数组",-1),Ve=t("code",null,"桶排序",-1),Ae=t("code",null,"有序集合",-1),Ge=t("code",null,"2+",-1),Me=t("td",{style:{"text-align":"center"}},"🔴",-1),Pe={style:{"text-align":"center"}},Ue={href:"https://leetcode.cn/problems/contains-duplicate-iii",target:"_blank",rel:"noopener noreferrer"},He={href:"https://leetcode.com/problems/contains-duplicate-iii",target:"_blank",rel:"noopener noreferrer"},Je=t("td",{style:{"text-align":"center"}},"164",-1),Ke=t("td",{style:{"text-align":"left"}},"最大间距",-1),Qe={style:{"text-align":"center"}},Xe={style:{"text-align":"left"}},We=t("code",null,"数组",-1),Ye=t("code",null,"桶排序",-1),Ze=t("code",null,"基数排序",-1),Fe=t("code",null,"1+",-1),$e=t("td",{style:{"text-align":"center"}},"🟠",-1),ta={style:{"text-align":"center"}},na={href:"https://leetcode.cn/problems/maximum-gap",target:"_blank",rel:"noopener noreferrer"},sa={href:"https://leetcode.com/problems/maximum-gap",target:"_blank",rel:"noopener noreferrer"},ea=t("ul",null,[t("li",null,"基数排序")],-1),aa=t("thead",null,[t("tr",null,[t("th",{style:{"text-align":"center"}},"题号"),t("th",{style:{"text-align":"left"}},"标题"),t("th",{style:{"text-align":"center"}},"题解"),t("th",{style:{"text-align":"left"}},"标签"),t("th",{style:{"text-align":"center"}},"难度"),t("th",{style:{"text-align":"center"}},"力扣")])],-1),oa=t("td",{style:{"text-align":"center"}},"164",-1),la=t("td",{style:{"text-align":"left"}},"最大间距",-1),ca={style:{"text-align":"center"}},pa={style:{"text-align":"left"}},ra=t("code",null,"数组",-1),ia=t("code",null,"桶排序",-1),da=t("code",null,"基数排序",-1),ua=t("code",null,"1+",-1),_a=t("td",{style:{"text-align":"center"}},"🟠",-1),ha={style:{"text-align":"center"}},ka={href:"https://leetcode.cn/problems/maximum-gap",target:"_blank",rel:"noopener noreferrer"},ga={href:"https://leetcode.com/problems/maximum-gap",target:"_blank",rel:"noopener noreferrer"},ma=t("td",{style:{"text-align":"center"}},"561",-1),fa=t("td",{style:{"text-align":"left"}},"数组拆分",-1),ya={style:{"text-align":"center"}},ba={style:{"text-align":"left"}},va=t("code",null,"贪心",-1),xa=t("code",null,"数组",-1),wa=t("code",null,"计数排序",-1),Oa=t("code",null,"1+",-1),ja=t("td",{style:{"text-align":"center"}},"🟢",-1),Sa={style:{"text-align":"center"}},za={href:"https://leetcode.cn/problems/array-partition",target:"_blank",rel:"noopener noreferrer"},Ia={href:"https://leetcode.com/problems/array-partition",target:"_blank",rel:"noopener noreferrer"},qa=t("ul",null,[t("li",null,"其他排序")],-1),Ta=t("thead",null,[t("tr",null,[t("th",{style:{"text-align":"center"}},"题号"),t("th",{style:{"text-align":"left"}},"标题"),t("th",{style:{"text-align":"center"}},"题解"),t("th",{style:{"text-align":"left"}},"标签"),t("th",{style:{"text-align":"center"}},"难度"),t("th",{style:{"text-align":"center"}},"力扣")])],-1),Ea=t("td",{style:{"text-align":"center"}},"217",-1),Ba=t("td",{style:{"text-align":"left"}},"存在重复元素",-1),Na={style:{"text-align":"center"}},Ra={style:{"text-align":"left"}},Ca=t("code",null,"数组",-1),Da=t("code",null,"哈希表",-1),La=t("code",null,"排序",-1),Va=t("td",{style:{"text-align":"center"}},"🟢",-1),Aa={style:{"text-align":"center"}},Ga={href:"https://leetcode.cn/problems/contains-duplicate",target:"_blank",rel:"noopener noreferrer"},Ma={href:"https://leetcode.com/problems/contains-duplicate",target:"_blank",rel:"noopener noreferrer"},Pa=t("td",{style:{"text-align":"center"}},"136",-1),Ua=t("td",{style:{"text-align":"left"}},"只出现一次的数字",-1),Ha={style:{"text-align":"center"}},Ja={style:{"text-align":"left"}},Ka=t("code",null,"位运算",-1),Qa=t("code",null,"数组",-1),Xa=t("td",{style:{"text-align":"center"}},"🟢",-1),Wa={style:{"text-align":"center"}},Ya={href:"https://leetcode.cn/problems/single-number",target:"_blank",rel:"noopener noreferrer"},Za={href:"https://leetcode.com/problems/single-number",target:"_blank",rel:"noopener noreferrer"},Fa=t("td",{style:{"text-align":"center"}},"56",-1),$a=t("td",{style:{"text-align":"left"}},"合并区间",-1),to={style:{"text-align":"center"}},no={style:{"text-align":"left"}},so=t("code",null,"数组",-1),eo=t("code",null,"排序",-1),ao=t("td",{style:{"text-align":"center"}},"🟠",-1),oo={style:{"text-align":"center"}},lo={href:"https://leetcode.cn/problems/merge-intervals",target:"_blank",rel:"noopener noreferrer"},co={href:"https://leetcode.com/problems/merge-intervals",target:"_blank",rel:"noopener noreferrer"},po=t("td",{style:{"text-align":"center"}},"179",-1),ro=t("td",{style:{"text-align":"left"}},"最大数",-1),io={style:{"text-align":"center"}},uo={style:{"text-align":"left"}},_o=t("code",null,"贪心",-1),ho=t("code",null,"数组",-1),ko=t("code",null,"字符串",-1),go=t("code",null,"1+",-1),mo=t("td",{style:{"text-align":"center"}},"🟠",-1),fo={style:{"text-align":"center"}},yo={href:"https://leetcode.cn/problems/largest-number",target:"_blank",rel:"noopener noreferrer"},bo={href:"https://leetcode.com/problems/largest-number",target:"_blank",rel:"noopener noreferrer"},vo=t("td",{style:{"text-align":"center"}},"384",-1),xo=t("td",{style:{"text-align":"left"}},"打乱数组",-1),wo={style:{"text-align":"center"}},Oo={style:{"text-align":"left"}},jo=t("code",null,"数组",-1),So=t("code",null,"数学",-1),zo=t("code",null,"随机化",-1),Io=t("td",{style:{"text-align":"center"}},"🟠",-1),qo={style:{"text-align":"center"}},To={href:"https://leetcode.cn/problems/shuffle-an-array",target:"_blank",rel:"noopener noreferrer"},Eo={href:"https://leetcode.com/problems/shuffle-an-array",target:"_blank",rel:"noopener noreferrer"},Bo=t("td",{style:{"text-align":"center"}},"剑指 Offer 45",-1),No=t("td",{style:{"text-align":"left"}},"把数组排成最小的数",-1),Ro={style:{"text-align":"center"}},Co={style:{"text-align":"left"}},Do=t("code",null,"贪心",-1),Lo=t("code",null,"字符串",-1),Vo=t("code",null,"排序",-1),Ao=t("td",{style:{"text-align":"center"}},"🟠",-1),Go={style:{"text-align":"center"}},Mo={href:"https://leetcode.cn/problems/ba-shu-zu-pai-cheng-zui-xiao-de-shu-lcof",target:"_blank",rel:"noopener noreferrer"};function Po(Uo,Ho){const e=c("RouterLink"),o=c("ExternalLinkIcon");return r(),i("div",null,[b,l(" START TABLE "),l(" Please keep comment here to allow auto update "),l(" DON'T EDIT THIS SECTION, INSTEAD RE-RUN `npm run lc` TO UPDATE "),v,x,w,l(" prettier-ignore "),t("table",null,[O,t("tbody",null,[t("tr",null,[j,S,t("td",z,[s(e,{to:"/offer/jz_offer_45_1.html"},{default:a(()=>[n("[✓]")]),_:1})]),t("td",I,[s(e,{to:"/tag/greedy.html"},{default:a(()=>[q]),_:1}),n(),s(e,{to:"/tag/string.html"},{default:a(()=>[T]),_:1}),n(),s(e,{to:"/tag/sorting.html"},{default:a(()=>[E]),_:1})]),B,t("td",N,[t("a",R,[n("🀄️"),s(o)])])]),t("tr",null,[C,D,t("td",L,[s(e,{to:"/problem/0283.html"},{default:a(()=>[n("[✓]")]),_:1})]),t("td",V,[s(e,{to:"/tag/array.html"},{default:a(()=>[A]),_:1}),n(),s(e,{to:"/tag/two-pointers.html"},{default:a(()=>[G]),_:1})]),M,t("td",P,[t("a",U,[n("🀄️"),s(o)]),n(),t("a",H,[n("🔗"),s(o)])])])])]),J,l(" prettier-ignore "),t("table",null,[K,t("tbody",null,[t("tr",null,[Q,X,t("td",W,[s(e,{to:"/problem/0215.html"},{default:a(()=>[n("[✓]")]),_:1})]),t("td",Y,[s(e,{to:"/tag/array.html"},{default:a(()=>[Z]),_:1}),n(),s(e,{to:"/tag/divide-and-conquer.html"},{default:a(()=>[F]),_:1}),n(),s(e,{to:"/tag/quickselect.html"},{default:a(()=>[$]),_:1}),n(),tt]),nt,t("td",st,[t("a",et,[n("🀄️"),s(o)]),n(),t("a",at,[n("🔗"),s(o)])])])])]),ot,l(" prettier-ignore "),t("table",null,[lt,t("tbody",null,[t("tr",null,[ct,pt,t("td",rt,[s(e,{to:"/problem/0075.html"},{default:a(()=>[n("[✓]")]),_:1})]),t("td",it,[s(e,{to:"/tag/array.html"},{default:a(()=>[dt]),_:1}),n(),s(e,{to:"/tag/two-pointers.html"},{default:a(()=>[ut]),_:1}),n(),s(e,{to:"/tag/sorting.html"},{default:a(()=>[_t]),_:1})]),ht,t("td",kt,[t("a",gt,[n("🀄️"),s(o)]),n(),t("a",mt,[n("🔗"),s(o)])])])])]),ft,l(" prettier-ignore "),t("table",null,[yt,t("tbody",null,[t("tr",null,[bt,vt,xt,t("td",wt,[s(e,{to:"/tag/array.html"},{default:a(()=>[Ot]),_:1}),n(),s(e,{to:"/tag/divide-and-conquer.html"},{default:a(()=>[jt]),_:1}),n(),s(e,{to:"/tag/bucket-sort.html"},{default:a(()=>[St]),_:1}),n(),zt]),It,t("td",qt,[t("a",Tt,[n("🀄️"),s(o)]),n(),t("a",Et,[n("🔗"),s(o)])])]),t("tr",null,[Bt,Nt,t("td",Rt,[s(e,{to:"/problem/0506.html"},{default:a(()=>[n("[✓]")]),_:1})]),t("td",Ct,[s(e,{to:"/tag/array.html"},{default:a(()=>[Dt]),_:1}),n(),s(e,{to:"/tag/sorting.html"},{default:a(()=>[Lt]),_:1}),n(),s(e,{to:"/tag/heap-priority-queue.html"},{default:a(()=>[Vt]),_:1})]),At,t("td",Gt,[t("a",Mt,[n("🀄️"),s(o)]),n(),t("a",Pt,[n("🔗"),s(o)])])])])]),Ut,l(" prettier-ignore "),t("table",null,[Ht,t("tbody",null,[t("tr",null,[Jt,Kt,Qt,t("td",Xt,[s(e,{to:"/tag/array.html"},{default:a(()=>[Wt]),_:1}),n(),s(e,{to:"/tag/divide-and-conquer.html"},{default:a(()=>[Yt]),_:1}),n(),s(e,{to:"/tag/bucket-sort.html"},{default:a(()=>[Zt]),_:1}),n(),Ft]),$t,t("td",tn,[t("a",nn,[n("🀄️"),s(o)]),n(),t("a",sn,[n("🔗"),s(o)])])]),t("tr",null,[en,an,t("td",on,[s(e,{to:"/problem/0088.html"},{default:a(()=>[n("[✓]")]),_:1})]),t("td",ln,[s(e,{to:"/tag/array.html"},{default:a(()=>[cn]),_:1}),n(),s(e,{to:"/tag/two-pointers.html"},{default:a(()=>[pn]),_:1}),n(),s(e,{to:"/tag/sorting.html"},{default:a(()=>[rn]),_:1})]),dn,t("td",un,[t("a",_n,[n("🀄️"),s(o)]),n(),t("a",hn,[n("🔗"),s(o)])])]),t("tr",null,[kn,gn,t("td",mn,[s(e,{to:"/offer/jz_offer_51_1.html"},{default:a(()=>[n("[✓]")]),_:1})]),t("td",fn,[s(e,{to:"/tag/binary-indexed-tree.html"},{default:a(()=>[yn]),_:1}),n(),s(e,{to:"/tag/segment-tree.html"},{default:a(()=>[bn]),_:1}),n(),s(e,{to:"/tag/array.html"},{default:a(()=>[vn]),_:1}),n(),xn]),wn,t("td",On,[t("a",jn,[n("🀄️"),s(o)])])]),t("tr",null,[Sn,zn,In,t("td",qn,[s(e,{to:"/tag/binary-indexed-tree.html"},{default:a(()=>[Tn]),_:1}),n(),s(e,{to:"/tag/segment-tree.html"},{default:a(()=>[En]),_:1}),n(),s(e,{to:"/tag/array.html"},{default:a(()=>[Bn]),_:1}),n(),Nn]),Rn,t("td",Cn,[t("a",Dn,[n("🀄️"),s(o)]),n(),t("a",Ln,[n("🔗"),s(o)])])])])]),Vn,l(" prettier-ignore "),t("table",null,[An,t("tbody",null,[t("tr",null,[Gn,Mn,Pn,t("td",Un,[s(e,{to:"/tag/array.html"},{default:a(()=>[Hn]),_:1}),n(),s(e,{to:"/tag/divide-and-conquer.html"},{default:a(()=>[Jn]),_:1}),n(),s(e,{to:"/tag/bucket-sort.html"},{default:a(()=>[Kn]),_:1}),n(),Qn]),Xn,t("td",Wn,[t("a",Yn,[n("🀄️"),s(o)]),n(),t("a",Zn,[n("🔗"),s(o)])])]),t("tr",null,[Fn,$n,t("td",ts,[s(e,{to:"/problem/0169.html"},{default:a(()=>[n("[✓]")]),_:1})]),t("td",ns,[s(e,{to:"/tag/array.html"},{default:a(()=>[ss]),_:1}),n(),s(e,{to:"/tag/hash-table.html"},{default:a(()=>[es]),_:1}),n(),s(e,{to:"/tag/divide-and-conquer.html"},{default:a(()=>[as]),_:1}),n(),os]),ls,t("td",cs,[t("a",ps,[n("🀄️"),s(o)]),n(),t("a",rs,[n("🔗"),s(o)])])])])]),is,l(" prettier-ignore "),t("table",null,[ds,t("tbody",null,[t("tr",null,[us,_s,hs,t("td",ks,[s(e,{to:"/tag/array.html"},{default:a(()=>[gs]),_:1}),n(),s(e,{to:"/tag/divide-and-conquer.html"},{default:a(()=>[ms]),_:1}),n(),s(e,{to:"/tag/bucket-sort.html"},{default:a(()=>[fs]),_:1}),n(),ys]),bs,t("td",vs,[t("a",xs,[n("🀄️"),s(o)]),n(),t("a",ws,[n("🔗"),s(o)])])]),t("tr",null,[Os,js,t("td",Ss,[s(e,{to:"/problem/0215.html"},{default:a(()=>[n("[✓]")]),_:1})]),t("td",zs,[s(e,{to:"/tag/array.html"},{default:a(()=>[Is]),_:1}),n(),s(e,{to:"/tag/divide-and-conquer.html"},{default:a(()=>[qs]),_:1}),n(),s(e,{to:"/tag/quickselect.html"},{default:a(()=>[Ts]),_:1}),n(),Es]),Bs,t("td",Ns,[t("a",Rs,[n("🀄️"),s(o)]),n(),t("a",Cs,[n("🔗"),s(o)])])]),t("tr",null,[Ds,Ls,t("td",Vs,[s(e,{to:"/offer/jz_offer_40_1.html"},{default:a(()=>[n("[✓]")]),_:1})]),t("td",As,[s(e,{to:"/tag/array.html"},{default:a(()=>[Gs]),_:1}),n(),s(e,{to:"/tag/divide-and-conquer.html"},{default:a(()=>[Ms]),_:1}),n(),s(e,{to:"/tag/quickselect.html"},{default:a(()=>[Ps]),_:1}),n(),Us]),Hs,t("td",Js,[t("a",Ks,[n("🀄️"),s(o)])])])])]),Qs,l(" prettier-ignore "),t("table",null,[Xs,t("tbody",null,[t("tr",null,[Ws,Ys,Zs,t("td",Fs,[s(e,{to:"/tag/array.html"},{default:a(()=>[$s]),_:1}),n(),s(e,{to:"/tag/divide-and-conquer.html"},{default:a(()=>[te]),_:1}),n(),s(e,{to:"/tag/bucket-sort.html"},{default:a(()=>[ne]),_:1}),n(),se]),ee,t("td",ae,[t("a",oe,[n("🀄️"),s(o)]),n(),t("a",le,[n("🔗"),s(o)])])]),t("tr",null,[ce,pe,t("td",re,[s(e,{to:"/problem/1122.html"},{default:a(()=>[n("[✓]")]),_:1})]),t("td",ie,[s(e,{to:"/tag/array.html"},{default:a(()=>[de]),_:1}),n(),s(e,{to:"/tag/hash-table.html"},{default:a(()=>[ue]),_:1}),n(),s(e,{to:"/tag/counting-sort.html"},{default:a(()=>[_e]),_:1}),n(),he]),ke,t("td",ge,[t("a",me,[n("🀄️"),s(o)]),n(),t("a",fe,[n("🔗"),s(o)])])])])]),ye,l(" prettier-ignore "),t("table",null,[be,t("tbody",null,[t("tr",null,[ve,xe,we,t("td",Oe,[s(e,{to:"/tag/array.html"},{default:a(()=>[je]),_:1}),n(),s(e,{to:"/tag/divide-and-conquer.html"},{default:a(()=>[Se]),_:1}),n(),s(e,{to:"/tag/bucket-sort.html"},{default:a(()=>[ze]),_:1}),n(),Ie]),qe,t("td",Te,[t("a",Ee,[n("🀄️"),s(o)]),n(),t("a",Be,[n("🔗"),s(o)])])]),t("tr",null,[Ne,Re,Ce,t("td",De,[s(e,{to:"/tag/array.html"},{default:a(()=>[Le]),_:1}),n(),s(e,{to:"/tag/bucket-sort.html"},{default:a(()=>[Ve]),_:1}),n(),s(e,{to:"/tag/ordered-set.html"},{default:a(()=>[Ae]),_:1}),n(),Ge]),Me,t("td",Pe,[t("a",Ue,[n("🀄️"),s(o)]),n(),t("a",He,[n("🔗"),s(o)])])]),t("tr",null,[Je,Ke,t("td",Qe,[s(e,{to:"/problem/0164.html"},{default:a(()=>[n("[✓]")]),_:1})]),t("td",Xe,[s(e,{to:"/tag/array.html"},{default:a(()=>[We]),_:1}),n(),s(e,{to:"/tag/bucket-sort.html"},{default:a(()=>[Ye]),_:1}),n(),s(e,{to:"/tag/radix-sort.html"},{default:a(()=>[Ze]),_:1}),n(),Fe]),$e,t("td",ta,[t("a",na,[n("🀄️"),s(o)]),n(),t("a",sa,[n("🔗"),s(o)])])])])]),ea,l(" prettier-ignore "),t("table",null,[aa,t("tbody",null,[t("tr",null,[oa,la,t("td",ca,[s(e,{to:"/problem/0164.html"},{default:a(()=>[n("[✓]")]),_:1})]),t("td",pa,[s(e,{to:"/tag/array.html"},{default:a(()=>[ra]),_:1}),n(),s(e,{to:"/tag/bucket-sort.html"},{default:a(()=>[ia]),_:1}),n(),s(e,{to:"/tag/radix-sort.html"},{default:a(()=>[da]),_:1}),n(),ua]),_a,t("td",ha,[t("a",ka,[n("🀄️"),s(o)]),n(),t("a",ga,[n("🔗"),s(o)])])]),t("tr",null,[ma,fa,t("td",ya,[s(e,{to:"/problem/0561.html"},{default:a(()=>[n("[✓]")]),_:1})]),t("td",ba,[s(e,{to:"/tag/greedy.html"},{default:a(()=>[va]),_:1}),n(),s(e,{to:"/tag/array.html"},{default:a(()=>[xa]),_:1}),n(),s(e,{to:"/tag/counting-sort.html"},{default:a(()=>[wa]),_:1}),n(),Oa]),ja,t("td",Sa,[t("a",za,[n("🀄️"),s(o)]),n(),t("a",Ia,[n("🔗"),s(o)])])])])]),qa,l(" prettier-ignore "),t("table",null,[Ta,t("tbody",null,[t("tr",null,[Ea,Ba,t("td",Na,[s(e,{to:"/problem/0217.html"},{default:a(()=>[n("[✓]")]),_:1})]),t("td",Ra,[s(e,{to:"/tag/array.html"},{default:a(()=>[Ca]),_:1}),n(),s(e,{to:"/tag/hash-table.html"},{default:a(()=>[Da]),_:1}),n(),s(e,{to:"/tag/sorting.html"},{default:a(()=>[La]),_:1})]),Va,t("td",Aa,[t("a",Ga,[n("🀄️"),s(o)]),n(),t("a",Ma,[n("🔗"),s(o)])])]),t("tr",null,[Pa,Ua,t("td",Ha,[s(e,{to:"/problem/0136.html"},{default:a(()=>[n("[✓]")]),_:1})]),t("td",Ja,[s(e,{to:"/tag/bit-manipulation.html"},{default:a(()=>[Ka]),_:1}),n(),s(e,{to:"/tag/array.html"},{default:a(()=>[Qa]),_:1})]),Xa,t("td",Wa,[t("a",Ya,[n("🀄️"),s(o)]),n(),t("a",Za,[n("🔗"),s(o)])])]),t("tr",null,[Fa,$a,t("td",to,[s(e,{to:"/problem/0056.html"},{default:a(()=>[n("[✓]")]),_:1})]),t("td",no,[s(e,{to:"/tag/array.html"},{default:a(()=>[so]),_:1}),n(),s(e,{to:"/tag/sorting.html"},{default:a(()=>[eo]),_:1})]),ao,t("td",oo,[t("a",lo,[n("🀄️"),s(o)]),n(),t("a",co,[n("🔗"),s(o)])])]),t("tr",null,[po,ro,t("td",io,[s(e,{to:"/problem/0179.html"},{default:a(()=>[n("[✓]")]),_:1})]),t("td",uo,[s(e,{to:"/tag/greedy.html"},{default:a(()=>[_o]),_:1}),n(),s(e,{to:"/tag/array.html"},{default:a(()=>[ho]),_:1}),n(),s(e,{to:"/tag/string.html"},{default:a(()=>[ko]),_:1}),n(),go]),mo,t("td",fo,[t("a",yo,[n("🀄️"),s(o)]),n(),t("a",bo,[n("🔗"),s(o)])])]),t("tr",null,[vo,xo,t("td",wo,[s(e,{to:"/problem/0384.html"},{default:a(()=>[n("[✓]")]),_:1})]),t("td",Oo,[s(e,{to:"/tag/array.html"},{default:a(()=>[jo]),_:1}),n(),s(e,{to:"/tag/math.html"},{default:a(()=>[So]),_:1}),n(),s(e,{to:"/tag/randomized.html"},{default:a(()=>[zo]),_:1})]),Io,t("td",qo,[t("a",To,[n("🀄️"),s(o)]),n(),t("a",Eo,[n("🔗"),s(o)])])]),t("tr",null,[Bo,No,t("td",Ro,[s(e,{to:"/offer/jz_offer_45_1.html"},{default:a(()=>[n("[✓]")]),_:1})]),t("td",Co,[s(e,{to:"/tag/greedy.html"},{default:a(()=>[Do]),_:1}),n(),s(e,{to:"/tag/string.html"},{default:a(()=>[Lo]),_:1}),n(),s(e,{to:"/tag/sorting.html"},{default:a(()=>[Vo]),_:1})]),Ao,t("td",Go,[t("a",Mo,[n("🀄️"),s(o)])])])])])])}const Ko=p(y,[["render",Po],["__file","sort.html.vue"]]);export{Ko as default};
