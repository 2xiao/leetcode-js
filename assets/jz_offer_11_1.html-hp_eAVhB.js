import{_ as i,r as o,o as d,c as r,a as s,b as n,d as a,w as t,e as c}from"./app-fBVbqwGY.js";const u={},k=s("h1",{id:"_11-旋转数组的最小数字",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#_11-旋转数组的最小数字","aria-hidden":"true"},"#"),n(" 11. 旋转数组的最小数字")],-1),m=s("code",null,"数组",-1),h=s("code",null,"二分查找",-1),v={href:"https://leetcode.cn/problems/xuan-zhuan-shu-zu-de-zui-xiao-shu-zi-lcof",target:"_blank",rel:"noopener noreferrer"},_=s("code",null,"力扣",-1),b=c('<h2 id="题目" tabindex="-1"><a class="header-anchor" href="#题目" aria-hidden="true">#</a> 题目</h2><p>有一个长度为 <code>n</code> 的 <strong>非降序数组</strong> ，比如 <code>[1,2,3,4,5]</code> ，将它进行旋转，即把一个数组最开始的若干个元素搬到数组的末尾，变成一个旋转数组，比如变成了 <code>[3,4,5,1,2]</code> ，或者 <code>[4,5,1,2,3]</code> 这样的。数组中的元素可能存在重复。请求数组中的最小值。</p><p>要求：空间复杂度：<code>O(1)</code> ，时间复杂度：<code>O(logn)</code></p><p><strong>示例 1:</strong></p><blockquote><p>输入：stock = [4,5,8,3,4]</p><p>输出：3</p></blockquote><p><strong>示例 2:</strong></p><blockquote><p>输入：stock = [5,7,9,1,2]</p><p>输出：1</p></blockquote><p><strong>Constraints:</strong></p><ul><li><code>1 &lt;= stock.length &lt;= 5000</code></li><li><code>-5000 &lt;= stock[i] &lt;= 5000</code></li></ul>',9),g={class:"hint-container warning"},f=s("p",{class:"hint-container-title"},"注意",-1),w=c(`<h2 id="解题思路" tabindex="-1"><a class="header-anchor" href="#解题思路" aria-hidden="true">#</a> 解题思路</h2><p>最直接的办法就是遍历一遍，找到最小值。但是还可以有更好的方法，可以用二分查找来降低算法的时间复杂度。</p><p>创建两个指针 <code>left</code>、<code>right</code>，分别指向数组首尾，然后计算出两个指针所指下标的中间值 <code>mid</code>，将 <code>mid</code> 与两个指针做比较。</p><ul><li>如果 <code>nums[mid] &gt; nums[right]</code>，则最小值不可能在 <code>mid</code> 左侧，一定在 <code>mid</code> 右侧，则将 <code>left</code> 移动到 <code>mid + 1</code> 位置，继续查找右侧区间。</li><li>如果 <code>nums[mid] &lt; nums[right]</code>，则最小值一定在 <code>mid</code> 左侧，或者 <code>mid</code> 位置，将 <code>right</code> 移动到 <code>mid</code> 位置上，继续查找左侧区间。</li><li>如果 <code>nums[mid] == nums[right]</code>，无法判断在 <code>mid</code> 的哪一侧，可以采用 <code>right = right - 1</code> 逐步缩小区域。</li></ul><h4 id="复杂度分析" tabindex="-1"><a class="header-anchor" href="#复杂度分析" aria-hidden="true">#</a> 复杂度分析</h4><ul><li><strong>时间复杂度</strong>：<code>O(log n)</code></li><li><strong>空间复杂度</strong>：<code>O(1)</code>。</li></ul><h2 id="代码" tabindex="-1"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span> <span class="token parameter">stock</span>
 * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">}</span></span>
 */</span>
<span class="token keyword">var</span> <span class="token function-variable function">stockManagement</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">stock</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">let</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>
		right <span class="token operator">=</span> stock<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">let</span> mid <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token punctuation">(</span>left <span class="token operator">+</span> right<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>stock<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&gt;</span> stock<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			left <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>stock<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&lt;</span> stock<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			right <span class="token operator">=</span> mid<span class="token punctuation">;</span>
		<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
			right<span class="token operator">--</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> stock<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,8);function x(y,z){const p=o("font"),e=o("RouterLink"),l=o("ExternalLinkIcon");return d(),r("div",null,[k,s("p",null,[n("🟢 "),a(p,{color:"#15bd66"},{default:t(()=>[n("Easy")]),_:1}),n("  🔖  "),a(e,{to:"/tag/array.html"},{default:t(()=>[m]),_:1}),n(),a(e,{to:"/tag/binary-search.html"},{default:t(()=>[h]),_:1}),n("  🔗 "),s("a",v,[_,a(l)])]),b,s("div",g,[f,s("p",null,[n("本题和「"),a(e,{to:"/problem/0154.html"},{default:t(()=>[n("154. 寻找旋转排序数组中的最小值 II")]),_:1}),n("」完全相同，是「"),a(e,{to:"/problem/0153.html"},{default:t(()=>[n("153. 寻找旋转排序数组中的最小值")]),_:1}),n("」的延伸。可以先尝试第 153 题，体会在旋转数组中进行二分查找的思路，再尝试解决本题。")])]),w])}const q=i(u,[["render",x],["__file","jz_offer_11_1.html.vue"]]);export{q as default};
