import{_ as l,r as a,o as i,c as r,a as n,b as s,d as e,w as t,e as u}from"./app-fBVbqwGY.js";const d={},k=n("h1",{id:"_961-在长度-2n-的数组中找出重复-n-次的元素",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_961-在长度-2n-的数组中找出重复-n-次的元素","aria-hidden":"true"},"#"),s(" 961. 在长度 2N 的数组中找出重复 N 次的元素")],-1),m=n("code",null,"数组",-1),h=n("code",null,"哈希表",-1),g={href:"https://leetcode.cn/problems/n-repeated-element-in-size-2n-array",target:"_blank",rel:"noopener noreferrer"},b=n("code",null,"力扣",-1),v={href:"https://leetcode.com/problems/n-repeated-element-in-size-2n-array",target:"_blank",rel:"noopener noreferrer"},_=n("code",null,"LeetCode",-1),f=u(`<h2 id="题目" tabindex="-1"><a class="header-anchor" href="#题目" aria-hidden="true">#</a> 题目</h2><p>You are given an integer array <code>nums</code> with the following properties:</p><ul><li><code>nums.length == 2 * n</code>.</li><li><code>nums</code> contains <code>n + 1</code> <strong>unique</strong> elements.</li><li>Exactly one element of <code>nums</code> is repeated <code>n</code> times.</li></ul><p>Return <em>the element that is repeated</em><code>n</code> <em>times</em>.</p><p><strong>Example 1:</strong></p><blockquote><p>Input: nums = [1,2,3,3]</p><p>Output: 3</p></blockquote><p><strong>Example 2:</strong></p><blockquote><p>Input: nums = [2,1,2,5,3,2]</p><p>Output: 2</p></blockquote><p><strong>Example 3:</strong></p><blockquote><p>Input: nums = [5,1,5,2,5,3,5,4]</p><p>Output: 5</p></blockquote><p><strong>Constraints:</strong></p><ul><li><code>2 &lt;= n &lt;= 5000</code></li><li><code>nums.length == 2 * n</code></li><li><code>0 &lt;= nums[i] &lt;= 10^4</code></li><li><code>nums</code> contains <code>n + 1</code> <strong>unique</strong> elements and one of them is repeated exactly <code>n</code> times.</li></ul><h2 id="题目大意" tabindex="-1"><a class="header-anchor" href="#题目大意" aria-hidden="true">#</a> 题目大意</h2><p>给你一个整数数组 <code>nums</code> ，该数组具有以下属性：</p><ul><li><code>nums.length == 2 * n</code>.</li><li><code>nums</code> 包含 <code>n + 1</code> 个 <strong>不同的</strong> 元素</li><li><code>nums</code> 中恰有一个元素重复 <code>n</code> 次</li></ul><p>找出并返回重复了 <code>n</code> 次的那个元素。</p><p><strong>示例 1：</strong></p><blockquote><p><strong>输入：</strong> nums = [1,2,3,3]</p><p><strong>输出：</strong> 3</p></blockquote><p><strong>示例 2：</strong></p><blockquote><p><strong>输入：</strong> nums = [2,1,2,5,3,2]</p><p><strong>输出：</strong> 2</p></blockquote><p><strong>示例 3：</strong></p><blockquote><p><strong>输入：</strong> nums = [5,1,5,2,5,3,5,4]</p><p><strong>输出：</strong> 5</p></blockquote><p><strong>提示：</strong></p><ul><li><code>2 &lt;= n &lt;= 5000</code></li><li><code>nums.length == 2 * n</code></li><li><code>0 &lt;= nums[i] &lt;= 10^4</code></li><li><code>nums</code> 由 <code>n + 1</code> 个 <strong>不同的</strong> 元素组成，且其中一个元素恰好重复 <code>n</code> 次</li></ul><h2 id="解题思路" tabindex="-1"><a class="header-anchor" href="#解题思路" aria-hidden="true">#</a> 解题思路</h2><ol><li><p><strong>核心思路</strong>：</p><ul><li>给定数组总长度为 <code>2N</code>，仅一个元素重复了 <code>N</code> 次，其余的元素各出现 1 次。</li><li>这意味着重复元素在数组中一定会出现多次，且相邻或间隔的某些位置上一定会包含它。</li><li>最分散的情况是，每个长度为 2 的子数组恰好有 1 个重复元素，这意味着从重复元素开始的长度为 4 的子数组将有 2 个主元素。</li><li>因此，我们只需要将元素与距离为 1、2 或 3 的邻居进行比较，找出重复元素即可。</li><li>之所以最多只需检查后 3 位，是因为无论元素如何排列，总有两个重复的元素会落在任意连续 4 个位置之中。</li></ul></li><li><p><strong>逐个检查可能的重复</strong>：</p><ul><li>遍历数组时，通过比较当前元素与后续几位（最多检查 3 位）的元素是否相同，可以快速定位重复的元素。</li></ul></li><li><p><strong>提前终止</strong>：</p><ul><li>一旦发现某个元素重复，即可直接返回该元素，无需继续遍历。</li></ul></li></ol><h4 id="复杂度分析" tabindex="-1"><a class="header-anchor" href="#复杂度分析" aria-hidden="true">#</a> 复杂度分析</h4><ul><li><strong>时间复杂度</strong>: <code>O(n)</code>，在最坏情况下，可能需要遍历整个数组（每个元素最多比较 3 次），时间复杂度依然线性。</li><li><strong>空间复杂度</strong>: <code>O(1)</code>，仅使用常量级变量，通过就地比较，不需要使用额外的数据结构（如哈希表），优化了空间复杂度。</li></ul><h2 id="代码" tabindex="-1"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span> <span class="token parameter">nums</span>
 * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">}</span></span>
 */</span>
<span class="token keyword">var</span> <span class="token function-variable function">repeatedNTimes</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">nums</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">const</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>
			nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">===</span> nums<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">||</span>
			nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">===</span> nums<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">||</span>
			nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">===</span> nums<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">]</span>
		<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,30);function x(y,q){const c=a("font"),o=a("RouterLink"),p=a("ExternalLinkIcon");return i(),r("div",null,[k,n("p",null,[s("🟢 "),e(c,{color:"#15bd66"},{default:t(()=>[s("Easy")]),_:1}),s("  🔖  "),e(o,{to:"/tag/array.html"},{default:t(()=>[m]),_:1}),s(),e(o,{to:"/tag/hash-table.html"},{default:t(()=>[h]),_:1}),s("  🔗 "),n("a",g,[b,e(p)]),s(),n("a",v,[_,e(p)])]),f])}const N=l(d,[["render",x],["__file","0961.html.vue"]]);export{N as default};
