import{_ as i,r as c,o as u,c as d,a as n,b as s,d as t,w as a,f as r,e as p}from"./app-aQeLbVW9.js";const k={},h=n("h1",{id:"_30-串联所有单词的子串",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_30-串联所有单词的子串","aria-hidden":"true"},"#"),s(" 30. 串联所有单词的子串")],-1),b=n("code",null,"哈希表",-1),w=n("code",null,"字符串",-1),g=n("code",null,"滑动窗口",-1),m={href:"https://leetcode.cn/problems/substring-with-concatenation-of-all-words",target:"_blank",rel:"noopener noreferrer"},f=n("code",null,"力扣",-1),v={href:"https://leetcode.com/problems/substring-with-concatenation-of-all-words",target:"_blank",rel:"noopener noreferrer"},q=n("code",null,"LeetCode",-1),_=p('<h2 id="题目" tabindex="-1"><a class="header-anchor" href="#题目" aria-hidden="true">#</a> 题目</h2><p>You are given a string <code>s</code> and an array of strings <code>words</code>. All the strings of <code>words</code> are of <strong>the same length</strong>.</p><p>A <strong>concatenated substring</strong> in <code>s</code> is a substring that contains all the strings of any permutation of <code>words</code> concatenated.</p><ul><li>For example, if <code>words = [&quot;ab&quot;,&quot;cd&quot;,&quot;ef&quot;]</code>, then <code>&quot;abcdef&quot;</code>, <code>&quot;abefcd&quot;</code>, <code>&quot;cdabef&quot;</code>, <code>&quot;cdefab&quot;</code>, <code>&quot;efabcd&quot;</code>, and <code>&quot;efcdab&quot;</code> are all concatenated strings. <code>&quot;acdbef&quot;</code> is not a concatenated substring because it is not the concatenation of any permutation of <code>words</code>.</li></ul><p>Return <em>the starting indices of all the concatenated substrings in</em><code>s</code>. You can return the answer in <strong>any order</strong>.</p><p><strong>Example 1:</strong></p><blockquote><p>Input: s = &quot;barfoothefoobarman&quot;, words = [&quot;foo&quot;,&quot;bar&quot;]</p><p>Output: [0,9]</p><p>Explanation: Since words.length == 2 and words[i].length == 3, the concatenated substring has to be of length 6.</p><p>The substring starting at 0 is &quot;barfoo&quot;. It is the concatenation of [&quot;bar&quot;,&quot;foo&quot;] which is a permutation of words.</p><p>The substring starting at 9 is &quot;foobar&quot;. It is the concatenation of [&quot;foo&quot;,&quot;bar&quot;] which is a permutation of words.</p><p>The output order does not matter. Returning [9,0] is fine too.</p></blockquote><p><strong>Example 2:</strong></p><blockquote><p>Input: s = &quot;wordgoodgoodgoodbestword&quot;, words = [&quot;word&quot;,&quot;good&quot;,&quot;best&quot;,&quot;word&quot;]</p><p>Output: []</p><p>Explanation: Since words.length == 4 and words[i].length == 4, the concatenated substring has to be of length 16.</p><p>There is no substring of length 16 in s that is equal to the concatenation of any permutation of words.</p><p>We return an empty array.</p></blockquote><p><strong>Example 3:</strong></p><blockquote><p>Input: s = &quot;barfoofoobarthefoobarman&quot;, words = [&quot;bar&quot;,&quot;foo&quot;,&quot;the&quot;]</p><p>Output: [6,9,12]</p><p>Explanation: Since words.length == 3 and words[i].length == 3, the concatenated substring has to be of length 9.</p><p>The substring starting at 6 is &quot;foobarthe&quot;. It is the concatenation of [&quot;foo&quot;,&quot;bar&quot;,&quot;the&quot;] which is a permutation of words.</p><p>The substring starting at 9 is &quot;barthefoo&quot;. It is the concatenation of [&quot;bar&quot;,&quot;the&quot;,&quot;foo&quot;] which is a permutation of words.</p><p>The substring starting at 12 is &quot;thefoobar&quot;. It is the concatenation of [&quot;the&quot;,&quot;foo&quot;,&quot;bar&quot;] which is a permutation of words.</p></blockquote><p><strong>Constraints:</strong></p><ul><li><code>1 &lt;= s.length &lt;= 10^4</code></li><li><code>1 &lt;= words.length &lt;= 5000</code></li><li><code>1 &lt;= words[i].length &lt;= 30</code></li><li><code>s</code> and <code>words[i]</code> consist of lowercase English letters.</li></ul><h2 id="题目大意" tabindex="-1"><a class="header-anchor" href="#题目大意" aria-hidden="true">#</a> 题目大意</h2><p>给定一个字符串 <code>s</code> 和一个字符串数组 <code>words</code>。 <code>words</code> 中所有字符串 长度相同。</p><ul><li>s 中的 <strong>串联子串</strong> 是指一个包含 <code>words</code> 中所有字符串以任意顺序排列连接起来的子串。</li></ul><p>例如，如果 <code>words = [&quot;ab&quot;,&quot;cd&quot;,&quot;ef&quot;]</code>， 那么 <code>&quot;abcdef&quot;</code>， <code>&quot;abefcd&quot;</code>，<code>&quot;cdabef&quot;</code>， <code>&quot;cdefab&quot;</code>，<code>&quot;efabcd&quot;</code>， 和 <code>&quot;efcdab&quot;</code> 都是串联子串。 <code>&quot;acdbef&quot;</code> 不是串联子串，因为他不是任何 <code>words</code> 排列的连接。 返回所有串联子串在 <code>s</code> 中的开始索引。你可以以 <strong>任意顺序</strong> 返回答案。</p><h2 id="解题思路" tabindex="-1"><a class="header-anchor" href="#解题思路" aria-hidden="true">#</a> 解题思路</h2>',18),y=p(`<ul><li><strong>窗口大小固定</strong>：每次窗口大小等于 <code>words.length * words[0].length</code>。</li><li><strong>使用哈希表统计 <code>words</code> 中每个单词的出现次数</strong>。</li><li><strong>滑动窗口遍历 <code>s</code>，每次取出窗口内的子串，检查是否匹配 <code>words</code></strong>。</li></ul><ol><li><p>状态定义</p><ul><li>设 <code>need</code> 记录 <code>words</code> 中单词出现的次数。</li><li>设 <code>window</code> 记录当前窗口内的单词是否匹配 <code>need</code>。</li></ul></li><li><p><strong>移动 <code>right</code> 指针</strong> 扩大窗口，每次加 <code>words[0].length</code> 个字符。</p></li><li><p><strong>当窗口大小超过 <code>words.length * words[0].length</code></strong> 时，<code>left</code> 指针右移收缩窗口。</p></li><li><p><strong>判断窗口内的子串是否匹配 <code>words</code></strong>：</p><ul><li>使用 <code>need</code> 统计 <code>words</code> 词频。</li><li>使用 <code>window</code> 统计窗口内单词的词频。</li><li>若 <code>window === need</code>，记录 <code>left</code> 位置。</li></ul></li></ol><h4 id="复杂度分析" tabindex="-1"><a class="header-anchor" href="#复杂度分析" aria-hidden="true">#</a> 复杂度分析</h4><ul><li><strong>时间复杂度</strong>: <code>O(n * wordLen)</code>，<code>n</code> 为 <code>s</code> 长度，每个 <code>i</code> 遍历 <code>O(n / wordLen)</code>。</li><li><strong>空间复杂度</strong>: <code>O(words.length)</code>，存储 <code>words</code> 词频和 <code>window</code> 词频。</li></ul><h2 id="代码" tabindex="-1"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>string<span class="token punctuation">}</span></span> <span class="token parameter">s</span>
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>string<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span> <span class="token parameter">words</span>
 * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span>
 */</span>
<span class="token keyword">var</span> <span class="token function-variable function">findSubstring</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">s<span class="token punctuation">,</span> words</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token keyword">let</span> wordLen <span class="token operator">=</span> words<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>
	<span class="token keyword">let</span> totalLen <span class="token operator">=</span> words<span class="token punctuation">.</span>length <span class="token operator">*</span> wordLen<span class="token punctuation">;</span>
	<span class="token keyword">let</span> need <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

	<span class="token comment">// 统计 words 中每个单词出现的次数</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> word <span class="token keyword">of</span> words<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		need<span class="token punctuation">[</span>word<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>need<span class="token punctuation">[</span>word<span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token comment">// 枚举 wordLen 个不同的起点</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> wordLen<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">let</span> left <span class="token operator">=</span> i<span class="token punctuation">,</span>
			right <span class="token operator">=</span> i<span class="token punctuation">;</span>
		<span class="token keyword">let</span> window <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
		<span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

		<span class="token keyword">while</span> <span class="token punctuation">(</span>right <span class="token operator">+</span> wordLen <span class="token operator">&lt;=</span> s<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">let</span> word <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>right<span class="token punctuation">,</span> right <span class="token operator">+</span> wordLen<span class="token punctuation">)</span><span class="token punctuation">;</span>
			right <span class="token operator">+=</span> wordLen<span class="token punctuation">;</span>

			<span class="token keyword">if</span> <span class="token punctuation">(</span>need<span class="token punctuation">[</span>word<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
				window<span class="token punctuation">[</span>word<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>window<span class="token punctuation">[</span>word<span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
				count<span class="token operator">++</span><span class="token punctuation">;</span>

				<span class="token keyword">while</span> <span class="token punctuation">(</span>window<span class="token punctuation">[</span>word<span class="token punctuation">]</span> <span class="token operator">&gt;</span> need<span class="token punctuation">[</span>word<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
					<span class="token keyword">let</span> removeWord <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span> left <span class="token operator">+</span> wordLen<span class="token punctuation">)</span><span class="token punctuation">;</span>
					window<span class="token punctuation">[</span>removeWord<span class="token punctuation">]</span><span class="token operator">--</span><span class="token punctuation">;</span>
					count<span class="token operator">--</span><span class="token punctuation">;</span>
					left <span class="token operator">+=</span> wordLen<span class="token punctuation">;</span>
				<span class="token punctuation">}</span>

				<span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">===</span> words<span class="token punctuation">.</span>length<span class="token punctuation">)</span> res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
				window <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
				count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
				left <span class="token operator">=</span> right<span class="token punctuation">;</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> res<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="相关题目" tabindex="-1"><a class="header-anchor" href="#相关题目" aria-hidden="true">#</a> 相关题目</h2>`,7),x=n("thead",null,[n("tr",null,[n("th",{style:{"text-align":"center"}},"题号"),n("th",{style:{"text-align":"left"}},"标题"),n("th",{style:{"text-align":"center"}},"题解"),n("th",{style:{"text-align":"left"}},"标签"),n("th",{style:{"text-align":"center"}},"难度"),n("th",{style:{"text-align":"center"}},"力扣")])],-1),L=n("td",{style:{"text-align":"center"}},"76",-1),E=n("td",{style:{"text-align":"left"}},"最小覆盖子串",-1),I={style:{"text-align":"center"}},T={style:{"text-align":"left"}},O=n("code",null,"哈希表",-1),C=n("code",null,"字符串",-1),N=n("code",null,"滑动窗口",-1),S=n("td",{style:{"text-align":"center"}},"🔴",-1),V={style:{"text-align":"center"}},R={href:"https://leetcode.cn/problems/minimum-window-substring",target:"_blank",rel:"noopener noreferrer"},j={href:"https://leetcode.com/problems/minimum-window-substring",target:"_blank",rel:"noopener noreferrer"};function B(W,A){const l=c("font"),o=c("RouterLink"),e=c("ExternalLinkIcon");return u(),d("div",null,[h,n("p",null,[s("🔴 "),t(l,{color:"#ff334b"},{default:a(()=>[s("Hard")]),_:1}),s("  🔖  "),t(o,{to:"/tag/hash-table.html"},{default:a(()=>[b]),_:1}),s(),t(o,{to:"/tag/string.html"},{default:a(()=>[w]),_:1}),s(),t(o,{to:"/tag/sliding-window.html"},{default:a(()=>[g]),_:1}),s("  🔗 "),n("a",m,[f,t(e)]),s(),n("a",v,[q,t(e)])]),_,n("p",null,[s("此题是 "),t(o,{to:"/problem/0438.html"},{default:a(()=>[s("第 438 题 找到字符串中所有字母异位词")]),_:1}),s(" 的进阶版。不同的是第 438 题的元素是字母，而此题的元素是单词，可以用类似的滑动窗口方法来解此题。")]),y,r(" prettier-ignore "),n("table",null,[x,n("tbody",null,[n("tr",null,[L,E,n("td",I,[t(o,{to:"/problem/0076.html"},{default:a(()=>[s("[✓]")]),_:1})]),n("td",T,[t(o,{to:"/tag/hash-table.html"},{default:a(()=>[O]),_:1}),s(),t(o,{to:"/tag/string.html"},{default:a(()=>[C]),_:1}),s(),t(o,{to:"/tag/sliding-window.html"},{default:a(()=>[N]),_:1})]),S,n("td",V,[n("a",R,[s("🀄️"),t(e)]),s(),n("a",j,[s("🔗"),t(e)])])])])])])}const F=i(k,[["render",B],["__file","0030.html.vue"]]);export{F as default};
