import{_ as l,r as c,o as i,c as u,a as n,b as s,d as a,w as t,f as r,e as d}from"./app-fBVbqwGY.js";const k={},m=n("h1",{id:"_350-两个数组的交集-ii",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_350-两个数组的交集-ii","aria-hidden":"true"},"#"),s(" 350. 两个数组的交集 II")],-1),h=n("code",null,"数组",-1),v=n("code",null,"哈希表",-1),_=n("code",null,"双指针",-1),b=n("code",null,"二分查找",-1),g=n("code",null,"排序",-1),f={href:"https://leetcode.cn/problems/intersection-of-two-arrays-ii",target:"_blank",rel:"noopener noreferrer"},y=n("code",null,"力扣",-1),w={href:"https://leetcode.com/problems/intersection-of-two-arrays-ii",target:"_blank",rel:"noopener noreferrer"},x=n("code",null,"LeetCode",-1),j=d(`<h2 id="题目" tabindex="-1"><a class="header-anchor" href="#题目" aria-hidden="true">#</a> 题目</h2><p>Given two integer arrays <code>nums1</code> and <code>nums2</code>, return <em>an array of their intersection</em>. Each element in the result must appear as many times as it shows in both arrays and you may return the result in <strong>any order</strong>.</p><p><strong>Example 1:</strong></p><blockquote><p>Input: nums1 = [1,2,2,1], nums2 = [2,2]</p><p>Output: [2,2]</p></blockquote><p><strong>Example 2:</strong></p><blockquote><p>Input: nums1 = [4,9,5], nums2 = [9,4,9,8,4]</p><p>Output: [4,9]</p><p>Explanation: [9,4] is also accepted.</p></blockquote><p><strong>Constraints:</strong></p><ul><li><code>1 &lt;= nums1.length, nums2.length &lt;= 1000</code></li><li><code>0 &lt;= nums1[i], nums2[i] &lt;= 1000</code></li></ul><p><strong>Follow up:</strong></p><ul><li>What if the given array is already sorted? How would you optimize your algorithm?</li><li>What if <code>nums1</code>&#39;s size is small compared to <code>nums2</code>&#39;s size? Which algorithm is better?</li><li>What if elements of <code>nums2</code> are stored on disk, and the memory is limited such that you cannot load all elements into the memory at once?</li></ul><h2 id="题目大意" tabindex="-1"><a class="header-anchor" href="#题目大意" aria-hidden="true">#</a> 题目大意</h2><p>给你两个整数数组 <code>nums1</code> 和 <code>nums2</code> ，请你以数组形式返回两数组的交集。返回结果中每个元素出现的次数，应与元素在两个数组中都出现的次数一致（如果出现次数不一致，则考虑取较小值）。可以不考虑输出结果的顺序。</p><p><strong>示例 1：</strong></p><blockquote><p><strong>输入：</strong> nums1 = [1,2,2,1], nums2 = [2,2]</p><p><strong>输出：</strong>[2,2]</p></blockquote><p><strong>示例 2:</strong></p><blockquote><p><strong>输入：</strong> nums1 = [4,9,5], nums2 = [9,4,9,8,4]</p><p><strong>输出：</strong>[4,9]</p></blockquote><p><strong>提示：</strong></p><ul><li><code>1 &lt;= nums1.length, nums2.length &lt;= 1000</code></li><li><code>0 &lt;= nums1[i], nums2[i] &lt;= 1000</code></li></ul><p><strong>进阶：</strong></p><ul><li>如果给定的数组已经排好序呢？你将如何优化你的算法？</li><li>如果 <code>nums1</code> 的大小比 <code>nums2</code> 小，哪种方法更优？</li><li>如果 <code>nums2</code> 的元素存储在磁盘上，内存是有限的，并且你不能一次加载所有的元素到内存中，你该怎么办？</li></ul><h2 id="解题思路" tabindex="-1"><a class="header-anchor" href="#解题思路" aria-hidden="true">#</a> 解题思路</h2><ol><li><p><strong>排序：</strong></p><ul><li>先对 <code>nums1</code> 和 <code>nums2</code> 两个数组进行排序，使得两个数组的元素按从小到大的顺序排列。排序后的数组更容易进行交集的查找，因为我们可以通过一次遍历来寻找相同的元素。</li></ul></li><li><p><strong>双指针法：</strong></p><ul><li>使用两个指针 <code>i</code> 和 <code>j</code> 分别指向 <code>nums1</code> 和 <code>nums2</code> 的当前元素。</li><li>通过比较 <code>nums1[i]</code> 和 <code>nums2[j]</code> 的值： <ul><li>如果 <code>nums1[i] &lt; nums2[j]</code>，则 <code>nums1[i]</code> 小于 <code>nums2[j]</code>，所以我们将 <code>i</code> 向右移动，继续检查下一个 <code>nums1</code> 的元素。</li><li>如果 <code>nums1[i] &gt; nums2[j]</code>，则 <code>nums2[j]</code> 小于 <code>nums1[i]</code>，因此我们将 <code>j</code> 向右移动，继续检查下一个 <code>nums2</code> 的元素。</li><li>如果 <code>nums1[i] == nums2[j]</code>，则说明找到了一个交集元素，加入结果数组 <code>res</code>，并将两个指针都向右移动，继续比较下一对元素。</li></ul></li></ul></li><li><p><strong>返回结果：</strong></p><ul><li>当任一指针遍历完其数组后，停止比较，返回交集结果 <code>res</code>。</li></ul></li></ol><h4 id="代码" tabindex="-1"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span> <span class="token parameter">nums1</span>
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span> <span class="token parameter">nums2</span>
 * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span>
 */</span>
<span class="token keyword">var</span> <span class="token function-variable function">intersect</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">nums1<span class="token punctuation">,</span> nums2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">// 对两个数组进行排序</span>
	nums1<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> a <span class="token operator">-</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>
	nums2<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> a <span class="token operator">-</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>
		j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

	<span class="token comment">// 使用双指针法查找交集</span>
	<span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> nums1<span class="token punctuation">.</span>length <span class="token operator">&amp;&amp;</span> j <span class="token operator">&lt;</span> nums2<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>nums1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> nums2<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			i<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment">// nums1 元素较小，向右移动指针</span>
		<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>nums1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;</span> nums2<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			j<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment">// nums2 元素较小，向右移动指针</span>
		<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
			res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>nums1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 发现相等的元素，加入结果</span>
			i<span class="token operator">++</span><span class="token punctuation">;</span>
			j<span class="token operator">++</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">return</span> res<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="复杂度分析" tabindex="-1"><a class="header-anchor" href="#复杂度分析" aria-hidden="true">#</a> 复杂度分析</h4><ul><li><p><strong>时间复杂度</strong>：<code>O(n log n + m log m)</code></p><ul><li>排序操作的时间复杂度是 <code>O(n log n)</code> 和 <code>O(m log m)</code>，其中 <code>n</code> 和 <code>m</code> 分别是两个数组的长度。</li><li>双指针遍历的时间复杂度是 <code>O(n + m)</code>，因为最多需要遍历两个数组中的每个元素一次。</li><li>因此，总的时间复杂度是 <code>O(n log n + m log m)</code>。</li></ul></li><li><p><strong>空间复杂度</strong>：<code>O(min(n, m))</code>，使用了额外的 <code>res</code> 数组来存储交集元素，交集数组的长度最多为 <code>min(n, m)</code>。</p></li></ul><h2 id="进阶问题" tabindex="-1"><a class="header-anchor" href="#进阶问题" aria-hidden="true">#</a> 进阶问题</h2><h3 id="_1-如果给定的数组已经排好序-如何优化你的算法" tabindex="-1"><a class="header-anchor" href="#_1-如果给定的数组已经排好序-如何优化你的算法" aria-hidden="true">#</a> 1. 如果给定的数组已经排好序，如何优化你的算法？</h3><ul><li>如果给定的数组已经排好序，可以直接使用 <strong>双指针法</strong>（不需要先排序）。这将大大减少时间复杂度，因为排序操作的时间复杂度是 <code>O(n log n)</code>，而双指针遍历两个已排序数组的时间复杂度是 <code>O(n + m)</code>，即使数组没有排序，排序也是不必要的。</li><li>这样，时间复杂度从 <code>O(n log n + m log m)</code> 优化为 <code>O(n + m)</code>，其中 <code>n</code> 和 <code>m</code> 是两个数组的长度。</li></ul><h4 id="代码-1" tabindex="-1"><a class="header-anchor" href="#代码-1" aria-hidden="true">#</a> 代码</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span> <span class="token parameter">nums1</span>
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span> <span class="token parameter">nums2</span>
 * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span>
 */</span>
<span class="token keyword">var</span> <span class="token function-variable function">intersect</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">nums1<span class="token punctuation">,</span> nums2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>
		j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

	<span class="token comment">// 双指针法遍历已排序的数组</span>
	<span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> nums1<span class="token punctuation">.</span>length <span class="token operator">&amp;&amp;</span> j <span class="token operator">&lt;</span> nums2<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>nums1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> nums2<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			i<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment">// nums1 元素较小，向右移动指针</span>
		<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>nums1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;</span> nums2<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			j<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment">// nums2 元素较小，向右移动指针</span>
		<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
			res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>nums1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 发现相等的元素，加入结果</span>
			i<span class="token operator">++</span><span class="token punctuation">;</span>
			j<span class="token operator">++</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">return</span> res<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="复杂度分析-1" tabindex="-1"><a class="header-anchor" href="#复杂度分析-1" aria-hidden="true">#</a> 复杂度分析</h4><ul><li><strong>时间复杂度：</strong> <code>O(n + m)</code>，无需排序。</li><li><strong>空间复杂度：</strong> <code>O(min(n, m))</code>，存储交集。</li></ul><hr><h3 id="_2-如果-nums1-的大小比-nums2-小-哪种方法更优" tabindex="-1"><a class="header-anchor" href="#_2-如果-nums1-的大小比-nums2-小-哪种方法更优" aria-hidden="true">#</a> 2. 如果 <code>nums1</code> 的大小比 <code>nums2</code> 小，哪种方法更优？</h3><ul><li>如果 <code>nums1</code> 的大小比 <code>nums2</code> 小，可以使用哈希集合来存储较小数组的元素，然后遍历较大的数组，检查每个元素是否在哈希集合中出现。</li><li>这样可以减少不必要的比较，避免多次遍历较大的数组。</li></ul><h4 id="代码-2" tabindex="-1"><a class="header-anchor" href="#代码-2" aria-hidden="true">#</a> 代码</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span> <span class="token parameter">nums1</span>
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span> <span class="token parameter">nums2</span>
 * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span>
 */</span>
<span class="token keyword">var</span> <span class="token function-variable function">intersect</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">nums1<span class="token punctuation">,</span> nums2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">// 保证 nums1 是较小的数组</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>nums1<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> nums2<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token punctuation">[</span>nums1<span class="token punctuation">,</span> nums2<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>nums2<span class="token punctuation">,</span> nums1<span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token keyword">let</span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span>nums1<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> num <span class="token keyword">of</span> nums2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>set<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>
			set<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 防止重复的元素</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">return</span> res<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="复杂度分析-2" tabindex="-1"><a class="header-anchor" href="#复杂度分析-2" aria-hidden="true">#</a> 复杂度分析</h4><ul><li><strong>时间复杂度：</strong> <code>O(n + m)</code>，其中 <code>n</code> 是较小数组的长度，<code>m</code> 是较大数组的长度。</li><li><strong>空间复杂度：</strong> <code>O(n)</code>，需要存储较小数组的元素。</li></ul><hr><h3 id="_3-如果-nums2-的元素存储在磁盘上-内存是有限的-并且你不能一次加载所有的元素到内存中-你该怎么办" tabindex="-1"><a class="header-anchor" href="#_3-如果-nums2-的元素存储在磁盘上-内存是有限的-并且你不能一次加载所有的元素到内存中-你该怎么办" aria-hidden="true">#</a> 3. 如果 <code>nums2</code> 的元素存储在磁盘上，内存是有限的，并且你不能一次加载所有的元素到内存中，你该怎么办？</h3><ul><li>由于 <code>nums2</code> 太大，不能一次加载到内存中，我们可以将 <code>nums2</code> 存储在磁盘上，分批读取其元素。</li><li><strong>外部排序</strong>：可以使用外部排序技术，将 <code>nums2</code> 分为多个块，每个块可以加载到内存中。我们对每个块进行排序，然后逐块与 <code>nums1</code> 比较，寻找交集。</li><li><strong>迭代读取</strong>：将 <code>nums2</code> 分成多个小块，每次只读取一个块，然后逐步与 <code>nums1</code> 中的元素进行比较。</li><li><strong>哈希方法</strong>：我们可以使用哈希表存储 <code>nums1</code> 的元素，<code>nums2</code> 每读取一个元素就与哈希表进行比较。如果该元素存在于哈希表中，就认为它是交集元素。</li></ul><p><strong>具体步骤：</strong></p><ol><li>将 <code>nums1</code> 加载到内存中并构建哈希表。</li><li>将 <code>nums2</code> 从磁盘按块读取，每次读取一小部分。</li><li>对于每次读取的 <code>nums2</code> 块，逐个元素与 <code>nums1</code> 中的哈希表进行比对，找到交集。</li><li>将交集元素存储或输出。</li></ol><h4 id="代码-伪代码示例" tabindex="-1"><a class="header-anchor" href="#代码-伪代码示例" aria-hidden="true">#</a> 代码（伪代码示例）</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 假设读取文件时一次只读取一个元素</span>
<span class="token keyword">var</span> <span class="token function-variable function">intersect</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">nums1<span class="token punctuation">,</span> filePathToNums2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">let</span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span>nums1<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

	<span class="token comment">// 假设 readChunk 是一个函数，能从磁盘中分批读取 nums2 的元素</span>
	<span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">let</span> chunk <span class="token operator">=</span> <span class="token function">readChunk</span><span class="token punctuation">(</span>filePathToNums2<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>chunk <span class="token operator">||</span> chunk<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>

		<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> num <span class="token keyword">of</span> chunk<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span>set<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
				res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>
				set<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 确保没有重复的交集元素</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">return</span> res<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="复杂度分析-3" tabindex="-1"><a class="header-anchor" href="#复杂度分析-3" aria-hidden="true">#</a> 复杂度分析</h4><ul><li><strong>时间复杂度：</strong> <code>O(n + m)</code>，其中 <code>n</code> 是 <code>nums1</code> 的大小，<code>m</code> 是 <code>nums2</code> 读取的总量。</li><li><strong>空间复杂度：</strong> <code>O(n)</code>，需要存储 <code>nums1</code> 的哈希表。</li></ul><h2 id="相关题目" tabindex="-1"><a class="header-anchor" href="#相关题目" aria-hidden="true">#</a> 相关题目</h2>`,50),O=n("thead",null,[n("tr",null,[n("th",{style:{"text-align":"center"}},"题号"),n("th",{style:{"text-align":"left"}},"标题"),n("th",{style:{"text-align":"center"}},"题解"),n("th",{style:{"text-align":"left"}},"标签"),n("th",{style:{"text-align":"center"}},"难度"),n("th",{style:{"text-align":"center"}},"力扣")])],-1),q=n("td",{style:{"text-align":"center"}},"349",-1),E=n("td",{style:{"text-align":"left"}},"两个数组的交集",-1),C={style:{"text-align":"center"}},N={style:{"text-align":"left"}},I=n("code",null,"数组",-1),L=n("code",null,"哈希表",-1),V=n("code",null,"双指针",-1),W=n("code",null,"2+",-1),z=n("td",{style:{"text-align":"center"}},"🟢",-1),B={style:{"text-align":"center"}},S={href:"https://leetcode.cn/problems/intersection-of-two-arrays",target:"_blank",rel:"noopener noreferrer"},T={href:"https://leetcode.com/problems/intersection-of-two-arrays",target:"_blank",rel:"noopener noreferrer"},P=n("td",{style:{"text-align":"center"}},"1002",-1),R=n("td",{style:{"text-align":"left"}},"查找共用字符",-1),F={style:{"text-align":"center"}},G={style:{"text-align":"left"}},H=n("code",null,"数组",-1),A=n("code",null,"哈希表",-1),D=n("code",null,"字符串",-1),J=n("td",{style:{"text-align":"center"}},"🟢",-1),K={style:{"text-align":"center"}},M={href:"https://leetcode.cn/problems/find-common-characters",target:"_blank",rel:"noopener noreferrer"},Q={href:"https://leetcode.com/problems/find-common-characters",target:"_blank",rel:"noopener noreferrer"},U=n("td",{style:{"text-align":"center"}},"2143",-1),X=n("td",{style:{"text-align":"left"}},"在两个数组的区间中选取数字 🔒",-1),Y=n("td",{style:{"text-align":"center"}},null,-1),Z={style:{"text-align":"left"}},$=n("code",null,"数组",-1),nn=n("code",null,"动态规划",-1),sn=n("td",{style:{"text-align":"center"}},"🔴",-1),an={style:{"text-align":"center"}},tn={href:"https://leetcode.cn/problems/choose-numbers-from-two-arrays-in-range",target:"_blank",rel:"noopener noreferrer"},en={href:"https://leetcode.com/problems/choose-numbers-from-two-arrays-in-range",target:"_blank",rel:"noopener noreferrer"},on=n("td",{style:{"text-align":"center"}},"2215",-1),cn=n("td",{style:{"text-align":"left"}},"找出两数组的不同",-1),pn={style:{"text-align":"center"}},ln={style:{"text-align":"left"}},un=n("code",null,"数组",-1),rn=n("code",null,"哈希表",-1),dn=n("td",{style:{"text-align":"center"}},"🟢",-1),kn={style:{"text-align":"center"}},mn={href:"https://leetcode.cn/problems/find-the-difference-of-two-arrays",target:"_blank",rel:"noopener noreferrer"},hn={href:"https://leetcode.com/problems/find-the-difference-of-two-arrays",target:"_blank",rel:"noopener noreferrer"},vn=n("td",{style:{"text-align":"center"}},"2248",-1),_n=n("td",{style:{"text-align":"left"}},"多个数组求交集",-1),bn={style:{"text-align":"center"}},gn={style:{"text-align":"left"}},fn=n("code",null,"数组",-1),yn=n("code",null,"哈希表",-1),wn=n("code",null,"计数",-1),xn=n("code",null,"1+",-1),jn=n("td",{style:{"text-align":"center"}},"🟢",-1),On={style:{"text-align":"center"}},qn={href:"https://leetcode.cn/problems/intersection-of-multiple-arrays",target:"_blank",rel:"noopener noreferrer"},En={href:"https://leetcode.com/problems/intersection-of-multiple-arrays",target:"_blank",rel:"noopener noreferrer"},Cn=n("td",{style:{"text-align":"center"}},"2540",-1),Nn=n("td",{style:{"text-align":"left"}},"最小公共值",-1),In=n("td",{style:{"text-align":"center"}},null,-1),Ln={style:{"text-align":"left"}},Vn=n("code",null,"数组",-1),Wn=n("code",null,"哈希表",-1),zn=n("code",null,"双指针",-1),Bn=n("code",null,"1+",-1),Sn=n("td",{style:{"text-align":"center"}},"🟢",-1),Tn={style:{"text-align":"center"}},Pn={href:"https://leetcode.cn/problems/minimum-common-value",target:"_blank",rel:"noopener noreferrer"},Rn={href:"https://leetcode.com/problems/minimum-common-value",target:"_blank",rel:"noopener noreferrer"};function Fn(Gn,Hn){const p=c("font"),e=c("RouterLink"),o=c("ExternalLinkIcon");return i(),u("div",null,[m,n("p",null,[s("🟢 "),a(p,{color:"#15bd66"},{default:t(()=>[s("Easy")]),_:1}),s("  🔖  "),a(e,{to:"/tag/array.html"},{default:t(()=>[h]),_:1}),s(),a(e,{to:"/tag/hash-table.html"},{default:t(()=>[v]),_:1}),s(),a(e,{to:"/tag/two-pointers.html"},{default:t(()=>[_]),_:1}),s(),a(e,{to:"/tag/binary-search.html"},{default:t(()=>[b]),_:1}),s(),a(e,{to:"/tag/sorting.html"},{default:t(()=>[g]),_:1}),s("  🔗 "),n("a",f,[y,a(o)]),s(),n("a",w,[x,a(o)])]),j,r(" prettier-ignore "),n("table",null,[O,n("tbody",null,[n("tr",null,[q,E,n("td",C,[a(e,{to:"/problem/0349.html"},{default:t(()=>[s("[✓]")]),_:1})]),n("td",N,[a(e,{to:"/tag/array.html"},{default:t(()=>[I]),_:1}),s(),a(e,{to:"/tag/hash-table.html"},{default:t(()=>[L]),_:1}),s(),a(e,{to:"/tag/two-pointers.html"},{default:t(()=>[V]),_:1}),s(),W]),z,n("td",B,[n("a",S,[s("🀄️"),a(o)]),s(),n("a",T,[s("🔗"),a(o)])])]),n("tr",null,[P,R,n("td",F,[a(e,{to:"/problem/1002.html"},{default:t(()=>[s("[✓]")]),_:1})]),n("td",G,[a(e,{to:"/tag/array.html"},{default:t(()=>[H]),_:1}),s(),a(e,{to:"/tag/hash-table.html"},{default:t(()=>[A]),_:1}),s(),a(e,{to:"/tag/string.html"},{default:t(()=>[D]),_:1})]),J,n("td",K,[n("a",M,[s("🀄️"),a(o)]),s(),n("a",Q,[s("🔗"),a(o)])])]),n("tr",null,[U,X,Y,n("td",Z,[a(e,{to:"/tag/array.html"},{default:t(()=>[$]),_:1}),s(),a(e,{to:"/tag/dynamic-programming.html"},{default:t(()=>[nn]),_:1})]),sn,n("td",an,[n("a",tn,[s("🀄️"),a(o)]),s(),n("a",en,[s("🔗"),a(o)])])]),n("tr",null,[on,cn,n("td",pn,[a(e,{to:"/problem/2215.html"},{default:t(()=>[s("[✓]")]),_:1})]),n("td",ln,[a(e,{to:"/tag/array.html"},{default:t(()=>[un]),_:1}),s(),a(e,{to:"/tag/hash-table.html"},{default:t(()=>[rn]),_:1})]),dn,n("td",kn,[n("a",mn,[s("🀄️"),a(o)]),s(),n("a",hn,[s("🔗"),a(o)])])]),n("tr",null,[vn,_n,n("td",bn,[a(e,{to:"/problem/2248.html"},{default:t(()=>[s("[✓]")]),_:1})]),n("td",gn,[a(e,{to:"/tag/array.html"},{default:t(()=>[fn]),_:1}),s(),a(e,{to:"/tag/hash-table.html"},{default:t(()=>[yn]),_:1}),s(),a(e,{to:"/tag/counting.html"},{default:t(()=>[wn]),_:1}),s(),xn]),jn,n("td",On,[n("a",qn,[s("🀄️"),a(o)]),s(),n("a",En,[s("🔗"),a(o)])])]),n("tr",null,[Cn,Nn,In,n("td",Ln,[a(e,{to:"/tag/array.html"},{default:t(()=>[Vn]),_:1}),s(),a(e,{to:"/tag/hash-table.html"},{default:t(()=>[Wn]),_:1}),s(),a(e,{to:"/tag/two-pointers.html"},{default:t(()=>[zn]),_:1}),s(),Bn]),Sn,n("td",Tn,[n("a",Pn,[s("🀄️"),a(o)]),s(),n("a",Rn,[s("🔗"),a(o)])])])])])])}const Dn=l(k,[["render",Fn],["__file","0350.html.vue"]]);export{Dn as default};
