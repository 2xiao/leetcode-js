import{_ as l,r as p,o as r,c as i,a as n,b as s,d as o,w as t,f as d,e as u}from"./app-fBVbqwGY.js";const k={},h=n("h1",{id:"_2466-统计构造好字符串的方案数",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_2466-统计构造好字符串的方案数","aria-hidden":"true"},"#"),s(" 2466. 统计构造好字符串的方案数")],-1),g=n("code",null,"动态规划",-1),m={href:"https://leetcode.cn/problems/count-ways-to-build-good-strings",target:"_blank",rel:"noopener noreferrer"},b=n("code",null,"力扣",-1),_={href:"https://leetcode.com/problems/count-ways-to-build-good-strings",target:"_blank",rel:"noopener noreferrer"},v=n("code",null,"LeetCode",-1),f=u(`<h2 id="题目" tabindex="-1"><a class="header-anchor" href="#题目" aria-hidden="true">#</a> 题目</h2><p>Given the integers <code>zero</code>, <code>one</code>, <code>low</code>, and <code>high</code>, we can construct a string by starting with an empty string, and then at each step perform either of the following:</p><ul><li>Append the character <code>&#39;0&#39;</code> <code>zero</code> times.</li><li>Append the character <code>&#39;1&#39;</code> <code>one</code> times.</li></ul><p>This can be performed any number of times.</p><p>A <strong>good</strong> string is a string constructed by the above process having a <strong>length</strong> between <code>low</code> and <code>high</code> (<strong>inclusive</strong>).</p><p>Return <em>the number of<strong>different</strong> good strings that can be constructed satisfying these properties.</em> Since the answer can be large, return it <strong>modulo</strong> <code>109 + 7</code>.</p><p><strong>Example 1:</strong></p><blockquote><p>Input: low = 3, high = 3, zero = 1, one = 1</p><p>Output: 8</p><p>Explanation:</p><p>One possible valid good string is &quot;011&quot;.</p><p>It can be constructed as follows: &quot;&quot; -&gt; &quot;0&quot; -&gt; &quot;01&quot; -&gt; &quot;011&quot;.</p><p>All binary strings from &quot;000&quot; to &quot;111&quot; are good strings in this example.</p></blockquote><p><strong>Example 2:</strong></p><blockquote><p>Input: low = 2, high = 3, zero = 1, one = 2</p><p>Output: 5</p><p>Explanation: The good strings are &quot;00&quot;, &quot;11&quot;, &quot;000&quot;, &quot;110&quot;, and &quot;011&quot;.</p></blockquote><p><strong>Constraints:</strong></p><ul><li><code>1 &lt;= low &lt;= high &lt;= 10^5</code></li><li><code>1 &lt;= zero, one &lt;= low</code></li></ul><h2 id="题目大意" tabindex="-1"><a class="header-anchor" href="#题目大意" aria-hidden="true">#</a> 题目大意</h2><p>给你整数 <code>zero</code> ，<code>one</code> ，<code>low</code> 和 <code>high</code> ，我们从空字符串开始构造一个字符串，每一步执行下面操作中的一种：</p><ul><li>将 <code>&#39;0&#39;</code> 在字符串末尾添加 <code>zero</code> 次。</li><li>将 <code>&#39;1&#39;</code> 在字符串末尾添加 <code>one</code> 次。</li></ul><p>以上操作可以执行任意次。</p><p>如果通过以上过程得到一个 <strong>长度</strong> 在 <code>low</code> 和 <code>high</code> 之间（包含上下边界）的字符串，那么这个字符串我们称为 <strong>好</strong> 字符串。</p><p>请你返回满足以上要求的 <strong>不同</strong> 好字符串数目。由于答案可能很大，请将结果对 <code>109 + 7</code> <strong>取余</strong> 后返回。</p><p><strong>示例 1：</strong></p><blockquote><p><strong>输入：</strong> low = 3, high = 3, zero = 1, one = 1</p><p><strong>输出：</strong> 8</p><p><strong>解释：</strong></p><p>一个可能的好字符串是 &quot;011&quot; 。</p><p>可以这样构造得到：&quot;&quot; -&gt; &quot;0&quot; -&gt; &quot;01&quot; -&gt; &quot;011&quot; 。</p><p>从 &quot;000&quot; 到 &quot;111&quot; 之间所有的二进制字符串都是好字符串。</p></blockquote><p><strong>示例 2：</strong></p><blockquote><p><strong>输入：</strong> low = 2, high = 3, zero = 1, one = 2</p><p><strong>输出：</strong> 5</p><p><strong>解释：</strong> 好字符串为 &quot;00&quot; ，&quot;11&quot; ，&quot;000&quot; ，&quot;110&quot; 和 &quot;011&quot; 。</p></blockquote><p><strong>提示：</strong></p><ul><li><code>1 &lt;= low &lt;= high &lt;= 10^5</code></li><li><code>1 &lt;= zero, one &lt;= low</code></li></ul><h2 id="解题思路" tabindex="-1"><a class="header-anchor" href="#解题思路" aria-hidden="true">#</a> 解题思路</h2><ol><li><strong>状态定义</strong></li></ol><p>定义 <code>dp[i]</code> 表示长度为 <code>i</code> 的好字符串的数量。</p><ol start="2"><li><strong>状态转移</strong></li></ol><p>长度为 <code>i</code> 的字符串可以通过以下两种方式生成：</p><ul><li>在长度为 <code>i - zero</code> 的字符串后面添加长度为 <code>zero</code> 的 <code>&#39;0&#39;</code>。</li><li>在长度为 <code>i - one</code> 的字符串后面添加长度为 <code>one</code> 的 <code>&#39;1&#39;</code>。</li></ul><p>因此，状态转移方程为：<code>dp[i] = dp[i - zero] + dp[i - one]</code> 注意要对结果取模 <code>10^9 + 7</code>。</p><ol start="3"><li><strong>初始状态</strong></li></ol><p>长度为 <code>0</code> 的好字符串只有一种（空字符串），因此 <code>dp[0] = 1</code>。</p><ol start="4"><li><strong>结果计算</strong></li></ol><p>遍历范围 <code>[low, high]</code>，将所有长度在该范围内的 <code>dp[i]</code> 累加，得到答案。</p><h4 id="复杂度分析" tabindex="-1"><a class="header-anchor" href="#复杂度分析" aria-hidden="true">#</a> 复杂度分析</h4><ul><li><p><strong>时间复杂度</strong>：<code>O(high)</code></p><ul><li>填充 <code>dp</code> 数组需要遍历 <code>1</code> 到 <code>high</code>，时间复杂度为<code>O(high)</code>。</li><li>遍历 <code>[low, high]</code> 累加结果，时间复杂度为 <code>O(high - low)</code>。</li></ul></li><li><p><strong>空间复杂度</strong>：<code>O(high)</code>，使用了长度为 <code>high + 1</code> 的数组 <code>dp</code>。</p></li></ul><h2 id="代码" tabindex="-1"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">}</span></span> <span class="token parameter">low</span>
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">}</span></span> <span class="token parameter">high</span>
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">}</span></span> <span class="token parameter">zero</span>
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">}</span></span> <span class="token parameter">one</span>
 * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">}</span></span>
 */</span>
<span class="token keyword">var</span> <span class="token function-variable function">countGoodStrings</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">low<span class="token punctuation">,</span> high<span class="token punctuation">,</span> zero<span class="token punctuation">,</span> one</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">const</span> mod <span class="token operator">=</span> <span class="token number">10</span> <span class="token operator">**</span> <span class="token number">9</span> <span class="token operator">+</span> <span class="token number">7</span><span class="token punctuation">;</span>
	<span class="token keyword">let</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>high <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 长度为 0 的情况</span>
	<span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> high<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&gt;=</span> zero<span class="token punctuation">)</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> zero<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 加入零</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&gt;=</span> one<span class="token punctuation">)</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> one<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">%</span> mod<span class="token punctuation">;</span> <span class="token comment">// 加入一</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&gt;=</span> low<span class="token punctuation">)</span> res <span class="token operator">=</span> <span class="token punctuation">(</span>res <span class="token operator">+</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">%</span> mod<span class="token punctuation">;</span> <span class="token comment">// 在 [low, high] 范围内累加结果</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">return</span> res<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="相关题目" tabindex="-1"><a class="header-anchor" href="#相关题目" aria-hidden="true">#</a> 相关题目</h2>`,40),q=n("thead",null,[n("tr",null,[n("th",{style:{"text-align":"center"}},"题号"),n("th",{style:{"text-align":"left"}},"标题"),n("th",{style:{"text-align":"center"}},"题解"),n("th",{style:{"text-align":"left"}},"标签"),n("th",{style:{"text-align":"center"}},"难度"),n("th",{style:{"text-align":"center"}},"力扣")])],-1),w=n("td",{style:{"text-align":"center"}},"70",-1),y=n("td",{style:{"text-align":"left"}},"爬楼梯",-1),x={style:{"text-align":"center"}},z={style:{"text-align":"left"}},E=n("code",null,"记忆化搜索",-1),O=n("code",null,"数学",-1),A=n("code",null,"动态规划",-1),C=n("td",{style:{"text-align":"center"}},"🟢",-1),I={style:{"text-align":"center"}},L={href:"https://leetcode.cn/problems/climbing-stairs",target:"_blank",rel:"noopener noreferrer"},N={href:"https://leetcode.com/problems/climbing-stairs",target:"_blank",rel:"noopener noreferrer"};function V(j,B){const c=p("font"),a=p("RouterLink"),e=p("ExternalLinkIcon");return r(),i("div",null,[h,n("p",null,[s("🟠 "),o(c,{color:"#ffb800"},{default:t(()=>[s("Medium")]),_:1}),s("  🔖  "),o(a,{to:"/tag/dynamic-programming.html"},{default:t(()=>[g]),_:1}),s("  🔗 "),n("a",m,[b,o(e)]),s(),n("a",_,[v,o(e)])]),f,d(" prettier-ignore "),n("table",null,[q,n("tbody",null,[n("tr",null,[w,y,n("td",x,[o(a,{to:"/problem/0070.html"},{default:t(()=>[s("[✓]")]),_:1})]),n("td",z,[o(a,{to:"/tag/memoization.html"},{default:t(()=>[E]),_:1}),s(),o(a,{to:"/tag/math.html"},{default:t(()=>[O]),_:1}),s(),o(a,{to:"/tag/dynamic-programming.html"},{default:t(()=>[A]),_:1})]),C,n("td",I,[n("a",L,[s("🀄️"),o(e)]),s(),n("a",N,[s("🔗"),o(e)])])])])])])}const S=l(k,[["render",V],["__file","2466.html.vue"]]);export{S as default};
