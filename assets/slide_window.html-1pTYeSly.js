import{_ as d,r as i,o as r,c as u,d as t,w as e,a as n,b as s,f as l,e as c}from"./app-fBVbqwGY.js";const k={},_=c(`<h1 id="_3-11-滑动窗口" tabindex="-1"><a class="header-anchor" href="#_3-11-滑动窗口" aria-hidden="true">#</a> 3.11 滑动窗口</h1><h2 id="滑动窗口解题框架" tabindex="-1"><a class="header-anchor" href="#滑动窗口解题框架" aria-hidden="true">#</a> 滑动窗口解题框架</h2><p>滑动窗口算法技巧主要用来解决子数组问题，比如让你寻找符合某个条件的最长/最短子数组。</p><p>如果用暴力解的话，你需要嵌套 <code>for</code> 循环这样穷举所有子数组，时间复杂度是 <code>O(n^2)</code>：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span> j <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token comment">// nums[i, j] 是一个子数组</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>滑动窗口算法技巧的思路也不难，就是维护一个窗口，不断滑动，然后更新答案，该算法的大致逻辑如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> right <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

<span class="token keyword">while</span> <span class="token punctuation">(</span>right <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 增大窗口</span>
    window<span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    right<span class="token operator">++</span><span class="token punctuation">;</span>

    <span class="token keyword">while</span> <span class="token punctuation">(</span>window needs shrink<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 缩小窗口</span>
        window<span class="token punctuation">.</span><span class="token function">removeFirst</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        left<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>基于滑动窗口算法框架写出的代码，时间复杂度是 <code>O(n)</code>，比嵌套 <code>for</code> 循环的暴力解法效率高。</p><blockquote><p>为啥是 <code>O(n)</code>？</p><p>肯定有读者要问了，滑动窗口框架不也用了一个嵌套 <code>while</code> 循环？为啥复杂度是 <code>O(n)</code> 呢？</p><p>简单说，指针 <code>left</code>, <code>right</code> 不会回退（它们的值只增不减），所以字符串/数组中的每个元素都只会进入窗口一次，然后被移出窗口一次，不会说有某些元素多次进入和离开窗口，所以算法的时间复杂度就和字符串/数组的长度成正比。</p><p>反观嵌套 <code>for</code> 循环的暴力解法，那个 <code>j</code> 会回退，所以某些元素会进入和离开窗口多次，所以时间复杂度就是 <code>O(n^2)</code> 了。</p></blockquote><p>下面我总结了一套滑动窗口算法的代码框架，以后遇到相关的问题，只需默写出来如下框架然后改三个地方就行，保证不会出 bug。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 滑动窗口算法伪码框架</span>
<span class="token keyword">var</span> <span class="token function-variable function">slidingWindow</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">s</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 用合适的数据结构记录窗口中的数据，根据具体场景变通</span>
    <span class="token comment">// 比如说，我想记录窗口中元素出现的次数，就用 map</span>
    <span class="token comment">// 如果我想记录窗口中的元素和，就可以只用一个 int</span>
    <span class="token keyword">var</span> window <span class="token operator">=</span> <span class="token operator">...</span><span class="token punctuation">;</span>

    <span class="token keyword">var</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> right <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>right <span class="token operator">&lt;</span> s<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// c 是将移入窗口的字符</span>
        <span class="token keyword">var</span> c <span class="token operator">=</span> s<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">;</span>
        window<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 增大窗口</span>
        right<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token comment">// 进行窗口内数据的一系列更新</span>
        <span class="token operator">...</span>

        <span class="token comment">// 判断左侧窗口是否要收缩</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>window needs shrink<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// d 是将移出窗口的字符</span>
            <span class="token keyword">var</span> d <span class="token operator">=</span> s<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">;</span>
            window<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 缩小窗口</span>
            left<span class="token operator">++</span><span class="token punctuation">;</span>
            <span class="token comment">// 进行窗口内数据的一系列更新</span>
            <span class="token operator">...</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面我们就用四道 LeetCode 原题来实践一下这个框架。</p><h3 id="最小覆盖子串" tabindex="-1"><a class="header-anchor" href="#最小覆盖子串" aria-hidden="true">#</a> 最小覆盖子串</h3>`,13),h={id:"📌-76-最小覆盖子串-leetcode",tabindex:"-1"},m=n("a",{class:"header-anchor",href:"#📌-76-最小覆盖子串-leetcode","aria-hidden":"true"},"#",-1),b={href:"https://leetcode.com/problems/minimum-window-substring/",target:"_blank",rel:"noopener noreferrer"},v=n("h4",{id:"💻-题目大意",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#💻-题目大意","aria-hidden":"true"},"#"),s(" 💻 "),n("strong",null,"题目大意")],-1),g=n("p",null,[s("给你一个字符串 "),n("code",null,"s"),s(" 、一个字符串 "),n("code",null,"t"),s(" 。返回 "),n("code",null,"s"),s(" 中涵盖 "),n("code",null,"t"),s(" 所有字符的最小子串。如果 "),n("code",null,"s"),s(" 中不存在涵盖 "),n("code",null,"t"),s(" 所有字符的子串，则返回空字符串 "),n("code",null,'""'),s(" 。")],-1),f=n("ul",null,[n("li",null,[s("对于 "),n("code",null,"t"),s(" 中重复字符，我们寻找的子字符串中该字符数量必须不少于 "),n("code",null,"t"),s(" 中该字符数量。")]),n("li",null,[s("如果 "),n("code",null,"s"),s(" 中存在这样的子串，我们保证它是唯一的答案。")])],-1),y=n("p",null,[n("strong",null,"示例 1：")],-1),w=n("blockquote",null,[n("p",null,'输入：s = "ADOBECODEBANC", t = "ABC"'),n("p",null,'输出："BANC"'),n("p",null,`解释：最小覆盖子串 "BANC" 包含来自字符串 t 的 'A'、'B' 和 'C'。`)],-1),x=n("p",null,[n("strong",null,"示例 2：")],-1),q=n("blockquote",null,[n("p",null,'输入：s = "a", t = "a"'),n("p",null,'输出："a"'),n("p",null,"解释：整个字符串 s 是最小覆盖子串。")],-1),j=n("p",null,[n("strong",null,"示例 3:")],-1),C=n("blockquote",null,[n("p",null,'输入: s = "a", t = "aa"'),n("p",null,'输出: ""'),n("p",null,"解释: t 中两个字符 'a' 均应包含在 s 的子串中，因此没有符合条件的子字符串，返回空字符串。")],-1),I=n("p",null,[n("strong",null,"提示：")],-1),A=n("ul",null,[n("li",null,[n("code",null,"m == s.length")]),n("li",null,[n("code",null,"n == t.length")]),n("li",null,[n("code",null,"1 <= m, n <= 105")]),n("li",null,[n("code",null,"s"),s(" 和 "),n("code",null,"t"),s(" 由英文字母组成")])],-1),O=n("p",null,[n("strong",null,"进阶"),s("：你能设计一个在 "),n("code",null,"o(m+n)"),s(" 时间内解决此问题的算法吗？")],-1),B=n("div",{class:"language-markdown line-numbers-mode","data-ext":"md"},[n("pre",{class:"language-markdown"},[n("code",null,[n("span",{class:"token title important"},[n("span",{class:"token punctuation"},"####"),s(" 📌 [76. 最小覆盖子串 - LeetCode](https://leetcode.com/problems/minimum-window-substring/)")]),s(`

`),n("span",{class:"token title important"},[n("span",{class:"token punctuation"},"####"),s(" 💻 **题目大意**")]),s(`

给你一个字符串 `),n("span",{class:"token code-snippet code keyword"},"`s`"),s(" 、一个字符串 "),n("span",{class:"token code-snippet code keyword"},"`t`"),s(" 。返回 "),n("span",{class:"token code-snippet code keyword"},"`s`"),s(" 中涵盖 "),n("span",{class:"token code-snippet code keyword"},"`t`"),s(" 所有字符的最小子串。如果 "),n("span",{class:"token code-snippet code keyword"},"`s`"),s(" 中不存在涵盖 "),n("span",{class:"token code-snippet code keyword"},"`t`"),s(" 所有字符的子串，则返回空字符串 "),n("span",{class:"token code-snippet code keyword"},'`""`'),s(` 。

`),n("span",{class:"token list punctuation"},"-"),s(" 对于 "),n("span",{class:"token code-snippet code keyword"},"`t`"),s(" 中重复字符，我们寻找的子字符串中该字符数量必须不少于 "),n("span",{class:"token code-snippet code keyword"},"`t`"),s(` 中该字符数量。
`),n("span",{class:"token list punctuation"},"-"),s(" 如果 "),n("span",{class:"token code-snippet code keyword"},"`s`"),s(` 中存在这样的子串，我们保证它是唯一的答案。

`),n("span",{class:"token bold"},[n("span",{class:"token punctuation"},"**"),n("span",{class:"token content"},"示例 1："),n("span",{class:"token punctuation"},"**")]),s(`

`),n("span",{class:"token blockquote punctuation"},">"),s(` 输入：s = "ADOBECODEBANC", t = "ABC"
`),n("span",{class:"token blockquote punctuation"},">"),s(`
`),n("span",{class:"token blockquote punctuation"},">"),s(` 输出："BANC"
`),n("span",{class:"token blockquote punctuation"},">"),s(`
`),n("span",{class:"token blockquote punctuation"},">"),s(` 解释：最小覆盖子串 "BANC" 包含来自字符串 t 的 'A'、'B' 和 'C'。

`),n("span",{class:"token bold"},[n("span",{class:"token punctuation"},"**"),n("span",{class:"token content"},"示例 2："),n("span",{class:"token punctuation"},"**")]),s(`

`),n("span",{class:"token blockquote punctuation"},">"),s(` 输入：s = "a", t = "a"
`),n("span",{class:"token blockquote punctuation"},">"),s(`
`),n("span",{class:"token blockquote punctuation"},">"),s(` 输出："a"
`),n("span",{class:"token blockquote punctuation"},">"),s(`
`),n("span",{class:"token blockquote punctuation"},">"),s(` 解释：整个字符串 s 是最小覆盖子串。

`),n("span",{class:"token bold"},[n("span",{class:"token punctuation"},"**"),n("span",{class:"token content"},"示例 3:"),n("span",{class:"token punctuation"},"**")]),s(`

`),n("span",{class:"token blockquote punctuation"},">"),s(` 输入: s = "a", t = "aa"
`),n("span",{class:"token blockquote punctuation"},">"),s(`
`),n("span",{class:"token blockquote punctuation"},">"),s(` 输出: ""
`),n("span",{class:"token blockquote punctuation"},">"),s(`
`),n("span",{class:"token blockquote punctuation"},">"),s(` 解释: t 中两个字符 'a' 均应包含在 s 的子串中，因此没有符合条件的子字符串，返回空字符串。

`),n("span",{class:"token bold"},[n("span",{class:"token punctuation"},"**"),n("span",{class:"token content"},"提示："),n("span",{class:"token punctuation"},"**")]),s(`

`),n("span",{class:"token list punctuation"},"-"),s(),n("span",{class:"token code-snippet code keyword"},"`m == s.length`"),s(`
`),n("span",{class:"token list punctuation"},"-"),s(),n("span",{class:"token code-snippet code keyword"},"`n == t.length`"),s(`
`),n("span",{class:"token list punctuation"},"-"),s(),n("span",{class:"token code-snippet code keyword"},"`1 <= m, n <= 105`"),s(`
`),n("span",{class:"token list punctuation"},"-"),s(),n("span",{class:"token code-snippet code keyword"},"`s`"),s(" 和 "),n("span",{class:"token code-snippet code keyword"},"`t`"),s(` 由英文字母组成

`),n("span",{class:"token bold"},[n("span",{class:"token punctuation"},"**"),n("span",{class:"token content"},"进阶"),n("span",{class:"token punctuation"},"**")]),s("：你能设计一个在 "),n("span",{class:"token code-snippet code keyword"},"`o(m+n)`"),s(` 时间内解决此问题的算法吗？
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),L=c(`<p>如果我们使用暴力解法，代码大概是这样的：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token operator">:</span>j<span class="token punctuation">]</span> 包含 t 的所有字母<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            更新答案
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>思路很直接，但是显然，这个算法的复杂度大于 <code>O(n^2)</code> 了，不好。</p><p>滑动窗口算法的思路是这样：</p><ol><li>使用双指针中的左右指针，初始化 <code>left = right = 0</code>，把索引左闭右开区间 <code>[left, right)</code> 称为一个「窗口」；</li><li>不断地增加 <code>right</code> 指针扩大窗口 <code>[left, right)</code>，直到窗口中的字符串符合要求（包含了 <code>t</code> 中的所有字符）；</li><li>停止增加 <code>right</code>，转而不断增加 <code>left</code> 指针缩小窗口 <code>[left, right)</code>，直到窗口中的字符串不再符合要求（不包含 <code>t</code> 中的所有字符了）；同时，每次增加 <code>left</code>，都要更新一轮结果；</li><li>重复第 2 和第 3 步，直到 <code>right</code> 到达字符串 <code>s</code> 的尽头；</li></ol><p>第 2 步相当于在寻找一个「可行解」，第 3 步在优化这个「可行解」，最终找到最优解，也就是最短的覆盖子串。左右指针轮流前进，窗口大小增增减减，一伸一缩，不断向右滑动，这就是「滑动窗口」这个名字的来历。</p><p>现在我们来看看这个滑动窗口代码框架怎么用：</p><p>首先，初始化 <code>window</code> 和 <code>need</code> 两个哈希表，记录窗口中的字符和需要凑齐的字符：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 记录 window 中的字符出现次数</span>
<span class="token keyword">let</span> window <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">// 记录所需的字符出现次数</span>
<span class="token keyword">let</span> need <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> c <span class="token keyword">of</span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	need<span class="token punctuation">[</span>c<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>need<span class="token punctuation">[</span>c<span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后，使用 left 和 right 变量初始化窗口的两端：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>
	right <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>
	valid <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">while</span> <span class="token punctuation">(</span>right <span class="token operator">&lt;</span> s<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">// c 是将移入窗口的字符</span>
	<span class="token keyword">let</span> c <span class="token operator">=</span> s<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token comment">// 扩大窗口</span>
	right<span class="token operator">++</span><span class="token punctuation">;</span>
	<span class="token comment">// 进行窗口内数据的一系列更新</span>
	<span class="token operator">...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中 <code>valid</code> 变量表示窗口中满足 <code>need</code> 条件的字符个数，如果 <code>valid</code> 和 <code>need.size</code> 的大小相同，则说明窗口已满足条件，已经完全覆盖了串 <code>t</code>。</p><p>现在开始套模板，只需要思考以下几个问题：</p><ol><li>什么时候应该移动 right 扩大窗口？窗口加入字符时，应该更新哪些数据？</li><li>什么时候窗口应该暂停扩大，开始移动 left 缩小窗口？从窗口移出字符时，应该更新哪些数据？</li><li>我们要的结果应该在扩大窗口时还是缩小窗口时进行更新？</li></ol><p>如果一个字符进入窗口，应该增加 <code>window</code> 计数器；如果一个字符将移出窗口的时候，应该减少 <code>window</code> 计数器；当 <code>valid</code> 满足 <code>need</code> 时应该收缩窗口；应该在收缩窗口的时候更新最终结果。</p><p>下面是完整代码：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> <span class="token function-variable function">minWindow</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">s<span class="token punctuation">,</span> t</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">let</span> need <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
		window <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> c <span class="token keyword">of</span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		need<span class="token punctuation">[</span>c<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>need<span class="token punctuation">[</span>c<span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">let</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>
		right <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>
		valid <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token comment">// 记录最小覆盖子串的起始索引及长度</span>
	<span class="token keyword">let</span> start <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>
		len <span class="token operator">=</span> <span class="token number">Infinity</span><span class="token punctuation">;</span>
	<span class="token keyword">while</span> <span class="token punctuation">(</span>right <span class="token operator">&lt;</span> s<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token comment">// c 是将移入窗口的字符</span>
		<span class="token keyword">let</span> c <span class="token operator">=</span> s<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">;</span>
		<span class="token comment">// 扩大窗口</span>
		right<span class="token operator">++</span><span class="token punctuation">;</span>
		<span class="token comment">// 进行窗口内数据的一系列更新</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>need<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			window<span class="token punctuation">[</span>c<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>window<span class="token punctuation">[</span>c<span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span>window<span class="token punctuation">[</span>c<span class="token punctuation">]</span> <span class="token operator">===</span> need<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
				valid<span class="token operator">++</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>

		<span class="token comment">// 判断左侧窗口是否要收缩</span>
		<span class="token keyword">while</span> <span class="token punctuation">(</span>valid <span class="token operator">===</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>need<span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token comment">// 在这里更新最小覆盖子串</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span>right <span class="token operator">-</span> left <span class="token operator">&lt;</span> len<span class="token punctuation">)</span> <span class="token punctuation">{</span>
				start <span class="token operator">=</span> left<span class="token punctuation">;</span>
				len <span class="token operator">=</span> right <span class="token operator">-</span> left<span class="token punctuation">;</span>
			<span class="token punctuation">}</span>
			<span class="token comment">// d 是将移出窗口的字符</span>
			<span class="token keyword">let</span> d <span class="token operator">=</span> s<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">;</span>
			<span class="token comment">// 缩小窗口</span>
			left<span class="token operator">++</span><span class="token punctuation">;</span>
			<span class="token comment">// 进行窗口内数据的一系列更新</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span>need<span class="token punctuation">[</span>d<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
				<span class="token keyword">if</span> <span class="token punctuation">(</span>window<span class="token punctuation">[</span>d<span class="token punctuation">]</span> <span class="token operator">===</span> need<span class="token punctuation">[</span>d<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
					valid<span class="token operator">--</span><span class="token punctuation">;</span>
				<span class="token punctuation">}</span>
				window<span class="token punctuation">[</span>d<span class="token punctuation">]</span><span class="token operator">--</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token comment">// 返回最小覆盖子串</span>
	<span class="token keyword">return</span> len <span class="token operator">===</span> <span class="token number">Infinity</span> <span class="token operator">?</span> <span class="token string">&#39;&#39;</span> <span class="token operator">:</span> s<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> start <span class="token operator">+</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的代码中，当我们发现某个字符在 <code>window</code> 的数量满足了 <code>need</code> 的需要，就要更新 <code>valid</code>，表示有一个字符已经满足要求。而且，两次对窗口内数据的更新操作是完全对称的。</p><p>当 <code>valid == need.size()</code> 时，说明 <code>t</code> 中所有字符已经被覆盖，已经得到一个可行的覆盖子串，现在应该开始收缩窗口了，以便得到「最小覆盖子串」。</p><p>移动 <code>left</code> 收缩窗口时，窗口内的字符都是可行解，所以应该在收缩窗口的阶段进行最小覆盖子串的更新，以便从可行解中找到长度最短的最终结果。</p><h3 id="字符串排列" tabindex="-1"><a class="header-anchor" href="#字符串排列" aria-hidden="true">#</a> 字符串排列</h3>`,21),N={id:"📌-567-字符串的排列-leetcode",tabindex:"-1"},E=n("a",{class:"header-anchor",href:"#📌-567-字符串的排列-leetcode","aria-hidden":"true"},"#",-1),T={href:"https://leetcode.com/problems/permutation-in-string/",target:"_blank",rel:"noopener noreferrer"},z=n("h4",{id:"💻-题目大意-1",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#💻-题目大意-1","aria-hidden":"true"},"#"),s(" 💻 "),n("strong",null,"题目大意")],-1),D=n("p",null,[s("给你两个字符串 "),n("code",null,"s1"),s(" 和 "),n("code",null,"s2"),s(" ，写一个函数来判断 "),n("code",null,"s2"),s(" 是否包含 "),n("code",null,"s1"),s(" 的排列。如果是，返回 "),n("code",null,"true"),s(" ；否则，返回 "),n("code",null,"false"),s(" 。")],-1),K=n("p",null,[s("换句话说，"),n("code",null,"s1"),s(" 的排列之一是 "),n("code",null,"s2"),s(" 的 "),n("strong",null,"子串"),s(" 。")],-1),S=n("p",null,[n("strong",null,"示例 1：")],-1),R=n("blockquote",null,[n("p",null,'输入：s1 = "ab" s2 = "eidbaooo"'),n("p",null,"输出：true"),n("p",null,'解释：s2 包含 s1 的排列之一 ("ba").')],-1),V=n("p",null,[n("strong",null,"示例 2：")],-1),M=n("blockquote",null,[n("p",null,'输入：s1= "ab" s2 = "eidboaoo"'),n("p",null,"输出：false")],-1),P=n("p",null,[n("strong",null,"提示：")],-1),U=n("ul",null,[n("li",null,[n("code",null,"1 <= s1.length, s2.length <= 10^4")]),n("li",null,[n("code",null,"s1"),s(" 和 "),n("code",null,"s2"),s(" 仅包含小写字母")])],-1),W=n("div",{class:"language-markdown line-numbers-mode","data-ext":"md"},[n("pre",{class:"language-markdown"},[n("code",null,[n("span",{class:"token title important"},[n("span",{class:"token punctuation"},"####"),s(" 📌 [567. 字符串的排列 - LeetCode](https://leetcode.com/problems/permutation-in-string/)")]),s(`

`),n("span",{class:"token title important"},[n("span",{class:"token punctuation"},"####"),s(" 💻 **题目大意**")]),s(`

给你两个字符串 `),n("span",{class:"token code-snippet code keyword"},"`s1`"),s(" 和 "),n("span",{class:"token code-snippet code keyword"},"`s2`"),s(" ，写一个函数来判断 "),n("span",{class:"token code-snippet code keyword"},"`s2`"),s(" 是否包含 "),n("span",{class:"token code-snippet code keyword"},"`s1`"),s(" 的排列。如果是，返回 "),n("span",{class:"token code-snippet code keyword"},"`true`"),s(" ；否则，返回 "),n("span",{class:"token code-snippet code keyword"},"`false`"),s(` 。

换句话说，`),n("span",{class:"token code-snippet code keyword"},"`s1`"),s(" 的排列之一是 "),n("span",{class:"token code-snippet code keyword"},"`s2`"),s(" 的 "),n("span",{class:"token bold"},[n("span",{class:"token punctuation"},"**"),n("span",{class:"token content"},"子串"),n("span",{class:"token punctuation"},"**")]),s(` 。

`),n("span",{class:"token bold"},[n("span",{class:"token punctuation"},"**"),n("span",{class:"token content"},"示例 1："),n("span",{class:"token punctuation"},"**")]),s(`

`),n("span",{class:"token blockquote punctuation"},">"),s(` 输入：s1 = "ab" s2 = "eidbaooo"
`),n("span",{class:"token blockquote punctuation"},">"),s(`
`),n("span",{class:"token blockquote punctuation"},">"),s(` 输出：true
`),n("span",{class:"token blockquote punctuation"},">"),s(`
`),n("span",{class:"token blockquote punctuation"},">"),s(` 解释：s2 包含 s1 的排列之一 ("ba").

`),n("span",{class:"token bold"},[n("span",{class:"token punctuation"},"**"),n("span",{class:"token content"},"示例 2："),n("span",{class:"token punctuation"},"**")]),s(`

`),n("span",{class:"token blockquote punctuation"},">"),s(` 输入：s1= "ab" s2 = "eidboaoo"
`),n("span",{class:"token blockquote punctuation"},">"),s(`
`),n("span",{class:"token blockquote punctuation"},">"),s(` 输出：false

`),n("span",{class:"token bold"},[n("span",{class:"token punctuation"},"**"),n("span",{class:"token content"},"提示："),n("span",{class:"token punctuation"},"**")]),s(`

`),n("span",{class:"token list punctuation"},"-"),s(),n("span",{class:"token code-snippet code keyword"},"`1 <= s1.length, s2.length <= 10^4`"),s(`
`),n("span",{class:"token list punctuation"},"-"),s(),n("span",{class:"token code-snippet code keyword"},"`s1`"),s(" 和 "),n("span",{class:"token code-snippet code keyword"},"`s2`"),s(` 仅包含小写字母
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),F=c(`<p>这种题目，是明显的滑动窗口算法，相当于给你一个 <code>s1</code> 和一个 <code>s2</code>，请问你 <code>s2</code> 中是否存在一个子串，包含 <code>s1</code> 中所有字符且不包含其他字符。</p><p>对于这道题的解法代码，基本上和最小覆盖子串一模一样，只需要改变几个地方：</p><p>1、本题移动 <code>left</code> 缩小窗口的时机是窗口大小大于 <code>s1.length</code> 时，因为排列的长度应该是一样的。</p><p>2、当发现 <code>valid == need.size()</code> 时，就说明窗口中就是一个合法的排列，所以立即返回 <code>true</code>。</p><p>至于如何处理窗口的扩大和缩小，和最小覆盖子串完全相同，按照解题框架即可写出这道题的答案：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>string<span class="token punctuation">}</span></span> <span class="token parameter">s1</span>
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>string<span class="token punctuation">}</span></span> <span class="token parameter">s2</span>
 * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>boolean<span class="token punctuation">}</span></span>
 */</span>
<span class="token keyword">var</span> <span class="token function-variable function">checkInclusion</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">s1<span class="token punctuation">,</span> s2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">let</span> window <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
		need <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token keyword">of</span> s1<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		need<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>need<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">let</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>
		right <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>
		valid <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

	<span class="token keyword">while</span> <span class="token punctuation">(</span>right <span class="token operator">&lt;</span> s2<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">let</span> c <span class="token operator">=</span> s2<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">;</span>
		right<span class="token operator">++</span><span class="token punctuation">;</span>

		<span class="token comment">// 进行窗口内数据的一系列更新</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>need<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			window<span class="token punctuation">[</span>c<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>window<span class="token punctuation">[</span>c<span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span>window<span class="token punctuation">[</span>c<span class="token punctuation">]</span> <span class="token operator">==</span> need<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
				valid <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>

		<span class="token comment">// 判断左侧窗口是否要收缩</span>
		<span class="token keyword">while</span> <span class="token punctuation">(</span>right <span class="token operator">-</span> left <span class="token operator">&gt;=</span> s1<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token comment">// 在这里判断是否找到了合法的子串</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span>valid <span class="token operator">==</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>need<span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
				<span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span>

			<span class="token keyword">let</span> d <span class="token operator">=</span> s2<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">;</span>
			left<span class="token operator">++</span><span class="token punctuation">;</span>

			<span class="token comment">// 进行窗口内数据的一系列更新</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span>need<span class="token punctuation">[</span>d<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
				<span class="token keyword">if</span> <span class="token punctuation">(</span>window<span class="token punctuation">[</span>d<span class="token punctuation">]</span> <span class="token operator">==</span> need<span class="token punctuation">[</span>d<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
					valid<span class="token operator">--</span><span class="token punctuation">;</span>
				<span class="token punctuation">}</span>
				window<span class="token punctuation">[</span>d<span class="token punctuation">]</span><span class="token operator">--</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>

	<span class="token comment">// 未找到符合条件的子串</span>
	<span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="找所有字母异位词" tabindex="-1"><a class="header-anchor" href="#找所有字母异位词" aria-hidden="true">#</a> 找所有字母异位词</h3>`,7),H={id:"📌-438-找到字符串中所有字母异位词-leetcode",tabindex:"-1"},G=n("a",{class:"header-anchor",href:"#📌-438-找到字符串中所有字母异位词-leetcode","aria-hidden":"true"},"#",-1),J={href:"https://leetcode.com/problems/find-all-anagrams-in-a-string/",target:"_blank",rel:"noopener noreferrer"},Q=n("h4",{id:"💻-题目大意-2",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#💻-题目大意-2","aria-hidden":"true"},"#"),s(" 💻 "),n("strong",null,"题目大意")],-1),X=n("p",null,[s("给定两个字符串 "),n("code",null,"s"),s(" 和 "),n("code",null,"p"),s("，找到 "),n("code",null,"s"),s(" 中所有 "),n("code",null,"p"),s(" 的 "),n("strong",null,"异位词"),s(" 的子串，返回这些子串的起始索引。不考虑答案输出的顺序。")],-1),Y=n("p",null,[n("strong",null,"异位词"),s(" 指由相同字母重排列形成的字符串（包括相同的字符串）。")],-1),Z=n("p",null,[n("strong",null,"示例 1：")],-1),$=n("blockquote",null,[n("p",null,'输入：s = "cbaebabacd", p = "abc"'),n("p",null,"输出：[0,6]"),n("p",null,'解释：起始索引等于 0 的子串是 "cba", 它是 "abc" 的异位词。'),n("p",null,'起始索引等于 6 的子串是 "bac", 它是 "abc" 的异位词。')],-1),nn=n("p",null,[n("strong",null,"示例 2：")],-1),sn=n("blockquote",null,[n("p",null,'输入：s = "abab", p = "ab"'),n("p",null,'输出：[0,1,2] 解释：起始索引等于 0 的子串是 "ab", 它是 "ab" 的异位词。'),n("p",null,'起始索引等于 1 的子串是 "ba", 它是 "ab" 的异位词。'),n("p",null,'起始索引等于 2 的子串是 "ab", 它是 "ab" 的异位词。')],-1),tn=n("p",null,[n("strong",null,"提示：")],-1),en=n("ul",null,[n("li",null,[n("code",null,"1 <= s.length, p.length <= 10^4")]),n("li",null,[n("code",null,"s"),s(" 和 "),n("code",null,"p"),s(" 仅包含小写字母")])],-1),an=n("div",{class:"language-markdown line-numbers-mode","data-ext":"md"},[n("pre",{class:"language-markdown"},[n("code",null,[n("span",{class:"token title important"},[n("span",{class:"token punctuation"},"####"),s(" 📌 [438. 找到字符串中所有字母异位词 - LeetCode](https://leetcode.com/problems/find-all-anagrams-in-a-string/)")]),s(`

`),n("span",{class:"token title important"},[n("span",{class:"token punctuation"},"####"),s(" 💻 **题目大意**")]),s(`

给定两个字符串 `),n("span",{class:"token code-snippet code keyword"},"`s`"),s(" 和 "),n("span",{class:"token code-snippet code keyword"},"`p`"),s("，找到 "),n("span",{class:"token code-snippet code keyword"},"`s`"),s(" 中所有 "),n("span",{class:"token code-snippet code keyword"},"`p`"),s(" 的 "),n("span",{class:"token bold"},[n("span",{class:"token punctuation"},"**"),n("span",{class:"token content"},"异位词"),n("span",{class:"token punctuation"},"**")]),s(` 的子串，返回这些子串的起始索引。不考虑答案输出的顺序。

`),n("span",{class:"token bold"},[n("span",{class:"token punctuation"},"**"),n("span",{class:"token content"},"异位词"),n("span",{class:"token punctuation"},"**")]),s(` 指由相同字母重排列形成的字符串（包括相同的字符串）。

`),n("span",{class:"token bold"},[n("span",{class:"token punctuation"},"**"),n("span",{class:"token content"},"示例 1："),n("span",{class:"token punctuation"},"**")]),s(`

`),n("span",{class:"token blockquote punctuation"},">"),s(` 输入：s = "cbaebabacd", p = "abc"
`),n("span",{class:"token blockquote punctuation"},">"),s(`
`),n("span",{class:"token blockquote punctuation"},">"),s(` 输出：[0,6]
`),n("span",{class:"token blockquote punctuation"},">"),s(`
`),n("span",{class:"token blockquote punctuation"},">"),s(` 解释：起始索引等于 0 的子串是 "cba", 它是 "abc" 的异位词。
`),n("span",{class:"token blockquote punctuation"},">"),s(`
`),n("span",{class:"token blockquote punctuation"},">"),s(` 起始索引等于 6 的子串是 "bac", 它是 "abc" 的异位词。

`),n("span",{class:"token bold"},[n("span",{class:"token punctuation"},"**"),n("span",{class:"token content"},"示例 2："),n("span",{class:"token punctuation"},"**")]),s(`

`),n("span",{class:"token blockquote punctuation"},">"),s(` 输入：s = "abab", p = "ab"
`),n("span",{class:"token blockquote punctuation"},">"),s(`
`),n("span",{class:"token blockquote punctuation"},">"),s(` 输出：[0,1,2]
`),n("span",{class:"token blockquote punctuation"},">"),s(` 解释：起始索引等于 0 的子串是 "ab", 它是 "ab" 的异位词。
`),n("span",{class:"token blockquote punctuation"},">"),s(`
`),n("span",{class:"token blockquote punctuation"},">"),s(` 起始索引等于 1 的子串是 "ba", 它是 "ab" 的异位词。
`),n("span",{class:"token blockquote punctuation"},">"),s(`
`),n("span",{class:"token blockquote punctuation"},">"),s(` 起始索引等于 2 的子串是 "ab", 它是 "ab" 的异位词。

`),n("span",{class:"token bold"},[n("span",{class:"token punctuation"},"**"),n("span",{class:"token content"},"提示："),n("span",{class:"token punctuation"},"**")]),s(`

`),n("span",{class:"token list punctuation"},"-"),s(),n("span",{class:"token code-snippet code keyword"},"`1 <= s.length, p.length <= 10^4`"),s(`
`),n("span",{class:"token list punctuation"},"-"),s(),n("span",{class:"token code-snippet code keyword"},"`s`"),s(" 和 "),n("span",{class:"token code-snippet code keyword"},"`p`"),s(` 仅包含小写字母
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),on=c(`<p>这道题的解法，基本上和上一题 字符串排列 一模一样，只需要改变返回值，找到一个合法异位词（排列）之后将起始索引加入 <code>res</code> 即可。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>string<span class="token punctuation">}</span></span> <span class="token parameter">s</span>
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>string<span class="token punctuation">}</span></span> <span class="token parameter">p</span>
 * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span>
 */</span>
<span class="token keyword">var</span> <span class="token function-variable function">findAnagrams</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">s<span class="token punctuation">,</span> p</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">let</span> window <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
		need <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token keyword">of</span> p<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		need<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>need<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">let</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>
		right <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>
		valid <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>
		<span class="token comment">// 记录结果</span>
		res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

	<span class="token keyword">while</span> <span class="token punctuation">(</span>right <span class="token operator">&lt;</span> s<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">let</span> c <span class="token operator">=</span> s<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">;</span>
		right<span class="token operator">++</span><span class="token punctuation">;</span>

		<span class="token comment">// 进行窗口内数据的一系列更新</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>need<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			window<span class="token punctuation">[</span>c<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>window<span class="token punctuation">[</span>c<span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span>window<span class="token punctuation">[</span>c<span class="token punctuation">]</span> <span class="token operator">==</span> need<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
				valid<span class="token operator">++</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>

		<span class="token comment">// 判断左侧窗口是否要收缩</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>right <span class="token operator">-</span> left <span class="token operator">==</span> p<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token comment">// 当窗口符合条件时，把起始索引加入 res</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span>valid <span class="token operator">==</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>need<span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
				res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span>

			<span class="token keyword">let</span> d <span class="token operator">=</span> s<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">;</span>
			left<span class="token operator">++</span><span class="token punctuation">;</span>

			<span class="token comment">// 进行窗口内数据的一系列更新</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span>need<span class="token punctuation">[</span>d<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
				<span class="token keyword">if</span> <span class="token punctuation">(</span>window<span class="token punctuation">[</span>d<span class="token punctuation">]</span> <span class="token operator">==</span> need<span class="token punctuation">[</span>d<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
					valid<span class="token operator">--</span><span class="token punctuation">;</span>
				<span class="token punctuation">}</span>
				window<span class="token punctuation">[</span>d<span class="token punctuation">]</span><span class="token operator">--</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> res<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="最长无重复子串" tabindex="-1"><a class="header-anchor" href="#最长无重复子串" aria-hidden="true">#</a> 最长无重复子串</h3>`,3),ln={id:"📌-3-无重复字符的最长子串-leetcode",tabindex:"-1"},cn=n("a",{class:"header-anchor",href:"#📌-3-无重复字符的最长子串-leetcode","aria-hidden":"true"},"#",-1),pn={href:"https://leetcode.com/problems/longest-substring-without-repeating-characters/",target:"_blank",rel:"noopener noreferrer"},dn=n("h4",{id:"💻-题目大意-3",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#💻-题目大意-3","aria-hidden":"true"},"#"),s(" 💻 "),n("strong",null,"题目大意")],-1),rn=n("p",null,[s("给定一个字符串 "),n("code",null,"s"),s(" ，请你找出其中不含有重复字符的 "),n("strong",null,"最长子串"),s(" 的长度。")],-1),un=n("p",null,[n("strong",null,"子字符串"),s(" 是字符串中连续的 "),n("strong",null,"非空"),s(" 字符序列。")],-1),kn=n("p",null,[n("strong",null,"示例 1：")],-1),_n=n("blockquote",null,[n("p",null,'输入：s = "abcabcbb"'),n("p",null,"输出：3"),n("p",null,'解释：因为无重复字符的最长子串是 "abc"，所以其长度为 3。')],-1),hn=n("p",null,[n("strong",null,"示例 2:")],-1),mn=n("blockquote",null,[n("p",null,'输入：s = "bbbbb"'),n("p",null,"输出：1"),n("p",null,'解释：因为无重复字符的最长子串是 "b"，所以其长度为 1。')],-1),bn=n("p",null,[n("strong",null,"示例 3:")],-1),vn=n("blockquote",null,[n("p",null,'输入：s = "pwwkew"'),n("p",null,"输出：3"),n("p",null,'解释：因为无重复字符的最长子串是 "wke"，所以其长度为 3。'),n("p",null,'请注意，你的答案必须是 子串 的长度，"pwke" 是一个子序列，不是子串。')],-1),gn=n("p",null,[n("strong",null,"提示：")],-1),fn=n("ul",null,[n("li",null,[n("code",null,"0 <= s.length <= 5 * 10^4")]),n("li",null,[n("code",null,"s"),s(" 由英文字母、数字、符号和空格组成")])],-1),yn=n("div",{class:"language-markdown line-numbers-mode","data-ext":"md"},[n("pre",{class:"language-markdown"},[n("code",null,[n("span",{class:"token title important"},[n("span",{class:"token punctuation"},"####"),s(" 📌 [3. 无重复字符的最长子串 - LeetCode](https://leetcode.com/problems/longest-substring-without-repeating-characters/)")]),s(`

`),n("span",{class:"token title important"},[n("span",{class:"token punctuation"},"####"),s(" 💻 **题目大意**")]),s(`

给定一个字符串 `),n("span",{class:"token code-snippet code keyword"},"`s`"),s(" ，请你找出其中不含有重复字符的 "),n("span",{class:"token bold"},[n("span",{class:"token punctuation"},"**"),n("span",{class:"token content"},"最长子串"),n("span",{class:"token punctuation"},"**")]),s(` 的长度。

`),n("span",{class:"token bold"},[n("span",{class:"token punctuation"},"**"),n("span",{class:"token content"},"子字符串"),n("span",{class:"token punctuation"},"**")]),s(" 是字符串中连续的 "),n("span",{class:"token bold"},[n("span",{class:"token punctuation"},"**"),n("span",{class:"token content"},"非空"),n("span",{class:"token punctuation"},"**")]),s(` 字符序列。

`),n("span",{class:"token bold"},[n("span",{class:"token punctuation"},"**"),n("span",{class:"token content"},"示例 1："),n("span",{class:"token punctuation"},"**")]),s(`

`),n("span",{class:"token blockquote punctuation"},">"),s(` 输入：s = "abcabcbb"
`),n("span",{class:"token blockquote punctuation"},">"),s(`
`),n("span",{class:"token blockquote punctuation"},">"),s(` 输出：3
`),n("span",{class:"token blockquote punctuation"},">"),s(`
`),n("span",{class:"token blockquote punctuation"},">"),s(` 解释：因为无重复字符的最长子串是 "abc"，所以其长度为 3。

`),n("span",{class:"token bold"},[n("span",{class:"token punctuation"},"**"),n("span",{class:"token content"},"示例 2:"),n("span",{class:"token punctuation"},"**")]),s(`

`),n("span",{class:"token blockquote punctuation"},">"),s(` 输入：s = "bbbbb"
`),n("span",{class:"token blockquote punctuation"},">"),s(`
`),n("span",{class:"token blockquote punctuation"},">"),s(` 输出：1
`),n("span",{class:"token blockquote punctuation"},">"),s(`
`),n("span",{class:"token blockquote punctuation"},">"),s(` 解释：因为无重复字符的最长子串是 "b"，所以其长度为 1。

`),n("span",{class:"token bold"},[n("span",{class:"token punctuation"},"**"),n("span",{class:"token content"},"示例 3:"),n("span",{class:"token punctuation"},"**")]),s(`

`),n("span",{class:"token blockquote punctuation"},">"),s(` 输入：s = "pwwkew"
`),n("span",{class:"token blockquote punctuation"},">"),s(`
`),n("span",{class:"token blockquote punctuation"},">"),s(` 输出：3
`),n("span",{class:"token blockquote punctuation"},">"),s(`
`),n("span",{class:"token blockquote punctuation"},">"),s(` 解释：因为无重复字符的最长子串是 "wke"，所以其长度为 3。
`),n("span",{class:"token blockquote punctuation"},">"),s(`
`),n("span",{class:"token blockquote punctuation"},">"),s(` 请注意，你的答案必须是 子串 的长度，"pwke" 是一个子序列，不是子串。

`),n("span",{class:"token bold"},[n("span",{class:"token punctuation"},"**"),n("span",{class:"token content"},"提示："),n("span",{class:"token punctuation"},"**")]),s(`

`),n("span",{class:"token list punctuation"},"-"),s(),n("span",{class:"token code-snippet code keyword"},"`0 <= s.length <= 5 * 10^4`"),s(`
`),n("span",{class:"token list punctuation"},"-"),s(),n("span",{class:"token code-snippet code keyword"},"`s`"),s(` 由英文字母、数字、符号和空格组成
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),wn=c(`<p>这题变简单了，连 <code>need</code> 和 <code>valid</code> 都不需要，更新窗口内数据只需要简单的更新计数器 <code>window</code> 即可。</p><p>当 <code>window[c]</code> 值大于 <code>1</code> 时，说明窗口中存在重复字符，不符合条件，就该移动 <code>left</code> 缩小窗口了。</p><p>唯一需要注意的是，在哪里更新结果 <code>res</code> 呢？</p><p>这里和之前不一样，要在收缩窗口完成后更新 res，因为窗口收缩的 <code>while</code> 条件是存在重复元素，换句话说收缩完成后一定保证窗口中没有重复。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>string<span class="token punctuation">}</span></span> <span class="token parameter">s</span>
 * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">}</span></span>
 */</span>
<span class="token keyword">var</span> <span class="token function-variable function">lengthOfLongestSubstring</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">s</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">let</span> window <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
		left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>
		right <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>
		<span class="token comment">// 记录结果</span>
		res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

	<span class="token keyword">while</span> <span class="token punctuation">(</span>right <span class="token operator">&lt;</span> s<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">let</span> c <span class="token operator">=</span> s<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">;</span>
		right<span class="token operator">++</span><span class="token punctuation">;</span>
		<span class="token comment">// 进行窗口内数据的一系列更新</span>
		window<span class="token punctuation">[</span>c<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>window<span class="token punctuation">[</span>c<span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
		<span class="token comment">// 判断左侧窗口是否要收缩</span>
		<span class="token keyword">while</span> <span class="token punctuation">(</span>window<span class="token punctuation">[</span>c<span class="token punctuation">]</span> <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">let</span> d <span class="token operator">=</span> s<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">;</span>
			left<span class="token operator">++</span><span class="token punctuation">;</span>
			<span class="token comment">// 进行窗口内数据的一系列更新</span>
			window<span class="token punctuation">[</span>d<span class="token punctuation">]</span><span class="token operator">--</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		<span class="token comment">// 在这里更新答案</span>
		res <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> right <span class="token operator">-</span> left<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">return</span> res<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>遇到子数组/子串相关的问题，只要能回答出来以下几个问题，就能运用滑动窗口算法：</p><ol><li>什么时候应该扩大窗口？</li><li>什么时候应该缩小窗口？</li><li>什么时候应该更新答案？</li></ol><p>好了，滑动窗口算法模板就讲到这里，希望你能理解其中的思想，记住算法模板并融会贯通。</p>`,8),xn=n("h2",{id:"相关题目",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#相关题目","aria-hidden":"true"},"#"),s(" 相关题目")],-1),qn=n("h4",{id:"固定长度窗口",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#固定长度窗口","aria-hidden":"true"},"#"),s(" 固定长度窗口")],-1),jn=n("thead",null,[n("tr",null,[n("th",{style:{"text-align":"center"}},"题号"),n("th",{style:{"text-align":"left"}},"标题"),n("th",{style:{"text-align":"center"}},"题解"),n("th",{style:{"text-align":"left"}},"标签"),n("th",{style:{"text-align":"center"}},"难度"),n("th",{style:{"text-align":"center"}},"力扣")])],-1),Cn=n("td",{style:{"text-align":"center"}},"1343",-1),In=n("td",{style:{"text-align":"left"}},"大小为 K 且平均值大于等于阈值的子数组数目",-1),An=n("td",{style:{"text-align":"center"}},null,-1),On={style:{"text-align":"left"}},Bn=n("code",null,"数组",-1),Ln=n("code",null,"滑动窗口",-1),Nn=n("td",{style:{"text-align":"center"}},"🟠",-1),En={style:{"text-align":"center"}},Tn={href:"https://leetcode.cn/problems/number-of-sub-arrays-of-size-k-and-average-greater-than-or-equal-to-threshold",target:"_blank",rel:"noopener noreferrer"},zn={href:"https://leetcode.com/problems/number-of-sub-arrays-of-size-k-and-average-greater-than-or-equal-to-threshold",target:"_blank",rel:"noopener noreferrer"},Dn=n("td",{style:{"text-align":"center"}},"643",-1),Kn=n("td",{style:{"text-align":"left"}},"子数组最大平均数 I",-1),Sn={style:{"text-align":"center"}},Rn={style:{"text-align":"left"}},Vn=n("code",null,"数组",-1),Mn=n("code",null,"滑动窗口",-1),Pn=n("td",{style:{"text-align":"center"}},"🟢",-1),Un={style:{"text-align":"center"}},Wn={href:"https://leetcode.cn/problems/maximum-average-subarray-i",target:"_blank",rel:"noopener noreferrer"},Fn={href:"https://leetcode.com/problems/maximum-average-subarray-i",target:"_blank",rel:"noopener noreferrer"},Hn=n("td",{style:{"text-align":"center"}},"1052",-1),Gn=n("td",{style:{"text-align":"left"}},"爱生气的书店老板",-1),Jn=n("td",{style:{"text-align":"center"}},null,-1),Qn={style:{"text-align":"left"}},Xn=n("code",null,"数组",-1),Yn=n("code",null,"滑动窗口",-1),Zn=n("td",{style:{"text-align":"center"}},"🟠",-1),$n={style:{"text-align":"center"}},ns={href:"https://leetcode.cn/problems/grumpy-bookstore-owner",target:"_blank",rel:"noopener noreferrer"},ss={href:"https://leetcode.com/problems/grumpy-bookstore-owner",target:"_blank",rel:"noopener noreferrer"},ts=n("td",{style:{"text-align":"center"}},"1423",-1),es=n("td",{style:{"text-align":"left"}},"可获得的最大点数",-1),as=n("td",{style:{"text-align":"center"}},null,-1),os={style:{"text-align":"left"}},ls=n("code",null,"数组",-1),cs=n("code",null,"前缀和",-1),ps=n("code",null,"滑动窗口",-1),is=n("td",{style:{"text-align":"center"}},"🟠",-1),ds={style:{"text-align":"center"}},rs={href:"https://leetcode.cn/problems/maximum-points-you-can-obtain-from-cards",target:"_blank",rel:"noopener noreferrer"},us={href:"https://leetcode.com/problems/maximum-points-you-can-obtain-from-cards",target:"_blank",rel:"noopener noreferrer"},ks=n("td",{style:{"text-align":"center"}},"1456",-1),_s=n("td",{style:{"text-align":"left"}},"定长子串中元音的最大数目",-1),hs={style:{"text-align":"center"}},ms={style:{"text-align":"left"}},bs=n("code",null,"字符串",-1),vs=n("code",null,"滑动窗口",-1),gs=n("td",{style:{"text-align":"center"}},"🟠",-1),fs={style:{"text-align":"center"}},ys={href:"https://leetcode.cn/problems/maximum-number-of-vowels-in-a-substring-of-given-length",target:"_blank",rel:"noopener noreferrer"},ws={href:"https://leetcode.com/problems/maximum-number-of-vowels-in-a-substring-of-given-length",target:"_blank",rel:"noopener noreferrer"},xs=n("td",{style:{"text-align":"center"}},"567",-1),qs=n("td",{style:{"text-align":"left"}},"字符串的排列",-1),js={style:{"text-align":"center"}},Cs={style:{"text-align":"left"}},Is=n("code",null,"哈希表",-1),As=n("code",null,"双指针",-1),Os=n("code",null,"字符串",-1),Bs=n("code",null,"1+",-1),Ls=n("td",{style:{"text-align":"center"}},"🟠",-1),Ns={style:{"text-align":"center"}},Es={href:"https://leetcode.cn/problems/permutation-in-string",target:"_blank",rel:"noopener noreferrer"},Ts={href:"https://leetcode.com/problems/permutation-in-string",target:"_blank",rel:"noopener noreferrer"},zs=n("td",{style:{"text-align":"center"}},"1100",-1),Ds=n("td",{style:{"text-align":"left"}},"长度为 K 的无重复字符子串 🔒",-1),Ks=n("td",{style:{"text-align":"center"}},null,-1),Ss={style:{"text-align":"left"}},Rs=n("code",null,"哈希表",-1),Vs=n("code",null,"字符串",-1),Ms=n("code",null,"滑动窗口",-1),Ps=n("td",{style:{"text-align":"center"}},"🟠",-1),Us={style:{"text-align":"center"}},Ws={href:"https://leetcode.cn/problems/find-k-length-substrings-with-no-repeated-characters",target:"_blank",rel:"noopener noreferrer"},Fs={href:"https://leetcode.com/problems/find-k-length-substrings-with-no-repeated-characters",target:"_blank",rel:"noopener noreferrer"},Hs=n("td",{style:{"text-align":"center"}},"1151",-1),Gs=n("td",{style:{"text-align":"left"}},"最少交换次数来组合所有的 1 🔒",-1),Js=n("td",{style:{"text-align":"center"}},null,-1),Qs={style:{"text-align":"left"}},Xs=n("code",null,"数组",-1),Ys=n("code",null,"滑动窗口",-1),Zs=n("td",{style:{"text-align":"center"}},"🟠",-1),$s={style:{"text-align":"center"}},nt={href:"https://leetcode.cn/problems/minimum-swaps-to-group-all-1s-together",target:"_blank",rel:"noopener noreferrer"},st={href:"https://leetcode.com/problems/minimum-swaps-to-group-all-1s-together",target:"_blank",rel:"noopener noreferrer"},tt=n("td",{style:{"text-align":"center"}},"1176",-1),et=n("td",{style:{"text-align":"left"}},"健身计划评估 🔒",-1),at=n("td",{style:{"text-align":"center"}},null,-1),ot={style:{"text-align":"left"}},lt=n("code",null,"数组",-1),ct=n("code",null,"滑动窗口",-1),pt=n("td",{style:{"text-align":"center"}},"🟢",-1),it={style:{"text-align":"center"}},dt={href:"https://leetcode.cn/problems/diet-plan-performance",target:"_blank",rel:"noopener noreferrer"},rt={href:"https://leetcode.com/problems/diet-plan-performance",target:"_blank",rel:"noopener noreferrer"},ut=n("td",{style:{"text-align":"center"}},"438",-1),kt=n("td",{style:{"text-align":"left"}},"找到字符串中所有字母异位词",-1),_t={style:{"text-align":"center"}},ht={style:{"text-align":"left"}},mt=n("code",null,"哈希表",-1),bt=n("code",null,"字符串",-1),vt=n("code",null,"滑动窗口",-1),gt=n("td",{style:{"text-align":"center"}},"🟠",-1),ft={style:{"text-align":"center"}},yt={href:"https://leetcode.cn/problems/find-all-anagrams-in-a-string",target:"_blank",rel:"noopener noreferrer"},wt={href:"https://leetcode.com/problems/find-all-anagrams-in-a-string",target:"_blank",rel:"noopener noreferrer"},xt=n("td",{style:{"text-align":"center"}},"995",-1),qt=n("td",{style:{"text-align":"left"}},"K 连续位的最小翻转次数",-1),jt=n("td",{style:{"text-align":"center"}},null,-1),Ct={style:{"text-align":"left"}},It=n("code",null,"位运算",-1),At=n("code",null,"队列",-1),Ot=n("code",null,"数组",-1),Bt=n("code",null,"2+",-1),Lt=n("td",{style:{"text-align":"center"}},"🔴",-1),Nt={style:{"text-align":"center"}},Et={href:"https://leetcode.cn/problems/minimum-number-of-k-consecutive-bit-flips",target:"_blank",rel:"noopener noreferrer"},Tt={href:"https://leetcode.com/problems/minimum-number-of-k-consecutive-bit-flips",target:"_blank",rel:"noopener noreferrer"},zt=n("td",{style:{"text-align":"center"}},"683",-1),Dt=n("td",{style:{"text-align":"left"}},"K 个关闭的灯泡 🔒",-1),Kt=n("td",{style:{"text-align":"center"}},null,-1),St={style:{"text-align":"left"}},Rt=n("code",null,"树状数组",-1),Vt=n("code",null,"线段树",-1),Mt=n("code",null,"队列",-1),Pt=n("code",null,"5+",-1),Ut=n("td",{style:{"text-align":"center"}},"🔴",-1),Wt={style:{"text-align":"center"}},Ft={href:"https://leetcode.cn/problems/k-empty-slots",target:"_blank",rel:"noopener noreferrer"},Ht={href:"https://leetcode.com/problems/k-empty-slots",target:"_blank",rel:"noopener noreferrer"},Gt=n("td",{style:{"text-align":"center"}},"220",-1),Jt=n("td",{style:{"text-align":"left"}},"存在重复元素 III",-1),Qt=n("td",{style:{"text-align":"center"}},null,-1),Xt={style:{"text-align":"left"}},Yt=n("code",null,"数组",-1),Zt=n("code",null,"桶排序",-1),$t=n("code",null,"有序集合",-1),ne=n("code",null,"2+",-1),se=n("td",{style:{"text-align":"center"}},"🔴",-1),te={style:{"text-align":"center"}},ee={href:"https://leetcode.cn/problems/contains-duplicate-iii",target:"_blank",rel:"noopener noreferrer"},ae={href:"https://leetcode.com/problems/contains-duplicate-iii",target:"_blank",rel:"noopener noreferrer"},oe=n("td",{style:{"text-align":"center"}},"239",-1),le=n("td",{style:{"text-align":"left"}},"滑动窗口最大值",-1),ce={style:{"text-align":"center"}},pe={style:{"text-align":"left"}},ie=n("code",null,"队列",-1),de=n("code",null,"数组",-1),re=n("code",null,"滑动窗口",-1),ue=n("code",null,"2+",-1),ke=n("td",{style:{"text-align":"center"}},"🔴",-1),_e={style:{"text-align":"center"}},he={href:"https://leetcode.cn/problems/sliding-window-maximum",target:"_blank",rel:"noopener noreferrer"},me={href:"https://leetcode.com/problems/sliding-window-maximum",target:"_blank",rel:"noopener noreferrer"},be=n("td",{style:{"text-align":"center"}},"480",-1),ve=n("td",{style:{"text-align":"left"}},"滑动窗口中位数",-1),ge=n("td",{style:{"text-align":"center"}},null,-1),fe={style:{"text-align":"left"}},ye=n("code",null,"数组",-1),we=n("code",null,"哈希表",-1),xe=n("code",null,"滑动窗口",-1),qe=n("code",null,"1+",-1),je=n("td",{style:{"text-align":"center"}},"🔴",-1),Ce={style:{"text-align":"center"}},Ie={href:"https://leetcode.cn/problems/sliding-window-median",target:"_blank",rel:"noopener noreferrer"},Ae={href:"https://leetcode.com/problems/sliding-window-median",target:"_blank",rel:"noopener noreferrer"},Oe=n("h4",{id:"不定长度窗口",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#不定长度窗口","aria-hidden":"true"},"#"),s(" 不定长度窗口")],-1),Be=n("thead",null,[n("tr",null,[n("th",{style:{"text-align":"center"}},"题号"),n("th",{style:{"text-align":"left"}},"标题"),n("th",{style:{"text-align":"center"}},"题解"),n("th",{style:{"text-align":"left"}},"标签"),n("th",{style:{"text-align":"center"}},"难度"),n("th",{style:{"text-align":"center"}},"力扣")])],-1),Le=n("td",{style:{"text-align":"center"}},"674",-1),Ne=n("td",{style:{"text-align":"left"}},"最长连续递增序列",-1),Ee={style:{"text-align":"center"}},Te={style:{"text-align":"left"}},ze=n("code",null,"数组",-1),De=n("td",{style:{"text-align":"center"}},"🟢",-1),Ke={style:{"text-align":"center"}},Se={href:"https://leetcode.cn/problems/longest-continuous-increasing-subsequence",target:"_blank",rel:"noopener noreferrer"},Re={href:"https://leetcode.com/problems/longest-continuous-increasing-subsequence",target:"_blank",rel:"noopener noreferrer"},Ve=n("td",{style:{"text-align":"center"}},"485",-1),Me=n("td",{style:{"text-align":"left"}},"最大连续 1 的个数",-1),Pe={style:{"text-align":"center"}},Ue={style:{"text-align":"left"}},We=n("code",null,"数组",-1),Fe=n("td",{style:{"text-align":"center"}},"🟢",-1),He={style:{"text-align":"center"}},Ge={href:"https://leetcode.cn/problems/max-consecutive-ones",target:"_blank",rel:"noopener noreferrer"},Je={href:"https://leetcode.com/problems/max-consecutive-ones",target:"_blank",rel:"noopener noreferrer"},Qe=n("td",{style:{"text-align":"center"}},"487",-1),Xe=n("td",{style:{"text-align":"left"}},"最大连续1的个数 II 🔒",-1),Ye=n("td",{style:{"text-align":"center"}},null,-1),Ze={style:{"text-align":"left"}},$e=n("code",null,"数组",-1),na=n("code",null,"动态规划",-1),sa=n("code",null,"滑动窗口",-1),ta=n("td",{style:{"text-align":"center"}},"🟠",-1),ea={style:{"text-align":"center"}},aa={href:"https://leetcode.cn/problems/max-consecutive-ones-ii",target:"_blank",rel:"noopener noreferrer"},oa={href:"https://leetcode.com/problems/max-consecutive-ones-ii",target:"_blank",rel:"noopener noreferrer"},la=n("td",{style:{"text-align":"center"}},"76",-1),ca=n("td",{style:{"text-align":"left"}},"最小覆盖子串",-1),pa={style:{"text-align":"center"}},ia={style:{"text-align":"left"}},da=n("code",null,"哈希表",-1),ra=n("code",null,"字符串",-1),ua=n("code",null,"滑动窗口",-1),ka=n("td",{style:{"text-align":"center"}},"🔴",-1),_a={style:{"text-align":"center"}},ha={href:"https://leetcode.cn/problems/minimum-window-substring",target:"_blank",rel:"noopener noreferrer"},ma={href:"https://leetcode.com/problems/minimum-window-substring",target:"_blank",rel:"noopener noreferrer"},ba=n("td",{style:{"text-align":"center"}},"718",-1),va=n("td",{style:{"text-align":"left"}},"最长重复子数组",-1),ga=n("td",{style:{"text-align":"center"}},null,-1),fa={style:{"text-align":"left"}},ya=n("code",null,"数组",-1),wa=n("code",null,"二分查找",-1),xa=n("code",null,"动态规划",-1),qa=n("code",null,"3+",-1),ja=n("td",{style:{"text-align":"center"}},"🟠",-1),Ca={style:{"text-align":"center"}},Ia={href:"https://leetcode.cn/problems/maximum-length-of-repeated-subarray",target:"_blank",rel:"noopener noreferrer"},Aa={href:"https://leetcode.com/problems/maximum-length-of-repeated-subarray",target:"_blank",rel:"noopener noreferrer"},Oa=n("td",{style:{"text-align":"center"}},"209",-1),Ba=n("td",{style:{"text-align":"left"}},"长度最小的子数组",-1),La={style:{"text-align":"center"}},Na={style:{"text-align":"left"}},Ea=n("code",null,"数组",-1),Ta=n("code",null,"二分查找",-1),za=n("code",null,"前缀和",-1),Da=n("code",null,"1+",-1),Ka=n("td",{style:{"text-align":"center"}},"🟠",-1),Sa={style:{"text-align":"center"}},Ra={href:"https://leetcode.cn/problems/minimum-size-subarray-sum",target:"_blank",rel:"noopener noreferrer"},Va={href:"https://leetcode.com/problems/minimum-size-subarray-sum",target:"_blank",rel:"noopener noreferrer"},Ma=n("td",{style:{"text-align":"center"}},"862",-1),Pa=n("td",{style:{"text-align":"left"}},"和至少为 K 的最短子数组",-1),Ua={style:{"text-align":"center"}},Wa={style:{"text-align":"left"}},Fa=n("code",null,"队列",-1),Ha=n("code",null,"数组",-1),Ga=n("code",null,"二分查找",-1),Ja=n("code",null,"4+",-1),Qa=n("td",{style:{"text-align":"center"}},"🔴",-1),Xa={style:{"text-align":"center"}},Ya={href:"https://leetcode.cn/problems/shortest-subarray-with-sum-at-least-k",target:"_blank",rel:"noopener noreferrer"},Za={href:"https://leetcode.com/problems/shortest-subarray-with-sum-at-least-k",target:"_blank",rel:"noopener noreferrer"},$a=n("td",{style:{"text-align":"center"}},"1004",-1),no=n("td",{style:{"text-align":"left"}},"最大连续1的个数 III",-1),so={style:{"text-align":"center"}},to={style:{"text-align":"left"}},eo=n("code",null,"数组",-1),ao=n("code",null,"二分查找",-1),oo=n("code",null,"前缀和",-1),lo=n("code",null,"1+",-1),co=n("td",{style:{"text-align":"center"}},"🟠",-1),po={style:{"text-align":"center"}},io={href:"https://leetcode.cn/problems/max-consecutive-ones-iii",target:"_blank",rel:"noopener noreferrer"},ro={href:"https://leetcode.com/problems/max-consecutive-ones-iii",target:"_blank",rel:"noopener noreferrer"},uo=n("td",{style:{"text-align":"center"}},"1658",-1),ko=n("td",{style:{"text-align":"left"}},"将 x 减到 0 的最小操作数",-1),_o=n("td",{style:{"text-align":"center"}},null,-1),ho={style:{"text-align":"left"}},mo=n("code",null,"数组",-1),bo=n("code",null,"哈希表",-1),vo=n("code",null,"二分查找",-1),go=n("code",null,"2+",-1),fo=n("td",{style:{"text-align":"center"}},"🟠",-1),yo={style:{"text-align":"center"}},wo={href:"https://leetcode.cn/problems/minimum-operations-to-reduce-x-to-zero",target:"_blank",rel:"noopener noreferrer"},xo={href:"https://leetcode.com/problems/minimum-operations-to-reduce-x-to-zero",target:"_blank",rel:"noopener noreferrer"},qo=n("td",{style:{"text-align":"center"}},"424",-1),jo=n("td",{style:{"text-align":"left"}},"替换后的最长重复字符",-1),Co={style:{"text-align":"center"}},Io={style:{"text-align":"left"}},Ao=n("code",null,"哈希表",-1),Oo=n("code",null,"字符串",-1),Bo=n("code",null,"滑动窗口",-1),Lo=n("td",{style:{"text-align":"center"}},"🟠",-1),No={style:{"text-align":"center"}},Eo={href:"https://leetcode.cn/problems/longest-repeating-character-replacement",target:"_blank",rel:"noopener noreferrer"},To={href:"https://leetcode.com/problems/longest-repeating-character-replacement",target:"_blank",rel:"noopener noreferrer"},zo=n("td",{style:{"text-align":"center"}},"3",-1),Do=n("td",{style:{"text-align":"left"}},"无重复字符的最长子串",-1),Ko={style:{"text-align":"center"}},So={style:{"text-align":"left"}},Ro=n("code",null,"哈希表",-1),Vo=n("code",null,"字符串",-1),Mo=n("code",null,"滑动窗口",-1),Po=n("td",{style:{"text-align":"center"}},"🟠",-1),Uo={style:{"text-align":"center"}},Wo={href:"https://leetcode.cn/problems/longest-substring-without-repeating-characters",target:"_blank",rel:"noopener noreferrer"},Fo={href:"https://leetcode.com/problems/longest-substring-without-repeating-characters",target:"_blank",rel:"noopener noreferrer"},Ho=n("td",{style:{"text-align":"center"}},"1695",-1),Go=n("td",{style:{"text-align":"left"}},"删除子数组的最大得分",-1),Jo=n("td",{style:{"text-align":"center"}},null,-1),Qo={style:{"text-align":"left"}},Xo=n("code",null,"数组",-1),Yo=n("code",null,"哈希表",-1),Zo=n("code",null,"滑动窗口",-1),$o=n("td",{style:{"text-align":"center"}},"🟠",-1),nl={style:{"text-align":"center"}},sl={href:"https://leetcode.cn/problems/maximum-erasure-value",target:"_blank",rel:"noopener noreferrer"},tl={href:"https://leetcode.com/problems/maximum-erasure-value",target:"_blank",rel:"noopener noreferrer"},el=n("td",{style:{"text-align":"center"}},"1208",-1),al=n("td",{style:{"text-align":"left"}},"尽可能使字符串相等",-1),ol=n("td",{style:{"text-align":"center"}},null,-1),ll={style:{"text-align":"left"}},cl=n("code",null,"字符串",-1),pl=n("code",null,"二分查找",-1),il=n("code",null,"前缀和",-1),dl=n("code",null,"1+",-1),rl=n("td",{style:{"text-align":"center"}},"🟠",-1),ul={style:{"text-align":"center"}},kl={href:"https://leetcode.cn/problems/get-equal-substrings-within-budget",target:"_blank",rel:"noopener noreferrer"},_l={href:"https://leetcode.com/problems/get-equal-substrings-within-budget",target:"_blank",rel:"noopener noreferrer"},hl=n("td",{style:{"text-align":"center"}},"1493",-1),ml=n("td",{style:{"text-align":"left"}},"删掉一个元素以后全为 1 的最长子数组",-1),bl={style:{"text-align":"center"}},vl={style:{"text-align":"left"}},gl=n("code",null,"数组",-1),fl=n("code",null,"动态规划",-1),yl=n("code",null,"滑动窗口",-1),wl=n("td",{style:{"text-align":"center"}},"🟠",-1),xl={style:{"text-align":"center"}},ql={href:"https://leetcode.cn/problems/longest-subarray-of-1s-after-deleting-one-element",target:"_blank",rel:"noopener noreferrer"},jl={href:"https://leetcode.com/problems/longest-subarray-of-1s-after-deleting-one-element",target:"_blank",rel:"noopener noreferrer"},Cl=n("td",{style:{"text-align":"center"}},"727",-1),Il=n("td",{style:{"text-align":"left"}},"最小窗口子序列 🔒",-1),Al=n("td",{style:{"text-align":"center"}},null,-1),Ol={style:{"text-align":"left"}},Bl=n("code",null,"字符串",-1),Ll=n("code",null,"动态规划",-1),Nl=n("code",null,"滑动窗口",-1),El=n("td",{style:{"text-align":"center"}},"🔴",-1),Tl={style:{"text-align":"center"}},zl={href:"https://leetcode.cn/problems/minimum-window-subsequence",target:"_blank",rel:"noopener noreferrer"},Dl={href:"https://leetcode.com/problems/minimum-window-subsequence",target:"_blank",rel:"noopener noreferrer"},Kl=n("td",{style:{"text-align":"center"}},"159",-1),Sl=n("td",{style:{"text-align":"left"}},"至多包含两个不同字符的最长子串 🔒",-1),Rl=n("td",{style:{"text-align":"center"}},null,-1),Vl={style:{"text-align":"left"}},Ml=n("code",null,"哈希表",-1),Pl=n("code",null,"字符串",-1),Ul=n("code",null,"滑动窗口",-1),Wl=n("td",{style:{"text-align":"center"}},"🟠",-1),Fl={style:{"text-align":"center"}},Hl={href:"https://leetcode.cn/problems/longest-substring-with-at-most-two-distinct-characters",target:"_blank",rel:"noopener noreferrer"},Gl={href:"https://leetcode.com/problems/longest-substring-with-at-most-two-distinct-characters",target:"_blank",rel:"noopener noreferrer"},Jl=n("td",{style:{"text-align":"center"}},"340",-1),Ql=n("td",{style:{"text-align":"left"}},"至多包含 K 个不同字符的最长子串 🔒",-1),Xl=n("td",{style:{"text-align":"center"}},null,-1),Yl={style:{"text-align":"left"}},Zl=n("code",null,"哈希表",-1),$l=n("code",null,"字符串",-1),nc=n("code",null,"滑动窗口",-1),sc=n("td",{style:{"text-align":"center"}},"🟠",-1),tc={style:{"text-align":"center"}},ec={href:"https://leetcode.cn/problems/longest-substring-with-at-most-k-distinct-characters",target:"_blank",rel:"noopener noreferrer"},ac={href:"https://leetcode.com/problems/longest-substring-with-at-most-k-distinct-characters",target:"_blank",rel:"noopener noreferrer"},oc=n("td",{style:{"text-align":"center"}},"795",-1),lc=n("td",{style:{"text-align":"left"}},"区间子数组个数",-1),cc=n("td",{style:{"text-align":"center"}},null,-1),pc={style:{"text-align":"left"}},ic=n("code",null,"数组",-1),dc=n("code",null,"双指针",-1),rc=n("td",{style:{"text-align":"center"}},"🟠",-1),uc={style:{"text-align":"center"}},kc={href:"https://leetcode.cn/problems/number-of-subarrays-with-bounded-maximum",target:"_blank",rel:"noopener noreferrer"},_c={href:"https://leetcode.com/problems/number-of-subarrays-with-bounded-maximum",target:"_blank",rel:"noopener noreferrer"},hc=n("td",{style:{"text-align":"center"}},"992",-1),mc=n("td",{style:{"text-align":"left"}},"K 个不同整数的子数组",-1),bc=n("td",{style:{"text-align":"center"}},null,-1),vc={style:{"text-align":"left"}},gc=n("code",null,"数组",-1),fc=n("code",null,"哈希表",-1),yc=n("code",null,"计数",-1),wc=n("code",null,"1+",-1),xc=n("td",{style:{"text-align":"center"}},"🔴",-1),qc={style:{"text-align":"center"}},jc={href:"https://leetcode.cn/problems/subarrays-with-k-different-integers",target:"_blank",rel:"noopener noreferrer"},Cc={href:"https://leetcode.com/problems/subarrays-with-k-different-integers",target:"_blank",rel:"noopener noreferrer"},Ic=n("td",{style:{"text-align":"center"}},"713",-1),Ac=n("td",{style:{"text-align":"left"}},"乘积小于 K 的子数组",-1),Oc=n("td",{style:{"text-align":"center"}},null,-1),Bc={style:{"text-align":"left"}},Lc=n("code",null,"数组",-1),Nc=n("code",null,"二分查找",-1),Ec=n("code",null,"前缀和",-1),Tc=n("code",null,"1+",-1),zc=n("td",{style:{"text-align":"center"}},"🟠",-1),Dc={style:{"text-align":"center"}},Kc={href:"https://leetcode.cn/problems/subarray-product-less-than-k",target:"_blank",rel:"noopener noreferrer"},Sc={href:"https://leetcode.com/problems/subarray-product-less-than-k",target:"_blank",rel:"noopener noreferrer"},Rc=n("td",{style:{"text-align":"center"}},"904",-1),Vc=n("td",{style:{"text-align":"left"}},"水果成篮",-1),Mc=n("td",{style:{"text-align":"center"}},null,-1),Pc={style:{"text-align":"left"}},Uc=n("code",null,"数组",-1),Wc=n("code",null,"哈希表",-1),Fc=n("code",null,"滑动窗口",-1),Hc=n("td",{style:{"text-align":"center"}},"🟠",-1),Gc={style:{"text-align":"center"}},Jc={href:"https://leetcode.cn/problems/fruit-into-baskets",target:"_blank",rel:"noopener noreferrer"},Qc={href:"https://leetcode.com/problems/fruit-into-baskets",target:"_blank",rel:"noopener noreferrer"},Xc=n("td",{style:{"text-align":"center"}},"1358",-1),Yc=n("td",{style:{"text-align":"left"}},"包含所有三种字符的子字符串数目",-1),Zc={style:{"text-align":"center"}},$c={style:{"text-align":"left"}},np=n("code",null,"哈希表",-1),sp=n("code",null,"字符串",-1),tp=n("code",null,"滑动窗口",-1),ep=n("td",{style:{"text-align":"center"}},"🟠",-1),ap={style:{"text-align":"center"}},op={href:"https://leetcode.cn/problems/number-of-substrings-containing-all-three-characters",target:"_blank",rel:"noopener noreferrer"},lp={href:"https://leetcode.com/problems/number-of-substrings-containing-all-three-characters",target:"_blank",rel:"noopener noreferrer"},cp=n("td",{style:{"text-align":"center"}},"467",-1),pp=n("td",{style:{"text-align":"left"}},"环绕字符串中唯一的子字符串",-1),ip={style:{"text-align":"center"}},dp={style:{"text-align":"left"}},rp=n("code",null,"字符串",-1),up=n("code",null,"动态规划",-1),kp=n("td",{style:{"text-align":"center"}},"🟠",-1),_p={style:{"text-align":"center"}},hp={href:"https://leetcode.cn/problems/unique-substrings-in-wraparound-string",target:"_blank",rel:"noopener noreferrer"},mp={href:"https://leetcode.com/problems/unique-substrings-in-wraparound-string",target:"_blank",rel:"noopener noreferrer"},bp=n("td",{style:{"text-align":"center"}},"1438",-1),vp=n("td",{style:{"text-align":"left"}},"绝对差不超过限制的最长连续子数组",-1),gp=n("td",{style:{"text-align":"center"}},null,-1),fp={style:{"text-align":"left"}},yp=n("code",null,"队列",-1),wp=n("code",null,"数组",-1),xp=n("code",null,"有序集合",-1),qp=n("code",null,"3+",-1),jp=n("td",{style:{"text-align":"center"}},"🟠",-1),Cp={style:{"text-align":"center"}},Ip={href:"https://leetcode.cn/problems/longest-continuous-subarray-with-absolute-diff-less-than-or-equal-to-limit",target:"_blank",rel:"noopener noreferrer"},Ap={href:"https://leetcode.com/problems/longest-continuous-subarray-with-absolute-diff-less-than-or-equal-to-limit",target:"_blank",rel:"noopener noreferrer"};function Op(Bp,Lp){const o=i("ExternalLinkIcon"),p=i("MdDemo"),a=i("RouterLink");return r(),u("div",null,[_,t(p,{title:"相关题目",id:"md-demo-44"},{default:e(()=>[n("h4",h,[m,s(" 📌 "),n("a",b,[s("76. 最小覆盖子串 - LeetCode"),t(o)])]),v,g,f,y,w,x,q,j,C,I,A,O]),code:e(()=>[B]),_:1}),L,t(p,{title:"相关题目",id:"md-demo-226"},{default:e(()=>[n("h4",N,[E,s(" 📌 "),n("a",T,[s("567. 字符串的排列 - LeetCode"),t(o)])]),z,D,K,S,R,V,M,P,U]),code:e(()=>[W]),_:1}),F,t(p,{title:"相关题目",id:"md-demo-300"},{default:e(()=>[n("h4",H,[G,s(" 📌 "),n("a",J,[s("438. 找到字符串中所有字母异位词 - LeetCode"),t(o)])]),Q,X,Y,Z,$,nn,sn,tn,en]),code:e(()=>[an]),_:1}),on,t(p,{title:"相关题目",id:"md-demo-371"},{default:e(()=>[n("h4",ln,[cn,s(" 📌 "),n("a",pn,[s("3. 无重复字符的最长子串 - LeetCode"),t(o)])]),dn,rn,un,kn,_n,hn,mn,bn,vn,gn,fn]),code:e(()=>[yn]),_:1}),wn,l(" START TABLE "),l(" Please keep comment here to allow auto update "),l(" DON'T EDIT THIS SECTION, INSTEAD RE-RUN `npm run lc` TO UPDATE "),xn,qn,l(" prettier-ignore "),n("table",null,[jn,n("tbody",null,[n("tr",null,[Cn,In,An,n("td",On,[t(a,{to:"/tag/array.html"},{default:e(()=>[Bn]),_:1}),s(),t(a,{to:"/tag/sliding-window.html"},{default:e(()=>[Ln]),_:1})]),Nn,n("td",En,[n("a",Tn,[s("🀄️"),t(o)]),s(),n("a",zn,[s("🔗"),t(o)])])]),n("tr",null,[Dn,Kn,n("td",Sn,[t(a,{to:"/problem/0643.html"},{default:e(()=>[s("[✓]")]),_:1})]),n("td",Rn,[t(a,{to:"/tag/array.html"},{default:e(()=>[Vn]),_:1}),s(),t(a,{to:"/tag/sliding-window.html"},{default:e(()=>[Mn]),_:1})]),Pn,n("td",Un,[n("a",Wn,[s("🀄️"),t(o)]),s(),n("a",Fn,[s("🔗"),t(o)])])]),n("tr",null,[Hn,Gn,Jn,n("td",Qn,[t(a,{to:"/tag/array.html"},{default:e(()=>[Xn]),_:1}),s(),t(a,{to:"/tag/sliding-window.html"},{default:e(()=>[Yn]),_:1})]),Zn,n("td",$n,[n("a",ns,[s("🀄️"),t(o)]),s(),n("a",ss,[s("🔗"),t(o)])])]),n("tr",null,[ts,es,as,n("td",os,[t(a,{to:"/tag/array.html"},{default:e(()=>[ls]),_:1}),s(),t(a,{to:"/tag/prefix-sum.html"},{default:e(()=>[cs]),_:1}),s(),t(a,{to:"/tag/sliding-window.html"},{default:e(()=>[ps]),_:1})]),is,n("td",ds,[n("a",rs,[s("🀄️"),t(o)]),s(),n("a",us,[s("🔗"),t(o)])])]),n("tr",null,[ks,_s,n("td",hs,[t(a,{to:"/problem/1456.html"},{default:e(()=>[s("[✓]")]),_:1})]),n("td",ms,[t(a,{to:"/tag/string.html"},{default:e(()=>[bs]),_:1}),s(),t(a,{to:"/tag/sliding-window.html"},{default:e(()=>[vs]),_:1})]),gs,n("td",fs,[n("a",ys,[s("🀄️"),t(o)]),s(),n("a",ws,[s("🔗"),t(o)])])]),n("tr",null,[xs,qs,n("td",js,[t(a,{to:"/problem/0567.html"},{default:e(()=>[s("[✓]")]),_:1})]),n("td",Cs,[t(a,{to:"/tag/hash-table.html"},{default:e(()=>[Is]),_:1}),s(),t(a,{to:"/tag/two-pointers.html"},{default:e(()=>[As]),_:1}),s(),t(a,{to:"/tag/string.html"},{default:e(()=>[Os]),_:1}),s(),Bs]),Ls,n("td",Ns,[n("a",Es,[s("🀄️"),t(o)]),s(),n("a",Ts,[s("🔗"),t(o)])])]),n("tr",null,[zs,Ds,Ks,n("td",Ss,[t(a,{to:"/tag/hash-table.html"},{default:e(()=>[Rs]),_:1}),s(),t(a,{to:"/tag/string.html"},{default:e(()=>[Vs]),_:1}),s(),t(a,{to:"/tag/sliding-window.html"},{default:e(()=>[Ms]),_:1})]),Ps,n("td",Us,[n("a",Ws,[s("🀄️"),t(o)]),s(),n("a",Fs,[s("🔗"),t(o)])])]),n("tr",null,[Hs,Gs,Js,n("td",Qs,[t(a,{to:"/tag/array.html"},{default:e(()=>[Xs]),_:1}),s(),t(a,{to:"/tag/sliding-window.html"},{default:e(()=>[Ys]),_:1})]),Zs,n("td",$s,[n("a",nt,[s("🀄️"),t(o)]),s(),n("a",st,[s("🔗"),t(o)])])]),n("tr",null,[tt,et,at,n("td",ot,[t(a,{to:"/tag/array.html"},{default:e(()=>[lt]),_:1}),s(),t(a,{to:"/tag/sliding-window.html"},{default:e(()=>[ct]),_:1})]),pt,n("td",it,[n("a",dt,[s("🀄️"),t(o)]),s(),n("a",rt,[s("🔗"),t(o)])])]),n("tr",null,[ut,kt,n("td",_t,[t(a,{to:"/problem/0438.html"},{default:e(()=>[s("[✓]")]),_:1})]),n("td",ht,[t(a,{to:"/tag/hash-table.html"},{default:e(()=>[mt]),_:1}),s(),t(a,{to:"/tag/string.html"},{default:e(()=>[bt]),_:1}),s(),t(a,{to:"/tag/sliding-window.html"},{default:e(()=>[vt]),_:1})]),gt,n("td",ft,[n("a",yt,[s("🀄️"),t(o)]),s(),n("a",wt,[s("🔗"),t(o)])])]),n("tr",null,[xt,qt,jt,n("td",Ct,[t(a,{to:"/tag/bit-manipulation.html"},{default:e(()=>[It]),_:1}),s(),t(a,{to:"/tag/queue.html"},{default:e(()=>[At]),_:1}),s(),t(a,{to:"/tag/array.html"},{default:e(()=>[Ot]),_:1}),s(),Bt]),Lt,n("td",Nt,[n("a",Et,[s("🀄️"),t(o)]),s(),n("a",Tt,[s("🔗"),t(o)])])]),n("tr",null,[zt,Dt,Kt,n("td",St,[t(a,{to:"/tag/binary-indexed-tree.html"},{default:e(()=>[Rt]),_:1}),s(),t(a,{to:"/tag/segment-tree.html"},{default:e(()=>[Vt]),_:1}),s(),t(a,{to:"/tag/queue.html"},{default:e(()=>[Mt]),_:1}),s(),Pt]),Ut,n("td",Wt,[n("a",Ft,[s("🀄️"),t(o)]),s(),n("a",Ht,[s("🔗"),t(o)])])]),n("tr",null,[Gt,Jt,Qt,n("td",Xt,[t(a,{to:"/tag/array.html"},{default:e(()=>[Yt]),_:1}),s(),t(a,{to:"/tag/bucket-sort.html"},{default:e(()=>[Zt]),_:1}),s(),t(a,{to:"/tag/ordered-set.html"},{default:e(()=>[$t]),_:1}),s(),ne]),se,n("td",te,[n("a",ee,[s("🀄️"),t(o)]),s(),n("a",ae,[s("🔗"),t(o)])])]),n("tr",null,[oe,le,n("td",ce,[t(a,{to:"/problem/0239.html"},{default:e(()=>[s("[✓]")]),_:1})]),n("td",pe,[t(a,{to:"/tag/queue.html"},{default:e(()=>[ie]),_:1}),s(),t(a,{to:"/tag/array.html"},{default:e(()=>[de]),_:1}),s(),t(a,{to:"/tag/sliding-window.html"},{default:e(()=>[re]),_:1}),s(),ue]),ke,n("td",_e,[n("a",he,[s("🀄️"),t(o)]),s(),n("a",me,[s("🔗"),t(o)])])]),n("tr",null,[be,ve,ge,n("td",fe,[t(a,{to:"/tag/array.html"},{default:e(()=>[ye]),_:1}),s(),t(a,{to:"/tag/hash-table.html"},{default:e(()=>[we]),_:1}),s(),t(a,{to:"/tag/sliding-window.html"},{default:e(()=>[xe]),_:1}),s(),qe]),je,n("td",Ce,[n("a",Ie,[s("🀄️"),t(o)]),s(),n("a",Ae,[s("🔗"),t(o)])])])])]),Oe,l(" prettier-ignore "),n("table",null,[Be,n("tbody",null,[n("tr",null,[Le,Ne,n("td",Ee,[t(a,{to:"/problem/0674.html"},{default:e(()=>[s("[✓]")]),_:1})]),n("td",Te,[t(a,{to:"/tag/array.html"},{default:e(()=>[ze]),_:1})]),De,n("td",Ke,[n("a",Se,[s("🀄️"),t(o)]),s(),n("a",Re,[s("🔗"),t(o)])])]),n("tr",null,[Ve,Me,n("td",Pe,[t(a,{to:"/problem/0485.html"},{default:e(()=>[s("[✓]")]),_:1})]),n("td",Ue,[t(a,{to:"/tag/array.html"},{default:e(()=>[We]),_:1})]),Fe,n("td",He,[n("a",Ge,[s("🀄️"),t(o)]),s(),n("a",Je,[s("🔗"),t(o)])])]),n("tr",null,[Qe,Xe,Ye,n("td",Ze,[t(a,{to:"/tag/array.html"},{default:e(()=>[$e]),_:1}),s(),t(a,{to:"/tag/dynamic-programming.html"},{default:e(()=>[na]),_:1}),s(),t(a,{to:"/tag/sliding-window.html"},{default:e(()=>[sa]),_:1})]),ta,n("td",ea,[n("a",aa,[s("🀄️"),t(o)]),s(),n("a",oa,[s("🔗"),t(o)])])]),n("tr",null,[la,ca,n("td",pa,[t(a,{to:"/problem/0076.html"},{default:e(()=>[s("[✓]")]),_:1})]),n("td",ia,[t(a,{to:"/tag/hash-table.html"},{default:e(()=>[da]),_:1}),s(),t(a,{to:"/tag/string.html"},{default:e(()=>[ra]),_:1}),s(),t(a,{to:"/tag/sliding-window.html"},{default:e(()=>[ua]),_:1})]),ka,n("td",_a,[n("a",ha,[s("🀄️"),t(o)]),s(),n("a",ma,[s("🔗"),t(o)])])]),n("tr",null,[ba,va,ga,n("td",fa,[t(a,{to:"/tag/array.html"},{default:e(()=>[ya]),_:1}),s(),t(a,{to:"/tag/binary-search.html"},{default:e(()=>[wa]),_:1}),s(),t(a,{to:"/tag/dynamic-programming.html"},{default:e(()=>[xa]),_:1}),s(),qa]),ja,n("td",Ca,[n("a",Ia,[s("🀄️"),t(o)]),s(),n("a",Aa,[s("🔗"),t(o)])])]),n("tr",null,[Oa,Ba,n("td",La,[t(a,{to:"/problem/0209.html"},{default:e(()=>[s("[✓]")]),_:1})]),n("td",Na,[t(a,{to:"/tag/array.html"},{default:e(()=>[Ea]),_:1}),s(),t(a,{to:"/tag/binary-search.html"},{default:e(()=>[Ta]),_:1}),s(),t(a,{to:"/tag/prefix-sum.html"},{default:e(()=>[za]),_:1}),s(),Da]),Ka,n("td",Sa,[n("a",Ra,[s("🀄️"),t(o)]),s(),n("a",Va,[s("🔗"),t(o)])])]),n("tr",null,[Ma,Pa,n("td",Ua,[t(a,{to:"/problem/0862.html"},{default:e(()=>[s("[✓]")]),_:1})]),n("td",Wa,[t(a,{to:"/tag/queue.html"},{default:e(()=>[Fa]),_:1}),s(),t(a,{to:"/tag/array.html"},{default:e(()=>[Ha]),_:1}),s(),t(a,{to:"/tag/binary-search.html"},{default:e(()=>[Ga]),_:1}),s(),Ja]),Qa,n("td",Xa,[n("a",Ya,[s("🀄️"),t(o)]),s(),n("a",Za,[s("🔗"),t(o)])])]),n("tr",null,[$a,no,n("td",so,[t(a,{to:"/problem/1004.html"},{default:e(()=>[s("[✓]")]),_:1})]),n("td",to,[t(a,{to:"/tag/array.html"},{default:e(()=>[eo]),_:1}),s(),t(a,{to:"/tag/binary-search.html"},{default:e(()=>[ao]),_:1}),s(),t(a,{to:"/tag/prefix-sum.html"},{default:e(()=>[oo]),_:1}),s(),lo]),co,n("td",po,[n("a",io,[s("🀄️"),t(o)]),s(),n("a",ro,[s("🔗"),t(o)])])]),n("tr",null,[uo,ko,_o,n("td",ho,[t(a,{to:"/tag/array.html"},{default:e(()=>[mo]),_:1}),s(),t(a,{to:"/tag/hash-table.html"},{default:e(()=>[bo]),_:1}),s(),t(a,{to:"/tag/binary-search.html"},{default:e(()=>[vo]),_:1}),s(),go]),fo,n("td",yo,[n("a",wo,[s("🀄️"),t(o)]),s(),n("a",xo,[s("🔗"),t(o)])])]),n("tr",null,[qo,jo,n("td",Co,[t(a,{to:"/problem/0424.html"},{default:e(()=>[s("[✓]")]),_:1})]),n("td",Io,[t(a,{to:"/tag/hash-table.html"},{default:e(()=>[Ao]),_:1}),s(),t(a,{to:"/tag/string.html"},{default:e(()=>[Oo]),_:1}),s(),t(a,{to:"/tag/sliding-window.html"},{default:e(()=>[Bo]),_:1})]),Lo,n("td",No,[n("a",Eo,[s("🀄️"),t(o)]),s(),n("a",To,[s("🔗"),t(o)])])]),n("tr",null,[zo,Do,n("td",Ko,[t(a,{to:"/problem/0003.html"},{default:e(()=>[s("[✓]")]),_:1})]),n("td",So,[t(a,{to:"/tag/hash-table.html"},{default:e(()=>[Ro]),_:1}),s(),t(a,{to:"/tag/string.html"},{default:e(()=>[Vo]),_:1}),s(),t(a,{to:"/tag/sliding-window.html"},{default:e(()=>[Mo]),_:1})]),Po,n("td",Uo,[n("a",Wo,[s("🀄️"),t(o)]),s(),n("a",Fo,[s("🔗"),t(o)])])]),n("tr",null,[Ho,Go,Jo,n("td",Qo,[t(a,{to:"/tag/array.html"},{default:e(()=>[Xo]),_:1}),s(),t(a,{to:"/tag/hash-table.html"},{default:e(()=>[Yo]),_:1}),s(),t(a,{to:"/tag/sliding-window.html"},{default:e(()=>[Zo]),_:1})]),$o,n("td",nl,[n("a",sl,[s("🀄️"),t(o)]),s(),n("a",tl,[s("🔗"),t(o)])])]),n("tr",null,[el,al,ol,n("td",ll,[t(a,{to:"/tag/string.html"},{default:e(()=>[cl]),_:1}),s(),t(a,{to:"/tag/binary-search.html"},{default:e(()=>[pl]),_:1}),s(),t(a,{to:"/tag/prefix-sum.html"},{default:e(()=>[il]),_:1}),s(),dl]),rl,n("td",ul,[n("a",kl,[s("🀄️"),t(o)]),s(),n("a",_l,[s("🔗"),t(o)])])]),n("tr",null,[hl,ml,n("td",bl,[t(a,{to:"/problem/1493.html"},{default:e(()=>[s("[✓]")]),_:1})]),n("td",vl,[t(a,{to:"/tag/array.html"},{default:e(()=>[gl]),_:1}),s(),t(a,{to:"/tag/dynamic-programming.html"},{default:e(()=>[fl]),_:1}),s(),t(a,{to:"/tag/sliding-window.html"},{default:e(()=>[yl]),_:1})]),wl,n("td",xl,[n("a",ql,[s("🀄️"),t(o)]),s(),n("a",jl,[s("🔗"),t(o)])])]),n("tr",null,[Cl,Il,Al,n("td",Ol,[t(a,{to:"/tag/string.html"},{default:e(()=>[Bl]),_:1}),s(),t(a,{to:"/tag/dynamic-programming.html"},{default:e(()=>[Ll]),_:1}),s(),t(a,{to:"/tag/sliding-window.html"},{default:e(()=>[Nl]),_:1})]),El,n("td",Tl,[n("a",zl,[s("🀄️"),t(o)]),s(),n("a",Dl,[s("🔗"),t(o)])])]),n("tr",null,[Kl,Sl,Rl,n("td",Vl,[t(a,{to:"/tag/hash-table.html"},{default:e(()=>[Ml]),_:1}),s(),t(a,{to:"/tag/string.html"},{default:e(()=>[Pl]),_:1}),s(),t(a,{to:"/tag/sliding-window.html"},{default:e(()=>[Ul]),_:1})]),Wl,n("td",Fl,[n("a",Hl,[s("🀄️"),t(o)]),s(),n("a",Gl,[s("🔗"),t(o)])])]),n("tr",null,[Jl,Ql,Xl,n("td",Yl,[t(a,{to:"/tag/hash-table.html"},{default:e(()=>[Zl]),_:1}),s(),t(a,{to:"/tag/string.html"},{default:e(()=>[$l]),_:1}),s(),t(a,{to:"/tag/sliding-window.html"},{default:e(()=>[nc]),_:1})]),sc,n("td",tc,[n("a",ec,[s("🀄️"),t(o)]),s(),n("a",ac,[s("🔗"),t(o)])])]),n("tr",null,[oc,lc,cc,n("td",pc,[t(a,{to:"/tag/array.html"},{default:e(()=>[ic]),_:1}),s(),t(a,{to:"/tag/two-pointers.html"},{default:e(()=>[dc]),_:1})]),rc,n("td",uc,[n("a",kc,[s("🀄️"),t(o)]),s(),n("a",_c,[s("🔗"),t(o)])])]),n("tr",null,[hc,mc,bc,n("td",vc,[t(a,{to:"/tag/array.html"},{default:e(()=>[gc]),_:1}),s(),t(a,{to:"/tag/hash-table.html"},{default:e(()=>[fc]),_:1}),s(),t(a,{to:"/tag/counting.html"},{default:e(()=>[yc]),_:1}),s(),wc]),xc,n("td",qc,[n("a",jc,[s("🀄️"),t(o)]),s(),n("a",Cc,[s("🔗"),t(o)])])]),n("tr",null,[Ic,Ac,Oc,n("td",Bc,[t(a,{to:"/tag/array.html"},{default:e(()=>[Lc]),_:1}),s(),t(a,{to:"/tag/binary-search.html"},{default:e(()=>[Nc]),_:1}),s(),t(a,{to:"/tag/prefix-sum.html"},{default:e(()=>[Ec]),_:1}),s(),Tc]),zc,n("td",Dc,[n("a",Kc,[s("🀄️"),t(o)]),s(),n("a",Sc,[s("🔗"),t(o)])])]),n("tr",null,[Rc,Vc,Mc,n("td",Pc,[t(a,{to:"/tag/array.html"},{default:e(()=>[Uc]),_:1}),s(),t(a,{to:"/tag/hash-table.html"},{default:e(()=>[Wc]),_:1}),s(),t(a,{to:"/tag/sliding-window.html"},{default:e(()=>[Fc]),_:1})]),Hc,n("td",Gc,[n("a",Jc,[s("🀄️"),t(o)]),s(),n("a",Qc,[s("🔗"),t(o)])])]),n("tr",null,[Xc,Yc,n("td",Zc,[t(a,{to:"/problem/1358.html"},{default:e(()=>[s("[✓]")]),_:1})]),n("td",$c,[t(a,{to:"/tag/hash-table.html"},{default:e(()=>[np]),_:1}),s(),t(a,{to:"/tag/string.html"},{default:e(()=>[sp]),_:1}),s(),t(a,{to:"/tag/sliding-window.html"},{default:e(()=>[tp]),_:1})]),ep,n("td",ap,[n("a",op,[s("🀄️"),t(o)]),s(),n("a",lp,[s("🔗"),t(o)])])]),n("tr",null,[cp,pp,n("td",ip,[t(a,{to:"/problem/0467.html"},{default:e(()=>[s("[✓]")]),_:1})]),n("td",dp,[t(a,{to:"/tag/string.html"},{default:e(()=>[rp]),_:1}),s(),t(a,{to:"/tag/dynamic-programming.html"},{default:e(()=>[up]),_:1})]),kp,n("td",_p,[n("a",hp,[s("🀄️"),t(o)]),s(),n("a",mp,[s("🔗"),t(o)])])]),n("tr",null,[bp,vp,gp,n("td",fp,[t(a,{to:"/tag/queue.html"},{default:e(()=>[yp]),_:1}),s(),t(a,{to:"/tag/array.html"},{default:e(()=>[wp]),_:1}),s(),t(a,{to:"/tag/ordered-set.html"},{default:e(()=>[xp]),_:1}),s(),qp]),jp,n("td",Cp,[n("a",Ip,[s("🀄️"),t(o)]),s(),n("a",Ap,[s("🔗"),t(o)])])])])])])}const Ep=d(k,[["render",Op],["__file","slide_window.html.vue"]]);export{Ep as default};
