import{_ as r,r as l,o as i,c as p,a as t,b as n,d as e,w as s,f as d,e as u}from"./app-B5EG-zH0.js";const h={},_=t("h1",{id:"_413-等差数列划分",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#_413-等差数列划分","aria-hidden":"true"},"#"),n(" 413. 等差数列划分")],-1),m=t("code",null,"数组",-1),g=t("code",null,"动态规划",-1),k=t("code",null,"滑动窗口",-1),f={href:"https://leetcode.cn/problems/arithmetic-slices",target:"_blank",rel:"noopener noreferrer"},b=t("code",null,"力扣",-1),y={href:"https://leetcode.com/problems/arithmetic-slices",target:"_blank",rel:"noopener noreferrer"},x=t("code",null,"LeetCode",-1),v=u(`<h2 id="题目" tabindex="-1"><a class="header-anchor" href="#题目" aria-hidden="true">#</a> 题目</h2><p>An integer array is called arithmetic if it consists of <strong>at least three elements</strong> and if the difference between any two consecutive elements is the same.</p><ul><li>For example, <code>[1,3,5,7,9]</code>, <code>[7,7,7,7]</code>, and <code>[3,-1,-5,-9]</code> are arithmetic sequences.</li></ul><p>Given an integer array <code>nums</code>, return <em>the number of arithmetic<strong>subarrays</strong> of</em> <code>nums</code>.</p><p>A <strong>subarray</strong> is a contiguous subsequence of the array.</p><p><strong>Example 1:</strong></p><blockquote><p>Input: nums = [1,2,3,4]</p><p>Output: 3</p><p>Explanation: We have 3 arithmetic slices in nums: [1, 2, 3], [2, 3, 4] and [1,2,3,4] itself.</p></blockquote><p><strong>Example 2:</strong></p><blockquote><p>Input: nums = [1]</p><p>Output: 0</p></blockquote><p><strong>Constraints:</strong></p><ul><li><code>1 &lt;= nums.length &lt;= 5000</code></li><li><code>-1000 &lt;= nums[i] &lt;= 1000</code></li></ul><h2 id="题目大意" tabindex="-1"><a class="header-anchor" href="#题目大意" aria-hidden="true">#</a> 题目大意</h2><p>如果一个数列 <strong>至少有三个元素</strong> ，并且任意两个相邻元素之差相同，则称该数列为等差数列。</p><ul><li>例如，<code>[1,3,5,7,9]</code>、<code>[7,7,7,7]</code> 和 <code>[3,-1,-5,-9]</code> 都是等差数列。</li></ul><p>给你一个整数数组 <code>nums</code> ，返回数组 <code>nums</code> 中所有为等差数组的 <strong>子数组</strong> 个数。</p><p><strong>子数组</strong> 是数组中的一个连续序列。</p><p><strong>示例 1：</strong></p><blockquote><p><strong>输入：</strong> nums = [1,2,3,4]</p><p><strong>输出：</strong> 3</p><p><strong>解释：</strong> nums 中有三个子等差数组：[1, 2, 3]、[2, 3, 4] 和 [1,2,3,4] 自身。</p></blockquote><p><strong>示例 2：</strong></p><blockquote><p><strong>输入：</strong> nums = [1]</p><p><strong>输出：</strong> 0</p></blockquote><p><strong>提示：</strong></p><ul><li><code>1 &lt;= nums.length &lt;= 5000</code></li><li><code>-1000 &lt;= nums[i] &lt;= 1000</code></li></ul><h2 id="解题思路" tabindex="-1"><a class="header-anchor" href="#解题思路" aria-hidden="true">#</a> 解题思路</h2><p><strong>滑动窗口 + 差分判断</strong></p><ol><li>初始化左指针 <code>left</code> 和计数器 <code>count</code>。</li><li>遍历数组，用两个指针 <code>left</code> 和 <code>right</code> 维护一个窗口，每当窗口末端元素与前一个元素的差值与窗口首端差值保持一致时，说明形成了新的等差数列，</li><li>判断是否满足等差条件： <ul><li>若满足，对于窗口 <code>[left, right]</code> 中的等差数列，通过组合数学计算得知，以 <code>right</code> 结尾的等差子数组数量为 <code>right - left - 1</code>，直接累加新的等差子数组数量。</li><li>否则将 <code>left</code> 更新为当前右指针的前一个位置 <code>right - 1</code>，开始尝试新的差值。</li></ul></li><li>返回累加结果。</li></ol><h4 id="复杂度分析" tabindex="-1"><a class="header-anchor" href="#复杂度分析" aria-hidden="true">#</a> 复杂度分析</h4><ul><li><strong>时间复杂度</strong>：<code>O(n)</code>，单次线性遍历数组即可完成判断。</li><li><strong>空间复杂度</strong>：<code>O(1)</code>，仅使用常数额外空间。</li></ul><h2 id="代码" tabindex="-1"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span> <span class="token parameter">nums</span>
 * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">}</span></span>
 */</span>
<span class="token keyword">var</span> <span class="token function-variable function">numberOfArithmeticSlices</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">nums</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">let</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> right <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> right <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> right<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">const</span> diff <span class="token operator">=</span> nums<span class="token punctuation">[</span>left <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">-</span> nums<span class="token punctuation">[</span>right <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> diff<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			count <span class="token operator">+=</span> right <span class="token operator">-</span> left <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
			left <span class="token operator">=</span> right <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> count<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="相关题目" tabindex="-1"><a class="header-anchor" href="#相关题目" aria-hidden="true">#</a> 相关题目</h2>`,30),w=t("thead",null,[t("tr",null,[t("th",{style:{"text-align":"center"}},"题号"),t("th",{style:{"text-align":"left"}},"标题"),t("th",{style:{"text-align":"center"}},"题解"),t("th",{style:{"text-align":"left"}},"标签"),t("th",{style:{"text-align":"center"}},"难度"),t("th",{style:{"text-align":"center"}},"力扣")])],-1),q=t("td",{style:{"text-align":"center"}},"446",-1),E=t("td",{style:{"text-align":"left"}},"等差数列划分 II - 子序列",-1),I=t("td",{style:{"text-align":"center"}},null,-1),C={style:{"text-align":"left"}},L=t("code",null,"数组",-1),N=t("code",null,"动态规划",-1),O=t("td",{style:{"text-align":"center"}},"🔴",-1),V={style:{"text-align":"center"}},j={href:"https://leetcode.cn/problems/arithmetic-slices-ii-subsequence",target:"_blank",rel:"noopener noreferrer"},A={href:"https://leetcode.com/problems/arithmetic-slices-ii-subsequence",target:"_blank",rel:"noopener noreferrer"},B=t("td",{style:{"text-align":"center"}},"1630",-1),z=t("td",{style:{"text-align":"left"}},"等差子数组",-1),R=t("td",{style:{"text-align":"center"}},null,-1),S={style:{"text-align":"left"}},F=t("code",null,"数组",-1),G=t("code",null,"哈希表",-1),M=t("code",null,"排序",-1),T=t("td",{style:{"text-align":"center"}},"🟠",-1),W={style:{"text-align":"center"}},D={href:"https://leetcode.cn/problems/arithmetic-subarrays",target:"_blank",rel:"noopener noreferrer"},H={href:"https://leetcode.com/problems/arithmetic-subarrays",target:"_blank",rel:"noopener noreferrer"},J=t("td",{style:{"text-align":"center"}},"2348",-1),K=t("td",{style:{"text-align":"left"}},"全 0 子数组的数目",-1),P=t("td",{style:{"text-align":"center"}},null,-1),Q={style:{"text-align":"left"}},U=t("code",null,"数组",-1),X=t("code",null,"数学",-1),Y=t("td",{style:{"text-align":"center"}},"🟠",-1),Z={style:{"text-align":"center"}},$={href:"https://leetcode.cn/problems/number-of-zero-filled-subarrays",target:"_blank",rel:"noopener noreferrer"},tt={href:"https://leetcode.com/problems/number-of-zero-filled-subarrays",target:"_blank",rel:"noopener noreferrer"},nt=t("td",{style:{"text-align":"center"}},"2414",-1),et=t("td",{style:{"text-align":"left"}},"最长的字母序连续子字符串的长度",-1),st=t("td",{style:{"text-align":"center"}},null,-1),at={style:{"text-align":"left"}},ot=t("code",null,"字符串",-1),lt=t("td",{style:{"text-align":"center"}},"🟠",-1),ct={style:{"text-align":"center"}},rt={href:"https://leetcode.cn/problems/length-of-the-longest-alphabetical-continuous-substring",target:"_blank",rel:"noopener noreferrer"},it={href:"https://leetcode.com/problems/length-of-the-longest-alphabetical-continuous-substring",target:"_blank",rel:"noopener noreferrer"};function pt(dt,ut){const c=l("font"),a=l("RouterLink"),o=l("ExternalLinkIcon");return i(),p("div",null,[_,t("p",null,[n("🟠 "),e(c,{color:"#ffb800"},{default:s(()=>[n("Medium")]),_:1}),n("  🔖  "),e(a,{to:"/tag/array.html"},{default:s(()=>[m]),_:1}),n(),e(a,{to:"/tag/dynamic-programming.html"},{default:s(()=>[g]),_:1}),n(),e(a,{to:"/tag/sliding-window.html"},{default:s(()=>[k]),_:1}),n("  🔗 "),t("a",f,[b,e(o)]),n(),t("a",y,[x,e(o)])]),v,d(" prettier-ignore "),t("table",null,[w,t("tbody",null,[t("tr",null,[q,E,I,t("td",C,[e(a,{to:"/tag/array.html"},{default:s(()=>[L]),_:1}),n(),e(a,{to:"/tag/dynamic-programming.html"},{default:s(()=>[N]),_:1})]),O,t("td",V,[t("a",j,[n("🀄️"),e(o)]),n(),t("a",A,[n("🔗"),e(o)])])]),t("tr",null,[B,z,R,t("td",S,[e(a,{to:"/tag/array.html"},{default:s(()=>[F]),_:1}),n(),e(a,{to:"/tag/hash-table.html"},{default:s(()=>[G]),_:1}),n(),e(a,{to:"/tag/sorting.html"},{default:s(()=>[M]),_:1})]),T,t("td",W,[t("a",D,[n("🀄️"),e(o)]),n(),t("a",H,[n("🔗"),e(o)])])]),t("tr",null,[J,K,P,t("td",Q,[e(a,{to:"/tag/array.html"},{default:s(()=>[U]),_:1}),n(),e(a,{to:"/tag/math.html"},{default:s(()=>[X]),_:1})]),Y,t("td",Z,[t("a",$,[n("🀄️"),e(o)]),n(),t("a",tt,[n("🔗"),e(o)])])]),t("tr",null,[nt,et,st,t("td",at,[e(a,{to:"/tag/string.html"},{default:s(()=>[ot]),_:1})]),lt,t("td",ct,[t("a",rt,[n("🀄️"),e(o)]),n(),t("a",it,[n("🔗"),e(o)])])])])])])}const _t=r(h,[["render",pt],["__file","0413.html.vue"]]);export{_t as default};
