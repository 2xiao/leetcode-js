import{_ as u}from"./2-2-7-wpgCw6TE.js";import{_ as d,r as p,o as r,c as k,d as a,w as t,a as n,b as s,f as l,e as i}from"./app-aQeLbVW9.js";const m="/leetcode-js/assets/2-2-1-Z_8p_MgM.png",v="/leetcode-js/assets/2-2-2-sjPr_ShR.png",b="/leetcode-js/assets/2-2-3--JVxYjb8.png",h="/leetcode-js/assets/2-2-4-iYf7_FXP.png",_="/leetcode-js/assets/2-2-5-ddRlP2rk.png",y="/leetcode-js/assets/2-2-6-Vjhtl5AL.png",g={},f=i('<h1 id="_2-2-链表" tabindex="-1"><a class="header-anchor" href="#_2-2-链表" aria-hidden="true">#</a> 2.2 链表</h1><h2 id="链表的定义" tabindex="-1"><a class="header-anchor" href="#链表的定义" aria-hidden="true">#</a> 链表的定义</h2><div class="hint-container info"><p class="hint-container-title">定义</p><p><strong>链表（Linked list）</strong> 通过“指针”将一组零散的内存块串联起来使用，它并不需要一块连续的内存空间。</p></div><p>最常见的链表结构有：单链表、循环链表和双向链表。</p><h3 id="_1-单链表" tabindex="-1"><a class="header-anchor" href="#_1-单链表" aria-hidden="true">#</a> 1. 单链表</h3><figure><img src="'+m+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>我们把内存块称为链表的 <strong>“节点”</strong>。为了将所有的节点串起来，每个链表的节点除了存储数据之外，还需要记录链上的下一个节点的地址。这个记录下个节点地址的指针叫作<strong>后继指针</strong><code>next</code>。</p><p>第一个节点叫作<strong>头节点</strong>，把最后一个节点叫作<strong>尾节点</strong>。其中，头节点用来记录链表的基地址。有了它就可以遍历得到整条链表。而尾节点特殊的地方是：指针不是指向下一个节点，而是指向一个空地址 NULL，表示这是链表上最后一个节点。</p><p>先简单介绍一下链表结构的优缺点：</p><ul><li><p><strong>优点</strong>：存储空间不必事先分配，在需要存储空间的时候可以临时申请，不会造成空间的浪费；链表最大的优点在于可以灵活的添加和删除元素，插入、移动、删除元素的时间效率远比数组高。</p></li><li><p><strong>缺点</strong>：不仅数据元素本身的数据信息要占用存储空间，指针也需要占用存储空间，链表结构比数组结构的空间开销大。</p></li></ul><h3 id="_2-循环链表" tabindex="-1"><a class="header-anchor" href="#_2-循环链表" aria-hidden="true">#</a> 2. 循环链表</h3><figure><img src="'+v+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>循环链表是一种特殊的单链表。它跟单链表唯一的区别就在尾节点。单链表的尾节点指针指向空地址，表示这就是最后的节点了。而循环链表的尾节点指针是指向链表的头节点。像一个环一样首尾相连，所以叫作“循环”链表。</p><p>和单链表相比，循环链表的优点是从链尾到链头比较方便。当要处理的数据具有环型结构特点时，就特别适合采用循环链表。比如著名的约瑟夫问题，尽管用单链表也可以实现，但是用循环链表实现的话，代码就会简洁很多。</p><h3 id="_3-双向链表" tabindex="-1"><a class="header-anchor" href="#_3-双向链表" aria-hidden="true">#</a> 3. 双向链表</h3><figure><img src="'+b+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>单向链表只有一个方向，节点只有一个后继指针 <code>next</code> 指向后面的节点。而双向链表支持两个方向，每个节点不止有一个后继指针 <code>next</code> 指向后面的节点，还有一个前驱指针 <code>prev</code> 指向前面的节点。</p><p>双向链表需要额外的两个空间来存储后继节点和前驱节点的地址。所以存储同样多的数据，双向链表要比单链表占用更多的内存空间。虽然两个指针比较浪费存储空间，但可以支持双向遍历，支持 <code>O(1)</code> 时间复杂度的情况下找到前驱节点，这也使双向链表在某些情况下的插入、删除等操作都要比单链表简单、高效。</p><p>除了插入、删除操作有优势之外，对于一个有序链表，双向链表的按值查询的效率也要比单链表高一些。因为可以记录上次查找的位置 <code>p</code>，每次查询时，根据要查找的值与 <code>p</code> 的大小关系，决定是往前还是往后查找，所以平均只需要查找一半的数据。</p><p>这就是<strong>用空间换时间</strong>的设计思想。当内存空间充足的时候，如果我们更加追求代码的执行速度，我们就可以选择空间复杂度相对较高、但时间复杂度相对很低的算法或者数据结构。相反，如果内存比较紧缺，比如代码跑在手机或者单片机上，这个时候，就要反过来用时间换空间的设计思路。</p><h3 id="_4-双向循环链表" tabindex="-1"><a class="header-anchor" href="#_4-双向循环链表" aria-hidden="true">#</a> 4. 双向循环链表</h3><p>如果把循环链表和双向链表这两种链表整合在一起，就是一个新的版本：双向循环链表。</p><figure><img src="'+h+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="链表的操作" tabindex="-1"><a class="header-anchor" href="#链表的操作" aria-hidden="true">#</a> 链表的操作</h2><p>数据结构的操作一般涉及到增、删、改、查 4 种情况，链表的操作也基本上是这 4 种情况。</p><h3 id="_1-插入节点" tabindex="-1"><a class="header-anchor" href="#_1-插入节点" aria-hidden="true">#</a> 1. 插入节点</h3><p>向链表中插入一个节点的效率很高，需要修改它前面的节点(前驱)，使其指向新加入的节点，而将新节点指向原来前驱节点指向的节点即可。</p><figure><img src="'+_+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>比如单链表的插入操作，要在节点 <code>p</code> 后面插入一个新的节点，只需要下面两行代码：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>new_node<span class="token punctuation">.</span>next <span class="token operator">=</span> p<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
p<span class="token punctuation">.</span>next <span class="token operator">=</span> new_node<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>但是如果要向一个空链表中插入第一个节点，需要进行特殊处理：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 其中 head 表示链表的头节点</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>head <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	head <span class="token operator">=</span> new_node<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-删除节点" tabindex="-1"><a class="header-anchor" href="#_2-删除节点" aria-hidden="true">#</a> 2. 删除节点</h3><p>同样，从链表中删除一个节点，也很简单。只需将待删节点的前驱节点指向待删节点的，同时将待删节点指向 <code>null</code>，那么节点就删除成功了。</p><p>比如单链表节点删除操作，如果要删除节点 <code>p</code> 的后继节点，只需要一行代码：<code>p.next = p.next.next;</code></p><p>但是，如果要删除链表中的最后一个节点，则需要特殊处理：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>head<span class="token punctuation">.</span>next <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	head <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在进行数组的插入、删除操作时，为了保持内存数据的连续性，需要做大量的数据搬移，所以时间复杂度是 <code>O(n)</code>。</p><p>而在链表中插入或者删除一个数据，我们并不需要为了保持内存的连续性而搬移节点，因为链表的存储空间本身就不是连续的。所以，在链表中插入和删除一个数据是非常快速的，我们只需要考虑相邻节点的指针改变，所以对应的时间复杂度是 <code>O(1)</code>。</p><h3 id="_3-查找节点" tabindex="-1"><a class="header-anchor" href="#_3-查找节点" aria-hidden="true">#</a> 3. 查找节点</h3><p>链表要想随机访问第 k 个元素，没有数组那么高效。</p><p>因为链表中的数据并非连续存储的，无法像数组那样，根据首地址和下标，通过寻址公式直接计算出对应的内存地址，而是需要根据指针一个节点一个节点地依次遍历，直到找到相应的节点。</p><p>所以，链表随机访问的性能没有数组好，需要 <code>O(n)</code> 的时间复杂度。</p><h3 id="_4-修改节点" tabindex="-1"><a class="header-anchor" href="#_4-修改节点" aria-hidden="true">#</a> 4. 修改节点</h3><p>修改链表中某个节点的值，只需修改该节点的<code>data</code>值即可。</p><h3 id="_5-增加节点" tabindex="-1"><a class="header-anchor" href="#_5-增加节点" aria-hidden="true">#</a> 5. 增加节点</h3><p>向链表尾部添加节点，需要判断以下链表是否为空，若是空链表，直接将链表的 <code>head</code> 指向新节点，否则需要遍历链表直至找到链表尾节点，再将尾节点的 <code>head</code> 指向新节点。</p><h2 id="链表的实现" tabindex="-1"><a class="header-anchor" href="#链表的实现" aria-hidden="true">#</a> 链表的实现</h2><h3 id="单向链表" tabindex="-1"><a class="header-anchor" href="#单向链表" aria-hidden="true">#</a> 单向链表</h3><p>单向链表的实现包含两个类，一个是 <strong>Node 类</strong>，用来表示节点；另一个是 <strong>SingleLinkedList 类</strong>，提供了对链表进行操作的方法。</p><ul><li><code>Node</code> 类包含两个属性：<code>data</code> 保存节点上的数据，<code>next</code> 指向后一个节点；</li><li><code>SingleLinkedList</code> 类包含两个属性：<code>head</code> 保存该链表的头节点，<code>length</code> 保存链表包含的节点个数，还提供了对链表进行操作的方法： <ul><li><code>append(data)</code> 向链表尾部添加一个新的项；</li><li><code>insert(position, data)</code> 向链表的特定位置插入一个新的项；</li><li><code>getData(position)</code> 获取对应位置的节点；</li><li><code>indexOf(data)</code> 返回节点在链表中的索引，如果链表中没有该节点就返回 <code>-1</code>；</li><li><code>update(position, data)</code> 修改某个位置的节点；</li><li><code>removeAt(position)</code> 从链表的特定位置移除一项；</li><li><code>remove(data)</code> 从链表中移除一项；</li><li><code>isEmpty()</code> 判断链表是否为空，返回 <code>Boolean</code> 值；</li><li><code>count()</code> 返回链表包含的节点个数，与数组的 <code>length</code> 属性类似；</li><li><code>toString()</code> 将链表中节点以字符串形式返回；</li></ul></li></ul><details><summary>👉 查看代码 👈</summary><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 节点类</span>
<span class="token keyword">class</span> <span class="token class-name">Node</span> <span class="token punctuation">{</span>
	<span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span>data <span class="token operator">=</span> data<span class="token punctuation">;</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 单项链表类</span>
<span class="token keyword">class</span> <span class="token class-name">SingleLinkedList</span> <span class="token punctuation">{</span>
	<span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span>head <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span>length <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token comment">// 在链尾添加节点</span>
	<span class="token function">append</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">let</span> node <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>head <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">this</span><span class="token punctuation">.</span>head <span class="token operator">=</span> node<span class="token punctuation">;</span>
		<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
			<span class="token keyword">let</span> current <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>head<span class="token punctuation">;</span>
			<span class="token keyword">while</span> <span class="token punctuation">(</span>current<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span>
				current <span class="token operator">=</span> current<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
			<span class="token punctuation">}</span>
			current<span class="token punctuation">.</span>next <span class="token operator">=</span> node<span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token operator">++</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token comment">// 在指定位置（position）插入节点</span>
	<span class="token comment">// position = 0 表示新插入后是第一个节点</span>
	<span class="token comment">// position = 1 表示新插入后是第二个节点，以此类推</span>
	<span class="token function">insert</span><span class="token punctuation">(</span><span class="token parameter">position<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>position <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> position <span class="token operator">&gt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
		<span class="token keyword">let</span> node <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">let</span> prev <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		prev<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>head<span class="token punctuation">;</span>
		<span class="token keyword">let</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
		<span class="token keyword">while</span> <span class="token punctuation">(</span>index <span class="token operator">&lt;</span> position<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			prev <span class="token operator">=</span> prev<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
			index<span class="token operator">++</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">let</span> temp <span class="token operator">=</span> prev<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
		prev<span class="token punctuation">.</span>next <span class="token operator">=</span> node<span class="token punctuation">;</span>
		node<span class="token punctuation">.</span>next <span class="token operator">=</span> temp<span class="token punctuation">;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>position <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">this</span><span class="token punctuation">.</span>head <span class="token operator">=</span> node<span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token operator">++</span><span class="token punctuation">;</span>
		<span class="token keyword">return</span> node<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token comment">// 获取指定位置（position）的元素</span>
	<span class="token function">getData</span><span class="token punctuation">(</span><span class="token parameter">position</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>position <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> position <span class="token operator">&gt;=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
		<span class="token keyword">let</span> prev <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>head<span class="token punctuation">;</span>
		<span class="token keyword">let</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
		<span class="token keyword">while</span> <span class="token punctuation">(</span>index <span class="token operator">&lt;</span> position<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			prev <span class="token operator">=</span> prev<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
			index<span class="token operator">++</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">return</span> prev<span class="token punctuation">.</span>data<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token comment">// 返回指定 data 的 index，如果没有则返回 -1</span>
	<span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">let</span> prev <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>head<span class="token punctuation">;</span>
		<span class="token keyword">let</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
		<span class="token keyword">while</span> <span class="token punctuation">(</span>prev<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span>prev<span class="token punctuation">.</span>data <span class="token operator">===</span> data<span class="token punctuation">)</span> <span class="token keyword">return</span> index<span class="token punctuation">;</span>
			prev <span class="token operator">=</span> prev<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
			index<span class="token operator">++</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token comment">// 修改指定位置（position）的节点</span>
	<span class="token function">update</span><span class="token punctuation">(</span><span class="token parameter">position<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>position <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> position <span class="token operator">&gt;=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
		<span class="token keyword">let</span> prev <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>head<span class="token punctuation">;</span>
		<span class="token keyword">let</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
		<span class="token keyword">while</span> <span class="token punctuation">(</span>index <span class="token operator">&lt;</span> position<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			prev <span class="token operator">=</span> prev<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
			index<span class="token operator">++</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		prev<span class="token punctuation">.</span>data <span class="token operator">=</span> data<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token comment">// 删除指定位置（position）的节点</span>
	<span class="token function">removeAt</span><span class="token punctuation">(</span><span class="token parameter">position</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>position <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> position <span class="token operator">&gt;=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
		<span class="token keyword">let</span> prev <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		prev<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>head<span class="token punctuation">;</span>
		<span class="token keyword">let</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
		<span class="token keyword">while</span> <span class="token punctuation">(</span>index <span class="token operator">&lt;</span> position<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			prev <span class="token operator">=</span> prev<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
			index<span class="token operator">++</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">let</span> node <span class="token operator">=</span> prev<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
		prev<span class="token punctuation">.</span>next <span class="token operator">=</span> node<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>position <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">this</span><span class="token punctuation">.</span>head <span class="token operator">=</span> node<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token operator">--</span><span class="token punctuation">;</span>
		<span class="token keyword">return</span> node<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token comment">// 删除节点</span>
	<span class="token function">remove</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">removeAt</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token comment">// 判断链表是否为空，返回 Boolean 值</span>
	<span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token comment">// 返回链表包含的节点个数</span>
	<span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token comment">// 将链表中节点以字符串形式返回</span>
	<span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">let</span> prev <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>head<span class="token punctuation">;</span>
		<span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
		<span class="token keyword">while</span> <span class="token punctuation">(</span>prev<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>prev<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
			prev <span class="token operator">=</span> prev<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;,&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>代码测试：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> linkedList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SingleLinkedList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

linkedList<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&#39;A&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
linkedList<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&#39;B&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
linkedList<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&#39;C&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>linkedList<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// output:</span>
<span class="token comment">// SingleLinkedList {</span>
<span class="token comment">//   head: Node {data: &quot;A&quot;, next:</span>
<span class="token comment">//           Node {data: &quot;B&quot;, next:</span>
<span class="token comment">//             Node {data: &quot;C&quot;, next: null}}},</span>
<span class="token comment">//   length: 3}</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>linkedList<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// output: A,B,C</span>

linkedList<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">&#39;123&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
linkedList<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">&#39;456&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>linkedList<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// output: 123,A,456,B,C</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>linkedList<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// output: 123</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>linkedList<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// output: A</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>linkedList<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">&#39;A&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// output: 1</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>linkedList<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">&#39;ABC&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// output: -1</span>

linkedList<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">&#39;12345&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>linkedList<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// output: 12345,A,456,B,C</span>
linkedList<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&#39;54321&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>linkedList<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// output: 12345,54321,456,B,C</span>

linkedList<span class="token punctuation">.</span><span class="token function">removeAt</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>linkedList<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// output: 12345,54321,456,C</span>

linkedList<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token string">&#39;12345&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>linkedList<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// output: 54321,456,C</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>linkedList<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// output: false</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>linkedList<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// output: 3</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h3 id="双向链表" tabindex="-1"><a class="header-anchor" href="#双向链表" aria-hidden="true">#</a> 双向链表</h3><p>双向链表相连的过程是双向的，实现原理包含两个类：</p><p>一个是 <strong>DoublyNode 类</strong>，用来表示节点，它除了有指向后一个节点的 <code>next</code> 指针，还有指向前一个节点的 <code>prev</code> 指针，第一个节点的 <code>prev</code> 指向 <code>null</code>，最后一个节点的 <code>next</code> 指向 <code>null</code>；</p><p>另一个是 <strong>DoublyLinkedList 类</strong>，提供了对双向链表进行操作的方法，它不仅有 <code>head</code> 指针指向第一个节点，而且有 <code>tail</code> 指针指向最后一个节点。</p><ul><li><code>DoublyNode</code> 类包含三个属性：<code>data</code> 储存数据，<code>prev</code> 指向前一个节点，<code>next</code> 指向后一个节点；</li><li><code>DoublyLinkedList</code> 类包含三个属性：<code>head</code> 保存该链表的头节点，<code>tail</code> 保存该链表的尾节点，<code>length</code> 保存链表包含的节点个数，还提供了对双向链表进行操作的方法： <ul><li><code>append(data)</code> 向链表尾部添加一个新的项；</li><li><code>insert(position, data)</code> 向链表的特定位置插入一个新的项；</li><li><code>getData(position)</code> 获取对应位置的节点；</li><li><code>indexOf(data)</code> 返回节点在链表中的索引，如果链表中没有该节点就返回 <code>-1</code>；</li><li><code>update(position, data)</code> 修改某个位置的节点；</li><li><code>removeAt(position)</code> 从链表的特定位置移除一项；</li><li><code>remove(data)</code> 从链表中移除一项；</li><li><code>isEmpty()</code> 判断链表是否为空，返回 <code>Boolean</code> 值；</li><li><code>count()</code> 返回链表包含的节点个数，与数组的 <code>length</code> 属性类似；</li><li><code>toString()</code> 将链表中节点以字符串形式返回；</li><li><code>backwordString()</code> 反向遍历节点，以字符串形式返回；</li></ul></li></ul><details><summary>👉 查看代码 👈</summary><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 双向链表的节点类（继承单向链表的节点类）</span>
<span class="token keyword">class</span> <span class="token class-name">DoublyNode</span> <span class="token keyword">extends</span> <span class="token class-name">Node</span> <span class="token punctuation">{</span>
	<span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">super</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span>prev <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">// 双向链表类（继承单向链表类）</span>
<span class="token keyword">class</span> <span class="token class-name">DoublyLinkedList</span> <span class="token keyword">extends</span> <span class="token class-name">SingleLinkedList</span> <span class="token punctuation">{</span>
	<span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span>tail <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token comment">// 在链尾添加节点，重写 append()</span>
	<span class="token function">append</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">let</span> node <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DoublyNode</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>head <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">this</span><span class="token punctuation">.</span>head <span class="token operator">=</span> node<span class="token punctuation">;</span>
			<span class="token keyword">this</span><span class="token punctuation">.</span>tail <span class="token operator">=</span> node<span class="token punctuation">;</span>
		<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
			<span class="token comment">// 直接通过 tail 指针在链尾添加节点</span>
			<span class="token keyword">this</span><span class="token punctuation">.</span>tail<span class="token punctuation">.</span>next <span class="token operator">=</span> node<span class="token punctuation">;</span>
			node<span class="token punctuation">.</span>prev <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>tail<span class="token punctuation">;</span>
			<span class="token keyword">this</span><span class="token punctuation">.</span>tail <span class="token operator">=</span> node<span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token operator">++</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token comment">// 在指定位置（position）插入节点，重写 insert()</span>
	<span class="token function">insert</span><span class="token punctuation">(</span><span class="token parameter">position<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>position <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> position <span class="token operator">&gt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
		<span class="token keyword">let</span> node <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DoublyNode</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">let</span> cur <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DoublyNode</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		cur<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>head<span class="token punctuation">;</span>
		<span class="token keyword">let</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
		<span class="token keyword">while</span> <span class="token punctuation">(</span>index <span class="token operator">&lt;</span> position<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			cur <span class="token operator">=</span> cur<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
			index<span class="token operator">++</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">let</span> temp <span class="token operator">=</span> cur<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
		cur<span class="token punctuation">.</span>next <span class="token operator">=</span> node<span class="token punctuation">;</span>
		node<span class="token punctuation">.</span>next <span class="token operator">=</span> temp<span class="token punctuation">;</span>
		node<span class="token punctuation">.</span>prev <span class="token operator">=</span> cur<span class="token punctuation">;</span>
		temp<span class="token punctuation">.</span>prev <span class="token operator">=</span> node<span class="token punctuation">;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>position <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">this</span><span class="token punctuation">.</span>head <span class="token operator">=</span> node<span class="token punctuation">;</span>
			<span class="token keyword">this</span><span class="token punctuation">.</span>head<span class="token punctuation">.</span>prev <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>position <span class="token operator">===</span> <span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">this</span><span class="token punctuation">.</span>tail <span class="token operator">=</span> node<span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token operator">++</span><span class="token punctuation">;</span>
		<span class="token keyword">return</span> node<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token comment">// 删除指定位置（position）的节点，重写 removeAt()</span>
	<span class="token function">removeAt</span><span class="token punctuation">(</span><span class="token parameter">position</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>position <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> position <span class="token operator">&gt;=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
		<span class="token keyword">let</span> cur <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DoublyNode</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		cur<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>head<span class="token punctuation">;</span>
		<span class="token keyword">let</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
		<span class="token keyword">while</span> <span class="token punctuation">(</span>index <span class="token operator">&lt;</span> position<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			cur <span class="token operator">=</span> cur<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
			index<span class="token operator">++</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">let</span> node <span class="token operator">=</span> cur<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
		cur<span class="token punctuation">.</span>next <span class="token operator">=</span> node<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			node<span class="token punctuation">.</span>next<span class="token punctuation">.</span>prev <span class="token operator">=</span> cur<span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>position <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">this</span><span class="token punctuation">.</span>head <span class="token operator">=</span> node<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
			<span class="token keyword">this</span><span class="token punctuation">.</span>head<span class="token punctuation">.</span>prev <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>position <span class="token operator">===</span> <span class="token keyword">this</span><span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">this</span><span class="token punctuation">.</span>tail <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>tail<span class="token punctuation">.</span>prev<span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token operator">--</span><span class="token punctuation">;</span>
		<span class="token keyword">return</span> node<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token comment">// 反向遍历节点，以字符串形式返回</span>
	<span class="token function">backwordString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">let</span> cur <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>tail<span class="token punctuation">;</span>
		<span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
		<span class="token keyword">while</span> <span class="token punctuation">(</span>cur<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
			cur <span class="token operator">=</span> cur<span class="token punctuation">.</span>prev<span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;,&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token comment">// 其他方法都继承 SingleLinkedList 类的</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>代码测试：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> linkedList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DoublyLinkedList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

linkedList<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&#39;A&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
linkedList<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&#39;B&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
linkedList<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&#39;C&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>linkedList<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// output: A,B,C</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>linkedList<span class="token punctuation">.</span><span class="token function">backwordString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// output: C,B,A</span>

linkedList<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">&#39;123&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
linkedList<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">&#39;456&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>linkedList<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// output: 123,A,456,B,C</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>linkedList<span class="token punctuation">.</span><span class="token function">backwordString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// output: C,B,456,A,123</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>linkedList<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// output: 123</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>linkedList<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// output: A</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>linkedList<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">&#39;A&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// output: 1</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>linkedList<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">&#39;ABC&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// output: -1</span>

linkedList<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">&#39;12345&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>linkedList<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// output: 12345,A,456,B,C</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>linkedList<span class="token punctuation">.</span><span class="token function">backwordString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// output: C,B,456,A,12345</span>

linkedList<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&#39;54321&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>linkedList<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// output: 12345,54321,456,B,C</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>linkedList<span class="token punctuation">.</span><span class="token function">backwordString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// output: C,B,456,54321,12345</span>

linkedList<span class="token punctuation">.</span><span class="token function">removeAt</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>linkedList<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// output: 12345,54321,456,C</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>linkedList<span class="token punctuation">.</span><span class="token function">backwordString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// output: C,456,54321,12345</span>

linkedList<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token string">&#39;12345&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>linkedList<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// output: 54321,456,C</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>linkedList<span class="token punctuation">.</span><span class="token function">backwordString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// output: C,456,54321</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>linkedList<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// output: false</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>linkedList<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// output: 3</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h2 id="链表-vs-数组" tabindex="-1"><a class="header-anchor" href="#链表-vs-数组" aria-hidden="true">#</a> 链表 VS 数组</h2><p>相比数组，链表是一种稍微复杂一点的数据结构。这两个非常基础、非常常用的数据结构，常常被放到一块儿比较，那它们有什么区别呢？</p><p>先从<strong>底层的存储结构</strong>上来看：</p><figure><img src="`+y+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>从图中可以看到，数组需要一块连续的内存空间来存储，对内存的要求比较高。如果我们申请一个 100MB 大小的数组，当内存中没有连续的、足够大的存储空间时，即便内存的剩余总可用空间大于 100MB，仍然会申请失败。</p><p>而链表恰恰相反，它并不需要一块连续的内存空间，它通过“指针”将一组零散的内存块串联起来使用，所以如果我们申请的是 100MB 大小的链表，则不会有问题。</p><p>正是因为内存存储的区别，数组和链表在插入、删除、随机访问操作时的<strong>时间复杂度正好相反</strong>：</p><table><thead><tr><th style="text-align:center;">时间复杂度</th><th style="text-align:center;">链表</th><th style="text-align:center;">数组</th></tr></thead><tbody><tr><td style="text-align:center;">插入</td><td style="text-align:center;"><code>O(1)</code></td><td style="text-align:center;"><code>O(n)</code></td></tr><tr><td style="text-align:center;">删除</td><td style="text-align:center;"><code>O(1)</code></td><td style="text-align:center;"><code>O(n)</code></td></tr><tr><td style="text-align:center;">随机访问</td><td style="text-align:center;"><code>O(n)</code></td><td style="text-align:center;"><code>O(1)</code></td></tr></tbody></table><p>不过数组和链表的性能对比，并不能局限于时间复杂度。在实际的软件开发中，不能仅仅利用复杂度分析就决定使用哪个数据结构来存储数据。</p><p>数组简单易用，在实现上使用的是连续的内存空间，可以借助 CPU 的缓存机制，预读数组中的数据，所以访问效率更高。而链表在内存中并不是连续存储，所以<strong>对 CPU 缓存不友好</strong>，没办法有效预读。</p><p>数组的缺点是大小固定，一经声明就要占用整块连续内存空间。如果声明的数组过大，系统可能没有足够的连续内存空间分配给它，导致“内存不足（out of memory）”。如果声明的数组过小，则可能出现不够用的情况。这时只能再申请一个更大的内存空间，把原数组拷贝进去，非常费时。链表本身没有大小的限制，天然地<strong>支持动态扩容</strong>，这也是它与数组最大的区别。</p><p>除此之外，因为链表中的每个节点都需要<strong>消耗额外的存储空间</strong>去存储一份指向下一个节点的指针，所以内存消耗会翻倍。而且，对链表进行频繁的插入、删除操作，还会导致频繁的内存申请和释放，<strong>容易造成内存碎片</strong>。如果代码对内存的使用非常苛刻，那数组就更合适。</p><h2 id="链表的应用" tabindex="-1"><a class="header-anchor" href="#链表的应用" aria-hidden="true">#</a> 链表的应用</h2><p>下面列举了 6 个常见的链表操作和应用，分别是：</p><ol><li>反转单链表</li><li>检测链表中是否有环</li><li>合并两个有序链表</li><li>删除链表倒数第 n 个节点</li><li>求链表的中间节点</li><li>LRU 缓存淘汰算法</li></ol><p>只要把这几个操作都写熟练，多写多练，之后就再也不会害怕写链表代码。</p><h3 id="_1-反转单链表" tabindex="-1"><a class="header-anchor" href="#_1-反转单链表" aria-hidden="true">#</a> 1. 反转单链表</h3>',75),w={id:"📌-206-反转链表-leetcode",tabindex:"-1"},x=n("a",{class:"header-anchor",href:"#📌-206-反转链表-leetcode","aria-hidden":"true"},"#",-1),L={href:"https://wangfuyou.com/leetcode-js/problem/0206.html",target:"_blank",rel:"noopener noreferrer"},j=n("h4",{id:"💻-题目大意",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#💻-题目大意","aria-hidden":"true"},"#"),s(" 💻 "),n("strong",null,"题目大意")],-1),N=n("p",null,"给你单链表的头节点 head ，请你反转链表，并返回反转后的链表。",-1),C=n("p",null,[n("strong",null,"示例"),s("：")],-1),q=n("figure",null,[n("img",{src:"https://assets.leetcode.com/uploads/2021/02/19/rev1ex1.jpg",alt:"",tabindex:"0",loading:"lazy"}),n("figcaption")],-1),O=n("blockquote",null,[n("p",null,"输入：head = [1,2,3,4,5]"),n("p",null,"输出：[5,4,3,2,1]")],-1),S=n("figure",null,[n("img",{src:"https://assets.leetcode.com/uploads/2021/02/19/rev1ex2.jpg",alt:"",tabindex:"0",loading:"lazy"}),n("figcaption")],-1),U=n("blockquote",null,[n("p",null,"输入：head = [1,2]"),n("p",null,"输出：[2,1]")],-1),R=n("blockquote",null,[n("p",null,"输入：head = []"),n("p",null,"输出：[]")],-1),z=n("p",null,[n("strong",null,"说明"),s("：")],-1),A=n("ul",null,[n("li",null,[s("链表中节点的数目范围是 "),n("code",null,"[0, 5000]")]),n("li",null,[n("code",null,"-5000 <= Node.val <= 5000")])],-1),B=n("h4",{id:"💡-解题思路",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#💡-解题思路","aria-hidden":"true"},"#"),s(" 💡 "),n("strong",null,"解题思路")],-1),D=n("p",null,"有两种思路，一是循环、二是递归。",-1),E=n("h4",{id:"💎-代码",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#💎-代码","aria-hidden":"true"},"#"),s(" 💎 "),n("strong",null,"代码")],-1),H=n("details",null,[n("summary",null,"👉 查看代码 👈"),n("div",{class:"language-javascript line-numbers-mode","data-ext":"js"},[n("pre",{class:"language-javascript"},[n("code",null,[n("span",{class:"token doc-comment comment"},[s(`/**
 * `),n("span",{class:"token keyword"},"@param"),s(),n("span",{class:"token class-name"},[n("span",{class:"token punctuation"},"{"),s("ListNode"),n("span",{class:"token punctuation"},"}")]),s(),n("span",{class:"token parameter"},"head"),s(`
 * `),n("span",{class:"token keyword"},"@return"),s(),n("span",{class:"token class-name"},[n("span",{class:"token punctuation"},"{"),s("ListNode"),n("span",{class:"token punctuation"},"}")]),s(`
 */`)]),s(`

`),n("span",{class:"token comment"},"// 循环实现"),s(`
`),n("span",{class:"token keyword"},"var"),s(),n("span",{class:"token function-variable function"},"reverseList"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"function"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"head"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
	`),n("span",{class:"token keyword"},"let"),s(" prev "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"null"),n("span",{class:"token punctuation"},";"),s(`
	`),n("span",{class:"token keyword"},"let"),s(" cur "),n("span",{class:"token operator"},"="),s(" head"),n("span",{class:"token punctuation"},";"),s(`

	`),n("span",{class:"token keyword"},"while"),s(),n("span",{class:"token punctuation"},"("),s("cur "),n("span",{class:"token operator"},"!=="),s(),n("span",{class:"token keyword"},"null"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
		`),n("span",{class:"token keyword"},"let"),s(" next "),n("span",{class:"token operator"},"="),s(" cur"),n("span",{class:"token punctuation"},"."),s("next"),n("span",{class:"token punctuation"},";"),s(`
		cur`),n("span",{class:"token punctuation"},"."),s("next "),n("span",{class:"token operator"},"="),s(" prev"),n("span",{class:"token punctuation"},";"),s(`
		prev `),n("span",{class:"token operator"},"="),s(" cur"),n("span",{class:"token punctuation"},";"),s(`
		cur `),n("span",{class:"token operator"},"="),s(" next"),n("span",{class:"token punctuation"},";"),s(`
	`),n("span",{class:"token punctuation"},"}"),s(`
	`),n("span",{class:"token keyword"},"return"),s(" prev"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";"),s(`

`),n("span",{class:"token comment"},"// 递归实现"),s(`
`),n("span",{class:"token keyword"},"var"),s(),n("span",{class:"token function-variable function"},"reverseList"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"function"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"head"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
	`),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("head "),n("span",{class:"token operator"},"==="),s(),n("span",{class:"token keyword"},"null"),s(),n("span",{class:"token operator"},"||"),s(" head"),n("span",{class:"token punctuation"},"."),s("next "),n("span",{class:"token operator"},"==="),s(),n("span",{class:"token keyword"},"null"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
		`),n("span",{class:"token keyword"},"return"),s(" head"),n("span",{class:"token punctuation"},";"),s(`
	`),n("span",{class:"token punctuation"},"}"),s(`
	`),n("span",{class:"token keyword"},"const"),s(" last "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token function"},"reverseList"),n("span",{class:"token punctuation"},"("),s("head"),n("span",{class:"token punctuation"},"."),s("next"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
	head`),n("span",{class:"token punctuation"},"."),s("next"),n("span",{class:"token punctuation"},"."),s("next "),n("span",{class:"token operator"},"="),s(" head"),n("span",{class:"token punctuation"},";"),s(`
	head`),n("span",{class:"token punctuation"},"."),s("next "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"null"),n("span",{class:"token punctuation"},";"),s(`
	`),n("span",{class:"token keyword"},"return"),s(" last"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])])],-1),I=n("div",{class:"language-markdown line-numbers-mode","data-ext":"md"},[n("pre",{class:"language-markdown"},[n("code",null,[n("span",{class:"token title important"},[n("span",{class:"token punctuation"},"####"),s(" 📌 [206. 反转链表 - LeetCode](https://wangfuyou.com/leetcode-js/problem/0206.html)")]),s(`

`),n("span",{class:"token title important"},[n("span",{class:"token punctuation"},"####"),s(" 💻 **题目大意**")]),s(`

给你单链表的头节点 head ，请你反转链表，并返回反转后的链表。

`),n("span",{class:"token bold"},[n("span",{class:"token punctuation"},"**"),n("span",{class:"token content"},"示例"),n("span",{class:"token punctuation"},"**")]),s(`：

![](https://assets.leetcode.com/uploads/2021/02/19/rev1ex1.jpg)

`),n("span",{class:"token blockquote punctuation"},">"),s(` 输入：head = [1,2,3,4,5]
`),n("span",{class:"token blockquote punctuation"},">"),s(`
`),n("span",{class:"token blockquote punctuation"},">"),s(` 输出：[5,4,3,2,1]

![](https://assets.leetcode.com/uploads/2021/02/19/rev1ex2.jpg)

`),n("span",{class:"token blockquote punctuation"},">"),s(` 输入：head = [1,2]
`),n("span",{class:"token blockquote punctuation"},">"),s(`
`),n("span",{class:"token blockquote punctuation"},">"),s(` 输出：[2,1]

`),n("span",{class:"token blockquote punctuation"},">"),s(` 输入：head = []
`),n("span",{class:"token blockquote punctuation"},">"),s(`
`),n("span",{class:"token blockquote punctuation"},">"),s(` 输出：[]

`),n("span",{class:"token bold"},[n("span",{class:"token punctuation"},"**"),n("span",{class:"token content"},"说明"),n("span",{class:"token punctuation"},"**")]),s(`：

`),n("span",{class:"token list punctuation"},"-"),s(" 链表中节点的数目范围是 "),n("span",{class:"token code-snippet code keyword"},"`[0, 5000]`"),s(`
`),n("span",{class:"token list punctuation"},"-"),s(),n("span",{class:"token code-snippet code keyword"},"`-5000 <= Node.val <= 5000`"),s(`

`),n("span",{class:"token title important"},[n("span",{class:"token punctuation"},"####"),s(" 💡 **解题思路**")]),s(`

有两种思路，一是循环、二是递归。

`),n("span",{class:"token title important"},[n("span",{class:"token punctuation"},"####"),s(" 💎 **代码**")]),s(`

`),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("details")]),n("span",{class:"token punctuation"},">")]),s(`
`),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("summary")]),n("span",{class:"token punctuation"},">")]),s("👉 查看代码 👈"),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),s("summary")]),n("span",{class:"token punctuation"},">")]),s(`

`),n("span",{class:"token code"},[n("span",{class:"token punctuation"},"```"),n("span",{class:"token code-language"},"javascript"),s(`
`),n("span",{class:"token code-block language-javascript"},[n("span",{class:"token doc-comment comment"},[s(`/**
 * `),n("span",{class:"token keyword"},"@param"),s(),n("span",{class:"token class-name"},[n("span",{class:"token punctuation"},"{"),s("ListNode"),n("span",{class:"token punctuation"},"}")]),s(),n("span",{class:"token parameter"},"head"),s(`
 * `),n("span",{class:"token keyword"},"@return"),s(),n("span",{class:"token class-name"},[n("span",{class:"token punctuation"},"{"),s("ListNode"),n("span",{class:"token punctuation"},"}")]),s(`
 */`)]),s(`

`),n("span",{class:"token comment"},"// 循环实现"),s(`
`),n("span",{class:"token keyword"},"var"),s(),n("span",{class:"token function-variable function"},"reverseList"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"function"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"head"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
	`),n("span",{class:"token keyword"},"let"),s(" prev "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"null"),n("span",{class:"token punctuation"},";"),s(`
	`),n("span",{class:"token keyword"},"let"),s(" cur "),n("span",{class:"token operator"},"="),s(" head"),n("span",{class:"token punctuation"},";"),s(`

	`),n("span",{class:"token keyword"},"while"),s(),n("span",{class:"token punctuation"},"("),s("cur "),n("span",{class:"token operator"},"!=="),s(),n("span",{class:"token keyword"},"null"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
		`),n("span",{class:"token keyword"},"let"),s(" next "),n("span",{class:"token operator"},"="),s(" cur"),n("span",{class:"token punctuation"},"."),s("next"),n("span",{class:"token punctuation"},";"),s(`
		cur`),n("span",{class:"token punctuation"},"."),s("next "),n("span",{class:"token operator"},"="),s(" prev"),n("span",{class:"token punctuation"},";"),s(`
		prev `),n("span",{class:"token operator"},"="),s(" cur"),n("span",{class:"token punctuation"},";"),s(`
		cur `),n("span",{class:"token operator"},"="),s(" next"),n("span",{class:"token punctuation"},";"),s(`
	`),n("span",{class:"token punctuation"},"}"),s(`
	`),n("span",{class:"token keyword"},"return"),s(" prev"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";"),s(`

`),n("span",{class:"token comment"},"// 递归实现"),s(`
`),n("span",{class:"token keyword"},"var"),s(),n("span",{class:"token function-variable function"},"reverseList"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"function"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"head"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
	`),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("head "),n("span",{class:"token operator"},"==="),s(),n("span",{class:"token keyword"},"null"),s(),n("span",{class:"token operator"},"||"),s(" head"),n("span",{class:"token punctuation"},"."),s("next "),n("span",{class:"token operator"},"==="),s(),n("span",{class:"token keyword"},"null"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
		`),n("span",{class:"token keyword"},"return"),s(" head"),n("span",{class:"token punctuation"},";"),s(`
	`),n("span",{class:"token punctuation"},"}"),s(`
	`),n("span",{class:"token keyword"},"const"),s(" last "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token function"},"reverseList"),n("span",{class:"token punctuation"},"("),s("head"),n("span",{class:"token punctuation"},"."),s("next"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
	head`),n("span",{class:"token punctuation"},"."),s("next"),n("span",{class:"token punctuation"},"."),s("next "),n("span",{class:"token operator"},"="),s(" head"),n("span",{class:"token punctuation"},";"),s(`
	head`),n("span",{class:"token punctuation"},"."),s("next "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"null"),n("span",{class:"token punctuation"},";"),s(`
	`),n("span",{class:"token keyword"},"return"),s(" last"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"token punctuation"},"```")]),s(`

`),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),s("details")]),n("span",{class:"token punctuation"},">")]),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),T=n("h3",{id:"_2-检测链表中是否有环",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_2-检测链表中是否有环","aria-hidden":"true"},"#"),s(" 2. 检测链表中是否有环")],-1),F={id:"📌-141-环形链表-leetcode",tabindex:"-1"},M=n("a",{class:"header-anchor",href:"#📌-141-环形链表-leetcode","aria-hidden":"true"},"#",-1),P={href:"https://wangfuyou.com/leetcode-js/problem/0141.html",target:"_blank",rel:"noopener noreferrer"},V=n("h4",{id:"💻-题目大意-1",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#💻-题目大意-1","aria-hidden":"true"},"#"),s(" 💻 "),n("strong",null,"题目大意")],-1),Y=n("p",null,[s("给你一个链表的头节点 head ，判断链表中是否有环。如果链表中存在环 ，则返回 "),n("code",null,"true"),s(" 。 否则，返回 "),n("code",null,"false"),s(" 。")],-1),K=n("p",null,[n("strong",null,"示例"),s("：")],-1),J=n("figure",null,[n("img",{src:"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/07/circularlinkedlist.png",alt:"",tabindex:"0",loading:"lazy"}),n("figcaption")],-1),X=n("blockquote",null,[n("p",null,"输入：head = [3,2,0,-4], pos = 1"),n("p",null,"输出：true"),n("p",null,"解释：链表中有一个环，其尾部连接到第二个节点。")],-1),Z=n("figure",null,[n("img",{src:"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/07/circularlinkedlist_test2.png",alt:"",tabindex:"0",loading:"lazy"}),n("figcaption")],-1),$=n("blockquote",null,[n("p",null,"输入：head = [1,2], pos = 0"),n("p",null,"输出：true"),n("p",null,"解释：链表中有一个环，其尾部连接到第一个节点。")],-1),G=n("figure",null,[n("img",{src:"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/07/circularlinkedlist_test3.png",alt:"",tabindex:"0",loading:"lazy"}),n("figcaption")],-1),Q=n("blockquote",null,[n("p",null,"输入：head = [1], pos = -1"),n("p",null,"输出：false"),n("p",null,"解释：链表中没有环。")],-1),W=n("p",null,[n("strong",null,"说明"),s("：")],-1),nn=n("ul",null,[n("li",null,[s("链表中节点的数目范围是 "),n("code",null,"[0, 10^4]")]),n("li",null,[n("code",null,"-10^5 <= Node.val <= 10^5")]),n("li",null,[n("code",null,"pos"),s(" 为 "),n("code",null,"-1"),s(" 或者链表中的一个 有效索引 。")])],-1),sn=n("h4",{id:"💡-解题思路-1",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#💡-解题思路-1","aria-hidden":"true"},"#"),s(" 💡 "),n("strong",null,"解题思路")],-1),an=n("ul",null,[n("li",null,[s("思路一：哈希表 "),n("ul",null,[n("li",null,"最简单的思路是遍历所有节点，每次遍历节点之前，使用哈希表判断该节点是否被访问过；"),n("li",null,"如果访问过就说明存在环；"),n("li",null,"如果没访问过则将该节点添加到哈希表中，继续遍历判断；")])]),n("li",null,[s("思路二：快慢指针 "),n("ul",null,[n("li",null,"两个指针从同一位置同时出发，一快一慢，如果有环，那么快的一方总能追上慢的一方；"),n("li",null,"慢指针每次前进一步，快指针每次前进 n 步（n >= 2）；"),n("li",null,"如果两个指针在链表头节点以外的某一节点相遇了，那么说明链表有环；"),n("li",null,"否则，如果（快指针）到达了某个没有后继指针的节点时，那么说明没环；")])])],-1),tn=n("h4",{id:"💎-代码-1",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#💎-代码-1","aria-hidden":"true"},"#"),s(" 💎 "),n("strong",null,"代码")],-1),en=n("details",null,[n("summary",null,"👉 查看代码 👈"),n("div",{class:"language-javascript line-numbers-mode","data-ext":"js"},[n("pre",{class:"language-javascript"},[n("code",null,[n("span",{class:"token doc-comment comment"},[s(`/**
 * `),n("span",{class:"token keyword"},"@param"),s(),n("span",{class:"token class-name"},[n("span",{class:"token punctuation"},"{"),s("ListNode"),n("span",{class:"token punctuation"},"}")]),s(),n("span",{class:"token parameter"},"head"),s(`
 * `),n("span",{class:"token keyword"},"@return"),s(),n("span",{class:"token class-name"},[n("span",{class:"token punctuation"},"{"),s("boolean"),n("span",{class:"token punctuation"},"}")]),s(`
 */`)]),s(`
`),n("span",{class:"token keyword"},"var"),s(),n("span",{class:"token function-variable function"},"hasCycle"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"function"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"head"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
	`),n("span",{class:"token keyword"},"let"),s(" slow "),n("span",{class:"token operator"},"="),s(" head"),n("span",{class:"token punctuation"},";"),s(`
	`),n("span",{class:"token keyword"},"let"),s(" fast "),n("span",{class:"token operator"},"="),s(" head"),n("span",{class:"token punctuation"},";"),s(`
	`),n("span",{class:"token keyword"},"while"),s(),n("span",{class:"token punctuation"},"("),s("fast "),n("span",{class:"token operator"},"&&"),s(" fast"),n("span",{class:"token punctuation"},"."),s("next"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
		slow `),n("span",{class:"token operator"},"="),s(" slow"),n("span",{class:"token punctuation"},"."),s("next"),n("span",{class:"token punctuation"},";"),s(`
		fast `),n("span",{class:"token operator"},"="),s(" fast"),n("span",{class:"token punctuation"},"."),s("next"),n("span",{class:"token punctuation"},"."),s("next"),n("span",{class:"token punctuation"},";"),s(`
		`),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("fast "),n("span",{class:"token operator"},"=="),s(" slow"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token boolean"},"true"),n("span",{class:"token punctuation"},";"),s(`
	`),n("span",{class:"token punctuation"},"}"),s(`
	`),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token boolean"},"false"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])])],-1),on=n("div",{class:"language-markdown line-numbers-mode","data-ext":"md"},[n("pre",{class:"language-markdown"},[n("code",null,[n("span",{class:"token title important"},[n("span",{class:"token punctuation"},"####"),s(" 📌 [141. 环形链表 - LeetCode](https://wangfuyou.com/leetcode-js/problem/0141.html)")]),s(`

`),n("span",{class:"token title important"},[n("span",{class:"token punctuation"},"####"),s(" 💻 **题目大意**")]),s(`

给你一个链表的头节点 head ，判断链表中是否有环。如果链表中存在环 ，则返回 `),n("span",{class:"token code-snippet code keyword"},"`true`"),s(" 。 否则，返回 "),n("span",{class:"token code-snippet code keyword"},"`false`"),s(` 。

`),n("span",{class:"token bold"},[n("span",{class:"token punctuation"},"**"),n("span",{class:"token content"},"示例"),n("span",{class:"token punctuation"},"**")]),s(`：

![](https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/07/circularlinkedlist.png)

`),n("span",{class:"token blockquote punctuation"},">"),s(` 输入：head = [3,2,0,-4], pos = 1
`),n("span",{class:"token blockquote punctuation"},">"),s(`
`),n("span",{class:"token blockquote punctuation"},">"),s(` 输出：true
`),n("span",{class:"token blockquote punctuation"},">"),s(`
`),n("span",{class:"token blockquote punctuation"},">"),s(` 解释：链表中有一个环，其尾部连接到第二个节点。

![](https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/07/circularlinkedlist_test2.png)

`),n("span",{class:"token blockquote punctuation"},">"),s(` 输入：head = [1,2], pos = 0
`),n("span",{class:"token blockquote punctuation"},">"),s(`
`),n("span",{class:"token blockquote punctuation"},">"),s(` 输出：true
`),n("span",{class:"token blockquote punctuation"},">"),s(`
`),n("span",{class:"token blockquote punctuation"},">"),s(` 解释：链表中有一个环，其尾部连接到第一个节点。

![](https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/07/circularlinkedlist_test3.png)

`),n("span",{class:"token blockquote punctuation"},">"),s(` 输入：head = [1], pos = -1
`),n("span",{class:"token blockquote punctuation"},">"),s(`
`),n("span",{class:"token blockquote punctuation"},">"),s(` 输出：false
`),n("span",{class:"token blockquote punctuation"},">"),s(`
`),n("span",{class:"token blockquote punctuation"},">"),s(` 解释：链表中没有环。

`),n("span",{class:"token bold"},[n("span",{class:"token punctuation"},"**"),n("span",{class:"token content"},"说明"),n("span",{class:"token punctuation"},"**")]),s(`：

`),n("span",{class:"token list punctuation"},"-"),s(" 链表中节点的数目范围是 "),n("span",{class:"token code-snippet code keyword"},"`[0, 10^4]`"),s(`
`),n("span",{class:"token list punctuation"},"-"),s(),n("span",{class:"token code-snippet code keyword"},"`-10^5 <= Node.val <= 10^5`"),s(`
`),n("span",{class:"token list punctuation"},"-"),s(),n("span",{class:"token code-snippet code keyword"},"`pos`"),s(" 为 "),n("span",{class:"token code-snippet code keyword"},"`-1`"),s(` 或者链表中的一个 有效索引 。

`),n("span",{class:"token title important"},[n("span",{class:"token punctuation"},"####"),s(" 💡 **解题思路**")]),s(`

`),n("span",{class:"token list punctuation"},"-"),s(` 思路一：哈希表
  `),n("span",{class:"token list punctuation"},"-"),s(` 最简单的思路是遍历所有节点，每次遍历节点之前，使用哈希表判断该节点是否被访问过；
  `),n("span",{class:"token list punctuation"},"-"),s(` 如果访问过就说明存在环；
  `),n("span",{class:"token list punctuation"},"-"),s(` 如果没访问过则将该节点添加到哈希表中，继续遍历判断；
`),n("span",{class:"token list punctuation"},"-"),s(` 思路二：快慢指针
  `),n("span",{class:"token list punctuation"},"-"),s(` 两个指针从同一位置同时出发，一快一慢，如果有环，那么快的一方总能追上慢的一方；
  `),n("span",{class:"token list punctuation"},"-"),s(` 慢指针每次前进一步，快指针每次前进 n 步（n >= 2）；
  `),n("span",{class:"token list punctuation"},"-"),s(` 如果两个指针在链表头节点以外的某一节点相遇了，那么说明链表有环；
  `),n("span",{class:"token list punctuation"},"-"),s(` 否则，如果（快指针）到达了某个没有后继指针的节点时，那么说明没环；

`),n("span",{class:"token title important"},[n("span",{class:"token punctuation"},"####"),s(" 💎 **代码**")]),s(`

`),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("details")]),n("span",{class:"token punctuation"},">")]),s(`
`),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("summary")]),n("span",{class:"token punctuation"},">")]),s("👉 查看代码 👈"),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),s("summary")]),n("span",{class:"token punctuation"},">")]),s(`

`),n("span",{class:"token code"},[n("span",{class:"token punctuation"},"```"),n("span",{class:"token code-language"},"javascript"),s(`
`),n("span",{class:"token code-block language-javascript"},[n("span",{class:"token doc-comment comment"},[s(`/**
 * `),n("span",{class:"token keyword"},"@param"),s(),n("span",{class:"token class-name"},[n("span",{class:"token punctuation"},"{"),s("ListNode"),n("span",{class:"token punctuation"},"}")]),s(),n("span",{class:"token parameter"},"head"),s(`
 * `),n("span",{class:"token keyword"},"@return"),s(),n("span",{class:"token class-name"},[n("span",{class:"token punctuation"},"{"),s("boolean"),n("span",{class:"token punctuation"},"}")]),s(`
 */`)]),s(`
`),n("span",{class:"token keyword"},"var"),s(),n("span",{class:"token function-variable function"},"hasCycle"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"function"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"head"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
	`),n("span",{class:"token keyword"},"let"),s(" slow "),n("span",{class:"token operator"},"="),s(" head"),n("span",{class:"token punctuation"},";"),s(`
	`),n("span",{class:"token keyword"},"let"),s(" fast "),n("span",{class:"token operator"},"="),s(" head"),n("span",{class:"token punctuation"},";"),s(`
	`),n("span",{class:"token keyword"},"while"),s(),n("span",{class:"token punctuation"},"("),s("fast "),n("span",{class:"token operator"},"&&"),s(" fast"),n("span",{class:"token punctuation"},"."),s("next"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
		slow `),n("span",{class:"token operator"},"="),s(" slow"),n("span",{class:"token punctuation"},"."),s("next"),n("span",{class:"token punctuation"},";"),s(`
		fast `),n("span",{class:"token operator"},"="),s(" fast"),n("span",{class:"token punctuation"},"."),s("next"),n("span",{class:"token punctuation"},"."),s("next"),n("span",{class:"token punctuation"},";"),s(`
		`),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("fast "),n("span",{class:"token operator"},"=="),s(" slow"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token boolean"},"true"),n("span",{class:"token punctuation"},";"),s(`
	`),n("span",{class:"token punctuation"},"}"),s(`
	`),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token boolean"},"false"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"token punctuation"},"```")]),s(`

`),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),s("details")]),n("span",{class:"token punctuation"},">")]),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),cn=n("h3",{id:"_3-合并两个有序链表",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_3-合并两个有序链表","aria-hidden":"true"},"#"),s(" 3. 合并两个有序链表")],-1),ln={id:"📌-21-合并两个有序链表-leetcode",tabindex:"-1"},pn=n("a",{class:"header-anchor",href:"#📌-21-合并两个有序链表-leetcode","aria-hidden":"true"},"#",-1),un={href:"https://wangfuyou.com/leetcode-js/problem/0021.html",target:"_blank",rel:"noopener noreferrer"},dn=n("h4",{id:"💻-题目大意-2",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#💻-题目大意-2","aria-hidden":"true"},"#"),s(" 💻 "),n("strong",null,"题目大意")],-1),rn=n("p",null,"将两个升序链表合并为一个新的 升序 链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。",-1),kn=n("p",null,[n("strong",null,"示例"),s("：")],-1),mn=n("figure",null,[n("img",{src:"https://assets.leetcode.com/uploads/2020/10/03/merge_ex1.jpg",alt:"",tabindex:"0",loading:"lazy"}),n("figcaption")],-1),vn=n("blockquote",null,[n("p",null,"输入：l1 = [1,2,4], l2 = [1,3,4]"),n("p",null,"输出：[1,1,2,3,4,4]")],-1),bn=n("blockquote",null,[n("p",null,"输入：l1 = [], l2 = []"),n("p",null,"输出：[]")],-1),hn=n("blockquote",null,[n("p",null,"输入：l1 = [], l2 = [0]"),n("p",null,"输出：[0]")],-1),_n=n("p",null,[n("strong",null,"说明"),s("：")],-1),yn=n("ul",null,[n("li",null,[s("两个链表的节点数目范围是 "),n("code",null,"[0, 50]")]),n("li",null,[n("code",null,"-100 <= Node.val <= 100")]),n("li",null,[n("code",null,"l1"),s(" 和 "),n("code",null,"l2"),s(" 均按 "),n("strong",null,"非递减顺序"),s(" 排列")])],-1),gn=n("h4",{id:"💡-解题思路-2",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#💡-解题思路-2","aria-hidden":"true"},"#"),s(" 💡 "),n("strong",null,"解题思路")],-1),fn=n("p",null,"利用归并排序的思想，具体步骤如下：",-1),wn=n("ul",null,[n("li",null,[s("使用哑节点 "),n("code",null,"newHead"),s(" 构造一个头节点，并使用 "),n("code",null,"prev"),s(" 指向 "),n("code",null,"newHead"),s(" 用于遍历；")]),n("li",null,[s("然后判断 "),n("code",null,"list1"),s(" 和 "),n("code",null,"list2"),s(" 头节点的值，将较小的头节点加入到合并后的链表中，并向后移动该链表的头节点指针；")]),n("li",null,"重复上一步操作，直到两个链表中出现链表为空的情况；"),n("li",null,"将剩余链表链接到合并后的链表中；"),n("li",null,[s("返回合并后有序链表的头节点 "),n("code",null,"newHead.next"),s("。")])],-1),xn=n("h4",{id:"💎-代码-2",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#💎-代码-2","aria-hidden":"true"},"#"),s(" 💎 "),n("strong",null,"代码")],-1),Ln=n("details",null,[n("summary",null,"👉 查看代码 👈"),n("div",{class:"language-javascript line-numbers-mode","data-ext":"js"},[n("pre",{class:"language-javascript"},[n("code",null,[n("span",{class:"token doc-comment comment"},[s(`/**
 * `),n("span",{class:"token keyword"},"@param"),s(),n("span",{class:"token class-name"},[n("span",{class:"token punctuation"},"{"),s("ListNode"),n("span",{class:"token punctuation"},"}")]),s(),n("span",{class:"token parameter"},"list1"),s(`
 * `),n("span",{class:"token keyword"},"@param"),s(),n("span",{class:"token class-name"},[n("span",{class:"token punctuation"},"{"),s("ListNode"),n("span",{class:"token punctuation"},"}")]),s(),n("span",{class:"token parameter"},"list2"),s(`
 * `),n("span",{class:"token keyword"},"@return"),s(),n("span",{class:"token class-name"},[n("span",{class:"token punctuation"},"{"),s("ListNode"),n("span",{class:"token punctuation"},"}")]),s(`
 */`)]),s(`
`),n("span",{class:"token keyword"},"var"),s(),n("span",{class:"token function-variable function"},"mergeTwoLists"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"function"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},[s("list1"),n("span",{class:"token punctuation"},","),s(" list2")]),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
	`),n("span",{class:"token keyword"},"const"),s(" newHead "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"ListNode"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
	`),n("span",{class:"token keyword"},"let"),s(" prev "),n("span",{class:"token operator"},"="),s(" newHead"),n("span",{class:"token punctuation"},";"),s(`

	`),n("span",{class:"token keyword"},"while"),s(),n("span",{class:"token punctuation"},"("),s("list1 "),n("span",{class:"token operator"},"&&"),s(" list2"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
		`),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("list1"),n("span",{class:"token punctuation"},"."),s("val "),n("span",{class:"token operator"},"<"),s(" list2"),n("span",{class:"token punctuation"},"."),s("val"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
			prev`),n("span",{class:"token punctuation"},"."),s("next "),n("span",{class:"token operator"},"="),s(" list1"),n("span",{class:"token punctuation"},";"),s(`
			list1 `),n("span",{class:"token operator"},"="),s(" list1"),n("span",{class:"token punctuation"},"."),s("next"),n("span",{class:"token punctuation"},";"),s(`
		`),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"else"),s(),n("span",{class:"token punctuation"},"{"),s(`
			prev`),n("span",{class:"token punctuation"},"."),s("next "),n("span",{class:"token operator"},"="),s(" list2"),n("span",{class:"token punctuation"},";"),s(`
			list2 `),n("span",{class:"token operator"},"="),s(" list2"),n("span",{class:"token punctuation"},"."),s("next"),n("span",{class:"token punctuation"},";"),s(`
		`),n("span",{class:"token punctuation"},"}"),s(`
		prev `),n("span",{class:"token operator"},"="),s(" prev"),n("span",{class:"token punctuation"},"."),s("next"),n("span",{class:"token punctuation"},";"),s(`
	`),n("span",{class:"token punctuation"},"}"),s(`

	prev`),n("span",{class:"token punctuation"},"."),s("next "),n("span",{class:"token operator"},"="),s(" list1 "),n("span",{class:"token operator"},"!="),s(),n("span",{class:"token keyword"},"null"),s(),n("span",{class:"token operator"},"?"),s(" list1 "),n("span",{class:"token operator"},":"),s(" list2"),n("span",{class:"token punctuation"},";"),s(`
	`),n("span",{class:"token keyword"},"return"),s(" newHead"),n("span",{class:"token punctuation"},"."),s("next"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])])],-1),jn=n("div",{class:"language-markdown line-numbers-mode","data-ext":"md"},[n("pre",{class:"language-markdown"},[n("code",null,[n("span",{class:"token title important"},[n("span",{class:"token punctuation"},"####"),s(" 📌 [21. 合并两个有序链表 - LeetCode](https://wangfuyou.com/leetcode-js/problem/0021.html)")]),s(`

`),n("span",{class:"token title important"},[n("span",{class:"token punctuation"},"####"),s(" 💻 **题目大意**")]),s(`

将两个升序链表合并为一个新的 升序 链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。

`),n("span",{class:"token bold"},[n("span",{class:"token punctuation"},"**"),n("span",{class:"token content"},"示例"),n("span",{class:"token punctuation"},"**")]),s(`：

![](https://assets.leetcode.com/uploads/2020/10/03/merge_ex1.jpg)

`),n("span",{class:"token blockquote punctuation"},">"),s(` 输入：l1 = [1,2,4], l2 = [1,3,4]
`),n("span",{class:"token blockquote punctuation"},">"),s(`
`),n("span",{class:"token blockquote punctuation"},">"),s(` 输出：[1,1,2,3,4,4]

`),n("span",{class:"token blockquote punctuation"},">"),s(` 输入：l1 = [], l2 = []
`),n("span",{class:"token blockquote punctuation"},">"),s(`
`),n("span",{class:"token blockquote punctuation"},">"),s(` 输出：[]

`),n("span",{class:"token blockquote punctuation"},">"),s(` 输入：l1 = [], l2 = [0]
`),n("span",{class:"token blockquote punctuation"},">"),s(`
`),n("span",{class:"token blockquote punctuation"},">"),s(` 输出：[0]

`),n("span",{class:"token bold"},[n("span",{class:"token punctuation"},"**"),n("span",{class:"token content"},"说明"),n("span",{class:"token punctuation"},"**")]),s(`：

`),n("span",{class:"token list punctuation"},"-"),s(" 两个链表的节点数目范围是 "),n("span",{class:"token code-snippet code keyword"},"`[0, 50]`"),s(`
`),n("span",{class:"token list punctuation"},"-"),s(),n("span",{class:"token code-snippet code keyword"},"`-100 <= Node.val <= 100`"),s(`
`),n("span",{class:"token list punctuation"},"-"),s(),n("span",{class:"token code-snippet code keyword"},"`l1`"),s(" 和 "),n("span",{class:"token code-snippet code keyword"},"`l2`"),s(" 均按 "),n("span",{class:"token bold"},[n("span",{class:"token punctuation"},"**"),n("span",{class:"token content"},"非递减顺序"),n("span",{class:"token punctuation"},"**")]),s(` 排列

`),n("span",{class:"token title important"},[n("span",{class:"token punctuation"},"####"),s(" 💡 **解题思路**")]),s(`

利用归并排序的思想，具体步骤如下：

`),n("span",{class:"token list punctuation"},"-"),s(" 使用哑节点 "),n("span",{class:"token code-snippet code keyword"},"`newHead`"),s(" 构造一个头节点，并使用 "),n("span",{class:"token code-snippet code keyword"},"`prev`"),s(" 指向 "),n("span",{class:"token code-snippet code keyword"},"`newHead`"),s(` 用于遍历；
`),n("span",{class:"token list punctuation"},"-"),s(" 然后判断 "),n("span",{class:"token code-snippet code keyword"},"`list1`"),s(" 和 "),n("span",{class:"token code-snippet code keyword"},"`list2`"),s(` 头节点的值，将较小的头节点加入到合并后的链表中，并向后移动该链表的头节点指针；
`),n("span",{class:"token list punctuation"},"-"),s(` 重复上一步操作，直到两个链表中出现链表为空的情况；
`),n("span",{class:"token list punctuation"},"-"),s(` 将剩余链表链接到合并后的链表中；
`),n("span",{class:"token list punctuation"},"-"),s(" 返回合并后有序链表的头节点 "),n("span",{class:"token code-snippet code keyword"},"`newHead.next`"),s(`。

`),n("span",{class:"token title important"},[n("span",{class:"token punctuation"},"####"),s(" 💎 **代码**")]),s(`

`),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("details")]),n("span",{class:"token punctuation"},">")]),s(`
`),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("summary")]),n("span",{class:"token punctuation"},">")]),s("👉 查看代码 👈"),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),s("summary")]),n("span",{class:"token punctuation"},">")]),s(`

`),n("span",{class:"token code"},[n("span",{class:"token punctuation"},"```"),n("span",{class:"token code-language"},"javascript"),s(`
`),n("span",{class:"token code-block language-javascript"},[n("span",{class:"token doc-comment comment"},[s(`/**
 * `),n("span",{class:"token keyword"},"@param"),s(),n("span",{class:"token class-name"},[n("span",{class:"token punctuation"},"{"),s("ListNode"),n("span",{class:"token punctuation"},"}")]),s(),n("span",{class:"token parameter"},"list1"),s(`
 * `),n("span",{class:"token keyword"},"@param"),s(),n("span",{class:"token class-name"},[n("span",{class:"token punctuation"},"{"),s("ListNode"),n("span",{class:"token punctuation"},"}")]),s(),n("span",{class:"token parameter"},"list2"),s(`
 * `),n("span",{class:"token keyword"},"@return"),s(),n("span",{class:"token class-name"},[n("span",{class:"token punctuation"},"{"),s("ListNode"),n("span",{class:"token punctuation"},"}")]),s(`
 */`)]),s(`
`),n("span",{class:"token keyword"},"var"),s(),n("span",{class:"token function-variable function"},"mergeTwoLists"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"function"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},[s("list1"),n("span",{class:"token punctuation"},","),s(" list2")]),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
	`),n("span",{class:"token keyword"},"const"),s(" newHead "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"ListNode"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
	`),n("span",{class:"token keyword"},"let"),s(" prev "),n("span",{class:"token operator"},"="),s(" newHead"),n("span",{class:"token punctuation"},";"),s(`

	`),n("span",{class:"token keyword"},"while"),s(),n("span",{class:"token punctuation"},"("),s("list1 "),n("span",{class:"token operator"},"&&"),s(" list2"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
		`),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("list1"),n("span",{class:"token punctuation"},"."),s("val "),n("span",{class:"token operator"},"<"),s(" list2"),n("span",{class:"token punctuation"},"."),s("val"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
			prev`),n("span",{class:"token punctuation"},"."),s("next "),n("span",{class:"token operator"},"="),s(" list1"),n("span",{class:"token punctuation"},";"),s(`
			list1 `),n("span",{class:"token operator"},"="),s(" list1"),n("span",{class:"token punctuation"},"."),s("next"),n("span",{class:"token punctuation"},";"),s(`
		`),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"else"),s(),n("span",{class:"token punctuation"},"{"),s(`
			prev`),n("span",{class:"token punctuation"},"."),s("next "),n("span",{class:"token operator"},"="),s(" list2"),n("span",{class:"token punctuation"},";"),s(`
			list2 `),n("span",{class:"token operator"},"="),s(" list2"),n("span",{class:"token punctuation"},"."),s("next"),n("span",{class:"token punctuation"},";"),s(`
		`),n("span",{class:"token punctuation"},"}"),s(`
		prev `),n("span",{class:"token operator"},"="),s(" prev"),n("span",{class:"token punctuation"},"."),s("next"),n("span",{class:"token punctuation"},";"),s(`
	`),n("span",{class:"token punctuation"},"}"),s(`

	prev`),n("span",{class:"token punctuation"},"."),s("next "),n("span",{class:"token operator"},"="),s(" list1 "),n("span",{class:"token operator"},"!="),s(),n("span",{class:"token keyword"},"null"),s(),n("span",{class:"token operator"},"?"),s(" list1 "),n("span",{class:"token operator"},":"),s(" list2"),n("span",{class:"token punctuation"},";"),s(`
	`),n("span",{class:"token keyword"},"return"),s(" newHead"),n("span",{class:"token punctuation"},"."),s("next"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"token punctuation"},"```")]),s(`

`),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),s("details")]),n("span",{class:"token punctuation"},">")]),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),Nn=n("h3",{id:"_4-删除链表倒数第-n-个节点",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_4-删除链表倒数第-n-个节点","aria-hidden":"true"},"#"),s(" 4. 删除链表倒数第 n 个节点")],-1),Cn={id:"📌-19-删除链表的倒数第-n-个节点-leetcode",tabindex:"-1"},qn=n("a",{class:"header-anchor",href:"#📌-19-删除链表的倒数第-n-个节点-leetcode","aria-hidden":"true"},"#",-1),On={href:"https://wangfuyou.com/leetcode-js/problem/0019.html",target:"_blank",rel:"noopener noreferrer"},Sn=n("h4",{id:"💻-题目大意-3",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#💻-题目大意-3","aria-hidden":"true"},"#"),s(" 💻 "),n("strong",null,"题目大意")],-1),Un=n("p",null,[s("给定一个链表的头节点 "),n("code",null,"head"),s(" ，删除链表的倒数第 "),n("code",null,"n"),s(" 个节点，并且返回链表的头节点。")],-1),Rn=n("p",null,[n("strong",null,"示例"),s("：")],-1),zn=n("figure",null,[n("img",{src:"https://assets.leetcode.com/uploads/2020/10/03/remove_ex1.jpg",alt:"",tabindex:"0",loading:"lazy"}),n("figcaption")],-1),An=n("blockquote",null,[n("p",null,"输入：head = [1,2,3,4,5], n = 2"),n("p",null,"输出：[1,2,3,5]")],-1),Bn=n("blockquote",null,[n("p",null,"输入：head = [1], n = 1"),n("p",null,"输出：[]")],-1),Dn=n("blockquote",null,[n("p",null,"输入：head = [1,2], n = 1"),n("p",null,"输出：[1]")],-1),En=n("p",null,[n("strong",null,"说明"),s("：")],-1),Hn=n("ul",null,[n("li",null,"要求使用一次遍历实现"),n("li",null,[s("链表中节点的数目为 "),n("code",null,"sz")]),n("li",null,[n("code",null,"1 ≤ sz ≤ 30")]),n("li",null,[n("code",null,"0 ≤ Node.val ≤ 100")]),n("li",null,[n("code",null,"1 ≤ n ≤ sz")])],-1),In=n("h4",{id:"💡-解题思路-3",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#💡-解题思路-3","aria-hidden":"true"},"#"),s(" 💡 "),n("strong",null,"解题思路")],-1),Tn=n("ul",null,[n("li",null,[n("p",null,"思路一：单指针"),n("ul",null,[n("li",null,[s("先遍历一遍链表，统计一下节点个数为 "),n("code",null,"len"),s("，再遍历到 "),n("code",null,"len - n"),s(" 的位置，删除该位置上的节点；")]),n("li",null,"需要注意的一个特例是，有可能要删除头节点，在遍历之前，新建一个头节点，让其指向原来的头节点。")])]),n("li",null,[n("p",null,"思路二：快慢指针"),n("ul",null,[n("li",null,[s("使用两个指针 "),n("code",null,"slow"),s("、"),n("code",null,"fast"),s("，都指向链表的头节点;")]),n("li",null,[s("让快指针 "),n("code",null,"fast"),s(" 先走 n 步；")]),n("li",null,"再让快慢指针同时走，每次一步，等快指针遍历到链表尾部的时候，慢指针就刚好遍历到了倒数第 n 个节点位置；"),n("li",null,"将该位置上的节点删除即可。")])])],-1),Fn=n("h4",{id:"💎-代码-3",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#💎-代码-3","aria-hidden":"true"},"#"),s(" 💎 "),n("strong",null,"代码")],-1),Mn=n("details",null,[n("summary",null,"👉 查看代码 👈"),n("div",{class:"language-javascript line-numbers-mode","data-ext":"js"},[n("pre",{class:"language-javascript"},[n("code",null,[n("span",{class:"token doc-comment comment"},[s(`/**
 * `),n("span",{class:"token keyword"},"@param"),s(),n("span",{class:"token class-name"},[n("span",{class:"token punctuation"},"{"),s("ListNode"),n("span",{class:"token punctuation"},"}")]),s(),n("span",{class:"token parameter"},"head"),s(`
 * `),n("span",{class:"token keyword"},"@param"),s(),n("span",{class:"token class-name"},[n("span",{class:"token punctuation"},"{"),s("number"),n("span",{class:"token punctuation"},"}")]),s(),n("span",{class:"token parameter"},"n"),s(`
 * `),n("span",{class:"token keyword"},"@return"),s(),n("span",{class:"token class-name"},[n("span",{class:"token punctuation"},"{"),s("ListNode"),n("span",{class:"token punctuation"},"}")]),s(`
 */`)]),s(`
`),n("span",{class:"token keyword"},"var"),s(),n("span",{class:"token function-variable function"},"removeNthFromEnd"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"function"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},[s("head"),n("span",{class:"token punctuation"},","),s(" n")]),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
	`),n("span",{class:"token keyword"},"let"),s(" res "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"ListNode"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},","),s(" head"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
	`),n("span",{class:"token keyword"},"let"),s(" slow "),n("span",{class:"token operator"},"="),s(" res"),n("span",{class:"token punctuation"},";"),s(`
	`),n("span",{class:"token keyword"},"let"),s(" fast "),n("span",{class:"token operator"},"="),s(" head"),n("span",{class:"token punctuation"},";"),s(`
	`),n("span",{class:"token keyword"},"while"),s(),n("span",{class:"token punctuation"},"("),s("n"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
		fast `),n("span",{class:"token operator"},"="),s(" fast"),n("span",{class:"token punctuation"},"."),s("next"),n("span",{class:"token punctuation"},";"),s(`
		n`),n("span",{class:"token operator"},"--"),n("span",{class:"token punctuation"},";"),s(`
	`),n("span",{class:"token punctuation"},"}"),s(`
	`),n("span",{class:"token keyword"},"while"),s(),n("span",{class:"token punctuation"},"("),s("fast"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
		slow `),n("span",{class:"token operator"},"="),s(" slow"),n("span",{class:"token punctuation"},"."),s("next"),n("span",{class:"token punctuation"},";"),s(`
		fast `),n("span",{class:"token operator"},"="),s(" fast"),n("span",{class:"token punctuation"},"."),s("next"),n("span",{class:"token punctuation"},";"),s(`
	`),n("span",{class:"token punctuation"},"}"),s(`
	slow`),n("span",{class:"token punctuation"},"."),s("next "),n("span",{class:"token operator"},"="),s(" slow"),n("span",{class:"token punctuation"},"."),s("next"),n("span",{class:"token punctuation"},"."),s("next"),n("span",{class:"token punctuation"},";"),s(`
	`),n("span",{class:"token keyword"},"return"),s(" res"),n("span",{class:"token punctuation"},"."),s("next"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])])],-1),Pn=n("div",{class:"language-markdown line-numbers-mode","data-ext":"md"},[n("pre",{class:"language-markdown"},[n("code",null,[n("span",{class:"token title important"},[n("span",{class:"token punctuation"},"####"),s(" 📌 [19. 删除链表的倒数第 N 个节点 - LeetCode](https://wangfuyou.com/leetcode-js/problem/0019.html)")]),s(`

`),n("span",{class:"token title important"},[n("span",{class:"token punctuation"},"####"),s(" 💻 **题目大意**")]),s(`

给定一个链表的头节点 `),n("span",{class:"token code-snippet code keyword"},"`head`"),s(" ，删除链表的倒数第 "),n("span",{class:"token code-snippet code keyword"},"`n`"),s(` 个节点，并且返回链表的头节点。

`),n("span",{class:"token bold"},[n("span",{class:"token punctuation"},"**"),n("span",{class:"token content"},"示例"),n("span",{class:"token punctuation"},"**")]),s(`：

![](https://assets.leetcode.com/uploads/2020/10/03/remove_ex1.jpg)

`),n("span",{class:"token blockquote punctuation"},">"),s(` 输入：head = [1,2,3,4,5], n = 2
`),n("span",{class:"token blockquote punctuation"},">"),s(`
`),n("span",{class:"token blockquote punctuation"},">"),s(` 输出：[1,2,3,5]

`),n("span",{class:"token blockquote punctuation"},">"),s(` 输入：head = [1], n = 1
`),n("span",{class:"token blockquote punctuation"},">"),s(`
`),n("span",{class:"token blockquote punctuation"},">"),s(` 输出：[]

`),n("span",{class:"token blockquote punctuation"},">"),s(` 输入：head = [1,2], n = 1
`),n("span",{class:"token blockquote punctuation"},">"),s(`
`),n("span",{class:"token blockquote punctuation"},">"),s(` 输出：[1]

`),n("span",{class:"token bold"},[n("span",{class:"token punctuation"},"**"),n("span",{class:"token content"},"说明"),n("span",{class:"token punctuation"},"**")]),s(`：

`),n("span",{class:"token list punctuation"},"-"),s(` 要求使用一次遍历实现
`),n("span",{class:"token list punctuation"},"-"),s(" 链表中节点的数目为 "),n("span",{class:"token code-snippet code keyword"},"`sz`"),s(`
`),n("span",{class:"token list punctuation"},"-"),s(),n("span",{class:"token code-snippet code keyword"},"`1 ≤ sz ≤ 30`"),s(`
`),n("span",{class:"token list punctuation"},"-"),s(),n("span",{class:"token code-snippet code keyword"},"`0 ≤ Node.val ≤ 100`"),s(`
`),n("span",{class:"token list punctuation"},"-"),s(),n("span",{class:"token code-snippet code keyword"},"`1 ≤ n ≤ sz`"),s(`

`),n("span",{class:"token title important"},[n("span",{class:"token punctuation"},"####"),s(" 💡 **解题思路**")]),s(`

`),n("span",{class:"token list punctuation"},"-"),s(` 思路一：单指针

  `),n("span",{class:"token list punctuation"},"-"),s(" 先遍历一遍链表，统计一下节点个数为 "),n("span",{class:"token code-snippet code keyword"},"`len`"),s("，再遍历到 "),n("span",{class:"token code-snippet code keyword"},"`len - n`"),s(` 的位置，删除该位置上的节点；
  `),n("span",{class:"token list punctuation"},"-"),s(` 需要注意的一个特例是，有可能要删除头节点，在遍历之前，新建一个头节点，让其指向原来的头节点。

`),n("span",{class:"token list punctuation"},"-"),s(` 思路二：快慢指针
  `),n("span",{class:"token list punctuation"},"-"),s(" 使用两个指针 "),n("span",{class:"token code-snippet code keyword"},"`slow`"),s("、"),n("span",{class:"token code-snippet code keyword"},"`fast`"),s(`，都指向链表的头节点;
  `),n("span",{class:"token list punctuation"},"-"),s(" 让快指针 "),n("span",{class:"token code-snippet code keyword"},"`fast`"),s(` 先走 n 步；
  `),n("span",{class:"token list punctuation"},"-"),s(` 再让快慢指针同时走，每次一步，等快指针遍历到链表尾部的时候，慢指针就刚好遍历到了倒数第 n 个节点位置；
  `),n("span",{class:"token list punctuation"},"-"),s(` 将该位置上的节点删除即可。

`),n("span",{class:"token title important"},[n("span",{class:"token punctuation"},"####"),s(" 💎 **代码**")]),s(`

`),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("details")]),n("span",{class:"token punctuation"},">")]),s(`
`),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("summary")]),n("span",{class:"token punctuation"},">")]),s("👉 查看代码 👈"),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),s("summary")]),n("span",{class:"token punctuation"},">")]),s(`

`),n("span",{class:"token code"},[n("span",{class:"token punctuation"},"```"),n("span",{class:"token code-language"},"javascript"),s(`
`),n("span",{class:"token code-block language-javascript"},[n("span",{class:"token doc-comment comment"},[s(`/**
 * `),n("span",{class:"token keyword"},"@param"),s(),n("span",{class:"token class-name"},[n("span",{class:"token punctuation"},"{"),s("ListNode"),n("span",{class:"token punctuation"},"}")]),s(),n("span",{class:"token parameter"},"head"),s(`
 * `),n("span",{class:"token keyword"},"@param"),s(),n("span",{class:"token class-name"},[n("span",{class:"token punctuation"},"{"),s("number"),n("span",{class:"token punctuation"},"}")]),s(),n("span",{class:"token parameter"},"n"),s(`
 * `),n("span",{class:"token keyword"},"@return"),s(),n("span",{class:"token class-name"},[n("span",{class:"token punctuation"},"{"),s("ListNode"),n("span",{class:"token punctuation"},"}")]),s(`
 */`)]),s(`
`),n("span",{class:"token keyword"},"var"),s(),n("span",{class:"token function-variable function"},"removeNthFromEnd"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"function"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},[s("head"),n("span",{class:"token punctuation"},","),s(" n")]),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
	`),n("span",{class:"token keyword"},"let"),s(" res "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"ListNode"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},","),s(" head"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
	`),n("span",{class:"token keyword"},"let"),s(" slow "),n("span",{class:"token operator"},"="),s(" res"),n("span",{class:"token punctuation"},";"),s(`
	`),n("span",{class:"token keyword"},"let"),s(" fast "),n("span",{class:"token operator"},"="),s(" head"),n("span",{class:"token punctuation"},";"),s(`
	`),n("span",{class:"token keyword"},"while"),s(),n("span",{class:"token punctuation"},"("),s("n"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
		fast `),n("span",{class:"token operator"},"="),s(" fast"),n("span",{class:"token punctuation"},"."),s("next"),n("span",{class:"token punctuation"},";"),s(`
		n`),n("span",{class:"token operator"},"--"),n("span",{class:"token punctuation"},";"),s(`
	`),n("span",{class:"token punctuation"},"}"),s(`
	`),n("span",{class:"token keyword"},"while"),s(),n("span",{class:"token punctuation"},"("),s("fast"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
		slow `),n("span",{class:"token operator"},"="),s(" slow"),n("span",{class:"token punctuation"},"."),s("next"),n("span",{class:"token punctuation"},";"),s(`
		fast `),n("span",{class:"token operator"},"="),s(" fast"),n("span",{class:"token punctuation"},"."),s("next"),n("span",{class:"token punctuation"},";"),s(`
	`),n("span",{class:"token punctuation"},"}"),s(`
	slow`),n("span",{class:"token punctuation"},"."),s("next "),n("span",{class:"token operator"},"="),s(" slow"),n("span",{class:"token punctuation"},"."),s("next"),n("span",{class:"token punctuation"},"."),s("next"),n("span",{class:"token punctuation"},";"),s(`
	`),n("span",{class:"token keyword"},"return"),s(" res"),n("span",{class:"token punctuation"},"."),s("next"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"token punctuation"},"```")]),s(`

`),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),s("details")]),n("span",{class:"token punctuation"},">")]),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),Vn=n("h3",{id:"_5-求链表的中间节点",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_5-求链表的中间节点","aria-hidden":"true"},"#"),s(" 5. 求链表的中间节点")],-1),Yn={id:"📌-876-链表的中间节点-leetcode",tabindex:"-1"},Kn=n("a",{class:"header-anchor",href:"#📌-876-链表的中间节点-leetcode","aria-hidden":"true"},"#",-1),Jn={href:"https://wangfuyou.com/leetcode-js/problem/0876.html",target:"_blank",rel:"noopener noreferrer"},Xn=n("h4",{id:"💻-题目大意-4",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#💻-题目大意-4","aria-hidden":"true"},"#"),s(" 💻 "),n("strong",null,"题目大意")],-1),Zn=n("p",null,[s("给定一个单链表的头节点 "),n("code",null,"head"),s("，返回链表的中间节点。如果有两个中间节点，则返回第二个中间节点。")],-1),$n=n("p",null,[n("strong",null,"示例"),s("：")],-1),Gn=n("figure",null,[n("img",{src:"https://assets.leetcode.com/uploads/2021/07/23/lc-midlist1.jpg",alt:"",tabindex:"0",loading:"lazy"}),n("figcaption")],-1),Qn=n("blockquote",null,[n("p",null,"输入：head = [1,2,3,4,5]"),n("p",null,"输出：[3,4,5]"),n("p",null,"解释：链表只有一个中间节点，值为 3 。")],-1),Wn=n("figure",null,[n("img",{src:"https://assets.leetcode.com/uploads/2021/07/23/lc-midlist2.jpg",alt:"",tabindex:"0",loading:"lazy"}),n("figcaption")],-1),ns=n("blockquote",null,[n("p",null,"输入：head = [1,2,3,4,5,6]"),n("p",null,"输出：[4,5,6]"),n("p",null,"解释：该链表有两个中间节点，值分别为 3 和 4 ，返回第二个节点。")],-1),ss=n("p",null,[n("strong",null,"说明"),s("：")],-1),as=n("p",null,[s("给定链表的节点数介于 "),n("code",null,"1"),s(" 和 "),n("code",null,"100"),s(" 之间。")],-1),ts=n("h4",{id:"💡-解题思路-4",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#💡-解题思路-4","aria-hidden":"true"},"#"),s(" 💡 "),n("strong",null,"解题思路")],-1),es=n("ul",null,[n("li",null,[n("p",null,"思路一：单指针"),n("ul",null,[n("li",null,"先遍历一遍链表，统计一下节点个数为 n，再遍历到 n / 2 的位置，返回中间节点；"),n("li",null,"需要注意的一个特例是，有可能要删除头节点，在遍历之前，新建一个头节点，让其指向原来的头节点。")])]),n("li",null,[n("p",null,"思路二：快慢指针"),n("ul",null,[n("li",null,"使用步长不一致的快慢指针进行一次遍历找到链表的中间节点；"),n("li",null,[s("使用两个指针 "),n("code",null,"slow"),s("、"),n("code",null,"fast"),s("，都指向链表的头节点;")]),n("li",null,[s("将快、慢指针同时向右移动，其中慢指针每次移动 1 步，即 "),n("code",null,"slow = slow.next"),s("；快指针每次移动 2 步，即 "),n("code",null,"fast = fast.next.next"),s("；")]),n("li",null,[s("等到快指针移动到链表尾部（即 "),n("code",null,"fast.next == null"),s("）时跳出循环体，此时 slow 指向链表中间位置；")]),n("li",null,"返回 slow 指针。")])])],-1),os=n("h4",{id:"💎-代码-4",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#💎-代码-4","aria-hidden":"true"},"#"),s(" 💎 "),n("strong",null,"代码")],-1),cs=n("details",null,[n("summary",null,"👉 查看代码 👈"),n("div",{class:"language-javascript line-numbers-mode","data-ext":"js"},[n("pre",{class:"language-javascript"},[n("code",null,[n("span",{class:"token doc-comment comment"},[s(`/**
 * `),n("span",{class:"token keyword"},"@param"),s(),n("span",{class:"token class-name"},[n("span",{class:"token punctuation"},"{"),s("ListNode"),n("span",{class:"token punctuation"},"}")]),s(),n("span",{class:"token parameter"},"head"),s(`
 * `),n("span",{class:"token keyword"},"@return"),s(),n("span",{class:"token class-name"},[n("span",{class:"token punctuation"},"{"),s("ListNode"),n("span",{class:"token punctuation"},"}")]),s(`
 */`)]),s(`
`),n("span",{class:"token keyword"},"var"),s(),n("span",{class:"token function-variable function"},"middleNode"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"function"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"head"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
	`),n("span",{class:"token keyword"},"let"),s(" slow "),n("span",{class:"token operator"},"="),s(" head"),n("span",{class:"token punctuation"},";"),s(`
	`),n("span",{class:"token keyword"},"let"),s(" fast "),n("span",{class:"token operator"},"="),s(" head"),n("span",{class:"token punctuation"},";"),s(`
	`),n("span",{class:"token keyword"},"while"),s(),n("span",{class:"token punctuation"},"("),s("fast "),n("span",{class:"token operator"},"&&"),s(" fast"),n("span",{class:"token punctuation"},"."),s("next"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
		slow `),n("span",{class:"token operator"},"="),s(" slow"),n("span",{class:"token punctuation"},"."),s("next"),n("span",{class:"token punctuation"},";"),s(`
		fast `),n("span",{class:"token operator"},"="),s(" fast"),n("span",{class:"token punctuation"},"."),s("next"),n("span",{class:"token punctuation"},"."),s("next"),n("span",{class:"token punctuation"},";"),s(`
	`),n("span",{class:"token punctuation"},"}"),s(`
	`),n("span",{class:"token keyword"},"return"),s(" slow"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])])],-1),ls=n("div",{class:"language-markdown line-numbers-mode","data-ext":"md"},[n("pre",{class:"language-markdown"},[n("code",null,[n("span",{class:"token title important"},[n("span",{class:"token punctuation"},"####"),s(" 📌 [876. 链表的中间节点 - LeetCode](https://wangfuyou.com/leetcode-js/problem/0876.html)")]),s(`

`),n("span",{class:"token title important"},[n("span",{class:"token punctuation"},"####"),s(" 💻 **题目大意**")]),s(`

给定一个单链表的头节点 `),n("span",{class:"token code-snippet code keyword"},"`head`"),s(`，返回链表的中间节点。如果有两个中间节点，则返回第二个中间节点。

`),n("span",{class:"token bold"},[n("span",{class:"token punctuation"},"**"),n("span",{class:"token content"},"示例"),n("span",{class:"token punctuation"},"**")]),s(`：

![](https://assets.leetcode.com/uploads/2021/07/23/lc-midlist1.jpg)

`),n("span",{class:"token blockquote punctuation"},">"),s(` 输入：head = [1,2,3,4,5]
`),n("span",{class:"token blockquote punctuation"},">"),s(`
`),n("span",{class:"token blockquote punctuation"},">"),s(` 输出：[3,4,5]
`),n("span",{class:"token blockquote punctuation"},">"),s(`
`),n("span",{class:"token blockquote punctuation"},">"),s(` 解释：链表只有一个中间节点，值为 3 。

![](https://assets.leetcode.com/uploads/2021/07/23/lc-midlist2.jpg)

`),n("span",{class:"token blockquote punctuation"},">"),s(` 输入：head = [1,2,3,4,5,6]
`),n("span",{class:"token blockquote punctuation"},">"),s(`
`),n("span",{class:"token blockquote punctuation"},">"),s(` 输出：[4,5,6]
`),n("span",{class:"token blockquote punctuation"},">"),s(`
`),n("span",{class:"token blockquote punctuation"},">"),s(` 解释：该链表有两个中间节点，值分别为 3 和 4 ，返回第二个节点。

`),n("span",{class:"token bold"},[n("span",{class:"token punctuation"},"**"),n("span",{class:"token content"},"说明"),n("span",{class:"token punctuation"},"**")]),s(`：

给定链表的节点数介于 `),n("span",{class:"token code-snippet code keyword"},"`1`"),s(" 和 "),n("span",{class:"token code-snippet code keyword"},"`100`"),s(` 之间。

`),n("span",{class:"token title important"},[n("span",{class:"token punctuation"},"####"),s(" 💡 **解题思路**")]),s(`

`),n("span",{class:"token list punctuation"},"-"),s(` 思路一：单指针

  `),n("span",{class:"token list punctuation"},"-"),s(` 先遍历一遍链表，统计一下节点个数为 n，再遍历到 n / 2 的位置，返回中间节点；
  `),n("span",{class:"token list punctuation"},"-"),s(` 需要注意的一个特例是，有可能要删除头节点，在遍历之前，新建一个头节点，让其指向原来的头节点。

`),n("span",{class:"token list punctuation"},"-"),s(` 思路二：快慢指针
  `),n("span",{class:"token list punctuation"},"-"),s(` 使用步长不一致的快慢指针进行一次遍历找到链表的中间节点；
  `),n("span",{class:"token list punctuation"},"-"),s(" 使用两个指针 "),n("span",{class:"token code-snippet code keyword"},"`slow`"),s("、"),n("span",{class:"token code-snippet code keyword"},"`fast`"),s(`，都指向链表的头节点;
  `),n("span",{class:"token list punctuation"},"-"),s(" 将快、慢指针同时向右移动，其中慢指针每次移动 1 步，即 "),n("span",{class:"token code-snippet code keyword"},"`slow = slow.next`"),s("；快指针每次移动 2 步，即 "),n("span",{class:"token code-snippet code keyword"},"`fast = fast.next.next`"),s(`；
  `),n("span",{class:"token list punctuation"},"-"),s(" 等到快指针移动到链表尾部（即 "),n("span",{class:"token code-snippet code keyword"},"`fast.next == null`"),s(`）时跳出循环体，此时 slow 指向链表中间位置；
  `),n("span",{class:"token list punctuation"},"-"),s(` 返回 slow 指针。

`),n("span",{class:"token title important"},[n("span",{class:"token punctuation"},"####"),s(" 💎 **代码**")]),s(`

`),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("details")]),n("span",{class:"token punctuation"},">")]),s(`
`),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("summary")]),n("span",{class:"token punctuation"},">")]),s("👉 查看代码 👈"),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),s("summary")]),n("span",{class:"token punctuation"},">")]),s(`

`),n("span",{class:"token code"},[n("span",{class:"token punctuation"},"```"),n("span",{class:"token code-language"},"javascript"),s(`
`),n("span",{class:"token code-block language-javascript"},[n("span",{class:"token doc-comment comment"},[s(`/**
 * `),n("span",{class:"token keyword"},"@param"),s(),n("span",{class:"token class-name"},[n("span",{class:"token punctuation"},"{"),s("ListNode"),n("span",{class:"token punctuation"},"}")]),s(),n("span",{class:"token parameter"},"head"),s(`
 * `),n("span",{class:"token keyword"},"@return"),s(),n("span",{class:"token class-name"},[n("span",{class:"token punctuation"},"{"),s("ListNode"),n("span",{class:"token punctuation"},"}")]),s(`
 */`)]),s(`
`),n("span",{class:"token keyword"},"var"),s(),n("span",{class:"token function-variable function"},"middleNode"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"function"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"head"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
	`),n("span",{class:"token keyword"},"let"),s(" slow "),n("span",{class:"token operator"},"="),s(" head"),n("span",{class:"token punctuation"},";"),s(`
	`),n("span",{class:"token keyword"},"let"),s(" fast "),n("span",{class:"token operator"},"="),s(" head"),n("span",{class:"token punctuation"},";"),s(`
	`),n("span",{class:"token keyword"},"while"),s(),n("span",{class:"token punctuation"},"("),s("fast "),n("span",{class:"token operator"},"&&"),s(" fast"),n("span",{class:"token punctuation"},"."),s("next"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
		slow `),n("span",{class:"token operator"},"="),s(" slow"),n("span",{class:"token punctuation"},"."),s("next"),n("span",{class:"token punctuation"},";"),s(`
		fast `),n("span",{class:"token operator"},"="),s(" fast"),n("span",{class:"token punctuation"},"."),s("next"),n("span",{class:"token punctuation"},"."),s("next"),n("span",{class:"token punctuation"},";"),s(`
	`),n("span",{class:"token punctuation"},"}"),s(`
	`),n("span",{class:"token keyword"},"return"),s(" slow"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"token punctuation"},"```")]),s(`

`),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),s("details")]),n("span",{class:"token punctuation"},">")]),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),ps=n("h3",{id:"_6-lru-缓存淘汰算法",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_6-lru-缓存淘汰算法","aria-hidden":"true"},"#"),s(" 6. LRU 缓存淘汰算法")],-1),is=n("p",null,"另一个经典的链表应用场景，就是 LRU 缓存淘汰算法。",-1),us=n("p",null,"缓存是一种提高数据读取性能的技术，在硬件设计、软件开发中都有着非常广泛的应用，比如常见的 CPU 缓存、数据库缓存、浏览器缓存等等。",-1),ds=n("p",null,[s("缓存的大小有限，当缓存被用满时，哪些数据应该被清理出去，哪些数据应该被保留？这就需要缓存淘汰策略来决定。常见的策略有三种：先进先出策略 FIFO（First In，First Out）、最少使用策略 LFU（Least Frequently Used）、"),n("strong",null,"最近最少使用策略 LRU（Least Recently Used）"),s("。")],-1),rs={id:"📌-146-lru-缓存-leetcode",tabindex:"-1"},ks=n("a",{class:"header-anchor",href:"#📌-146-lru-缓存-leetcode","aria-hidden":"true"},"#",-1),ms={href:"https://wangfuyou.com/leetcode-js/problem/0146.html",target:"_blank",rel:"noopener noreferrer"},vs=n("h4",{id:"💻-题目大意-5",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#💻-题目大意-5","aria-hidden":"true"},"#"),s(" 💻 "),n("strong",null,"题目大意")],-1),bs=n("p",null,"请你设计并实现一个满足 LRU (最近最少使用) 缓存 约束的数据结构。",-1),hs=n("p",null,[s("实现 "),n("code",null,"LRUCache"),s(" 类：")],-1),_s=n("ul",null,[n("li",null,[n("code",null,"LRUCache(int capacity)"),s(" 以 "),n("strong",null,"正整数"),s(" 作为容量 "),n("code",null,"capacity"),s(" 初始化 LRU 缓存")]),n("li",null,[n("code",null,"int get(int key)"),s(" 如果关键字 key 存在于缓存中，则返回关键字的值，否则返回 "),n("code",null,"-1"),s(" 。")]),n("li",null,[n("code",null,"void put(int key, int value)"),s(" 如果关键字 "),n("code",null,"key"),s(" 已经存在，则变更其数据值 "),n("code",null,"value"),s(" ；如果不存在，则向缓存中插入该组 "),n("code",null,"key-value"),s(" 。如果插入操作导致关键字数量超过 "),n("code",null,"capacity"),s(" ，则应该 "),n("strong",null,"逐出"),s(" 最久未使用的关键字。")]),n("li",null,[s("函数 "),n("code",null,"get"),s(" 和 "),n("code",null,"put"),s(" 必须以 "),n("code",null,"O(1)"),s(" 的平均时间复杂度运行。")])],-1),ys=n("p",null,[n("strong",null,"示例"),s("：")],-1),gs=n("div",{class:"language-javascript line-numbers-mode","data-ext":"js"},[n("pre",{class:"language-javascript"},[n("code",null,[n("span",{class:"token comment"},"// 输入"),s(`
`),n("span",{class:"token punctuation"},"["),n("span",{class:"token string"},'"LRUCache"'),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},'"put"'),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},'"put"'),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},'"get"'),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},'"put"'),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},'"get"'),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},'"put"'),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},'"get"'),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},'"get"'),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},'"get"'),n("span",{class:"token punctuation"},"]"),s(`
`),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"2"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"2"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"2"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"3"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"3"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"2"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"4"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"4"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"3"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"4"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"]"),s(`

`),n("span",{class:"token comment"},"// 输出"),s(`
`),n("span",{class:"token punctuation"},"["),n("span",{class:"token keyword"},"null"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token keyword"},"null"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token keyword"},"null"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token keyword"},"null"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token operator"},"-"),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token keyword"},"null"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token operator"},"-"),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"3"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"4"),n("span",{class:"token punctuation"},"]"),s(`

`),n("span",{class:"token comment"},"// 解释"),s(`
LRUCache lRUCache `),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"LRUCache"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"2"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
lRUCache`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"put"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(),n("span",{class:"token comment"},"// 缓存是 {1=1}"),s(`
lRUCache`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"put"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"2"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"2"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(),n("span",{class:"token comment"},"// 缓存是 {1=1, 2=2}"),s(`
lRUCache`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"get"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s("    "),n("span",{class:"token comment"},"// 返回 1"),s(`
lRUCache`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"put"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"3"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"3"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(),n("span",{class:"token comment"},"// 该操作会使得关键字 2 作废，缓存是 {1=1, 3=3}"),s(`
lRUCache`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"get"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"2"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s("    "),n("span",{class:"token comment"},"// 返回 -1 (未找到)"),s(`
lRUCache`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"put"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"4"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"4"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(),n("span",{class:"token comment"},"// 该操作会使得关键字 1 作废，缓存是 {4=4, 3=3}"),s(`
lRUCache`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"get"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s("    "),n("span",{class:"token comment"},"// 返回 -1 (未找到)"),s(`
lRUCache`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"get"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"3"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s("    "),n("span",{class:"token comment"},"// 返回 3"),s(`
lRUCache`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"get"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"4"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s("    "),n("span",{class:"token comment"},"// 返回 4"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),fs=n("p",null,[n("strong",null,"说明"),s("：")],-1),ws=n("ul",null,[n("li",null,[n("code",null,"1 <= capacity <= 3000")]),n("li",null,[n("code",null,"0 <= key <= 10000")]),n("li",null,[n("code",null,"0 <= value <= 10^5")]),n("li",null,[s("最多调用 "),n("code",null,"2 * 105"),s(" 次 "),n("code",null,"get"),s(" 和 "),n("code",null,"put")])],-1),xs=n("h4",{id:"💡-解题思路-5",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#💡-解题思路-5","aria-hidden":"true"},"#"),s(" 💡 "),n("strong",null,"解题思路")],-1),Ls=n("figure",null,[n("img",{src:u,alt:"",tabindex:"0",loading:"lazy"}),n("figcaption")],-1),js=n("p",null,"可以维护一个有序单链表，越靠近链表尾部的节点是越早之前访问的。如上图所示：",-1),Ns=n("ul",null,[n("li",null,"要插入 B 的时候，发现缓存中有 B ，这时需要把 B 放到链首，因为它被使用了；"),n("li",null,"要插入 E 的时候，缓存中没有 E，直接把 E 插入链首；"),n("li",null,"要插入 F 的时候，缓存中没有 F，容量已满，需要淘汰掉 A ，因为 A 最久未被使用；"),n("li",null,"要插入 C 的时候，发现缓存中有 C ，这时需要把 C 放到链首；"),n("li",null,"要插入 H 的时候，缓存中没有 H，容量已满，需要淘汰掉 D ，因为 D 最久未被使用；")],-1),Cs=n("p",null,"可以发现，LRU 更新和插入新节点都发生在链首，删除数据都发生在链尾。",-1),qs=n("p",null,[n("code",null,"LRUCache"),s(" 类有两个方法：")],-1),Os=n("ul",null,[n("li",null,[n("code",null,"get"),s(" 当有一个新的数据被访问时： "),n("ul",null,[n("li",null,"如果此数据之前已经被缓存在链表中了，遍历得到这个数据对应的节点，并将其从原来的位置删除，然后再插入到链表的头部，返回数据的值；"),n("li",null,[s("如果此数据没有在缓存链表中，则返回 "),n("code",null,"-1"),s("；")])])]),n("li",null,[n("code",null,"put"),s(" 往链表里新增数据时： "),n("ul",null,[n("li",null,"如果此数据之前已经被缓存在链表中了，更新此数据的值，并将其从原来的位置删除，再插入到链表的头部；"),n("li",null,[s("如果此数据没有在缓存链表中，又分为两种情况： "),n("ul",null,[n("li",null,"如果此时缓存未满，则将此节点直接插入到链表的头部；"),n("li",null,"如果此时缓存已满，则链表尾节点删除，将新的数据节点插入链表的头部。")])])])])],-1),Ss=n("p",null,"这样就用链表实现了一个 LRU 缓存，如果使用单向链表实现，则缓存访问的时间复杂度为 O(n)，因为不管缓存有没有满，都需要遍历一遍链表。",-1),Us=n("p",null,[s("可以继续优化这个实现思路，比如使用双向链表，并引入 "),n("strong",null,"哈希表（Hash table）"),s(" 来记录每个数据的位置，将缓存访问的时间复杂度降到 "),n("code",null,"O(1)"),s("。")],-1),Rs=n("h4",{id:"💎-代码-5",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#💎-代码-5","aria-hidden":"true"},"#"),s(" 💎 "),n("strong",null,"代码")],-1),zs=n("details",null,[n("summary",null,"👉 查看代码 👈"),n("div",{class:"language-javascript line-numbers-mode","data-ext":"js"},[n("pre",{class:"language-javascript"},[n("code",null,[n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"Node"),s(),n("span",{class:"token punctuation"},"{"),s(`
	`),n("span",{class:"token comment"},"// @param {number} key"),s(`
	`),n("span",{class:"token comment"},"// @param {number} value"),s(`
	`),n("span",{class:"token function"},"constructor"),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},[s("key"),n("span",{class:"token punctuation"},","),s(" value")]),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
		`),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),s("key "),n("span",{class:"token operator"},"="),s(" key"),n("span",{class:"token punctuation"},";"),s(`
		`),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),s("value "),n("span",{class:"token operator"},"="),s(" value"),n("span",{class:"token punctuation"},";"),s(`
		`),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),s("next "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"null"),n("span",{class:"token punctuation"},";"),s(`
		`),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),s("prev "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"null"),n("span",{class:"token punctuation"},";"),s(`
	`),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`

`),n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"LRUCache"),s(),n("span",{class:"token punctuation"},"{"),s(`
	`),n("span",{class:"token comment"},"// @param {number} capacity"),s(`
	`),n("span",{class:"token function"},"constructor"),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"capacity"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
		`),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),s("cap "),n("span",{class:"token operator"},"="),s(" capacity"),n("span",{class:"token punctuation"},";"),s(`
		`),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),s("cache "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"Map"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
		`),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),s("head "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"Node"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
		`),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),s("tail "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"Node"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
		`),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),s("head"),n("span",{class:"token punctuation"},"."),s("next "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),s("tail"),n("span",{class:"token punctuation"},";"),s(`
		`),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),s("tail"),n("span",{class:"token punctuation"},"."),s("prev "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),s("head"),n("span",{class:"token punctuation"},";"),s(`
	`),n("span",{class:"token punctuation"},"}"),s(`
	`),n("span",{class:"token comment"},"// @param {number} key"),s(`
	`),n("span",{class:"token comment"},"// @return {number}"),s(`
	`),n("span",{class:"token function"},"get"),n("span",{class:"token punctuation"},"("),s("key"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
		`),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),s("cache"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"has"),n("span",{class:"token punctuation"},"("),s("key"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
			`),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"remove"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),s("cache"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"get"),n("span",{class:"token punctuation"},"("),s("key"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
			`),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"insert"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),s("cache"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"get"),n("span",{class:"token punctuation"},"("),s("key"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
			`),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),s("cache"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"get"),n("span",{class:"token punctuation"},"("),s("key"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"."),s("value"),n("span",{class:"token punctuation"},";"),s(`
		`),n("span",{class:"token punctuation"},"}"),s(`
		`),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token operator"},"-"),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},";"),s(`
	`),n("span",{class:"token punctuation"},"}"),s(`
	`),n("span",{class:"token comment"},"// @param {Node} node"),s(`
	`),n("span",{class:"token function"},"remove"),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"node"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
		`),n("span",{class:"token keyword"},"const"),s(" prev "),n("span",{class:"token operator"},"="),s(" node"),n("span",{class:"token punctuation"},"."),s("prev"),n("span",{class:"token punctuation"},";"),s(`
		`),n("span",{class:"token keyword"},"const"),s(" next "),n("span",{class:"token operator"},"="),s(" node"),n("span",{class:"token punctuation"},"."),s("next"),n("span",{class:"token punctuation"},";"),s(`
		prev`),n("span",{class:"token punctuation"},"."),s("next "),n("span",{class:"token operator"},"="),s(" next"),n("span",{class:"token punctuation"},";"),s(`
		next`),n("span",{class:"token punctuation"},"."),s("prev "),n("span",{class:"token operator"},"="),s(" prev"),n("span",{class:"token punctuation"},";"),s(`
	`),n("span",{class:"token punctuation"},"}"),s(`
	`),n("span",{class:"token comment"},"// @param {Node} node"),s(`
	`),n("span",{class:"token function"},"insert"),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"node"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
		`),n("span",{class:"token keyword"},"const"),s(" next "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),s("head"),n("span",{class:"token punctuation"},"."),s("next"),n("span",{class:"token punctuation"},";"),s(`
		`),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),s("head"),n("span",{class:"token punctuation"},"."),s("next "),n("span",{class:"token operator"},"="),s(" node"),n("span",{class:"token punctuation"},";"),s(`
		next`),n("span",{class:"token punctuation"},"."),s("prev "),n("span",{class:"token operator"},"="),s(" node"),n("span",{class:"token punctuation"},";"),s(`
		node`),n("span",{class:"token punctuation"},"."),s("prev "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),s("head"),n("span",{class:"token punctuation"},";"),s(`
		node`),n("span",{class:"token punctuation"},"."),s("next "),n("span",{class:"token operator"},"="),s(" next"),n("span",{class:"token punctuation"},";"),s(`
	`),n("span",{class:"token punctuation"},"}"),s(`
	`),n("span",{class:"token comment"},"// @param {number} key"),s(`
	`),n("span",{class:"token comment"},"// @param {number} value"),s(`
	`),n("span",{class:"token comment"},"// @return {void}"),s(`
	`),n("span",{class:"token function"},"put"),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},[s("key"),n("span",{class:"token punctuation"},","),s(" value")]),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
		`),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),s("cache"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"has"),n("span",{class:"token punctuation"},"("),s("key"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
			`),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"remove"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),s("cache"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"get"),n("span",{class:"token punctuation"},"("),s("key"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
		`),n("span",{class:"token punctuation"},"}"),s(`
		`),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),s("cache"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"set"),n("span",{class:"token punctuation"},"("),s("key"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"Node"),n("span",{class:"token punctuation"},"("),s("key"),n("span",{class:"token punctuation"},","),s(" value"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
		`),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"insert"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),s("cache"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"get"),n("span",{class:"token punctuation"},"("),s("key"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
		`),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),s("cache"),n("span",{class:"token punctuation"},"."),s("size "),n("span",{class:"token operator"},">"),s(),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),s("cap"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
			`),n("span",{class:"token keyword"},"const"),s(" old "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),s("tail"),n("span",{class:"token punctuation"},"."),s("prev"),n("span",{class:"token punctuation"},";"),s(`
			`),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"remove"),n("span",{class:"token punctuation"},"("),s("old"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
			`),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),s("cache"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"delete"),n("span",{class:"token punctuation"},"("),s("old"),n("span",{class:"token punctuation"},"."),s("key"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
		`),n("span",{class:"token punctuation"},"}"),s(`
	`),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`

`),n("span",{class:"token doc-comment comment"},`/**
 * Your LRUCache object will be instantiated and called as such:
 * var obj = new LRUCache(capacity)
 * var param_1 = obj.get(key)
 * obj.put(key,value)
 */`),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])])],-1),As=n("div",{class:"language-markdown line-numbers-mode","data-ext":"md"},[n("pre",{class:"language-markdown"},[n("code",null,[n("span",{class:"token title important"},[n("span",{class:"token punctuation"},"####"),s(" 📌 [146. LRU 缓存 - LeetCode](https://wangfuyou.com/leetcode-js/problem/0146.html)")]),s(`

`),n("span",{class:"token title important"},[n("span",{class:"token punctuation"},"####"),s(" 💻 **题目大意**")]),s(`

请你设计并实现一个满足 LRU (最近最少使用) 缓存 约束的数据结构。

实现 `),n("span",{class:"token code-snippet code keyword"},"`LRUCache`"),s(` 类：

`),n("span",{class:"token list punctuation"},"-"),s(),n("span",{class:"token code-snippet code keyword"},"`LRUCache(int capacity)`"),s(" 以 "),n("span",{class:"token bold"},[n("span",{class:"token punctuation"},"**"),n("span",{class:"token content"},"正整数"),n("span",{class:"token punctuation"},"**")]),s(" 作为容量 "),n("span",{class:"token code-snippet code keyword"},"`capacity`"),s(` 初始化 LRU 缓存
`),n("span",{class:"token list punctuation"},"-"),s(),n("span",{class:"token code-snippet code keyword"},"`int get(int key)`"),s(" 如果关键字 key 存在于缓存中，则返回关键字的值，否则返回 "),n("span",{class:"token code-snippet code keyword"},"`-1`"),s(` 。
`),n("span",{class:"token list punctuation"},"-"),s(),n("span",{class:"token code-snippet code keyword"},"`void put(int key, int value)`"),s(" 如果关键字 "),n("span",{class:"token code-snippet code keyword"},"`key`"),s(" 已经存在，则变更其数据值 "),n("span",{class:"token code-snippet code keyword"},"`value`"),s(" ；如果不存在，则向缓存中插入该组 "),n("span",{class:"token code-snippet code keyword"},"`key-value`"),s(" 。如果插入操作导致关键字数量超过 "),n("span",{class:"token code-snippet code keyword"},"`capacity`"),s(" ，则应该 "),n("span",{class:"token bold"},[n("span",{class:"token punctuation"},"**"),n("span",{class:"token content"},"逐出"),n("span",{class:"token punctuation"},"**")]),s(` 最久未使用的关键字。
`),n("span",{class:"token list punctuation"},"-"),s(" 函数 "),n("span",{class:"token code-snippet code keyword"},"`get`"),s(" 和 "),n("span",{class:"token code-snippet code keyword"},"`put`"),s(" 必须以 "),n("span",{class:"token code-snippet code keyword"},"`O(1)`"),s(` 的平均时间复杂度运行。

`),n("span",{class:"token bold"},[n("span",{class:"token punctuation"},"**"),n("span",{class:"token content"},"示例"),n("span",{class:"token punctuation"},"**")]),s(`：

`),n("span",{class:"token code"},[n("span",{class:"token punctuation"},"```"),n("span",{class:"token code-language"},"js"),s(`
`),n("span",{class:"token code-block language-js"},[n("span",{class:"token comment"},"// 输入"),s(`
`),n("span",{class:"token punctuation"},"["),n("span",{class:"token string"},'"LRUCache"'),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},'"put"'),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},'"put"'),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},'"get"'),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},'"put"'),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},'"get"'),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},'"put"'),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},'"get"'),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},'"get"'),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},'"get"'),n("span",{class:"token punctuation"},"]"),s(`
`),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"2"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"2"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"2"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"3"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"3"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"2"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"4"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"4"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"3"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"4"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"]"),s(`

`),n("span",{class:"token comment"},"// 输出"),s(`
`),n("span",{class:"token punctuation"},"["),n("span",{class:"token keyword"},"null"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token keyword"},"null"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token keyword"},"null"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token keyword"},"null"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token operator"},"-"),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token keyword"},"null"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token operator"},"-"),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"3"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"4"),n("span",{class:"token punctuation"},"]"),s(`

`),n("span",{class:"token comment"},"// 解释"),s(`
LRUCache lRUCache `),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"LRUCache"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"2"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
lRUCache`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"put"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(),n("span",{class:"token comment"},"// 缓存是 {1=1}"),s(`
lRUCache`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"put"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"2"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"2"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(),n("span",{class:"token comment"},"// 缓存是 {1=1, 2=2}"),s(`
lRUCache`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"get"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s("    "),n("span",{class:"token comment"},"// 返回 1"),s(`
lRUCache`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"put"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"3"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"3"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(),n("span",{class:"token comment"},"// 该操作会使得关键字 2 作废，缓存是 {1=1, 3=3}"),s(`
lRUCache`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"get"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"2"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s("    "),n("span",{class:"token comment"},"// 返回 -1 (未找到)"),s(`
lRUCache`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"put"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"4"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"4"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(),n("span",{class:"token comment"},"// 该操作会使得关键字 1 作废，缓存是 {4=4, 3=3}"),s(`
lRUCache`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"get"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s("    "),n("span",{class:"token comment"},"// 返回 -1 (未找到)"),s(`
lRUCache`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"get"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"3"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s("    "),n("span",{class:"token comment"},"// 返回 3"),s(`
lRUCache`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"get"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"4"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s("    "),n("span",{class:"token comment"},"// 返回 4")]),s(`
`),n("span",{class:"token punctuation"},"```")]),s(`

`),n("span",{class:"token bold"},[n("span",{class:"token punctuation"},"**"),n("span",{class:"token content"},"说明"),n("span",{class:"token punctuation"},"**")]),s(`：

`),n("span",{class:"token list punctuation"},"-"),s(),n("span",{class:"token code-snippet code keyword"},"`1 <= capacity <= 3000`"),s(`
`),n("span",{class:"token list punctuation"},"-"),s(),n("span",{class:"token code-snippet code keyword"},"`0 <= key <= 10000`"),s(`
`),n("span",{class:"token list punctuation"},"-"),s(),n("span",{class:"token code-snippet code keyword"},"`0 <= value <= 10^5`"),s(`
`),n("span",{class:"token list punctuation"},"-"),s(" 最多调用 "),n("span",{class:"token code-snippet code keyword"},"`2 * 105`"),s(" 次 "),n("span",{class:"token code-snippet code keyword"},"`get`"),s(" 和 "),n("span",{class:"token code-snippet code keyword"},"`put`"),s(`

`),n("span",{class:"token title important"},[n("span",{class:"token punctuation"},"####"),s(" 💡 **解题思路**")]),s(`

![](../image/2-2-7.png)

可以维护一个有序单链表，越靠近链表尾部的节点是越早之前访问的。如上图所示：

`),n("span",{class:"token list punctuation"},"-"),s(` 要插入 B 的时候，发现缓存中有 B ，这时需要把 B 放到链首，因为它被使用了；
`),n("span",{class:"token list punctuation"},"-"),s(` 要插入 E 的时候，缓存中没有 E，直接把 E 插入链首；
`),n("span",{class:"token list punctuation"},"-"),s(` 要插入 F 的时候，缓存中没有 F，容量已满，需要淘汰掉 A ，因为 A 最久未被使用；
`),n("span",{class:"token list punctuation"},"-"),s(` 要插入 C 的时候，发现缓存中有 C ，这时需要把 C 放到链首；
`),n("span",{class:"token list punctuation"},"-"),s(` 要插入 H 的时候，缓存中没有 H，容量已满，需要淘汰掉 D ，因为 D 最久未被使用；

可以发现，LRU 更新和插入新节点都发生在链首，删除数据都发生在链尾。

`),n("span",{class:"token code-snippet code keyword"},"`LRUCache`"),s(` 类有两个方法：

`),n("span",{class:"token list punctuation"},"-"),s(),n("span",{class:"token code-snippet code keyword"},"`get`"),s(` 当有一个新的数据被访问时：
  `),n("span",{class:"token list punctuation"},"-"),s(` 如果此数据之前已经被缓存在链表中了，遍历得到这个数据对应的节点，并将其从原来的位置删除，然后再插入到链表的头部，返回数据的值；
  `),n("span",{class:"token list punctuation"},"-"),s(" 如果此数据没有在缓存链表中，则返回 "),n("span",{class:"token code-snippet code keyword"},"`-1`"),s(`；
`),n("span",{class:"token list punctuation"},"-"),s(),n("span",{class:"token code-snippet code keyword"},"`put`"),s(` 往链表里新增数据时：
  `),n("span",{class:"token list punctuation"},"-"),s(` 如果此数据之前已经被缓存在链表中了，更新此数据的值，并将其从原来的位置删除，再插入到链表的头部；
  `),n("span",{class:"token list punctuation"},"-"),s(` 如果此数据没有在缓存链表中，又分为两种情况：
    `),n("span",{class:"token list punctuation"},"-"),s(` 如果此时缓存未满，则将此节点直接插入到链表的头部；
    `),n("span",{class:"token list punctuation"},"-"),s(` 如果此时缓存已满，则链表尾节点删除，将新的数据节点插入链表的头部。

这样就用链表实现了一个 LRU 缓存，如果使用单向链表实现，则缓存访问的时间复杂度为 O(n)，因为不管缓存有没有满，都需要遍历一遍链表。

可以继续优化这个实现思路，比如使用双向链表，并引入 `),n("span",{class:"token bold"},[n("span",{class:"token punctuation"},"**"),n("span",{class:"token content"},"哈希表（Hash table）"),n("span",{class:"token punctuation"},"**")]),s(" 来记录每个数据的位置，将缓存访问的时间复杂度降到 "),n("span",{class:"token code-snippet code keyword"},"`O(1)`"),s(`。

`),n("span",{class:"token title important"},[n("span",{class:"token punctuation"},"####"),s(" 💎 **代码**")]),s(`

`),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("details")]),n("span",{class:"token punctuation"},">")]),s(`
`),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("summary")]),n("span",{class:"token punctuation"},">")]),s("👉 查看代码 👈"),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),s("summary")]),n("span",{class:"token punctuation"},">")]),s(`

`),n("span",{class:"token code"},[n("span",{class:"token punctuation"},"```"),n("span",{class:"token code-language"},"javascript"),s(`
`),n("span",{class:"token code-block language-javascript"},[n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"Node"),s(),n("span",{class:"token punctuation"},"{"),s(`
	`),n("span",{class:"token comment"},"// @param {number} key"),s(`
	`),n("span",{class:"token comment"},"// @param {number} value"),s(`
	`),n("span",{class:"token function"},"constructor"),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},[s("key"),n("span",{class:"token punctuation"},","),s(" value")]),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
		`),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),s("key "),n("span",{class:"token operator"},"="),s(" key"),n("span",{class:"token punctuation"},";"),s(`
		`),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),s("value "),n("span",{class:"token operator"},"="),s(" value"),n("span",{class:"token punctuation"},";"),s(`
		`),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),s("next "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"null"),n("span",{class:"token punctuation"},";"),s(`
		`),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),s("prev "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"null"),n("span",{class:"token punctuation"},";"),s(`
	`),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`

`),n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"LRUCache"),s(),n("span",{class:"token punctuation"},"{"),s(`
	`),n("span",{class:"token comment"},"// @param {number} capacity"),s(`
	`),n("span",{class:"token function"},"constructor"),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"capacity"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
		`),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),s("cap "),n("span",{class:"token operator"},"="),s(" capacity"),n("span",{class:"token punctuation"},";"),s(`
		`),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),s("cache "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"Map"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
		`),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),s("head "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"Node"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
		`),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),s("tail "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"Node"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
		`),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),s("head"),n("span",{class:"token punctuation"},"."),s("next "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),s("tail"),n("span",{class:"token punctuation"},";"),s(`
		`),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),s("tail"),n("span",{class:"token punctuation"},"."),s("prev "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),s("head"),n("span",{class:"token punctuation"},";"),s(`
	`),n("span",{class:"token punctuation"},"}"),s(`
	`),n("span",{class:"token comment"},"// @param {number} key"),s(`
	`),n("span",{class:"token comment"},"// @return {number}"),s(`
	`),n("span",{class:"token function"},"get"),n("span",{class:"token punctuation"},"("),s("key"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
		`),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),s("cache"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"has"),n("span",{class:"token punctuation"},"("),s("key"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
			`),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"remove"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),s("cache"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"get"),n("span",{class:"token punctuation"},"("),s("key"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
			`),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"insert"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),s("cache"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"get"),n("span",{class:"token punctuation"},"("),s("key"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
			`),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),s("cache"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"get"),n("span",{class:"token punctuation"},"("),s("key"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"."),s("value"),n("span",{class:"token punctuation"},";"),s(`
		`),n("span",{class:"token punctuation"},"}"),s(`
		`),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token operator"},"-"),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},";"),s(`
	`),n("span",{class:"token punctuation"},"}"),s(`
	`),n("span",{class:"token comment"},"// @param {Node} node"),s(`
	`),n("span",{class:"token function"},"remove"),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"node"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
		`),n("span",{class:"token keyword"},"const"),s(" prev "),n("span",{class:"token operator"},"="),s(" node"),n("span",{class:"token punctuation"},"."),s("prev"),n("span",{class:"token punctuation"},";"),s(`
		`),n("span",{class:"token keyword"},"const"),s(" next "),n("span",{class:"token operator"},"="),s(" node"),n("span",{class:"token punctuation"},"."),s("next"),n("span",{class:"token punctuation"},";"),s(`
		prev`),n("span",{class:"token punctuation"},"."),s("next "),n("span",{class:"token operator"},"="),s(" next"),n("span",{class:"token punctuation"},";"),s(`
		next`),n("span",{class:"token punctuation"},"."),s("prev "),n("span",{class:"token operator"},"="),s(" prev"),n("span",{class:"token punctuation"},";"),s(`
	`),n("span",{class:"token punctuation"},"}"),s(`
	`),n("span",{class:"token comment"},"// @param {Node} node"),s(`
	`),n("span",{class:"token function"},"insert"),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"node"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
		`),n("span",{class:"token keyword"},"const"),s(" next "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),s("head"),n("span",{class:"token punctuation"},"."),s("next"),n("span",{class:"token punctuation"},";"),s(`
		`),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),s("head"),n("span",{class:"token punctuation"},"."),s("next "),n("span",{class:"token operator"},"="),s(" node"),n("span",{class:"token punctuation"},";"),s(`
		next`),n("span",{class:"token punctuation"},"."),s("prev "),n("span",{class:"token operator"},"="),s(" node"),n("span",{class:"token punctuation"},";"),s(`
		node`),n("span",{class:"token punctuation"},"."),s("prev "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),s("head"),n("span",{class:"token punctuation"},";"),s(`
		node`),n("span",{class:"token punctuation"},"."),s("next "),n("span",{class:"token operator"},"="),s(" next"),n("span",{class:"token punctuation"},";"),s(`
	`),n("span",{class:"token punctuation"},"}"),s(`
	`),n("span",{class:"token comment"},"// @param {number} key"),s(`
	`),n("span",{class:"token comment"},"// @param {number} value"),s(`
	`),n("span",{class:"token comment"},"// @return {void}"),s(`
	`),n("span",{class:"token function"},"put"),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},[s("key"),n("span",{class:"token punctuation"},","),s(" value")]),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
		`),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),s("cache"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"has"),n("span",{class:"token punctuation"},"("),s("key"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
			`),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"remove"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),s("cache"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"get"),n("span",{class:"token punctuation"},"("),s("key"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
		`),n("span",{class:"token punctuation"},"}"),s(`
		`),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),s("cache"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"set"),n("span",{class:"token punctuation"},"("),s("key"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"Node"),n("span",{class:"token punctuation"},"("),s("key"),n("span",{class:"token punctuation"},","),s(" value"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
		`),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"insert"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),s("cache"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"get"),n("span",{class:"token punctuation"},"("),s("key"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
		`),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),s("cache"),n("span",{class:"token punctuation"},"."),s("size "),n("span",{class:"token operator"},">"),s(),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),s("cap"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
			`),n("span",{class:"token keyword"},"const"),s(" old "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),s("tail"),n("span",{class:"token punctuation"},"."),s("prev"),n("span",{class:"token punctuation"},";"),s(`
			`),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"remove"),n("span",{class:"token punctuation"},"("),s("old"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
			`),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),s("cache"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"delete"),n("span",{class:"token punctuation"},"("),s("old"),n("span",{class:"token punctuation"},"."),s("key"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
		`),n("span",{class:"token punctuation"},"}"),s(`
	`),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`

`),n("span",{class:"token doc-comment comment"},`/**
 * Your LRUCache object will be instantiated and called as such:
 * var obj = new LRUCache(capacity)
 * var param_1 = obj.get(key)
 * obj.put(key,value)
 */`)]),s(`
`),n("span",{class:"token punctuation"},"```")]),s(`

`),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),s("details")]),n("span",{class:"token punctuation"},">")]),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),Bs=n("h2",{id:"链表排序",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#链表排序","aria-hidden":"true"},"#"),s(" 链表排序")],-1),Ds={id:"📌-148-链表排序-leetcode",tabindex:"-1"},Es=n("a",{class:"header-anchor",href:"#📌-148-链表排序-leetcode","aria-hidden":"true"},"#",-1),Hs={href:"https://wangfuyou.com/leetcode-js/problem/0148.html",target:"_blank",rel:"noopener noreferrer"},Is=n("div",{class:"language-markdown line-numbers-mode","data-ext":"md"},[n("pre",{class:"language-markdown"},[n("code",null,[n("span",{class:"token title important"},[n("span",{class:"token punctuation"},"####"),s(" 📌 [148. 链表排序 - LeetCode](https://wangfuyou.com/leetcode-js/problem/0148.html)")]),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"})])],-1),Ts=i("<p>常见的排序算法有：冒泡排序、选择排序、插入排序、希尔排序、归并排序、快速排序、堆排序、计数排序、桶排序、基数排序等。</p><p>对于链表排序，由于链表不支持随机访问，访问链表后面的节点只能依靠 <code>next</code> 指针从头部顺序遍历，所以链表排序问题会比数组排序更加复杂一点。</p><ul><li>适合链表的排序算法：<strong>冒泡排序</strong>、<strong>选择排序</strong>、<strong>插入排序</strong>、<strong>归并排序</strong>、<strong>快速排序</strong>、<strong>桶排序</strong>、<strong>计数排序</strong>、<strong>基数排序</strong>；</li><li>不适合链表的排序算法：<strong>希尔排序</strong>；</li><li>可以用于链表排序但不建议使用的排序算法：<strong>堆排序</strong>；</li><li>重点掌握：<strong>插入排序</strong>、<strong>归并排序</strong>；</li></ul>",3),Fs=i(`<hr><h3 id="_1-冒泡排序" tabindex="-1"><a class="header-anchor" href="#_1-冒泡排序" aria-hidden="true">#</a> 1. 冒泡排序</h3><ol><li><p>使用三个指针 <code>node_i</code>、<code>node_j</code> 和 <code>tail</code>。其中 <code>node_i</code> 用于控制外循环次数，循环次数为链节点个数（链表长度）。<code>node_j</code> 和 <code>tail</code> 用于控制内循环次数和循环结束位置。</p></li><li><p>排序开始前，将 <code>node_i</code> 、<code>node_j</code> 置于头节点位置。<code>tail</code> 指向链表末尾，即 <code>None</code>。</p></li><li><p>比较链表中相邻两个元素 <code>node_j.val</code> 与 <code>node_j.next.val</code> 的值大小，如果 <code>node_j.val &gt; node_j.next.val</code>，则值相互交换。否则不发生交换。然后向右移动 <code>node_j</code> 指针，直到 <code>node_j.next == tail</code> 时停止。</p></li><li><p>一次循环之后，将 <code>tail</code> 移动到 <code>node_j</code> 所在位置。相当于 <code>tail</code> 向左移动了一位。此时 <code>tail</code> 节点右侧为链表中最大的链节点。</p></li><li><p>然后移动 <code>node_i</code> 节点，并将 <code>node_j</code> 置于头节点位置。然后重复第 3、4 步操作。</p></li><li><p>直到 <code>node_i</code> 节点移动到链表末尾停止，排序结束。</p></li><li><p>返回链表的头节点 <code>head</code>。</p></li></ol><ul><li><strong>时间复杂度</strong>：<code>O(n^2)</code>。</li><li><strong>空间复杂度</strong>：<code>O(1)</code>。</li></ul><details><summary>👉 查看代码 👈</summary><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">bubbleSort</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> head<span class="token punctuation">:</span> ListNode<span class="token punctuation">)</span><span class="token punctuation">:</span>
        node_i <span class="token operator">=</span> head
        tail <span class="token operator">=</span> <span class="token boolean">None</span>
        <span class="token comment"># 外层循环次数为 链表节点个数</span>
        <span class="token keyword">while</span> node_i<span class="token punctuation">:</span>
            node_j <span class="token operator">=</span> head
            <span class="token keyword">while</span> node_j <span class="token keyword">and</span> node_j<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">!=</span> tail<span class="token punctuation">:</span>
                <span class="token keyword">if</span> node_j<span class="token punctuation">.</span>val <span class="token operator">&gt;</span> node_j<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">.</span>val<span class="token punctuation">:</span>
                    <span class="token comment"># 交换两个节点的值</span>
                    node_j<span class="token punctuation">.</span>val<span class="token punctuation">,</span> node_j<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">.</span>val <span class="token operator">=</span> node_j<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">.</span>val<span class="token punctuation">,</span> node_j<span class="token punctuation">.</span>val
                node_j <span class="token operator">=</span> node_j<span class="token punctuation">.</span><span class="token builtin">next</span>
            <span class="token comment"># 尾指针向前移动 1 位，此时尾指针右侧为排好序的链表</span>
            tail <span class="token operator">=</span> node_j
            node_i <span class="token operator">=</span> node_i<span class="token punctuation">.</span><span class="token builtin">next</span>

        <span class="token keyword">return</span> head

    <span class="token keyword">def</span> <span class="token function">sortList</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> head<span class="token punctuation">:</span> Optional<span class="token punctuation">[</span>ListNode<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> Optional<span class="token punctuation">[</span>ListNode<span class="token punctuation">]</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> self<span class="token punctuation">.</span>bubbleSort<span class="token punctuation">(</span>head<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><hr><h3 id="_2-选择排序" tabindex="-1"><a class="header-anchor" href="#_2-选择排序" aria-hidden="true">#</a> 2. 选择排序</h3><ol><li>使用两个指针 <code>node_i</code>、<code>node_j</code>。<code>node_i</code> 既可以用于控制外循环次数，又可以作为当前未排序链表的第一个链节点位置。</li><li>使用 <code>min_node</code> 记录当前未排序链表中值最小的链节点。</li><li>每一趟排序开始时，先令 <code>min_node = node_i</code>（即暂时假设链表中 <code>node_i</code> 节点为值最小的节点，经过比较后再确定最小值节点位置）。</li><li>然后依次比较未排序链表中 <code>node_j.val</code> 与 <code>min_node.val</code> 的值大小。如果 <code>node_j.val &lt; min_node.val</code>，则更新 <code>min_node</code> 为 <code>node_j</code>。</li><li>这一趟排序结束时，未排序链表中最小值节点为 <code>min_node</code>，如果 <code>node_i != min_node</code>，则将 <code>node_i</code> 与 <code>min_node</code> 值进行交换。如果 <code>node_i == min_node</code>，则不用交换。</li><li>排序结束后，继续向右移动 <code>node_i</code>，重复上述步骤，在剩余未排序链表中寻找最小的链节点，并与 <code>node_i</code> 进行比较和交换，直到 <code>node_i == None</code> 或者 <code>node_i.next == None</code> 时，停止排序。</li><li>返回链表的头节点 <code>head</code>。</li></ol><ul><li><strong>时间复杂度</strong>：<code>O(n^2)</code></li><li><strong>空间复杂度</strong>：<code>O(1)</code></li></ul><details><summary>👉 查看代码 👈</summary><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">sectionSort</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> head<span class="token punctuation">:</span> ListNode<span class="token punctuation">)</span><span class="token punctuation">:</span>
        node_i <span class="token operator">=</span> head
        <span class="token comment"># node_i 为当前未排序链表的第一个链节点</span>
        <span class="token keyword">while</span> node_i <span class="token keyword">and</span> node_i<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">:</span>
            <span class="token comment"># min_node 为未排序链表中的值最小节点</span>
            min_node <span class="token operator">=</span> node_i
            node_j <span class="token operator">=</span> node_i<span class="token punctuation">.</span><span class="token builtin">next</span>
            <span class="token keyword">while</span> node_j<span class="token punctuation">:</span>
                <span class="token keyword">if</span> node_j<span class="token punctuation">.</span>val <span class="token operator">&lt;</span> min_node<span class="token punctuation">.</span>val<span class="token punctuation">:</span>
                    min_node <span class="token operator">=</span> node_j
                node_j <span class="token operator">=</span> node_j<span class="token punctuation">.</span><span class="token builtin">next</span>
            <span class="token comment"># 交换值最小节点与未排序链表中第一个节点的值</span>
            <span class="token keyword">if</span> node_i <span class="token operator">!=</span> min_node<span class="token punctuation">:</span>
                node_i<span class="token punctuation">.</span>val<span class="token punctuation">,</span> min_node<span class="token punctuation">.</span>val <span class="token operator">=</span> min_node<span class="token punctuation">.</span>val<span class="token punctuation">,</span> node_i<span class="token punctuation">.</span>val
            node_i <span class="token operator">=</span> node_i<span class="token punctuation">.</span><span class="token builtin">next</span>

        <span class="token keyword">return</span> head

    <span class="token keyword">def</span> <span class="token function">sortList</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> head<span class="token punctuation">:</span> Optional<span class="token punctuation">[</span>ListNode<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> Optional<span class="token punctuation">[</span>ListNode<span class="token punctuation">]</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> self<span class="token punctuation">.</span>sectionSort<span class="token punctuation">(</span>head<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><hr><h3 id="_3-插入排序" tabindex="-1"><a class="header-anchor" href="#_3-插入排序" aria-hidden="true">#</a> 3. 插入排序</h3><ol><li><p>先使用哑节点 <code>dummy_head</code> 构造一个指向 <code>head</code> 的指针，使得可以从 <code>head</code> 开始遍历。</p></li><li><p>维护 <code>sorted_list</code> 为链表的已排序部分的最后一个节点，初始时，<code>sorted_list = head</code>。</p></li><li><p>维护 <code>prev</code> 为插入元素位置的前一个节点，维护 <code>cur</code> 为待插入元素。初始时，<code>prev = head</code>，<code>cur = head.next</code>。</p></li><li><p>比较 <code>sorted_list</code> 和 <code>cur</code> 的节点值。</p><ul><li>如果 <code>sorted_list.val &lt;= cur.val</code>，说明 <code>cur</code> 应该插入到 <code>sorted_list</code> 之后，则将 <code>sorted_list</code> 后移一位。</li><li>如果 <code>sorted_list.val &gt; cur.val</code>，说明 <code>cur</code> 应该插入到 <code>head</code> 与 <code>sorted_list</code> 之间。则使用 <code>prev</code> 从 <code>head</code> 开始遍历，直到找到插入 <code>cur</code> 的位置的前一个节点位置。然后将 <code>cur</code> 插入。</li></ul></li><li><p>令 <code>cur = sorted_list.next</code>，此时 <code>cur</code> 为下一个待插入元素。</p></li><li><p>重复 4、5 步骤，直到 <code>cur</code> 遍历结束为空。返回 <code>dummy_head</code> 的下一个节点。</p></li></ol><ul><li><strong>时间复杂度</strong>：<code>O(n^2)</code></li><li><strong>空间复杂度</strong>：<code>O(1)</code></li></ul><details><summary>👉 查看代码 👈</summary><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">insertionSort</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> head<span class="token punctuation">:</span> ListNode<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> <span class="token keyword">not</span> head <span class="token keyword">or</span> <span class="token keyword">not</span> head<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> head

        dummy_head <span class="token operator">=</span> ListNode<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
        dummy_head<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> head
        sorted_list <span class="token operator">=</span> head
        cur <span class="token operator">=</span> head<span class="token punctuation">.</span><span class="token builtin">next</span>

        <span class="token keyword">while</span> cur<span class="token punctuation">:</span>
            <span class="token keyword">if</span> sorted_list<span class="token punctuation">.</span>val <span class="token operator">&lt;=</span> cur<span class="token punctuation">.</span>val<span class="token punctuation">:</span>
                <span class="token comment"># 将 cur 插入到 sorted_list 之后</span>
                sorted_list <span class="token operator">=</span> sorted_list<span class="token punctuation">.</span><span class="token builtin">next</span>
            <span class="token keyword">else</span><span class="token punctuation">:</span>
                prev <span class="token operator">=</span> dummy_head
                <span class="token keyword">while</span> prev<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">.</span>val <span class="token operator">&lt;=</span> cur<span class="token punctuation">.</span>val<span class="token punctuation">:</span>
                    prev <span class="token operator">=</span> prev<span class="token punctuation">.</span><span class="token builtin">next</span>
                <span class="token comment"># 将 cur 到链表中间</span>
                sorted_list<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> cur<span class="token punctuation">.</span><span class="token builtin">next</span>
                cur<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> prev<span class="token punctuation">.</span><span class="token builtin">next</span>
                prev<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> cur
            cur <span class="token operator">=</span> sorted_list<span class="token punctuation">.</span><span class="token builtin">next</span>

        <span class="token keyword">return</span> dummy_head<span class="token punctuation">.</span><span class="token builtin">next</span>

    <span class="token keyword">def</span> <span class="token function">sortList</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> head<span class="token punctuation">:</span> Optional<span class="token punctuation">[</span>ListNode<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> Optional<span class="token punctuation">[</span>ListNode<span class="token punctuation">]</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> self<span class="token punctuation">.</span>insertionSort<span class="token punctuation">(</span>head<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><hr><h3 id="_4-归并排序" tabindex="-1"><a class="header-anchor" href="#_4-归并排序" aria-hidden="true">#</a> 4. 归并排序</h3><ol><li><strong>分割环节</strong>：找到链表中心链节点，从中心节点将链表断开，并递归进行分割。 <ol><li>使用快慢指针 <code>fast = head.next</code>、<code>slow = head</code>，让 <code>fast</code> 每次移动 <code>2</code> 步，<code>slow</code> 移动 <code>1</code> 步，移动到链表末尾，从而找到链表中心链节点，即 <code>slow</code>。</li><li>从中心位置将链表从中心位置分为左右两个链表 <code>left_head</code> 和 <code>right_head</code>，并从中心位置将其断开，即 <code>slow.next = None</code>。</li><li>对左右两个链表分别进行递归分割，直到每个链表中只包含一个链节点。</li></ol></li><li><strong>归并环节</strong>：将递归后的链表进行两两归并，完成一遍后每个子链表长度加倍。重复进行归并操作，直到得到完整的链表。 <ol><li>使用哑节点 <code>dummy_head</code> 构造一个头节点，并使用 <code>cur</code> 指向 <code>dummy_head</code> 用于遍历。</li><li>比较两个链表头节点 <code>left</code> 和 <code>right</code> 的值大小。将较小的头节点加入到合并后的链表中。并向后移动该链表的头节点指针。</li><li>然后重复上一步操作，直到两个链表中出现链表为空的情况。</li><li>将剩余链表插入到合并中的链表中。</li><li>将哑节点 <code>dummy_dead</code> 的下一个链节点 <code>dummy_head.next</code> 作为合并后的头节点返回。</li></ol></li></ol><ul><li><strong>时间复杂度</strong>：<code>O(nlogn)</code></li><li><strong>空间复杂度</strong>：<code>O(1)</code></li></ul><details><summary>👉 查看代码 👈</summary><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">merge</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> left<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token comment"># 归并环节</span>
        dummy_head <span class="token operator">=</span> ListNode<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
        cur <span class="token operator">=</span> dummy_head
        <span class="token keyword">while</span> left <span class="token keyword">and</span> right<span class="token punctuation">:</span>
            <span class="token keyword">if</span> left<span class="token punctuation">.</span>val <span class="token operator">&lt;=</span> right<span class="token punctuation">.</span>val<span class="token punctuation">:</span>
                cur<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> left
                left <span class="token operator">=</span> left<span class="token punctuation">.</span><span class="token builtin">next</span>
            <span class="token keyword">else</span><span class="token punctuation">:</span>
                cur<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> right
                right <span class="token operator">=</span> right<span class="token punctuation">.</span><span class="token builtin">next</span>
            cur <span class="token operator">=</span> cur<span class="token punctuation">.</span><span class="token builtin">next</span>

        <span class="token keyword">if</span> left<span class="token punctuation">:</span>
            cur<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> left
        <span class="token keyword">elif</span> right<span class="token punctuation">:</span>
            cur<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> right

        <span class="token keyword">return</span> dummy_head<span class="token punctuation">.</span><span class="token builtin">next</span>

    <span class="token keyword">def</span> <span class="token function">mergeSort</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> head<span class="token punctuation">:</span> ListNode<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token comment"># 分割环节</span>
        <span class="token keyword">if</span> <span class="token keyword">not</span> head <span class="token keyword">or</span> <span class="token keyword">not</span> head<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> head

        <span class="token comment"># 快慢指针找到中心链节点</span>
        slow<span class="token punctuation">,</span> fast <span class="token operator">=</span> head<span class="token punctuation">,</span> head<span class="token punctuation">.</span><span class="token builtin">next</span>
        <span class="token keyword">while</span> fast <span class="token keyword">and</span> fast<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">:</span>
            slow <span class="token operator">=</span> slow<span class="token punctuation">.</span><span class="token builtin">next</span>
            fast <span class="token operator">=</span> fast<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">.</span><span class="token builtin">next</span>

        <span class="token comment"># 断开左右链节点</span>
        left_head<span class="token punctuation">,</span> right_head <span class="token operator">=</span> head<span class="token punctuation">,</span> slow<span class="token punctuation">.</span><span class="token builtin">next</span>
        slow<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> <span class="token boolean">None</span>

        <span class="token comment"># 归并操作</span>
        <span class="token keyword">return</span> self<span class="token punctuation">.</span>merge<span class="token punctuation">(</span>self<span class="token punctuation">.</span>mergeSort<span class="token punctuation">(</span>left_head<span class="token punctuation">)</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>mergeSort<span class="token punctuation">(</span>right_head<span class="token punctuation">)</span><span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">sortList</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> head<span class="token punctuation">:</span> Optional<span class="token punctuation">[</span>ListNode<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> Optional<span class="token punctuation">[</span>ListNode<span class="token punctuation">]</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> self<span class="token punctuation">.</span>mergeSort<span class="token punctuation">(</span>head<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><hr><h3 id="_5-快速排序" tabindex="-1"><a class="header-anchor" href="#_5-快速排序" aria-hidden="true">#</a> 5. 快速排序</h3><ol><li>从链表中找到一个基准值 <code>pivot</code>，这里以头节点为基准值。</li><li>然后通过快慢指针 <code>node_i</code>、<code>node_j</code> 在链表中移动，使得 <code>node_i</code> 之前的节点值都小于基准值，<code>node_i</code> 之后的节点值都大于基准值。从而把数组拆分为左右两个部分。</li><li>再对左右两个部分分别重复第二步，直到各个部分只有一个节点，则排序结束。</li></ol><blockquote><p>注意：</p><p>虽然链表快速排序算法的平均时间复杂度为 <code>O(nlogn)</code>。但链表快速排序算法中基准值 <code>pivot</code> 的取值做不到数组快速排序算法中的随机选择。一旦给定序列是有序链表，时间复杂度就会退化到 <code>O(n^2)</code>。这也是这道题目使用链表快速排序容易超时的原因。</p></blockquote><ul><li><strong>时间复杂度</strong>：<code>O(nlogn)</code></li><li><strong>空间复杂度</strong>：<code>O(1)</code></li></ul><details><summary>👉 查看代码 👈</summary><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">partition</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> left<span class="token punctuation">:</span> ListNode<span class="token punctuation">,</span> right<span class="token punctuation">:</span> ListNode<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token comment"># 左闭右开，区间没有元素或者只有一个元素，直接返回第一个节点</span>
        <span class="token keyword">if</span> left <span class="token operator">==</span> right <span class="token keyword">or</span> left<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">==</span> right<span class="token punctuation">:</span>
            <span class="token keyword">return</span> left
        <span class="token comment"># 选择头节点为基准节点</span>
        pivot <span class="token operator">=</span> left<span class="token punctuation">.</span>val
        <span class="token comment"># 使用 node_i, node_j 双指针，保证 node_i 之前的节点值都小于基准节点值，node_i 与 node_j 之间的节点值都大于等于基准节点值</span>
        node_i<span class="token punctuation">,</span> node_j <span class="token operator">=</span> left<span class="token punctuation">,</span> left<span class="token punctuation">.</span><span class="token builtin">next</span>

        <span class="token keyword">while</span> node_j <span class="token operator">!=</span> right<span class="token punctuation">:</span>
            <span class="token comment"># 发现一个小与基准值的元素</span>
            <span class="token keyword">if</span> node_j<span class="token punctuation">.</span>val <span class="token operator">&lt;</span> pivot<span class="token punctuation">:</span>
                <span class="token comment"># 因为 node_i 之前节点都小于基准值，所以先将 node_i 向右移动一位（此时 node_i 节点值大于等于基准节点值）</span>
                node_i <span class="token operator">=</span> node_i<span class="token punctuation">.</span><span class="token builtin">next</span>
                <span class="token comment"># 将小于基准值的元素 node_j 与当前 node_i 换位，换位后可以保证 node_i 之前的节点都小于基准节点值</span>
                node_i<span class="token punctuation">.</span>val<span class="token punctuation">,</span> node_j<span class="token punctuation">.</span>val <span class="token operator">=</span> node_j<span class="token punctuation">.</span>val<span class="token punctuation">,</span> node_i<span class="token punctuation">.</span>val
            node_j <span class="token operator">=</span> node_j<span class="token punctuation">.</span><span class="token builtin">next</span>
        <span class="token comment"># 将基准节点放到正确位置上</span>
        node_i<span class="token punctuation">.</span>val<span class="token punctuation">,</span> left<span class="token punctuation">.</span>val <span class="token operator">=</span> left<span class="token punctuation">.</span>val<span class="token punctuation">,</span> node_i<span class="token punctuation">.</span>val
        <span class="token keyword">return</span> node_i

    <span class="token keyword">def</span> <span class="token function">quickSort</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> left<span class="token punctuation">:</span> ListNode<span class="token punctuation">,</span> right<span class="token punctuation">:</span> ListNode<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> left <span class="token operator">==</span> right <span class="token keyword">or</span> left<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">==</span> right<span class="token punctuation">:</span>
            <span class="token keyword">return</span> left
        pi <span class="token operator">=</span> self<span class="token punctuation">.</span>partition<span class="token punctuation">(</span>left<span class="token punctuation">,</span> right<span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>quickSort<span class="token punctuation">(</span>left<span class="token punctuation">,</span> pi<span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>quickSort<span class="token punctuation">(</span>pi<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">,</span> right<span class="token punctuation">)</span>
        <span class="token keyword">return</span> left

    <span class="token keyword">def</span> <span class="token function">sortList</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> head<span class="token punctuation">:</span> Optional<span class="token punctuation">[</span>ListNode<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> Optional<span class="token punctuation">[</span>ListNode<span class="token punctuation">]</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> <span class="token keyword">not</span> head <span class="token keyword">or</span> <span class="token keyword">not</span> head<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> head
        <span class="token keyword">return</span> self<span class="token punctuation">.</span>quickSort<span class="token punctuation">(</span>head<span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><hr><h3 id="_6-桶排序" tabindex="-1"><a class="header-anchor" href="#_6-桶排序" aria-hidden="true">#</a> 6. 桶排序</h3><ol><li>使用 <code>cur</code> 指针遍历一遍链表。找出链表中最大值 <code>list_max</code> 和最小值 <code>list_min</code>。</li><li>通过 <code>(最大值 - 最小值) / 每个桶的大小</code> 计算出桶的个数，即 <code>bucket_count = (list_max - list_min) // bucket_size + 1</code> 个桶。</li><li>定义数组 <code>buckets</code> 为桶，桶的个数为 <code>bucket_count</code> 个。</li><li>使用 <code>cur</code> 指针再次遍历一遍链表，将每个元素装入对应的桶中。</li><li>对每个桶内的元素单独排序，可以使用链表插入排序（超时）、链表归并排序（通过）、链表快速排序（超时）等算法。</li><li>最后按照顺序将桶内的元素拼成新的链表，并返回。</li></ol><ul><li><strong>时间复杂度</strong>：<code>O(n)</code></li><li><strong>空间复杂度</strong>：<code>O(n + m)</code>。<code>m</code> 为桶的个数</li></ul><details><summary>👉 查看代码 👈</summary><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">ListNode</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> val<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">next</span><span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>val <span class="token operator">=</span> val
        self<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> <span class="token builtin">next</span>

<span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token comment"># 将链表节点值 val 添加到对应桶 buckets[index] 中</span>
    <span class="token keyword">def</span> <span class="token function">insertion</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> buckets<span class="token punctuation">,</span> index<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> <span class="token keyword">not</span> buckets<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">:</span>
            buckets<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> ListNode<span class="token punctuation">(</span>val<span class="token punctuation">)</span>
            <span class="token keyword">return</span>

        node <span class="token operator">=</span> ListNode<span class="token punctuation">(</span>val<span class="token punctuation">)</span>
        node<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> buckets<span class="token punctuation">[</span>index<span class="token punctuation">]</span>
        buckets<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> node

    <span class="token comment"># 归并环节</span>
    <span class="token keyword">def</span> <span class="token function">merge</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> left<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">:</span>
        dummy_head <span class="token operator">=</span> ListNode<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
        cur <span class="token operator">=</span> dummy_head
        <span class="token keyword">while</span> left <span class="token keyword">and</span> right<span class="token punctuation">:</span>
            <span class="token keyword">if</span> left<span class="token punctuation">.</span>val <span class="token operator">&lt;=</span> right<span class="token punctuation">.</span>val<span class="token punctuation">:</span>
                cur<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> left
                left <span class="token operator">=</span> left<span class="token punctuation">.</span><span class="token builtin">next</span>
            <span class="token keyword">else</span><span class="token punctuation">:</span>
                cur<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> right
                right <span class="token operator">=</span> right<span class="token punctuation">.</span><span class="token builtin">next</span>
            cur <span class="token operator">=</span> cur<span class="token punctuation">.</span><span class="token builtin">next</span>

        <span class="token keyword">if</span> left<span class="token punctuation">:</span>
            cur<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> left
        <span class="token keyword">elif</span> right<span class="token punctuation">:</span>
            cur<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> right

        <span class="token keyword">return</span> dummy_head<span class="token punctuation">.</span><span class="token builtin">next</span>

    <span class="token keyword">def</span> <span class="token function">mergeSort</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> head<span class="token punctuation">:</span> ListNode<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token comment"># 分割环节</span>
        <span class="token keyword">if</span> <span class="token keyword">not</span> head <span class="token keyword">or</span> <span class="token keyword">not</span> head<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> head

        <span class="token comment"># 快慢指针找到中心链节点</span>
        slow<span class="token punctuation">,</span> fast <span class="token operator">=</span> head<span class="token punctuation">,</span> head<span class="token punctuation">.</span><span class="token builtin">next</span>
        <span class="token keyword">while</span> fast <span class="token keyword">and</span> fast<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">:</span>
            slow <span class="token operator">=</span> slow<span class="token punctuation">.</span><span class="token builtin">next</span>
            fast <span class="token operator">=</span> fast<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">.</span><span class="token builtin">next</span>

        <span class="token comment"># 断开左右链节点</span>
        left_head<span class="token punctuation">,</span> right_head <span class="token operator">=</span> head<span class="token punctuation">,</span> slow<span class="token punctuation">.</span><span class="token builtin">next</span>
        slow<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> <span class="token boolean">None</span>

        <span class="token comment"># 归并操作</span>
        <span class="token keyword">return</span> self<span class="token punctuation">.</span>merge<span class="token punctuation">(</span>self<span class="token punctuation">.</span>mergeSort<span class="token punctuation">(</span>left_head<span class="token punctuation">)</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>mergeSort<span class="token punctuation">(</span>right_head<span class="token punctuation">)</span><span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">bucketSort</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> head<span class="token punctuation">:</span> ListNode<span class="token punctuation">,</span> bucket_size<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> <span class="token keyword">not</span> head<span class="token punctuation">:</span>
            <span class="token keyword">return</span> head

        <span class="token comment"># 找出链表中最大值 list_max 和最小值 list_min</span>
        list_min<span class="token punctuation">,</span> list_max <span class="token operator">=</span> <span class="token builtin">float</span><span class="token punctuation">(</span><span class="token string">&#39;inf&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">float</span><span class="token punctuation">(</span><span class="token string">&#39;-inf&#39;</span><span class="token punctuation">)</span>
        cur <span class="token operator">=</span> head
        <span class="token keyword">while</span> cur<span class="token punctuation">:</span>
            <span class="token keyword">if</span> cur<span class="token punctuation">.</span>val <span class="token operator">&lt;</span> list_min<span class="token punctuation">:</span>
                list_min <span class="token operator">=</span> cur<span class="token punctuation">.</span>val
            <span class="token keyword">if</span> cur<span class="token punctuation">.</span>val <span class="token operator">&gt;</span> list_max<span class="token punctuation">:</span>
                list_max <span class="token operator">=</span> cur<span class="token punctuation">.</span>val
            cur <span class="token operator">=</span> cur<span class="token punctuation">.</span><span class="token builtin">next</span>

        <span class="token comment"># 计算桶的个数，并定义桶</span>
        bucket_count <span class="token operator">=</span> <span class="token punctuation">(</span>list_max <span class="token operator">-</span> list_min<span class="token punctuation">)</span> <span class="token operator">//</span> bucket_size <span class="token operator">+</span> <span class="token number">1</span>
        buckets <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>bucket_count<span class="token punctuation">)</span><span class="token punctuation">]</span>

        <span class="token comment"># 将链表节点值依次添加到对应桶中</span>
        cur <span class="token operator">=</span> head
        <span class="token keyword">while</span> cur<span class="token punctuation">:</span>
            index <span class="token operator">=</span> <span class="token punctuation">(</span>cur<span class="token punctuation">.</span>val <span class="token operator">-</span> list_min<span class="token punctuation">)</span> <span class="token operator">//</span> bucket_size
            self<span class="token punctuation">.</span>insertion<span class="token punctuation">(</span>buckets<span class="token punctuation">,</span> index<span class="token punctuation">,</span> cur<span class="token punctuation">.</span>val<span class="token punctuation">)</span>
            cur <span class="token operator">=</span> cur<span class="token punctuation">.</span><span class="token builtin">next</span>

        dummy_head <span class="token operator">=</span> ListNode<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
        cur <span class="token operator">=</span> dummy_head
        <span class="token comment"># 将元素依次出桶，并拼接成有序链表</span>
        <span class="token keyword">for</span> bucket_head <span class="token keyword">in</span> buckets<span class="token punctuation">:</span>
            bucket_cur <span class="token operator">=</span> self<span class="token punctuation">.</span>mergeSort<span class="token punctuation">(</span>bucket_head<span class="token punctuation">)</span>
            <span class="token keyword">while</span> bucket_cur<span class="token punctuation">:</span>
                cur<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> bucket_cur
                cur <span class="token operator">=</span> cur<span class="token punctuation">.</span><span class="token builtin">next</span>
                bucket_cur <span class="token operator">=</span> bucket_cur<span class="token punctuation">.</span><span class="token builtin">next</span>

        <span class="token keyword">return</span> dummy_head<span class="token punctuation">.</span><span class="token builtin">next</span>

    <span class="token keyword">def</span> <span class="token function">sortList</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> head<span class="token punctuation">:</span> Optional<span class="token punctuation">[</span>ListNode<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> Optional<span class="token punctuation">[</span>ListNode<span class="token punctuation">]</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> self<span class="token punctuation">.</span>bucketSort<span class="token punctuation">(</span>head<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><hr><h3 id="_7-计数排序" tabindex="-1"><a class="header-anchor" href="#_7-计数排序" aria-hidden="true">#</a> 7. 计数排序</h3><ol><li>使用 <code>cur</code> 指针遍历一遍链表。找出链表中最大值 <code>list_max</code> 和最小值 <code>list_min</code>。</li><li>使用数组 <code>counts</code> 存储节点出现次数。</li><li>再次使用 <code>cur</code> 指针遍历一遍链表。将链表中每个值为 <code>cur.val</code> 的节点出现次数，存入数组对应第 <code>cur.val - list_min</code> 项中。</li><li>反向填充目标链表： <ol><li>建立一个哑节点 <code>dummy_head</code>，作为链表的头节点。使用 <code>cur</code> 指针指向 <code>dummy_head</code>。</li><li>从小到大遍历一遍数组 <code>counts</code>。对于每个 <code>counts[i] != 0</code> 的元素建立一个链节点，值为 <code>i + list_min</code>，将其插入到 <code>cur.next</code> 上。并向右移动 <code>cur</code>。同时 <code>counts[i] -= 1</code>。直到 <code>counts[i] == 0</code> 后继续向后遍历数组 <code>counts</code>。</li></ol></li><li>将哑节点 <code>dummy_dead</code> 的下一个链节点 <code>dummy_head.next</code> 作为新链表的头节点返回。</li></ol><ul><li><strong>时间复杂度</strong>：<code>O(n + k)</code>，其中 <code>k</code> 代表待排序链表中所有元素的值域</li><li><strong>空间复杂度</strong>：<code>O(k)</code></li></ul><details><summary>👉 查看代码 👈</summary><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">countingSort</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> head<span class="token punctuation">:</span> ListNode<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> <span class="token keyword">not</span> head<span class="token punctuation">:</span>
            <span class="token keyword">return</span> head

        <span class="token comment"># 找出链表中最大值 list_max 和最小值 list_min</span>
        list_min<span class="token punctuation">,</span> list_max <span class="token operator">=</span> <span class="token builtin">float</span><span class="token punctuation">(</span><span class="token string">&#39;inf&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">float</span><span class="token punctuation">(</span><span class="token string">&#39;-inf&#39;</span><span class="token punctuation">)</span>
        cur <span class="token operator">=</span> head
        <span class="token keyword">while</span> cur<span class="token punctuation">:</span>
            <span class="token keyword">if</span> cur<span class="token punctuation">.</span>val <span class="token operator">&lt;</span> list_min<span class="token punctuation">:</span>
                list_min <span class="token operator">=</span> cur<span class="token punctuation">.</span>val
            <span class="token keyword">if</span> cur<span class="token punctuation">.</span>val <span class="token operator">&gt;</span> list_max<span class="token punctuation">:</span>
                list_max <span class="token operator">=</span> cur<span class="token punctuation">.</span>val
            cur <span class="token operator">=</span> cur<span class="token punctuation">.</span><span class="token builtin">next</span>

        size <span class="token operator">=</span> list_max <span class="token operator">-</span> list_min <span class="token operator">+</span> <span class="token number">1</span>
        counts <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">]</span>

        cur <span class="token operator">=</span> head
        <span class="token keyword">while</span> cur<span class="token punctuation">:</span>
            counts<span class="token punctuation">[</span>cur<span class="token punctuation">.</span>val <span class="token operator">-</span> list_min<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>
            cur <span class="token operator">=</span> cur<span class="token punctuation">.</span><span class="token builtin">next</span>

        dummy_head <span class="token operator">=</span> ListNode<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
        cur <span class="token operator">=</span> dummy_head
        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">while</span> counts<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">:</span>
                cur<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> ListNode<span class="token punctuation">(</span>i <span class="token operator">+</span> list_min<span class="token punctuation">)</span>
                counts<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-=</span> <span class="token number">1</span>
                cur <span class="token operator">=</span> cur<span class="token punctuation">.</span><span class="token builtin">next</span>
        <span class="token keyword">return</span> dummy_head<span class="token punctuation">.</span><span class="token builtin">next</span>

    <span class="token keyword">def</span> <span class="token function">sortList</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> head<span class="token punctuation">:</span> Optional<span class="token punctuation">[</span>ListNode<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> Optional<span class="token punctuation">[</span>ListNode<span class="token punctuation">]</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> self<span class="token punctuation">.</span>countingSort<span class="token punctuation">(</span>head<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><hr><h3 id="_8-基数排序" tabindex="-1"><a class="header-anchor" href="#_8-基数排序" aria-hidden="true">#</a> 8. 基数排序</h3><ol><li>使用 <code>cur</code> 指针遍历链表，获取节点值位数最长的位数 <code>size</code>。</li><li>从个位到高位遍历位数。因为 <code>0</code> ~ <code>9</code> 共有 <code>10</code> 位数字，所以建立 <code>10</code> 个桶。</li><li>以每个节点对应位数上的数字为索引，将节点值放入到对应桶中。</li><li>建立一个哑节点 <code>dummy_head</code>，作为链表的头节点。使用 <code>cur</code> 指针指向 <code>dummy_head</code>。</li><li>将桶中元素依次取出，并根据元素值建立链表节点，并插入到新的链表后面。从而生成新的链表。</li><li>之后依次以十位，百位，…，直到最大值元素的最高位处值为索引，放入到对应桶中，并生成新的链表，最终完成排序。</li><li>将哑节点 <code>dummy_dead</code> 的下一个链节点 <code>dummy_head.next</code> 作为新链表的头节点返回。</li></ol><ul><li><strong>时间复杂度</strong>：<code>O(n * k)</code>。其中 <code>n</code> 是待排序元素的个数，<code>k</code> 是数字位数。<code>k</code> 的大小取决于数字位的选择（十进制位、二进制位）和待排序元素所属数据类型全集的大小。</li><li><strong>空间复杂度</strong>：<code>O(n + k)</code></li></ul><details><summary>👉 查看代码 👈</summary><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">radixSort</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> head<span class="token punctuation">:</span> ListNode<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token comment"># 计算位数最长的位数</span>
        size <span class="token operator">=</span> <span class="token number">0</span>
        cur <span class="token operator">=</span> head
        <span class="token keyword">while</span> cur<span class="token punctuation">:</span>
            val_len <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token keyword">if</span> val_len <span class="token operator">&gt;</span> size<span class="token punctuation">:</span>
                size <span class="token operator">=</span> val_len
            cur <span class="token operator">=</span> cur<span class="token punctuation">.</span><span class="token builtin">next</span>

        <span class="token comment"># 从个位到高位遍历位数</span>
        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">:</span>
            buckets <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
            cur <span class="token operator">=</span> head
            <span class="token keyword">while</span> cur<span class="token punctuation">:</span>
                <span class="token comment"># 以每个节点对应位数上的数字为索引，将节点值放入到对应桶中</span>
                buckets<span class="token punctuation">[</span>cur<span class="token punctuation">.</span>val <span class="token operator">//</span> <span class="token punctuation">(</span><span class="token number">10</span> <span class="token operator">**</span> i<span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>cur<span class="token punctuation">.</span>val<span class="token punctuation">)</span>
                cur <span class="token operator">=</span> cur<span class="token punctuation">.</span><span class="token builtin">next</span>

            <span class="token comment"># 生成新的链表</span>
            dummy_head <span class="token operator">=</span> ListNode<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
            cur <span class="token operator">=</span> dummy_head
            <span class="token keyword">for</span> bucket <span class="token keyword">in</span> buckets<span class="token punctuation">:</span>
                <span class="token keyword">for</span> num <span class="token keyword">in</span> bucket<span class="token punctuation">:</span>
                    cur<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> ListNode<span class="token punctuation">(</span>num<span class="token punctuation">)</span>
                    cur <span class="token operator">=</span> cur<span class="token punctuation">.</span><span class="token builtin">next</span>
            head <span class="token operator">=</span> dummy_head<span class="token punctuation">.</span><span class="token builtin">next</span>

        <span class="token keyword">return</span> head

    <span class="token keyword">def</span> <span class="token function">sortList</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> head<span class="token punctuation">:</span> Optional<span class="token punctuation">[</span>ListNode<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> Optional<span class="token punctuation">[</span>ListNode<span class="token punctuation">]</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> self<span class="token punctuation">.</span>radixSort<span class="token punctuation">(</span>head<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><hr><h3 id="复杂度分析" tabindex="-1"><a class="header-anchor" href="#复杂度分析" aria-hidden="true">#</a> 复杂度分析</h3><table style="width:100%;"><tr><th style="width:15%;">排序算法</th><th style="width:15%;">平均时间复杂度</th><th style="width:12%;">空间复杂度</th><th style="width:15%;">排序方式</th><th style="width:15%;">稳定性</th><th style="width:15%;">备注</th></tr><tr><td>冒泡排序</td><td>O(n^2)</td><td>O(1)</td><td>in-place</td><td>稳定</td><td></td></tr><tr><td>选择排序</td><td>O(n^2)</td><td>O(1)</td><td>in-place</td><td>不稳定</td><td></td></tr><tr><td>插入排序</td><td>O(n^2)</td><td>O(1)</td><td>in-place</td><td>稳定</td><td></td></tr><tr><td>归并排序</td><td>O(nlogn)</td><td>O(1)</td><td>out-place</td><td>稳定</td><td></td></tr><tr><td>快速排序</td><td>O(nlogn)</td><td>O(1)</td><td>in-place</td><td>不稳定</td><td></td></tr><tr><td>桶排序</td><td>O(n)</td><td>O(n+k)</td><td>out-place</td><td>稳定</td><td>k 为桶的个数</td></tr><tr><td>计数排序</td><td>O(n+k)</td><td>O(k)</td><td>out-place</td><td>稳定</td><td>k 为待排序链表中所有元素的值域</td></tr><tr><td>基数排序</td><td>O(n*k)</td><td>O(n+k)</td><td>out-place</td><td>稳定</td><td>k 为数字位数</td></tr></table><details><summary>希尔排序为什么不适合链表排序？</summary><p><strong>希尔排序</strong>：希尔排序中经常涉及到对序列中第 <code>i + gap</code> 的元素进行操作，其中 <code>gap</code> 是希尔排序中当前的步长。而链表不支持随机访问的特性，导致这种操作不适合链表，因而希尔排序算法不适合进行链表排序。</p></details><details><summary>为什么不建议使用堆排序？</summary><p><strong>堆排序</strong>：堆排序所使用的最大堆 / 最小堆结构本质上是一棵完全二叉树。而完全二叉树适合采用顺序存储结构（数组）。因为数组存储的完全二叉树可以很方便的通过下标序号来确定父亲节点和孩子节点，并且可以极大限度的节省存储空间。</p><p>而链表用在存储完全二叉树的时候，因为不支持随机访问的特性，导致其寻找子节点和父亲节点会比较耗时，如果增加指向父亲节点的变量，又会浪费大量存储空间。所以堆排序算法不适合进行链表排序。</p><p>如果一定要对链表进行堆排序，则可以使用额外的数组空间表示堆结构。然后将链表中各个节点的值依次添加入堆结构中，对数组进行堆排序。排序后，再按照堆中元素顺序，依次建立链表节点，构建新的链表并返回新链表头节点。</p></details><h2 id="链表的技巧" tabindex="-1"><a class="header-anchor" href="#链表的技巧" aria-hidden="true">#</a> 链表的技巧</h2><p>想要写好链表代码并不是容易的事儿，尤其是那些复杂的链表操作，比如链表反转、有序链表合并等，写的时候非常容易出错。面试中，能把“链表反转”这几行代码写对的人不足 10%。</p><p>下面总结了几个写链表代码的技巧，如果能熟练掌握这几个技巧，再加以练习，轻松拿下链表代码完全没有问题。</p><h3 id="_1-理解指针或引用的含义" tabindex="-1"><a class="header-anchor" href="#_1-理解指针或引用的含义" aria-hidden="true">#</a> 1. 理解指针或引用的含义</h3><p>将某个变量赋值给指针，实际上就是将这个变量的地址赋值给指针，或者反过来说，指针中存储了这个变量的内存地址，指向了这个变量，通过指针就能找到这个变量。</p><p>在编写链表代码的时候，经常会有这样的代码：<code>p.next = q</code>，这行代码是说，<code>p</code>节点中的<code>next</code>指针存储了<code>q</code>节点的内存地址。</p><p>还有：<code>p.next = p.next.next</code>，这行代码表示，<code>p</code>节点的<code>next</code>指针存储了<code>p</code>节点的下下一个节点的内存地址。</p><h3 id="_2-警惕指针丢失和内存泄漏" tabindex="-1"><a class="header-anchor" href="#_2-警惕指针丢失和内存泄漏" aria-hidden="true">#</a> 2. 警惕指针丢失和内存泄漏</h3><p>写链表代码的时候，指针指来指去，一会儿就不知道指到哪里了。所以一定注意不要弄丢了指针。</p><p>比如单链表的插入操作，希望在节点<code>a</code>和相邻的节点<code>b</code>之间插入节点<code>x</code>，假设当前指针<code>p</code>指向节点<code>a</code>。如果我们将代码实现变成下面这个样子，就会发生指针丢失和内存泄露。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>p<span class="token punctuation">.</span>next <span class="token operator">=</span> x<span class="token punctuation">;</span> <span class="token comment">// 将p的next指针指向x节点；</span>
x<span class="token punctuation">.</span>next <span class="token operator">=</span> p<span class="token punctuation">.</span>next<span class="token punctuation">;</span> <span class="token comment">// 将x的节点的next指针指向b节点；</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><code>p.next</code>指针在完成第一步操作之后，已经不再指向节点<code>b</code>了，而是指向节点<code>x</code>。第 2 行代码相当于将<code>x</code>赋值给<code>x.next</code>，自己指向自己。因此，整个链表也就断成了两半，从节点 b 往后的所有节点都无法访问到了。</p><p>所以，插入节点时，一定要注意操作的顺序，要先将节点 <code>x</code> 的 <code>next</code> 指针指向节点 <code>b</code>，再把节点 <code>a</code> 的 <code>next</code> 指针指向节点 <code>x</code>，这样才不会丢失指针，导致内存泄漏。</p><p>对于刚刚的插入代码，只需要把第 1 行和第 2 行代码的顺序颠倒一下就可以了。</p><h3 id="_3-重点留意边界条件处理" tabindex="-1"><a class="header-anchor" href="#_3-重点留意边界条件处理" aria-hidden="true">#</a> 3. 重点留意边界条件处理</h3><p>在编写的过程中以及编写完成之后，要检查一下代码在边界条件下是否能正确运行。常见的检查链表代码是否正确的边界条件有这些：</p><ul><li>如果链表为空时，代码是否能正常工作？</li><li>如果链表只包含一个节点时，代码是否能正常工作？</li><li>如果链表只包含两个节点时，代码是否能正常工作？</li><li>代码逻辑在处理头节点和尾节点的时候，是否能正常工作？</li></ul><h3 id="_4-举例法和画图法-辅助思考" tabindex="-1"><a class="header-anchor" href="#_4-举例法和画图法-辅助思考" aria-hidden="true">#</a> 4. 举例法和画图法，辅助思考</h3><p>对于稍微复杂的链表操作，比如前面单链表反转，指针一会儿指这，一会儿指那，一会儿就被绕晕了。</p><p>所以这时可以使用举例法和画图法。可以把各种情况都举一个例子，把它画在纸上，画出插入前和插入后的链表变化。</p>`,66),Ms=n("h2",{id:"相关题目",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#相关题目","aria-hidden":"true"},"#"),s(" 相关题目")],-1),Ps=n("h4",{id:"链表基础题目",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#链表基础题目","aria-hidden":"true"},"#"),s(" 链表基础题目")],-1),Vs=n("thead",null,[n("tr",null,[n("th",{style:{"text-align":"center"}},"题号"),n("th",{style:{"text-align":"left"}},"标题"),n("th",{style:{"text-align":"center"}},"题解"),n("th",{style:{"text-align":"left"}},"标签"),n("th",{style:{"text-align":"center"}},"难度"),n("th",{style:{"text-align":"center"}},"力扣")])],-1),Ys=n("td",{style:{"text-align":"center"}},"707",-1),Ks=n("td",{style:{"text-align":"left"}},"设计链表",-1),Js={style:{"text-align":"center"}},Xs={style:{"text-align":"left"}},Zs=n("code",null,"设计",-1),$s=n("code",null,"链表",-1),Gs=n("td",{style:{"text-align":"center"}},"🟠",-1),Qs={style:{"text-align":"center"}},Ws={href:"https://leetcode.cn/problems/design-linked-list",target:"_blank",rel:"noopener noreferrer"},na={href:"https://leetcode.com/problems/design-linked-list",target:"_blank",rel:"noopener noreferrer"},sa=n("td",{style:{"text-align":"center"}},"83",-1),aa=n("td",{style:{"text-align":"left"}},"删除排序链表中的重复元素",-1),ta={style:{"text-align":"center"}},ea={style:{"text-align":"left"}},oa=n("code",null,"链表",-1),ca=n("td",{style:{"text-align":"center"}},"🟢",-1),la={style:{"text-align":"center"}},pa={href:"https://leetcode.cn/problems/remove-duplicates-from-sorted-list",target:"_blank",rel:"noopener noreferrer"},ia={href:"https://leetcode.com/problems/remove-duplicates-from-sorted-list",target:"_blank",rel:"noopener noreferrer"},ua=n("td",{style:{"text-align":"center"}},"82",-1),da=n("td",{style:{"text-align":"left"}},"删除排序链表中的重复元素 II",-1),ra={style:{"text-align":"center"}},ka={style:{"text-align":"left"}},ma=n("code",null,"链表",-1),va=n("code",null,"双指针",-1),ba=n("td",{style:{"text-align":"center"}},"🟠",-1),ha={style:{"text-align":"center"}},_a={href:"https://leetcode.cn/problems/remove-duplicates-from-sorted-list-ii",target:"_blank",rel:"noopener noreferrer"},ya={href:"https://leetcode.com/problems/remove-duplicates-from-sorted-list-ii",target:"_blank",rel:"noopener noreferrer"},ga=n("td",{style:{"text-align":"center"}},"206",-1),fa=n("td",{style:{"text-align":"left"}},"反转链表",-1),wa={style:{"text-align":"center"}},xa={style:{"text-align":"left"}},La=n("code",null,"递归",-1),ja=n("code",null,"链表",-1),Na=n("td",{style:{"text-align":"center"}},"🟢",-1),Ca={style:{"text-align":"center"}},qa={href:"https://leetcode.cn/problems/reverse-linked-list",target:"_blank",rel:"noopener noreferrer"},Oa={href:"https://leetcode.com/problems/reverse-linked-list",target:"_blank",rel:"noopener noreferrer"},Sa=n("td",{style:{"text-align":"center"}},"92",-1),Ua=n("td",{style:{"text-align":"left"}},"反转链表 II",-1),Ra={style:{"text-align":"center"}},za={style:{"text-align":"left"}},Aa=n("code",null,"链表",-1),Ba=n("td",{style:{"text-align":"center"}},"🟠",-1),Da={style:{"text-align":"center"}},Ea={href:"https://leetcode.cn/problems/reverse-linked-list-ii",target:"_blank",rel:"noopener noreferrer"},Ha={href:"https://leetcode.com/problems/reverse-linked-list-ii",target:"_blank",rel:"noopener noreferrer"},Ia=n("td",{style:{"text-align":"center"}},"25",-1),Ta=n("td",{style:{"text-align":"left"}},"K 个一组翻转链表",-1),Fa={style:{"text-align":"center"}},Ma={style:{"text-align":"left"}},Pa=n("code",null,"递归",-1),Va=n("code",null,"链表",-1),Ya=n("td",{style:{"text-align":"center"}},"🔴",-1),Ka={style:{"text-align":"center"}},Ja={href:"https://leetcode.cn/problems/reverse-nodes-in-k-group",target:"_blank",rel:"noopener noreferrer"},Xa={href:"https://leetcode.com/problems/reverse-nodes-in-k-group",target:"_blank",rel:"noopener noreferrer"},Za=n("td",{style:{"text-align":"center"}},"203",-1),$a=n("td",{style:{"text-align":"left"}},"移除链表元素",-1),Ga={style:{"text-align":"center"}},Qa={style:{"text-align":"left"}},Wa=n("code",null,"递归",-1),nt=n("code",null,"链表",-1),st=n("td",{style:{"text-align":"center"}},"🟢",-1),at={style:{"text-align":"center"}},tt={href:"https://leetcode.cn/problems/remove-linked-list-elements",target:"_blank",rel:"noopener noreferrer"},et={href:"https://leetcode.com/problems/remove-linked-list-elements",target:"_blank",rel:"noopener noreferrer"},ot=n("td",{style:{"text-align":"center"}},"328",-1),ct=n("td",{style:{"text-align":"left"}},"奇偶链表",-1),lt={style:{"text-align":"center"}},pt={style:{"text-align":"left"}},it=n("code",null,"链表",-1),ut=n("td",{style:{"text-align":"center"}},"🟠",-1),dt={style:{"text-align":"center"}},rt={href:"https://leetcode.cn/problems/odd-even-linked-list",target:"_blank",rel:"noopener noreferrer"},kt={href:"https://leetcode.com/problems/odd-even-linked-list",target:"_blank",rel:"noopener noreferrer"},mt=n("td",{style:{"text-align":"center"}},"234",-1),vt=n("td",{style:{"text-align":"left"}},"回文链表",-1),bt={style:{"text-align":"center"}},ht={style:{"text-align":"left"}},_t=n("code",null,"栈",-1),yt=n("code",null,"递归",-1),gt=n("code",null,"链表",-1),ft=n("code",null,"1+",-1),wt=n("td",{style:{"text-align":"center"}},"🟢",-1),xt={style:{"text-align":"center"}},Lt={href:"https://leetcode.cn/problems/palindrome-linked-list",target:"_blank",rel:"noopener noreferrer"},jt={href:"https://leetcode.com/problems/palindrome-linked-list",target:"_blank",rel:"noopener noreferrer"},Nt=n("td",{style:{"text-align":"center"}},"430",-1),Ct=n("td",{style:{"text-align":"left"}},"扁平化多级双向链表",-1),qt={style:{"text-align":"center"}},Ot={style:{"text-align":"left"}},St=n("code",null,"深度优先搜索",-1),Ut=n("code",null,"链表",-1),Rt=n("code",null,"双向链表",-1),zt=n("td",{style:{"text-align":"center"}},"🟠",-1),At={style:{"text-align":"center"}},Bt={href:"https://leetcode.cn/problems/flatten-a-multilevel-doubly-linked-list",target:"_blank",rel:"noopener noreferrer"},Dt={href:"https://leetcode.com/problems/flatten-a-multilevel-doubly-linked-list",target:"_blank",rel:"noopener noreferrer"},Et=n("td",{style:{"text-align":"center"}},"138",-1),Ht=n("td",{style:{"text-align":"left"}},"随机链表的复制",-1),It={style:{"text-align":"center"}},Tt={style:{"text-align":"left"}},Ft=n("code",null,"哈希表",-1),Mt=n("code",null,"链表",-1),Pt=n("td",{style:{"text-align":"center"}},"🟠",-1),Vt={style:{"text-align":"center"}},Yt={href:"https://leetcode.cn/problems/copy-list-with-random-pointer",target:"_blank",rel:"noopener noreferrer"},Kt={href:"https://leetcode.com/problems/copy-list-with-random-pointer",target:"_blank",rel:"noopener noreferrer"},Jt=n("td",{style:{"text-align":"center"}},"61",-1),Xt=n("td",{style:{"text-align":"left"}},"旋转链表",-1),Zt={style:{"text-align":"center"}},$t={style:{"text-align":"left"}},Gt=n("code",null,"链表",-1),Qt=n("code",null,"双指针",-1),Wt=n("td",{style:{"text-align":"center"}},"🟠",-1),ne={style:{"text-align":"center"}},se={href:"https://leetcode.cn/problems/rotate-list",target:"_blank",rel:"noopener noreferrer"},ae={href:"https://leetcode.com/problems/rotate-list",target:"_blank",rel:"noopener noreferrer"},te=n("h4",{id:"链表排序-1",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#链表排序-1","aria-hidden":"true"},"#"),s(" 链表排序")],-1),ee=n("thead",null,[n("tr",null,[n("th",{style:{"text-align":"center"}},"题号"),n("th",{style:{"text-align":"left"}},"标题"),n("th",{style:{"text-align":"center"}},"题解"),n("th",{style:{"text-align":"left"}},"标签"),n("th",{style:{"text-align":"center"}},"难度"),n("th",{style:{"text-align":"center"}},"力扣")])],-1),oe=n("td",{style:{"text-align":"center"}},"148",-1),ce=n("td",{style:{"text-align":"left"}},"排序链表",-1),le={style:{"text-align":"center"}},pe={style:{"text-align":"left"}},ie=n("code",null,"链表",-1),ue=n("code",null,"双指针",-1),de=n("code",null,"分治",-1),re=n("code",null,"2+",-1),ke=n("td",{style:{"text-align":"center"}},"🟠",-1),me={style:{"text-align":"center"}},ve={href:"https://leetcode.cn/problems/sort-list",target:"_blank",rel:"noopener noreferrer"},be={href:"https://leetcode.com/problems/sort-list",target:"_blank",rel:"noopener noreferrer"},he=n("td",{style:{"text-align":"center"}},"21",-1),_e=n("td",{style:{"text-align":"left"}},"合并两个有序链表",-1),ye={style:{"text-align":"center"}},ge={style:{"text-align":"left"}},fe=n("code",null,"递归",-1),we=n("code",null,"链表",-1),xe=n("td",{style:{"text-align":"center"}},"🟢",-1),Le={style:{"text-align":"center"}},je={href:"https://leetcode.cn/problems/merge-two-sorted-lists",target:"_blank",rel:"noopener noreferrer"},Ne={href:"https://leetcode.com/problems/merge-two-sorted-lists",target:"_blank",rel:"noopener noreferrer"},Ce=n("td",{style:{"text-align":"center"}},"23",-1),qe=n("td",{style:{"text-align":"left"}},"合并 K 个升序链表",-1),Oe={style:{"text-align":"center"}},Se={style:{"text-align":"left"}},Ue=n("code",null,"链表",-1),Re=n("code",null,"分治",-1),ze=n("code",null,"堆（优先队列）",-1),Ae=n("code",null,"1+",-1),Be=n("td",{style:{"text-align":"center"}},"🔴",-1),De={style:{"text-align":"center"}},Ee={href:"https://leetcode.cn/problems/merge-k-sorted-lists",target:"_blank",rel:"noopener noreferrer"},He={href:"https://leetcode.com/problems/merge-k-sorted-lists",target:"_blank",rel:"noopener noreferrer"},Ie=n("td",{style:{"text-align":"center"}},"147",-1),Te=n("td",{style:{"text-align":"left"}},"对链表进行插入排序",-1),Fe={style:{"text-align":"center"}},Me={style:{"text-align":"left"}},Pe=n("code",null,"链表",-1),Ve=n("code",null,"排序",-1),Ye=n("td",{style:{"text-align":"center"}},"🟠",-1),Ke={style:{"text-align":"center"}},Je={href:"https://leetcode.cn/problems/insertion-sort-list",target:"_blank",rel:"noopener noreferrer"},Xe={href:"https://leetcode.com/problems/insertion-sort-list",target:"_blank",rel:"noopener noreferrer"},Ze=n("h4",{id:"链表双指针",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#链表双指针","aria-hidden":"true"},"#"),s(" 链表双指针")],-1),$e=n("thead",null,[n("tr",null,[n("th",{style:{"text-align":"center"}},"题号"),n("th",{style:{"text-align":"left"}},"标题"),n("th",{style:{"text-align":"center"}},"题解"),n("th",{style:{"text-align":"left"}},"标签"),n("th",{style:{"text-align":"center"}},"难度"),n("th",{style:{"text-align":"center"}},"力扣")])],-1),Ge=n("td",{style:{"text-align":"center"}},"141",-1),Qe=n("td",{style:{"text-align":"left"}},"环形链表",-1),We={style:{"text-align":"center"}},no={style:{"text-align":"left"}},so=n("code",null,"哈希表",-1),ao=n("code",null,"链表",-1),to=n("code",null,"双指针",-1),eo=n("td",{style:{"text-align":"center"}},"🟢",-1),oo={style:{"text-align":"center"}},co={href:"https://leetcode.cn/problems/linked-list-cycle",target:"_blank",rel:"noopener noreferrer"},lo={href:"https://leetcode.com/problems/linked-list-cycle",target:"_blank",rel:"noopener noreferrer"},po=n("td",{style:{"text-align":"center"}},"142",-1),io=n("td",{style:{"text-align":"left"}},"环形链表 II",-1),uo={style:{"text-align":"center"}},ro={style:{"text-align":"left"}},ko=n("code",null,"哈希表",-1),mo=n("code",null,"链表",-1),vo=n("code",null,"双指针",-1),bo=n("td",{style:{"text-align":"center"}},"🟠",-1),ho={style:{"text-align":"center"}},_o={href:"https://leetcode.cn/problems/linked-list-cycle-ii",target:"_blank",rel:"noopener noreferrer"},yo={href:"https://leetcode.com/problems/linked-list-cycle-ii",target:"_blank",rel:"noopener noreferrer"},go=n("td",{style:{"text-align":"center"}},"160",-1),fo=n("td",{style:{"text-align":"left"}},"相交链表",-1),wo={style:{"text-align":"center"}},xo={style:{"text-align":"left"}},Lo=n("code",null,"哈希表",-1),jo=n("code",null,"链表",-1),No=n("code",null,"双指针",-1),Co=n("td",{style:{"text-align":"center"}},"🟢",-1),qo={style:{"text-align":"center"}},Oo={href:"https://leetcode.cn/problems/intersection-of-two-linked-lists",target:"_blank",rel:"noopener noreferrer"},So={href:"https://leetcode.com/problems/intersection-of-two-linked-lists",target:"_blank",rel:"noopener noreferrer"},Uo=n("td",{style:{"text-align":"center"}},"19",-1),Ro=n("td",{style:{"text-align":"left"}},"删除链表的倒数第 N 个结点",-1),zo={style:{"text-align":"center"}},Ao={style:{"text-align":"left"}},Bo=n("code",null,"链表",-1),Do=n("code",null,"双指针",-1),Eo=n("td",{style:{"text-align":"center"}},"🟠",-1),Ho={style:{"text-align":"center"}},Io={href:"https://leetcode.cn/problems/remove-nth-node-from-end-of-list",target:"_blank",rel:"noopener noreferrer"},To={href:"https://leetcode.com/problems/remove-nth-node-from-end-of-list",target:"_blank",rel:"noopener noreferrer"},Fo=n("td",{style:{"text-align":"center"}},"876",-1),Mo=n("td",{style:{"text-align":"left"}},"链表的中间结点",-1),Po={style:{"text-align":"center"}},Vo={style:{"text-align":"left"}},Yo=n("code",null,"链表",-1),Ko=n("code",null,"双指针",-1),Jo=n("td",{style:{"text-align":"center"}},"🟢",-1),Xo={style:{"text-align":"center"}},Zo={href:"https://leetcode.cn/problems/middle-of-the-linked-list",target:"_blank",rel:"noopener noreferrer"},$o={href:"https://leetcode.com/problems/middle-of-the-linked-list",target:"_blank",rel:"noopener noreferrer"},Go=n("td",{style:{"text-align":"center"}},"剑指 Offer 22",-1),Qo=n("td",{style:{"text-align":"left"}},"链表中倒数第k个节点",-1),Wo={style:{"text-align":"center"}},nc={style:{"text-align":"left"}},sc=n("code",null,"链表",-1),ac=n("code",null,"双指针",-1),tc=n("td",{style:{"text-align":"center"}},"🟢",-1),ec={style:{"text-align":"center"}},oc={href:"https://leetcode.cn/problems/lian-biao-zhong-dao-shu-di-kge-jie-dian-lcof",target:"_blank",rel:"noopener noreferrer"},cc=n("td",{style:{"text-align":"center"}},"143",-1),lc=n("td",{style:{"text-align":"left"}},"重排链表",-1),pc={style:{"text-align":"center"}},ic={style:{"text-align":"left"}},uc=n("code",null,"栈",-1),dc=n("code",null,"递归",-1),rc=n("code",null,"链表",-1),kc=n("code",null,"1+",-1),mc=n("td",{style:{"text-align":"center"}},"🟠",-1),vc={style:{"text-align":"center"}},bc={href:"https://leetcode.cn/problems/reorder-list",target:"_blank",rel:"noopener noreferrer"},hc={href:"https://leetcode.com/problems/reorder-list",target:"_blank",rel:"noopener noreferrer"},_c=n("td",{style:{"text-align":"center"}},"2",-1),yc=n("td",{style:{"text-align":"left"}},"两数相加",-1),gc={style:{"text-align":"center"}},fc={style:{"text-align":"left"}},wc=n("code",null,"递归",-1),xc=n("code",null,"链表",-1),Lc=n("code",null,"数学",-1),jc=n("td",{style:{"text-align":"center"}},"🟠",-1),Nc={style:{"text-align":"center"}},Cc={href:"https://leetcode.cn/problems/add-two-numbers",target:"_blank",rel:"noopener noreferrer"},qc={href:"https://leetcode.com/problems/add-two-numbers",target:"_blank",rel:"noopener noreferrer"},Oc=n("td",{style:{"text-align":"center"}},"445",-1),Sc=n("td",{style:{"text-align":"left"}},"两数相加 II",-1),Uc={style:{"text-align":"center"}},Rc={style:{"text-align":"left"}},zc=n("code",null,"栈",-1),Ac=n("code",null,"链表",-1),Bc=n("code",null,"数学",-1),Dc=n("td",{style:{"text-align":"center"}},"🟠",-1),Ec={style:{"text-align":"center"}},Hc={href:"https://leetcode.cn/problems/add-two-numbers-ii",target:"_blank",rel:"noopener noreferrer"},Ic={href:"https://leetcode.com/problems/add-two-numbers-ii",target:"_blank",rel:"noopener noreferrer"};function Tc(Fc,Mc){const o=p("ExternalLinkIcon"),c=p("MdDemo"),e=p("RouterLink");return r(),k("div",null,[f,a(c,{title:"相关题目",id:"md-demo-441"},{default:t(()=>[n("h4",w,[x,s(" 📌 "),n("a",L,[s("206. 反转链表 - LeetCode"),a(o)])]),j,N,C,q,O,S,U,R,z,A,B,D,E,H]),code:t(()=>[I]),_:1}),T,a(c,{title:"相关题目",id:"md-demo-516"},{default:t(()=>[n("h4",F,[M,s(" 📌 "),n("a",P,[s("141. 环形链表 - LeetCode"),a(o)])]),V,Y,K,J,X,Z,$,G,Q,W,nn,sn,an,tn,en]),code:t(()=>[on]),_:1}),cn,a(c,{title:"相关题目",id:"md-demo-656"},{default:t(()=>[n("h4",ln,[pn,s(" 📌 "),n("a",un,[s("21. 合并两个有序链表 - LeetCode"),a(o)])]),dn,rn,kn,mn,vn,bn,hn,_n,yn,gn,fn,wn,xn,Ln]),code:t(()=>[jn]),_:1}),Nn,a(c,{title:"相关题目",id:"md-demo-760"},{default:t(()=>[n("h4",Cn,[qn,s(" 📌 "),n("a",On,[s("19. 删除链表的倒数第 N 个节点 - LeetCode"),a(o)])]),Sn,Un,Rn,zn,An,Bn,Dn,En,Hn,In,Tn,Fn,Mn]),code:t(()=>[Pn]),_:1}),Vn,a(c,{title:"相关题目",id:"md-demo-890"},{default:t(()=>[n("h4",Yn,[Kn,s(" 📌 "),n("a",Jn,[s("876. 链表的中间节点 - LeetCode"),a(o)])]),Xn,Zn,$n,Gn,Qn,Wn,ns,ss,as,ts,es,os,cs]),code:t(()=>[ls]),_:1}),ps,is,us,ds,a(c,{title:"相关题目",id:"md-demo-1011"},{default:t(()=>[n("h4",rs,[ks,s(" 📌 "),n("a",ms,[s("146. LRU 缓存 - LeetCode"),a(o)])]),vs,bs,hs,_s,ys,gs,fs,ws,xs,Ls,js,Ns,Cs,qs,Os,Ss,Us,Rs,zs]),code:t(()=>[As]),_:1}),Bs,a(c,{title:"相关题目",id:"md-demo-1182"},{default:t(()=>[n("h4",Ds,[Es,s(" 📌 "),n("a",Hs,[s("148. 链表排序 - LeetCode"),a(o)])])]),code:t(()=>[Is]),_:1}),Ts,l(" TODO: 链表排序 "),Fs,l(" START TABLE "),l(" Please keep comment here to allow auto update "),l(" DON'T EDIT THIS SECTION, INSTEAD RE-RUN `npm run lc` TO UPDATE "),Ms,Ps,l(" prettier-ignore "),n("table",null,[Vs,n("tbody",null,[n("tr",null,[Ys,Ks,n("td",Js,[a(e,{to:"/problem/0707.html"},{default:t(()=>[s("[✓]")]),_:1})]),n("td",Xs,[a(e,{to:"/tag/design.html"},{default:t(()=>[Zs]),_:1}),s(),a(e,{to:"/tag/linked-list.html"},{default:t(()=>[$s]),_:1})]),Gs,n("td",Qs,[n("a",Ws,[s("🀄️"),a(o)]),s(),n("a",na,[s("🔗"),a(o)])])]),n("tr",null,[sa,aa,n("td",ta,[a(e,{to:"/problem/0083.html"},{default:t(()=>[s("[✓]")]),_:1})]),n("td",ea,[a(e,{to:"/tag/linked-list.html"},{default:t(()=>[oa]),_:1})]),ca,n("td",la,[n("a",pa,[s("🀄️"),a(o)]),s(),n("a",ia,[s("🔗"),a(o)])])]),n("tr",null,[ua,da,n("td",ra,[a(e,{to:"/problem/0082.html"},{default:t(()=>[s("[✓]")]),_:1})]),n("td",ka,[a(e,{to:"/tag/linked-list.html"},{default:t(()=>[ma]),_:1}),s(),a(e,{to:"/tag/two-pointers.html"},{default:t(()=>[va]),_:1})]),ba,n("td",ha,[n("a",_a,[s("🀄️"),a(o)]),s(),n("a",ya,[s("🔗"),a(o)])])]),n("tr",null,[ga,fa,n("td",wa,[a(e,{to:"/problem/0206.html"},{default:t(()=>[s("[✓]")]),_:1})]),n("td",xa,[a(e,{to:"/tag/recursion.html"},{default:t(()=>[La]),_:1}),s(),a(e,{to:"/tag/linked-list.html"},{default:t(()=>[ja]),_:1})]),Na,n("td",Ca,[n("a",qa,[s("🀄️"),a(o)]),s(),n("a",Oa,[s("🔗"),a(o)])])]),n("tr",null,[Sa,Ua,n("td",Ra,[a(e,{to:"/problem/0092.html"},{default:t(()=>[s("[✓]")]),_:1})]),n("td",za,[a(e,{to:"/tag/linked-list.html"},{default:t(()=>[Aa]),_:1})]),Ba,n("td",Da,[n("a",Ea,[s("🀄️"),a(o)]),s(),n("a",Ha,[s("🔗"),a(o)])])]),n("tr",null,[Ia,Ta,n("td",Fa,[a(e,{to:"/problem/0025.html"},{default:t(()=>[s("[✓]")]),_:1})]),n("td",Ma,[a(e,{to:"/tag/recursion.html"},{default:t(()=>[Pa]),_:1}),s(),a(e,{to:"/tag/linked-list.html"},{default:t(()=>[Va]),_:1})]),Ya,n("td",Ka,[n("a",Ja,[s("🀄️"),a(o)]),s(),n("a",Xa,[s("🔗"),a(o)])])]),n("tr",null,[Za,$a,n("td",Ga,[a(e,{to:"/problem/0203.html"},{default:t(()=>[s("[✓]")]),_:1})]),n("td",Qa,[a(e,{to:"/tag/recursion.html"},{default:t(()=>[Wa]),_:1}),s(),a(e,{to:"/tag/linked-list.html"},{default:t(()=>[nt]),_:1})]),st,n("td",at,[n("a",tt,[s("🀄️"),a(o)]),s(),n("a",et,[s("🔗"),a(o)])])]),n("tr",null,[ot,ct,n("td",lt,[a(e,{to:"/problem/0328.html"},{default:t(()=>[s("[✓]")]),_:1})]),n("td",pt,[a(e,{to:"/tag/linked-list.html"},{default:t(()=>[it]),_:1})]),ut,n("td",dt,[n("a",rt,[s("🀄️"),a(o)]),s(),n("a",kt,[s("🔗"),a(o)])])]),n("tr",null,[mt,vt,n("td",bt,[a(e,{to:"/problem/0234.html"},{default:t(()=>[s("[✓]")]),_:1})]),n("td",ht,[a(e,{to:"/tag/stack.html"},{default:t(()=>[_t]),_:1}),s(),a(e,{to:"/tag/recursion.html"},{default:t(()=>[yt]),_:1}),s(),a(e,{to:"/tag/linked-list.html"},{default:t(()=>[gt]),_:1}),s(),ft]),wt,n("td",xt,[n("a",Lt,[s("🀄️"),a(o)]),s(),n("a",jt,[s("🔗"),a(o)])])]),n("tr",null,[Nt,Ct,n("td",qt,[a(e,{to:"/problem/0430.html"},{default:t(()=>[s("[✓]")]),_:1})]),n("td",Ot,[a(e,{to:"/tag/depth-first-search.html"},{default:t(()=>[St]),_:1}),s(),a(e,{to:"/tag/linked-list.html"},{default:t(()=>[Ut]),_:1}),s(),a(e,{to:"/tag/doubly-linked-list.html"},{default:t(()=>[Rt]),_:1})]),zt,n("td",At,[n("a",Bt,[s("🀄️"),a(o)]),s(),n("a",Dt,[s("🔗"),a(o)])])]),n("tr",null,[Et,Ht,n("td",It,[a(e,{to:"/problem/0138.html"},{default:t(()=>[s("[✓]")]),_:1})]),n("td",Tt,[a(e,{to:"/tag/hash-table.html"},{default:t(()=>[Ft]),_:1}),s(),a(e,{to:"/tag/linked-list.html"},{default:t(()=>[Mt]),_:1})]),Pt,n("td",Vt,[n("a",Yt,[s("🀄️"),a(o)]),s(),n("a",Kt,[s("🔗"),a(o)])])]),n("tr",null,[Jt,Xt,n("td",Zt,[a(e,{to:"/problem/0061.html"},{default:t(()=>[s("[✓]")]),_:1})]),n("td",$t,[a(e,{to:"/tag/linked-list.html"},{default:t(()=>[Gt]),_:1}),s(),a(e,{to:"/tag/two-pointers.html"},{default:t(()=>[Qt]),_:1})]),Wt,n("td",ne,[n("a",se,[s("🀄️"),a(o)]),s(),n("a",ae,[s("🔗"),a(o)])])])])]),te,l(" prettier-ignore "),n("table",null,[ee,n("tbody",null,[n("tr",null,[oe,ce,n("td",le,[a(e,{to:"/problem/0148.html"},{default:t(()=>[s("[✓]")]),_:1})]),n("td",pe,[a(e,{to:"/tag/linked-list.html"},{default:t(()=>[ie]),_:1}),s(),a(e,{to:"/tag/two-pointers.html"},{default:t(()=>[ue]),_:1}),s(),a(e,{to:"/tag/divide-and-conquer.html"},{default:t(()=>[de]),_:1}),s(),re]),ke,n("td",me,[n("a",ve,[s("🀄️"),a(o)]),s(),n("a",be,[s("🔗"),a(o)])])]),n("tr",null,[he,_e,n("td",ye,[a(e,{to:"/problem/0021.html"},{default:t(()=>[s("[✓]")]),_:1})]),n("td",ge,[a(e,{to:"/tag/recursion.html"},{default:t(()=>[fe]),_:1}),s(),a(e,{to:"/tag/linked-list.html"},{default:t(()=>[we]),_:1})]),xe,n("td",Le,[n("a",je,[s("🀄️"),a(o)]),s(),n("a",Ne,[s("🔗"),a(o)])])]),n("tr",null,[Ce,qe,n("td",Oe,[a(e,{to:"/problem/0023.html"},{default:t(()=>[s("[✓]")]),_:1})]),n("td",Se,[a(e,{to:"/tag/linked-list.html"},{default:t(()=>[Ue]),_:1}),s(),a(e,{to:"/tag/divide-and-conquer.html"},{default:t(()=>[Re]),_:1}),s(),a(e,{to:"/tag/heap-priority-queue.html"},{default:t(()=>[ze]),_:1}),s(),Ae]),Be,n("td",De,[n("a",Ee,[s("🀄️"),a(o)]),s(),n("a",He,[s("🔗"),a(o)])])]),n("tr",null,[Ie,Te,n("td",Fe,[a(e,{to:"/problem/0147.html"},{default:t(()=>[s("[✓]")]),_:1})]),n("td",Me,[a(e,{to:"/tag/linked-list.html"},{default:t(()=>[Pe]),_:1}),s(),a(e,{to:"/tag/sorting.html"},{default:t(()=>[Ve]),_:1})]),Ye,n("td",Ke,[n("a",Je,[s("🀄️"),a(o)]),s(),n("a",Xe,[s("🔗"),a(o)])])])])]),Ze,l(" prettier-ignore "),n("table",null,[$e,n("tbody",null,[n("tr",null,[Ge,Qe,n("td",We,[a(e,{to:"/problem/0141.html"},{default:t(()=>[s("[✓]")]),_:1})]),n("td",no,[a(e,{to:"/tag/hash-table.html"},{default:t(()=>[so]),_:1}),s(),a(e,{to:"/tag/linked-list.html"},{default:t(()=>[ao]),_:1}),s(),a(e,{to:"/tag/two-pointers.html"},{default:t(()=>[to]),_:1})]),eo,n("td",oo,[n("a",co,[s("🀄️"),a(o)]),s(),n("a",lo,[s("🔗"),a(o)])])]),n("tr",null,[po,io,n("td",uo,[a(e,{to:"/problem/0142.html"},{default:t(()=>[s("[✓]")]),_:1})]),n("td",ro,[a(e,{to:"/tag/hash-table.html"},{default:t(()=>[ko]),_:1}),s(),a(e,{to:"/tag/linked-list.html"},{default:t(()=>[mo]),_:1}),s(),a(e,{to:"/tag/two-pointers.html"},{default:t(()=>[vo]),_:1})]),bo,n("td",ho,[n("a",_o,[s("🀄️"),a(o)]),s(),n("a",yo,[s("🔗"),a(o)])])]),n("tr",null,[go,fo,n("td",wo,[a(e,{to:"/problem/0160.html"},{default:t(()=>[s("[✓]")]),_:1})]),n("td",xo,[a(e,{to:"/tag/hash-table.html"},{default:t(()=>[Lo]),_:1}),s(),a(e,{to:"/tag/linked-list.html"},{default:t(()=>[jo]),_:1}),s(),a(e,{to:"/tag/two-pointers.html"},{default:t(()=>[No]),_:1})]),Co,n("td",qo,[n("a",Oo,[s("🀄️"),a(o)]),s(),n("a",So,[s("🔗"),a(o)])])]),n("tr",null,[Uo,Ro,n("td",zo,[a(e,{to:"/problem/0019.html"},{default:t(()=>[s("[✓]")]),_:1})]),n("td",Ao,[a(e,{to:"/tag/linked-list.html"},{default:t(()=>[Bo]),_:1}),s(),a(e,{to:"/tag/two-pointers.html"},{default:t(()=>[Do]),_:1})]),Eo,n("td",Ho,[n("a",Io,[s("🀄️"),a(o)]),s(),n("a",To,[s("🔗"),a(o)])])]),n("tr",null,[Fo,Mo,n("td",Po,[a(e,{to:"/problem/0876.html"},{default:t(()=>[s("[✓]")]),_:1})]),n("td",Vo,[a(e,{to:"/tag/linked-list.html"},{default:t(()=>[Yo]),_:1}),s(),a(e,{to:"/tag/two-pointers.html"},{default:t(()=>[Ko]),_:1})]),Jo,n("td",Xo,[n("a",Zo,[s("🀄️"),a(o)]),s(),n("a",$o,[s("🔗"),a(o)])])]),n("tr",null,[Go,Qo,n("td",Wo,[a(e,{to:"/offer/jz_offer_22_1.html"},{default:t(()=>[s("[✓]")]),_:1})]),n("td",nc,[a(e,{to:"/tag/linked-list.html"},{default:t(()=>[sc]),_:1}),s(),a(e,{to:"/tag/two-pointers.html"},{default:t(()=>[ac]),_:1})]),tc,n("td",ec,[n("a",oc,[s("🀄️"),a(o)])])]),n("tr",null,[cc,lc,n("td",pc,[a(e,{to:"/problem/0143.html"},{default:t(()=>[s("[✓]")]),_:1})]),n("td",ic,[a(e,{to:"/tag/stack.html"},{default:t(()=>[uc]),_:1}),s(),a(e,{to:"/tag/recursion.html"},{default:t(()=>[dc]),_:1}),s(),a(e,{to:"/tag/linked-list.html"},{default:t(()=>[rc]),_:1}),s(),kc]),mc,n("td",vc,[n("a",bc,[s("🀄️"),a(o)]),s(),n("a",hc,[s("🔗"),a(o)])])]),n("tr",null,[_c,yc,n("td",gc,[a(e,{to:"/problem/0002.html"},{default:t(()=>[s("[✓]")]),_:1})]),n("td",fc,[a(e,{to:"/tag/recursion.html"},{default:t(()=>[wc]),_:1}),s(),a(e,{to:"/tag/linked-list.html"},{default:t(()=>[xc]),_:1}),s(),a(e,{to:"/tag/math.html"},{default:t(()=>[Lc]),_:1})]),jc,n("td",Nc,[n("a",Cc,[s("🀄️"),a(o)]),s(),n("a",qc,[s("🔗"),a(o)])])]),n("tr",null,[Oc,Sc,n("td",Uc,[a(e,{to:"/problem/0445.html"},{default:t(()=>[s("[✓]")]),_:1})]),n("td",Rc,[a(e,{to:"/tag/stack.html"},{default:t(()=>[zc]),_:1}),s(),a(e,{to:"/tag/linked-list.html"},{default:t(()=>[Ac]),_:1}),s(),a(e,{to:"/tag/math.html"},{default:t(()=>[Bc]),_:1})]),Dc,n("td",Ec,[n("a",Hc,[s("🀄️"),a(o)]),s(),n("a",Ic,[s("🔗"),a(o)])])])])])])}const Yc=d(g,[["render",Tc],["__file","linked_list.html.vue"]]);export{Yc as default};
