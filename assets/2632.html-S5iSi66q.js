import{_ as i,r as a,o as r,c as u,a as n,b as e,d as t,w as o,f as d,e as p}from"./app-fBVbqwGY.js";const g={},h=n("h1",{id:"_2632-柯里化-🔒",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_2632-柯里化-🔒","aria-hidden":"true"},"#"),e(" 2632. 柯里化 🔒")],-1),k={href:"https://leetcode.cn/problems/curry",target:"_blank",rel:"noopener noreferrer"},m=n("code",null,"力扣",-1),f={href:"https://leetcode.com/problems/curry",target:"_blank",rel:"noopener noreferrer"},_=n("code",null,"LeetCode",-1),b=p('<h2 id="题目" tabindex="-1"><a class="header-anchor" href="#题目" aria-hidden="true">#</a> 题目</h2><p>Given a function <code>fn</code>, return a <strong>curried</strong> version of that function.</p><p>A <strong>curried</strong> function is a function that accepts fewer or an equal number of parameters as the original function and returns either another <strong>curried</strong> function or the same value the original function would have returned.</p><p>In practical terms, if you called the original function like <code>sum(1,2,3)</code>, you would call the <strong>curried</strong> version like <code>csum(1)(2)(3)</code>, <code>csum(1)(2,3) </code>, <code>csum(1,2)(3)</code>, or <code>csum(1,2,3)</code>. All these methods of calling the <strong>curried</strong> function should return the same value as the original.</p><p><strong>Example 1:</strong></p><blockquote><p>Input:</p><p><code>fn = function sum(a, b, c) { return a + b + c; }</code></p><p><code>inputs = [[1],[2],[3]]</code></p><p>Output: 6</p><p>Explanation:</p><p>The code being executed is:</p><p><code>const curriedSum = curry(fn);</code></p><p><code>curriedSum(1)(2)(3) === 6;</code></p><p><code>curriedSum(1)(2)(3)</code> should return the same value as <code>sum(1, 2, 3)</code>.</p></blockquote><p><strong>Example 2:</strong></p><blockquote><p>Input:</p><p><code>fn = function sum(a, b, c) { return a + b + c; }</code></p><p><code>inputs = [[1,2],[3]]</code></p><p>Output: 6</p><p>Explanation:</p><p><code>curriedSum(1, 2)(3)</code> should return the same value as <code>sum(1, 2, 3)</code>.</p></blockquote><p><strong>Example 3:</strong></p><blockquote><p>Input:</p><p><code>fn = function sum(a, b, c) { return a + b + c; }</code></p><p><code>inputs = [[],[],[1,2,3]]</code></p><p>Output: 6</p><p>Explanation:</p><p>You should be able to pass the parameters in any way, including all at once or none at all.</p><p><code>curriedSum()()(1, 2, 3)</code> should return the same value as <code>sum(1, 2, 3)</code>.</p></blockquote><p><strong>Example 4:</strong></p><blockquote><p>Input:</p><p><code>fn = function life() { return 42; }</code></p><p><code>inputs = [[]]</code></p><p>Output: 42</p><p>Explanation:</p><p>currying a function that accepts zero parameters should effectively do nothing.</p><p><code>curriedLife() === 42</code></p></blockquote><p><strong>Constraints:</strong></p><ul><li><code>1 &lt;= inputs.length &lt;= 1000</code></li><li><code>0 &lt;= inputs[i][j] &lt;= 10^5</code></li><li><code>0 &lt;= fn.length &lt;= 1000</code></li><li><code>inputs.flat().length == fn.length</code></li><li>function parameters explicitly defined</li><li>If <code>fn.length &gt; 0</code> then the last array in <code>inputs</code> is not empty</li><li>If <code>fn.length === 0</code> then <code>inputs.length === 1</code></li></ul><h2 id="题目大意" tabindex="-1"><a class="header-anchor" href="#题目大意" aria-hidden="true">#</a> 题目大意</h2><p>请你编写一个函数，它接收一个其他的函数，并返回该函数的 <strong>柯里化</strong> 后的形式。</p><p><strong>柯里化</strong> 函数的定义是接受与原函数相同数量或更少数量的参数，并返回另一个 <strong>柯里化</strong> 后的函数或与原函数相同的值。</p><p>实际上，当你调用原函数，如 <code>sum(1,2,3)</code> 时，它将调用 <strong>柯里化</strong> 函数的某个形式，如 <code>csum(1)(2)(3)</code>， <code>csum(1)(2,3)</code>， <code>csum(1,2)(3)</code>，或 <code>csum(1,2,3)</code> 。所有调用 <strong>柯里化</strong> 函数的方法都应该返回与原始函数相同的值。</p><p><strong>提示：</strong></p><ul><li><code>1 &lt;= inputs.length &lt;= 1000</code></li><li><code>0 &lt;= inputs[i][j] &lt;= 10^5</code></li><li><code>0 &lt;= fn.length &lt;= 1000</code></li><li><code>inputs.flat().length == fn.length</code></li><li><code>函数参数需要被显式定义</code></li><li>如果 <code>fn.length &gt; 0</code> 则最后一个数组 <code>inputs</code> 不为空</li><li>如果 <code>fn.length === 0</code> 则 <code>inputs.length === 1</code></li></ul><h2 id="解题思路" tabindex="-1"><a class="header-anchor" href="#解题思路" aria-hidden="true">#</a> 解题思路</h2>',21),v={href:"https://en.wikipedia.org/wiki/Currying",target:"_blank",rel:"noopener noreferrer"},x=n("code",null,"f(a, b, c)",-1),y=n("code",null,"f(a)(b)(c)",-1),w=p(`<h3 id="柯里化的目的是什么" tabindex="-1"><a class="header-anchor" href="#柯里化的目的是什么" aria-hidden="true">#</a> 柯里化的目的是什么？</h3><p>可以从一个实际中的例子中，了解柯里化的好处。</p><p>例如，有一个用于格式化和输出信息的日志（logging）函数 <code>log(date, importance, message)</code>：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">log</span><span class="token punctuation">(</span><span class="token parameter">date<span class="token punctuation">,</span> importance<span class="token punctuation">,</span> message</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token function">alert</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">[</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>date<span class="token punctuation">.</span><span class="token function">getHours</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>date<span class="token punctuation">.</span><span class="token function">getMinutes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">] [</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>importance<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">] </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>message<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>将它柯里化：</p><p><code>log = _.curry(log);</code></p><p>柯里化之后，<code>log</code> 仍正常运行：</p><p><code>log(new Date(), &quot;DEBUG&quot;, &quot;some debug&quot;); // log(a, b, c)</code></p><p>但是也能以柯里化形式运行：</p><p><code>log(new Date())(&quot;DEBUG&quot;)(&quot;some debug&quot;); // log(a)(b)(c)</code></p><p>现在，可以轻松地为当前日志创建便捷函数：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// logNow 会是带有固定第一个参数的日志的部分应用函数</span>
<span class="token keyword">let</span> logNow <span class="token operator">=</span> <span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 使用它</span>
<span class="token function">logNow</span><span class="token punctuation">(</span><span class="token string">&#39;INFO&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;message&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [HH:mm] INFO message</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在，<code>logNow</code> 是具有固定第一个参数的 <code>log</code>，换句话说，就是更简短的“部分应用函数（partially applied function）”或“部分函数（partial）”。</p><p>可以更进一步，为当前的调试日志（debug log）提供便捷函数：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> debugNow <span class="token operator">=</span> <span class="token function">logNow</span><span class="token punctuation">(</span><span class="token string">&#39;DEBUG&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">debugNow</span><span class="token punctuation">(</span><span class="token string">&#39;message&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [HH:mm] DEBUG message</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>因此，柯里化让我们能够更容易地获取部分应用函数。就像在日志记录示例中看到的那样，普通函数 <code>log(date, importance, message)</code> 在被柯里化之后，当调用它的时候传入一个参数（如 <code>log(date)</code>）或两个参数（<code>log(date, importance)</code>）时，它会返回部分应用函数。</p><h3 id="实现柯里化函数的思路" tabindex="-1"><a class="header-anchor" href="#实现柯里化函数的思路" aria-hidden="true">#</a> 实现柯里化函数的思路：</h3><ol><li><p><strong>函数参数处理</strong>：</p><ul><li>输入的函数 <code>fn</code> 可能接受多个参数。</li><li>使用 <code>fn.length</code> 来获取函数期望的参数数量。</li></ul></li><li><p><strong>递归调用</strong>：</p><ul><li>定义一个内部函数 <code>curried</code>，用于处理传入的参数。</li><li>检查当前收到的参数数量 <code>args.length</code> 是否达到 <code>fn</code> 所需的参数数量： <ul><li>如果达到了，则直接调用 <code>fn</code> 并返回结果。</li><li>如果未达到，则返回一个新函数，这个新函数接收更多参数（<code>nextArgs</code>）并将之前的参数（<code>args</code>）与新参数合并。</li></ul></li></ul></li><li><p><strong>返回合成的函数</strong>：</p><ul><li>通过递归调用 <code>curried</code>，允许继续接收参数直到满足条件。</li></ul></li></ol><h4 id="复杂度分析" tabindex="-1"><a class="header-anchor" href="#复杂度分析" aria-hidden="true">#</a> 复杂度分析</h4><ul><li><strong>时间复杂度</strong>：<code>O(1)</code>，每次调用柯里化函数的开销是常数级的，因为只是处理参数和函数调用。</li><li><strong>空间复杂度</strong>：<code>O(n)</code>，在最坏情况下需要存储所有传入的参数，直到达到期望数量的参数。</li></ul><h2 id="代码" tabindex="-1"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> <span class="token function-variable function">curry</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token function">curried</span><span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token comment">// 如果参数数量满足要求，调用原始函数</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>args<span class="token punctuation">.</span>length <span class="token operator">&gt;=</span> fn<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		<span class="token comment">// 否则，返回一个新函数继续接收参数</span>
		<span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>nextArgs</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">curried</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">,</span> <span class="token operator">...</span>nextArgs<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="相关题目" tabindex="-1"><a class="header-anchor" href="#相关题目" aria-hidden="true">#</a> 相关题目</h2>`,23),q=n("thead",null,[n("tr",null,[n("th",{style:{"text-align":"center"}},"题号"),n("th",{style:{"text-align":"left"}},"标题"),n("th",{style:{"text-align":"center"}},"题解"),n("th",{style:{"text-align":"left"}},"标签"),n("th",{style:{"text-align":"center"}},"难度"),n("th",{style:{"text-align":"center"}},"力扣")])],-1),E=n("td",{style:{"text-align":"center"}},"2623",-1),j=n("td",{style:{"text-align":"left"}},"记忆函数",-1),N={style:{"text-align":"center"}},I=n("td",{style:{"text-align":"left"}},null,-1),O=n("td",{style:{"text-align":"center"}},"🟠",-1),B={style:{"text-align":"center"}},C={href:"https://leetcode.cn/problems/memoize",target:"_blank",rel:"noopener noreferrer"},D={href:"https://leetcode.com/problems/memoize",target:"_blank",rel:"noopener noreferrer"},L=n("td",{style:{"text-align":"center"}},"2630",-1),S=n("td",{style:{"text-align":"left"}},"记忆函数 II",-1),z={style:{"text-align":"center"}},A=n("td",{style:{"text-align":"left"}},null,-1),G=n("td",{style:{"text-align":"center"}},"🔴",-1),H={style:{"text-align":"center"}},V={href:"https://leetcode.cn/problems/memoize-ii",target:"_blank",rel:"noopener noreferrer"},U={href:"https://leetcode.com/problems/memoize-ii",target:"_blank",rel:"noopener noreferrer"};function $(F,M){const l=a("font"),s=a("ExternalLinkIcon"),c=a("RouterLink");return r(),u("div",null,[h,n("p",null,[e("🟠 "),t(l,{color:"#ffb800"},{default:o(()=>[e("Medium")]),_:1}),e("  🔗 "),n("a",k,[m,t(s)]),e(),n("a",f,[_,t(s)])]),b,n("p",null,[n("a",v,[e("柯里化（Currying）"),t(s)]),e("是一种关于函数的高阶技术，它是指将一个函数从可调用的 "),x,e(" 转换为可调用的 "),y,e("。柯里化不会调用函数，只是对函数进行转换。")]),w,d(" prettier-ignore "),n("table",null,[q,n("tbody",null,[n("tr",null,[E,j,n("td",N,[t(c,{to:"/problem/2623.html"},{default:o(()=>[e("[✓]")]),_:1})]),I,O,n("td",B,[n("a",C,[e("🀄️"),t(s)]),e(),n("a",D,[e("🔗"),t(s)])])]),n("tr",null,[L,S,n("td",z,[t(c,{to:"/problem/2630.html"},{default:o(()=>[e("[✓]")]),_:1})]),A,G,n("td",H,[n("a",V,[e("🀄️"),t(s)]),e(),n("a",U,[e("🔗"),t(s)])])])])])])}const T=i(g,[["render",$],["__file","2632.html.vue"]]);export{T as default};
