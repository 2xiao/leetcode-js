import{_ as l,r as a,o as u,c as r,a as n,b as s,d as t,w as o,e as i}from"./app-B5EG-zH0.js";const d={},k=n("h1",{id:"_1415-长度为-n-的开心字符串中字典序第-k-小的字符串",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_1415-长度为-n-的开心字符串中字典序第-k-小的字符串","aria-hidden":"true"},"#"),s(" 1415. 长度为 n 的开心字符串中字典序第 k 小的字符串")],-1),g=n("code",null,"字符串",-1),b=n("code",null,"回溯",-1),q={href:"https://leetcode.cn/problems/the-k-th-lexicographical-string-of-all-happy-strings-of-length-n",target:"_blank",rel:"noopener noreferrer"},h=n("code",null,"力扣",-1),m={href:"https://leetcode.com/problems/the-k-th-lexicographical-string-of-all-happy-strings-of-length-n",target:"_blank",rel:"noopener noreferrer"},v=n("code",null,"LeetCode",-1),f=i(`<h2 id="题目" tabindex="-1"><a class="header-anchor" href="#题目" aria-hidden="true">#</a> 题目</h2><p>A <strong>happy string</strong> is a string that:</p><ul><li>consists only of letters of the set <code>[&#39;a&#39;, &#39;b&#39;, &#39;c&#39;]</code>.</li><li><code>s[i] != s[i + 1]</code> for all values of <code>i</code> from <code>1</code> to <code>s.length - 1</code> (string is 1-indexed).</li></ul><p>For example, strings <strong>&quot; abc&quot;, &quot;ac&quot;, &quot;b&quot;</strong> and <strong>&quot; abcbabcbcb&quot;</strong> are all happy strings and strings <strong>&quot; aa&quot;, &quot;baa&quot;</strong> and <strong>&quot; ababbc&quot;</strong> are not happy strings.</p><p>Given two integers <code>n</code> and <code>k</code>, consider a list of all happy strings of length <code>n</code> sorted in lexicographical order.</p><p>Return <em>the kth string</em> of this list or return an <strong>empty string</strong> if there are less than <code>k</code> happy strings of length <code>n</code>.</p><p><strong>Example 1:</strong></p><blockquote><p>Input: n = 1, k = 3</p><p>Output: &quot;c&quot;</p><p>Explanation: The list [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;] contains all happy strings of length 1. The third string is &quot;c&quot;.</p></blockquote><p><strong>Example 2:</strong></p><blockquote><p>Input: n = 1, k = 4</p><p>Output: &quot;&quot;</p><p>Explanation: There are only 3 happy strings of length 1.</p></blockquote><p><strong>Example 3:</strong></p><blockquote><p>Input: n = 3, k = 9</p><p>Output: &quot;cab&quot;</p><p>Explanation: There are 12 different happy string of length 3 [&quot;aba&quot;, &quot;abc&quot;, &quot;aca&quot;, &quot;acb&quot;, &quot;bab&quot;, &quot;bac&quot;, &quot;bca&quot;, &quot;bcb&quot;, &quot;cab&quot;, &quot;cac&quot;, &quot;cba&quot;, &quot;cbc&quot;]. You will find the 9th string = &quot;cab&quot;</p></blockquote><p><strong>Constraints:</strong></p><ul><li><code>1 &lt;= n &lt;= 10</code></li><li><code>1 &lt;= k &lt;= 100</code></li></ul><h2 id="题目大意" tabindex="-1"><a class="header-anchor" href="#题目大意" aria-hidden="true">#</a> 题目大意</h2><p>一个 「开心字符串」定义为：</p><ul><li>仅包含小写字母 <code>[&#39;a&#39;, &#39;b&#39;, &#39;c&#39;]</code>.</li><li>对所有在 <code>1</code> 到 <code>s.length - 1</code> 之间的 <code>i</code> ，满足 <code>s[i] != s[i + 1]</code> （字符串的下标从 1 开始）。</li></ul><p>比方说，字符串 <strong>&quot; abc&quot;</strong>，<strong>&quot; ac&quot;，&quot;b&quot;</strong> 和 <strong>&quot; abcbabcbcb&quot;</strong> 都是开心字符串，但是 <strong>&quot; aa&quot;</strong>，<strong>&quot;baa&quot;</strong> 和 <strong>&quot; ababbc&quot;</strong> 都不是开心字符串。</p><p>给你两个整数 <code>n</code> 和 <code>k</code> ，你需要将长度为 <code>n</code> 的所有开心字符串按字典序排序。</p><p>请你返回排序后的第 k 个开心字符串，如果长度为 <code>n</code> 的开心字符串少于 <code>k</code> 个，那么请你返回 <strong>空字符串</strong> 。</p><p><strong>示例 1：</strong></p><blockquote><p><strong>输入：</strong> n = 1, k = 3</p><p><strong>输出：</strong> &quot;c&quot;</p><p><strong>解释：</strong> 列表 [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;] 包含了所有长度为 1 的开心字符串。按照字典序排序后第三个字符串为 &quot;c&quot; 。</p></blockquote><p><strong>示例 2：</strong></p><blockquote><p><strong>输入：</strong> n = 1, k = 4</p><p><strong>输出：</strong> &quot;&quot;</p><p><strong>解释：</strong> 长度为 1 的开心字符串只有 3 个。</p></blockquote><p><strong>示例 3：</strong></p><blockquote><p><strong>输入：</strong> n = 3, k = 9</p><p><strong>输出：</strong> &quot;cab&quot;</p><p><strong>解释：</strong> 长度为 3 的开心字符串总共有 12 个 [&quot;aba&quot;, &quot;abc&quot;, &quot;aca&quot;, &quot;acb&quot;, &quot;bab&quot;, &quot;bac&quot;, &quot;bca&quot;, &quot;bcb&quot;, &quot;cab&quot;, &quot;cac&quot;, &quot;cba&quot;, &quot;cbc&quot;] 。第 9 个字符串为 &quot;cab&quot;</p></blockquote><p><strong>示例 4：</strong></p><blockquote><p><strong>输入：</strong> n = 2, k = 7</p><p><strong>输出：</strong> &quot;&quot;</p></blockquote><p><strong>示例 5：</strong></p><blockquote><p><strong>输入：</strong> n = 10, k = 100</p><p><strong>输出：</strong> &quot;abacbabacb&quot;</p></blockquote><p><strong>提示：</strong></p><ul><li><code>1 &lt;= n &lt;= 10</code></li><li><code>1 &lt;= k &lt;= 100</code></li></ul><h2 id="解题思路" tabindex="-1"><a class="header-anchor" href="#解题思路" aria-hidden="true">#</a> 解题思路</h2><p>回溯（Backtracking）是生成组合或排列的一种常见方法，可以使用 <strong>回溯 + 剪枝</strong> 来生成第 <code>k</code> 个快乐字符串：</p><ul><li><strong>递归构造</strong>：从空字符串开始，每次添加 <code>&#39;a&#39;</code>、<code>&#39;b&#39;</code>、<code>&#39;c&#39;</code> 中不同于上一个字符的选项。</li><li><strong>字典序排列</strong>：字典序是按照 <strong>&#39;a&#39; &lt; &#39;b&#39; &lt; &#39;c&#39;</strong> 排列的，因此，按顺序回溯构造的字符串天然是字典序排列的。</li></ul><ol><li><p><strong>回溯法构造字符串</strong>：</p><ul><li>每次尝试 <code>&#39;a&#39;</code>, <code>&#39;b&#39;</code>, <code>&#39;c&#39;</code>，但不能选择与上一个字符相同的字符。</li><li>递归进入下一层。</li><li>回溯（撤销选择）。</li><li><strong>终止条件</strong>：<code>track.length == n</code>。</li></ul></li><li><p><strong>剪枝优化</strong>：</p><ul><li>使用 <code>count</code> 变量计数，当 <code>count == k</code> 时，保存当前字符串并直接返回，避免不必要的计算。</li></ul></li><li><p><strong>不存储所有字符串</strong>：</p><ul><li>传统回溯会存储 <code>O(3^n)</code> 个字符串，再排序并取第 <code>k</code> 个，<strong>但这样空间消耗大</strong>。</li><li>这里使用<strong>计数法</strong>，只找第 <code>k</code> 个，不存储额外结果，时间复杂度降低到 <code>O(k)</code>，空间复杂度降低到 <code>O(n)</code>（递归栈）。</li></ul></li></ol><h4 id="复杂度分析" tabindex="-1"><a class="header-anchor" href="#复杂度分析" aria-hidden="true">#</a> 复杂度分析</h4><ul><li><strong>时间复杂度</strong>：<code>O(k)</code>，剪枝优化，只找到 <code>k</code> 个就终止。</li><li><strong>空间复杂度</strong>：<code>O(n)</code>，回溯栈的开销，递归深度最多为 <code>n</code>。</li></ul><h2 id="代码" tabindex="-1"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">}</span></span> <span class="token parameter">n</span>
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">}</span></span> <span class="token parameter">k</span>
 * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>string<span class="token punctuation">}</span></span>
 */</span>
<span class="token keyword">var</span> <span class="token function-variable function">getHappyString</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">n<span class="token punctuation">,</span> k</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">;</span>
	<span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

	<span class="token comment">// 回溯函数，track 记录当前构造的字符串</span>
	<span class="token keyword">const</span> <span class="token function-variable function">backtrack</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">track</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>track<span class="token punctuation">.</span>length <span class="token operator">==</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			count<span class="token operator">++</span><span class="token punctuation">;</span>
			<span class="token comment">// 终止条件</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">==</span> k<span class="token punctuation">)</span> result <span class="token operator">=</span> track<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token keyword">return</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>

		<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> char <span class="token keyword">of</span> <span class="token punctuation">[</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;c&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token comment">// 遍历所有可能字符</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span>track<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> track<span class="token punctuation">[</span>track<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">!==</span> char<span class="token punctuation">)</span> <span class="token punctuation">{</span>
				<span class="token comment">// 不能和前一个字符相同</span>
				track<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>char<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 选择</span>
				<span class="token function">backtrack</span><span class="token punctuation">(</span>track<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 递归</span>
				track<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 回溯</span>
				<span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">&gt;=</span> k<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span> <span class="token comment">// 剪枝优化，找到 \`k\` 之后直接返回</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span><span class="token punctuation">;</span>

	<span class="token function">backtrack</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 递归构造所有快乐字符串</span>

	<span class="token keyword">return</span> result<span class="token punctuation">;</span> <span class="token comment">// 返回第 \`k\` 个字符串</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,40);function _(y,x){const p=a("font"),e=a("RouterLink"),c=a("ExternalLinkIcon");return u(),r("div",null,[k,n("p",null,[s("🟠 "),t(p,{color:"#ffb800"},{default:o(()=>[s("Medium")]),_:1}),s("  🔖  "),t(e,{to:"/tag/string.html"},{default:o(()=>[g]),_:1}),s(),t(e,{to:"/tag/backtracking.html"},{default:o(()=>[b]),_:1}),s("  🔗 "),n("a",q,[h,t(c)]),s(),n("a",m,[v,t(c)])]),f])}const E=l(d,[["render",_],["__file","1415.html.vue"]]);export{E as default};
