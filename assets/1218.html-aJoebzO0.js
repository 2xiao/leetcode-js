import{_ as l,r as c,o as r,c as i,a as n,b as e,d as s,w as a,f as d,e as u}from"./app-aQeLbVW9.js";const k={},h=n("h1",{id:"_1218-最长定差子序列",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_1218-最长定差子序列","aria-hidden":"true"},"#"),e(" 1218. 最长定差子序列")],-1),g=n("code",null,"数组",-1),m=n("code",null,"哈希表",-1),f=n("code",null,"动态规划",-1),_={href:"https://leetcode.cn/problems/longest-arithmetic-subsequence-of-given-difference",target:"_blank",rel:"noopener noreferrer"},b=n("code",null,"力扣",-1),v={href:"https://leetcode.com/problems/longest-arithmetic-subsequence-of-given-difference",target:"_blank",rel:"noopener noreferrer"},x=n("code",null,"LeetCode",-1),y=u(`<h2 id="题目" tabindex="-1"><a class="header-anchor" href="#题目" aria-hidden="true">#</a> 题目</h2><p>Given an integer array <code>arr</code> and an integer <code>difference</code>, return the length of the longest subsequence in <code>arr</code> which is an arithmetic sequence such that the difference between adjacent elements in the subsequence equals <code>difference</code>.</p><p>A <strong>subsequence</strong> is a sequence that can be derived from <code>arr</code> by deleting some or no elements without changing the order of the remaining elements.</p><p><strong>Example 1:</strong></p><blockquote><p>Input: arr = [1,2,3,4], difference = 1</p><p>Output: 4</p><p>Explanation: The longest arithmetic subsequence is [1,2,3,4].</p></blockquote><p><strong>Example 2:</strong></p><blockquote><p>Input: arr = [1,3,5,7], difference = 1</p><p>Output: 1</p><p>Explanation: The longest arithmetic subsequence is any single element.</p></blockquote><p><strong>Example 3:</strong></p><blockquote><p>Input: arr = [1,5,7,8,5,3,4,2,1], difference = -2</p><p>Output: 4</p><p>Explanation: The longest arithmetic subsequence is [7,5,3,1].</p></blockquote><p><strong>Constraints:</strong></p><ul><li><code>1 &lt;= arr.length &lt;= 10^5</code></li><li><code>-10^4 &lt;= arr[i], difference &lt;= 10^4</code></li></ul><h2 id="题目大意" tabindex="-1"><a class="header-anchor" href="#题目大意" aria-hidden="true">#</a> 题目大意</h2><p>给你一个整数数组 <code>arr</code> 和一个整数 <code>difference</code>，请你找出并返回 <code>arr</code> 中最长等差子序列的长度，该子序列中相邻元素之间的差等于 <code>difference</code> 。</p><p><strong>子序列</strong> 是指在不改变其余元素顺序的情况下，通过删除一些元素或不删除任何元素而从 <code>arr</code> 派生出来的序列。</p><p><strong>示例 1：</strong></p><blockquote><p><strong>输入：</strong> arr = [1,2,3,4], difference = 1</p><p><strong>输出：</strong> 4</p><p><strong>解释：</strong> 最长的等差子序列是 [1,2,3,4]。</p></blockquote><p><strong>示例 2：</strong></p><blockquote><p><strong>输入：</strong> arr = [1,3,5,7], difference = 1</p><p><strong>输出：</strong> 1</p><p><strong>解释：</strong> 最长的等差子序列是任意单个元素。</p></blockquote><p><strong>示例 3：</strong></p><blockquote><p><strong>输入：</strong> arr = [1,5,7,8,5,3,4,2,1], difference = -2</p><p><strong>输出：</strong> 4</p><p><strong>解释：</strong> 最长的等差子序列是 [7,5,3,1]。</p></blockquote><p><strong>提示：</strong></p><ul><li><code>1 &lt;= arr.length &lt;= 10^5</code></li><li><code>-10^4 &lt;= arr[i], difference &lt;= 10^4</code></li></ul><h2 id="解题思路" tabindex="-1"><a class="header-anchor" href="#解题思路" aria-hidden="true">#</a> 解题思路</h2><ol><li><p><strong>使用哈希表 <code>dp</code></strong></p><ul><li><code>dp[num]</code> 表示 <strong>以 <code>num</code> 结尾的最长等差子序列的长度</strong>。</li><li>这样可以快速查询 <code>num - difference</code> 对应的子序列长度，避免 <code>O(n^2)</code> 的双层循环。</li></ul></li><li><p><strong>遍历 <code>arr</code> 构建 <code>dp</code></strong></p><ul><li>对于 <code>arr[i] = num</code>，如果 <code>num - difference</code> 存在于 <code>dp</code>，则可以接在 <code>num - difference</code> 之后形成更长的等差子序列：<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>dp<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span> <span class="token punctuation">(</span>dp<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>num <span class="token operator">-</span> difference<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li>维护 <code>maxLen</code> 记录最长等差子序列的长度。</li></ul></li><li><p><strong>返回 <code>maxLen</code> 作为最终结果</strong></p><ul><li>遍历完数组后，<code>maxLen</code> 记录的是最长等差子序列的长度。</li></ul></li></ol><h4 id="复杂度分析" tabindex="-1"><a class="header-anchor" href="#复杂度分析" aria-hidden="true">#</a> 复杂度分析</h4><ul><li><strong>时间复杂度</strong>：<code>O(n)</code>，因为每个元素在 <code>Map</code> 中只进行 <code>O(1)</code> 查询和更新操作。</li><li><strong>空间复杂度</strong>：<code>O(n)</code>，最坏情况下 <code>Map</code> 需要存储所有 <code>arr[i]</code>。</li></ul><h2 id="代码" tabindex="-1"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span> <span class="token parameter">arr</span>
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">}</span></span> <span class="token parameter">difference</span>
 * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">}</span></span>
 */</span>
<span class="token keyword">var</span> <span class="token function-variable function">longestSubsequence</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">arr<span class="token punctuation">,</span> difference</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">const</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">let</span> maxLen <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> num <span class="token keyword">of</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		dp<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span> <span class="token punctuation">(</span>dp<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>num <span class="token operator">-</span> difference<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		maxLen <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>maxLen<span class="token punctuation">,</span> dp<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> maxLen<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="相关题目" tabindex="-1"><a class="header-anchor" href="#相关题目" aria-hidden="true">#</a> 相关题目</h2>`,29),q=n("thead",null,[n("tr",null,[n("th",{style:{"text-align":"center"}},"题号"),n("th",{style:{"text-align":"left"}},"标题"),n("th",{style:{"text-align":"center"}},"题解"),n("th",{style:{"text-align":"left"}},"标签"),n("th",{style:{"text-align":"center"}},"难度"),n("th",{style:{"text-align":"center"}},"力扣")])],-1),w=n("td",{style:{"text-align":"center"}},"2453",-1),L=n("td",{style:{"text-align":"left"}},"摧毁一系列目标",-1),E=n("td",{style:{"text-align":"center"}},null,-1),j={style:{"text-align":"left"}},O=n("code",null,"数组",-1),C=n("code",null,"哈希表",-1),I=n("code",null,"计数",-1),M=n("td",{style:{"text-align":"center"}},"🟠",-1),N={style:{"text-align":"center"}},V={href:"https://leetcode.cn/problems/destroy-sequential-targets",target:"_blank",rel:"noopener noreferrer"},T={href:"https://leetcode.com/problems/destroy-sequential-targets",target:"_blank",rel:"noopener noreferrer"};function B(R,S){const p=c("font"),t=c("RouterLink"),o=c("ExternalLinkIcon");return r(),i("div",null,[h,n("p",null,[e("🟠 "),s(p,{color:"#ffb800"},{default:a(()=>[e("Medium")]),_:1}),e("  🔖  "),s(t,{to:"/tag/array.html"},{default:a(()=>[g]),_:1}),e(),s(t,{to:"/tag/hash-table.html"},{default:a(()=>[m]),_:1}),e(),s(t,{to:"/tag/dynamic-programming.html"},{default:a(()=>[f]),_:1}),e("  🔗 "),n("a",_,[b,s(o)]),e(),n("a",v,[x,s(o)])]),y,d(" prettier-ignore "),n("table",null,[q,n("tbody",null,[n("tr",null,[w,L,E,n("td",j,[s(t,{to:"/tag/array.html"},{default:a(()=>[O]),_:1}),e(),s(t,{to:"/tag/hash-table.html"},{default:a(()=>[C]),_:1}),e(),s(t,{to:"/tag/counting.html"},{default:a(()=>[I]),_:1})]),M,n("td",N,[n("a",V,[e("🀄️"),s(o)]),e(),n("a",T,[e("🔗"),s(o)])])])])])])}const G=l(k,[["render",B],["__file","1218.html.vue"]]);export{G as default};
