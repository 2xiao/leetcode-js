import{_ as l,r as o,o as r,c as i,a as n,b as e,d as s,w as a,e as d}from"./app-aQeLbVW9.js";const u={},k=n("h1",{id:"_1813-句子相似性-iii",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_1813-句子相似性-iii","aria-hidden":"true"},"#"),e(" 1813. 句子相似性 III")],-1),m=n("code",null,"数组",-1),h=n("code",null,"双指针",-1),v=n("code",null,"字符串",-1),b={href:"https://leetcode.cn/problems/sentence-similarity-iii",target:"_blank",rel:"noopener noreferrer"},g=n("code",null,"力扣",-1),q={href:"https://leetcode.com/problems/sentence-similarity-iii",target:"_blank",rel:"noopener noreferrer"},f=n("code",null,"LeetCode",-1),_=d(`<h2 id="题目" tabindex="-1"><a class="header-anchor" href="#题目" aria-hidden="true">#</a> 题目</h2><p>A sentence is a list of words that are separated by a single space with no leading or trailing spaces. For example, <code>&quot;Hello World&quot;</code>, <code>&quot;HELLO&quot;</code>, <code>&quot;hello world hello world&quot;</code> are all sentences. Words consist of <strong>only</strong> uppercase and lowercase English letters.</p><p>Two sentences <code>sentence1</code> and <code>sentence2</code> are <strong>similar</strong> if it is possible to insert an arbitrary sentence <strong>(possibly empty)</strong> inside one of these sentences such that the two sentences become equal. For example, <code>sentence1 = &quot;Hello my name is Jane&quot;</code> and <code>sentence2 = &quot;Hello Jane&quot;</code> can be made equal by inserting <code>&quot;my name is&quot;</code> between <code>&quot;Hello&quot;</code> and <code>&quot;Jane&quot;</code> in <code>sentence2</code>.</p><p>Given two sentences <code>sentence1</code> and <code>sentence2</code>, return <code>true</code> <em>if</em><code>sentence1</code><em>and</em><code>sentence2</code> <em>are similar.</em> Otherwise, return <code>false</code>.</p><p><strong>Example 1:</strong></p><blockquote><p>Input: sentence1 = &quot;My name is Haley&quot;, sentence2 = &quot;My Haley&quot;</p><p>Output: true</p><p>Explanation: sentence2 can be turned to sentence1 by inserting &quot;name is&quot; between &quot;My&quot; and &quot;Haley&quot;.</p></blockquote><p><strong>Example 2:</strong></p><blockquote><p>Input: sentence1 = &quot;of&quot;, sentence2 = &quot;A lot of words&quot;</p><p>Output: false</p><p>Explanation: No single sentence can be inserted inside one of the sentences to make it equal to the other.</p></blockquote><p><strong>Example 3:</strong></p><blockquote><p>Input: sentence1 = &quot;Eating right now&quot;, sentence2 = &quot;Eating&quot;</p><p>Output: true</p><p>Explanation: sentence2 can be turned to sentence1 by inserting &quot;right now&quot; at the end of the sentence.</p></blockquote><p><strong>Constraints:</strong></p><ul><li><code>1 &lt;= sentence1.length, sentence2.length &lt;= 100</code></li><li><code>sentence1</code> and <code>sentence2</code> consist of lowercase and uppercase English letters and spaces.</li><li>The words in <code>sentence1</code> and <code>sentence2</code> are separated by a single space.</li></ul><h2 id="题目大意" tabindex="-1"><a class="header-anchor" href="#题目大意" aria-hidden="true">#</a> 题目大意</h2><p>给定两个字符串 <code>sentence1</code> 和 <code>sentence2</code>，每个表示由一些单词组成的一个句子。句子是一系列由 <strong>单个</strong> 空格分隔的 <strong>单词</strong>，且开头和结尾没有多余空格。每个单词都只包含大写和小写英文字母。</p><p>如果两个句子 <code>s1</code> 和 <code>s2</code> ，可以通过往其中一个句子插入一个任意的句子（可以是空句子）而得到另一个句子，那么我们称这两个句子是 <strong>相似的</strong> 。<strong>注意</strong>，插入的句子必须与现有单词用空白隔开。</p><p>比方说，</p><ul><li><code>s1 = &quot;Hello Jane&quot;</code> 与 <code>s2 = &quot;Hello my name is Jane&quot;</code>，我们可以往 <code>s1</code> 中 <code>&quot;Hello&quot;</code> 和 <code>&quot;Jane&quot;</code> 之间插入 <code>&quot;my name is&quot;</code> 得到 <code>s2</code> 。</li><li><code>s1 = &quot;Frog cool&quot;</code> 与 <code>s2 = &quot;Frogs are cool&quot;</code> 不是相似的，因为尽管往 <code>s1</code> 中插入 <code>&quot;s are&quot;</code>，它没有与 <code>&quot;Frog&quot;</code> 用空格隔开。</li></ul><p>给你两个句子 <code>sentence1</code> 和 <code>sentence2</code> ，如果 <code>sentence1</code> 和 <code>sentence2</code> 是 <strong>相似</strong> 的，请你返回 <code>true</code> ，否则返回 <code>false</code> 。</p><h2 id="解题思路" tabindex="-1"><a class="header-anchor" href="#解题思路" aria-hidden="true">#</a> 解题思路</h2><ol><li><strong>初始化</strong>：首先将 <code>sentence1</code> 和 <code>sentence2</code> 按空格拆分为单词数组 <code>arr1</code> 和 <code>arr2</code>。</li><li><strong>双指针匹配前缀</strong>：使用指针 <code>i</code> 从头开始比较 <code>arr1</code> 和 <code>arr2</code>，找到从头部匹配的最大长度。</li><li><strong>双指针匹配后缀</strong>：使用指针 <code>j</code> 从尾部开始比较 <code>arr1</code> 和 <code>arr2</code>，找到从尾部匹配的最大长度。</li><li><strong>判断</strong>：如果前缀和后缀加起来的长度能够覆盖 <code>arr2</code> 中的全部元素，或者 <code>arr1</code> 中的全部元素（即中间部分可以删除），则返回 <code>true</code>，否则返回 <code>false</code>。</li></ol><h4 id="复杂度分析" tabindex="-1"><a class="header-anchor" href="#复杂度分析" aria-hidden="true">#</a> 复杂度分析</h4><ul><li><strong>时间复杂度</strong>：<code>O(min(n, m))</code>，其中 <code>n</code> 是 <code>sentence1</code> 中单词的数量，<code>m</code> 是 <code>sentence2</code> 中单词的数量。我们最多遍历两者中较短的句子的所有单词。</li><li><strong>空间复杂度</strong>：<code>O(n + m)</code>，我们需要额外的空间来存储 <code>sentence1</code> 和 <code>sentence2</code> 的单词数组。</li></ul><h2 id="代码" tabindex="-1"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>string<span class="token punctuation">}</span></span> <span class="token parameter">sentence1</span>
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>string<span class="token punctuation">}</span></span> <span class="token parameter">sentence2</span>
 * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>boolean<span class="token punctuation">}</span></span>
 */</span>
<span class="token keyword">var</span> <span class="token function-variable function">areSentencesSimilar</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">sentence1<span class="token punctuation">,</span> sentence2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">const</span> arr1 <span class="token operator">=</span> sentence1<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39; &#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
		arr2 <span class="token operator">=</span> sentence2<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39; &#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
		len1 <span class="token operator">=</span> arr1<span class="token punctuation">.</span>length<span class="token punctuation">,</span>
		len2 <span class="token operator">=</span> arr2<span class="token punctuation">.</span>length<span class="token punctuation">;</span>

	<span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>
		j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

	<span class="token comment">// 从头部开始匹配前缀</span>
	<span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> len1 <span class="token operator">&amp;&amp;</span> i <span class="token operator">&lt;</span> len2 <span class="token operator">&amp;&amp;</span> arr1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> arr2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		i<span class="token operator">++</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token comment">// 从尾部开始匹配后缀</span>
	<span class="token keyword">while</span> <span class="token punctuation">(</span>
		j <span class="token operator">&lt;</span> len1 <span class="token operator">-</span> i <span class="token operator">&amp;&amp;</span>
		j <span class="token operator">&lt;</span> len2 <span class="token operator">-</span> i <span class="token operator">&amp;&amp;</span>
		arr1<span class="token punctuation">[</span>len1 <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">-</span> j<span class="token punctuation">]</span> <span class="token operator">==</span> arr2<span class="token punctuation">[</span>len2 <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">-</span> j<span class="token punctuation">]</span>
	<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		j<span class="token operator">++</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token comment">// 如果匹配的前缀和后缀长度加起来能够覆盖较短句子的所有元素，则相似</span>
	<span class="token keyword">return</span> i <span class="token operator">+</span> j <span class="token operator">&gt;=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>len1<span class="token punctuation">,</span> len2<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,24);function y(w,x){const p=o("font"),t=o("RouterLink"),c=o("ExternalLinkIcon");return r(),i("div",null,[k,n("p",null,[e("🟠 "),s(p,{color:"#ffb800"},{default:a(()=>[e("Medium")]),_:1}),e("  🔖  "),s(t,{to:"/tag/array.html"},{default:a(()=>[m]),_:1}),e(),s(t,{to:"/tag/two-pointers.html"},{default:a(()=>[h]),_:1}),e(),s(t,{to:"/tag/string.html"},{default:a(()=>[v]),_:1}),e("  🔗 "),n("a",b,[g,s(c)]),e(),n("a",q,[f,s(c)])]),_])}const j=l(u,[["render",y],["__file","1813.html.vue"]]);export{j as default};
