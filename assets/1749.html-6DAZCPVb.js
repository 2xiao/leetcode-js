import{_ as p,r as l,o as r,c as i,a as n,b as s,d as a,w as t,f as u,e as d}from"./app-aQeLbVW9.js";const m={},g=n("h1",{id:"_1749-任意子数组和的绝对值的最大值",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_1749-任意子数组和的绝对值的最大值","aria-hidden":"true"},"#"),s(" 1749. 任意子数组和的绝对值的最大值")],-1),k=n("code",null,"数组",-1),h=n("code",null,"动态规划",-1),b={href:"https://leetcode.cn/problems/maximum-absolute-sum-of-any-subarray",target:"_blank",rel:"noopener noreferrer"},x=n("code",null,"力扣",-1),_={href:"https://leetcode.com/problems/maximum-absolute-sum-of-any-subarray",target:"_blank",rel:"noopener noreferrer"},f=n("code",null,"LeetCode",-1),v=d(`<h2 id="题目" tabindex="-1"><a class="header-anchor" href="#题目" aria-hidden="true">#</a> 题目</h2><p>You are given an integer array <code>nums</code>. The <strong>absolute sum</strong> of a subarray <code>[numsl, numsl+1, ..., numsr-1, numsr]</code> is <code>abs(numsl + numsl+1 + ... + numsr-1 + numsr)</code>.</p><p>Return _the<strong>maximum</strong> absolute sum of any <strong>(possibly empty)</strong> subarray of _<code>nums</code>.</p><p>Note that <code>abs(x)</code> is defined as follows:</p><ul><li>If <code>x</code> is a negative integer, then <code>abs(x) = -x</code>.</li><li>If <code>x</code> is a non-negative integer, then <code>abs(x) = x</code>.</li></ul><p><strong>Example 1:</strong></p><blockquote><p>Input: nums = [1,-3,2,3,-4]</p><p>Output: 5</p><p>Explanation: The subarray [2,3] has absolute sum = abs(2+3) = abs(5) = 5.</p></blockquote><p><strong>Example 2:</strong></p><blockquote><p>Input: nums = [2,-5,1,-4,3,-2]</p><p>Output: 8</p><p>Explanation: The subarray [-5,1,-4] has absolute sum = abs(-5+1-4) = abs(-8) = 8.</p></blockquote><p><strong>Constraints:</strong></p><ul><li><code>1 &lt;= nums.length &lt;= 10^5</code></li><li><code>-10^4 &lt;= nums[i] &lt;= 10^4</code></li></ul><h2 id="题目大意" tabindex="-1"><a class="header-anchor" href="#题目大意" aria-hidden="true">#</a> 题目大意</h2><p>给你一个整数数组 <code>nums</code> 。一个子数组 <code>[numsl, numsl+1, ..., numsr-1, numsr]</code> 的 <strong>和的绝对值</strong> 为 <code>abs(numsl + numsl+1 + ... + numsr-1 + numsr)</code> 。</p><p>请你找出 <code>nums</code> 中 <strong>和的绝对值</strong> 最大的任意子数组（<strong>可能为空</strong> ），并返回该 <strong>最大值</strong> 。</p><p><code>abs(x)</code> 定义如下：</p><ul><li>如果 <code>x</code> 是负整数，那么 <code>abs(x) = -x</code> 。</li><li>如果 <code>x</code> 是非负整数，那么 <code>abs(x) = x</code> 。</li></ul><p><strong>示例 1：</strong></p><blockquote><p><strong>输入：</strong> nums = [1,-3,2,3,-4]</p><p><strong>输出：</strong> 5</p><p><strong>解释：</strong> 子数组 [2,3] 和的绝对值最大，为 abs(2+3) = abs(5) = 5 。</p></blockquote><p><strong>示例 2：</strong></p><blockquote><p><strong>输入：</strong> nums = [2,-5,1,-4,3,-2]</p><p><strong>输出：</strong> 8</p><p><strong>解释：</strong> 子数组 [-5,1,-4] 和的绝对值最大，为 abs(-5+1-4) = abs(-8) = 8 。</p></blockquote><p><strong>提示：</strong></p><ul><li><code>1 &lt;= nums.length &lt;= 10^5</code></li><li><code>-10^4 &lt;= nums[i] &lt;= 10^4</code></li></ul><h2 id="解题思路" tabindex="-1"><a class="header-anchor" href="#解题思路" aria-hidden="true">#</a> 解题思路</h2><p>题目要求找到数组的<strong>最大绝对子数组和</strong>，即：<code>max(|最大子数组和|, |最小子数组和|)</code>。</p><p>可以利用 <strong>Kadane&#39;s Algorithm</strong> 分别求解 <strong>最大子数组和</strong> 和 <strong>最小子数组和</strong>，然后取绝对值的最大值。</p><ol><li><p><strong>定义变量</strong>：</p><ul><li><code>maxEndingHere</code> 记录以当前值结尾的<strong>最大子数组和</strong></li><li><code>maxSoFar</code> 记录 <strong>最大子数组和</strong></li><li><code>minEndingHere</code> 记录以当前值结尾的<strong>最小子数组和</strong></li><li><code>minSoFar</code> 记录 <strong>最小子数组和</strong></li></ul></li><li><p><strong>遍历 <code>nums</code></strong>：</p><ul><li><code>maxEndingHere = max(nums[i], maxEndingHere + nums[i])</code><ul><li>选择 <code>nums[i]</code> 或继续扩展当前最大子数组</li></ul></li><li><code>maxSoFar = max(maxSoFar, maxEndingHere)</code><ul><li>更新<strong>最大子数组和</strong></li></ul></li><li><code>minEndingHere = min(nums[i], minEndingHere + nums[i])</code><ul><li>选择 <code>nums[i]</code> 或继续扩展当前最小子数组</li></ul></li><li><code>minSoFar = min(minSoFar, minEndingHere)</code><ul><li>更新<strong>最小子数组和</strong></li></ul></li></ul></li><li><p><strong>返回</strong>：</p><ul><li><code>Math.max(Math.abs(maxSoFar), Math.abs(minSoFar))</code></li></ul></li></ol><h4 id="复杂度分析" tabindex="-1"><a class="header-anchor" href="#复杂度分析" aria-hidden="true">#</a> 复杂度分析</h4><ul><li><strong>时间复杂度</strong>：<code>O(n)</code>，只遍历数组一次。</li><li><strong>空间复杂度</strong>：<code>O(1)</code>，只使用了常数变量。</li></ul><h2 id="代码" tabindex="-1"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span> <span class="token parameter">nums</span>
 * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">}</span></span>
 */</span>
<span class="token keyword">var</span> <span class="token function-variable function">maxAbsoluteSum</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">nums</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">let</span> maxEndingHere <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">let</span> maxSoFar <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">let</span> minEndingHere <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">let</span> minSoFar <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> num <span class="token keyword">of</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		maxEndingHere <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span> maxEndingHere <span class="token operator">+</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>
		maxSoFar <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>maxSoFar<span class="token punctuation">,</span> maxEndingHere<span class="token punctuation">)</span><span class="token punctuation">;</span>
		minEndingHere <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span> minEndingHere <span class="token operator">+</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>
		minSoFar <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>minSoFar<span class="token punctuation">,</span> minEndingHere<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>maxSoFar<span class="token punctuation">)</span><span class="token punctuation">,</span> Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>minSoFar<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="相关题目" tabindex="-1"><a class="header-anchor" href="#相关题目" aria-hidden="true">#</a> 相关题目</h2>`,31),y=n("thead",null,[n("tr",null,[n("th",{style:{"text-align":"center"}},"题号"),n("th",{style:{"text-align":"left"}},"标题"),n("th",{style:{"text-align":"center"}},"题解"),n("th",{style:{"text-align":"left"}},"标签"),n("th",{style:{"text-align":"center"}},"难度"),n("th",{style:{"text-align":"center"}},"力扣")])],-1),E=n("td",{style:{"text-align":"center"}},"53",-1),S=n("td",{style:{"text-align":"left"}},"最大子数组和",-1),F={style:{"text-align":"center"}},H={style:{"text-align":"left"}},w=n("code",null,"数组",-1),M=n("code",null,"分治",-1),q=n("code",null,"动态规划",-1),I=n("td",{style:{"text-align":"center"}},"🟠",-1),N={style:{"text-align":"center"}},C={href:"https://leetcode.cn/problems/maximum-subarray",target:"_blank",rel:"noopener noreferrer"},L={href:"https://leetcode.com/problems/maximum-subarray",target:"_blank",rel:"noopener noreferrer"};function V(O,T){const c=l("font"),e=l("RouterLink"),o=l("ExternalLinkIcon");return r(),i("div",null,[g,n("p",null,[s("🟠 "),a(c,{color:"#ffb800"},{default:t(()=>[s("Medium")]),_:1}),s("  🔖  "),a(e,{to:"/tag/array.html"},{default:t(()=>[k]),_:1}),s(),a(e,{to:"/tag/dynamic-programming.html"},{default:t(()=>[h]),_:1}),s("  🔗 "),n("a",b,[x,a(o)]),s(),n("a",_,[f,a(o)])]),v,u(" prettier-ignore "),n("table",null,[y,n("tbody",null,[n("tr",null,[E,S,n("td",F,[a(e,{to:"/problem/0053.html"},{default:t(()=>[s("[✓]")]),_:1})]),n("td",H,[a(e,{to:"/tag/array.html"},{default:t(()=>[w]),_:1}),s(),a(e,{to:"/tag/divide-and-conquer.html"},{default:t(()=>[M]),_:1}),s(),a(e,{to:"/tag/dynamic-programming.html"},{default:t(()=>[q]),_:1})]),I,n("td",N,[n("a",C,[s("🀄️"),a(o)]),s(),n("a",L,[s("🔗"),a(o)])])])])])])}const B=p(m,[["render",V],["__file","1749.html.vue"]]);export{B as default};
