import{_,r as d,o as a,c,a as t,d as e,w as n,b as o,f as i}from"./app-B5EG-zH0.js";const h={},u=t("h1",{id:"欧拉回路",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#欧拉回路","aria-hidden":"true"},"#"),o(" 欧拉回路")],-1),r=t("summary",null,"全部标签",-1),g=t("p",null,[t("strong",null,"数据结构")],-1),m=t("code",null,"数组",-1),f=t("code",null,"矩阵",-1),p=t("code",null,"链表",-1),y=t("code",null,"双向链表",-1),x=t("code",null,"栈",-1),b=t("code",null,"单调栈",-1),k=t("code",null,"队列",-1),v=t("code",null,"单调队列",-1),w=t("code",null,"堆（优先队列）",-1),q=t("code",null,"哈希表",-1),C=t("code",null,"字符串",-1),L=t("code",null,"字符串匹配",-1),N=t("code",null,"树",-1),V=t("code",null,"二叉树",-1),B=t("code",null,"二叉搜索树",-1),E=t("code",null,"最小生成树",-1),z=t("code",null,"图",-1),I=t("code",null,"有序集合",-1),R=t("code",null,"拓扑排序",-1),j=t("code",null,"最短路",-1),T=t("code",null,"强连通分量",-1),A=t("span",{class:"blue"},"欧拉回路",-1),D=t("code",null,"双连通分量",-1),F=t("code",null,"并查集",-1),G=t("code",null,"字典树",-1),H=t("code",null,"线段树",-1),J=t("code",null,"树状数组",-1),K=t("code",null,"后缀数组",-1),M=t("p",null,[t("strong",null,"算法")],-1),O=t("code",null,"枚举",-1),P=t("code",null,"递归",-1),Q=t("code",null,"分治",-1),S=t("code",null,"回溯",-1),U=t("code",null,"贪心",-1),W=t("code",null,"动态规划",-1),X=t("code",null,"排序",-1),Y=t("code",null,"桶排序",-1),Z=t("code",null,"计数排序",-1),$=t("code",null,"基数排序",-1),tt=t("code",null,"归并排序",-1),et=t("code",null,"快速选择",-1),ot=t("code",null,"二分查找",-1),lt=t("code",null,"记忆化搜索",-1),nt=t("code",null,"深度优先搜索",-1),st=t("code",null,"广度优先搜索",-1),dt=t("code",null,"双指针",-1),_t=t("code",null,"位运算",-1),at=t("code",null,"前缀和",-1),ct=t("code",null,"计数",-1),it=t("code",null,"滑动窗口",-1),ht=t("code",null,"状态压缩",-1),ut=t("code",null,"哈希函数",-1),rt=t("code",null,"滚动哈希",-1),gt=t("code",null,"扫描线",-1),mt=t("p",null,[t("strong",null,"其他")],-1),ft=t("code",null,"数学",-1),pt=t("code",null,"数论",-1),yt=t("code",null,"几何",-1),xt=t("code",null,"博弈",-1),bt=t("code",null,"模拟",-1),kt=t("code",null,"组合数学",-1),vt=t("code",null,"随机化",-1),wt=t("code",null,"概率与统计",-1),qt=t("code",null,"水塘抽样",-1),Ct=t("code",null,"拒绝采样",-1),Lt=t("code",null,"数据库",-1),Nt=t("code",null,"设计",-1),Vt=t("code",null,"数据流",-1),Bt=t("code",null,"脑筋急转弯",-1),Et=t("code",null,"交互",-1),zt=t("code",null,"迭代器",-1),It=t("code",null,"多线程",-1),Rt=t("hr",null,null,-1),jt=t("thead",null,[t("tr",null,[t("th",{style:{"text-align":"center"}},"题号"),t("th",{style:{"text-align":"left"}},"标题"),t("th",{style:{"text-align":"center"}},"题解"),t("th",{style:{"text-align":"left"}},"标签"),t("th",{style:{"text-align":"center"}},"难度"),t("th",{style:{"text-align":"center"}},"力扣")])],-1),Tt=t("td",{style:{"text-align":"center"}},"332",-1),At=t("td",{style:{"text-align":"left"}},"重新安排行程",-1),Dt=t("td",{style:{"text-align":"center"}},null,-1),Ft={style:{"text-align":"left"}},Gt=t("code",null,"深度优先搜索",-1),Ht=t("code",null,"图",-1),Jt=t("code",null,"欧拉回路",-1),Kt=t("td",{style:{"text-align":"center"}},"🔴",-1),Mt={style:{"text-align":"center"}},Ot={href:"https://leetcode.cn/problems/reconstruct-itinerary",target:"_blank",rel:"noopener noreferrer"},Pt={href:"https://leetcode.com/problems/reconstruct-itinerary",target:"_blank",rel:"noopener noreferrer"},Qt=t("td",{style:{"text-align":"center"}},"753",-1),St=t("td",{style:{"text-align":"left"}},"破解保险箱",-1),Ut=t("td",{style:{"text-align":"center"}},null,-1),Wt={style:{"text-align":"left"}},Xt=t("code",null,"深度优先搜索",-1),Yt=t("code",null,"图",-1),Zt=t("code",null,"欧拉回路",-1),$t=t("td",{style:{"text-align":"center"}},"🔴",-1),te={style:{"text-align":"center"}},ee={href:"https://leetcode.cn/problems/cracking-the-safe",target:"_blank",rel:"noopener noreferrer"},oe={href:"https://leetcode.com/problems/cracking-the-safe",target:"_blank",rel:"noopener noreferrer"},le=t("td",{style:{"text-align":"center"}},"2097",-1),ne=t("td",{style:{"text-align":"left"}},"合法重新排列数对",-1),se={style:{"text-align":"center"}},de={style:{"text-align":"left"}},_e=t("code",null,"深度优先搜索",-1),ae=t("code",null,"图",-1),ce=t("code",null,"欧拉回路",-1),ie=t("td",{style:{"text-align":"center"}},"🔴",-1),he={style:{"text-align":"center"}},ue={href:"https://leetcode.cn/problems/valid-arrangement-of-pairs",target:"_blank",rel:"noopener noreferrer"},re={href:"https://leetcode.com/problems/valid-arrangement-of-pairs",target:"_blank",rel:"noopener noreferrer"};function ge(me,fe){const l=d("RouterLink"),s=d("ExternalLinkIcon");return a(),c("div",null,[u,t("details",null,[r,g,t("p",null,[e(l,{to:"/tag/array.html"},{default:n(()=>[m]),_:1}),o(),e(l,{to:"/tag/matrix.html"},{default:n(()=>[f]),_:1}),o(),e(l,{to:"/tag/linked-list.html"},{default:n(()=>[p]),_:1}),o(),e(l,{to:"/tag/doubly-linked-list.html"},{default:n(()=>[y]),_:1}),o(),e(l,{to:"/tag/stack.html"},{default:n(()=>[x]),_:1}),o(),e(l,{to:"/tag/monotonic-stack.html"},{default:n(()=>[b]),_:1}),o(),e(l,{to:"/tag/queue.html"},{default:n(()=>[k]),_:1}),o(),e(l,{to:"/tag/monotonic-queue.html"},{default:n(()=>[v]),_:1}),o(),e(l,{to:"/tag/heap-priority-queue.html"},{default:n(()=>[w]),_:1}),o(),e(l,{to:"/tag/hash-table.html"},{default:n(()=>[q]),_:1}),o(),e(l,{to:"/tag/string.html"},{default:n(()=>[C]),_:1}),o(),e(l,{to:"/tag/string-matching.html"},{default:n(()=>[L]),_:1}),o(),e(l,{to:"/tag/tree.html"},{default:n(()=>[N]),_:1}),o(),e(l,{to:"/tag/binary-tree.html"},{default:n(()=>[V]),_:1}),o(),e(l,{to:"/tag/binary-search-tree.html"},{default:n(()=>[B]),_:1}),o(),e(l,{to:"/tag/minimum-spanning-tree.html"},{default:n(()=>[E]),_:1}),o(),e(l,{to:"/tag/graph.html"},{default:n(()=>[z]),_:1}),o(),e(l,{to:"/tag/ordered-set.html"},{default:n(()=>[I]),_:1}),o(),e(l,{to:"/tag/topological-sort.html"},{default:n(()=>[R]),_:1}),o(),e(l,{to:"/tag/shortest-path.html"},{default:n(()=>[j]),_:1}),o(),e(l,{to:"/tag/strongly-connected-component.html"},{default:n(()=>[T]),_:1}),o(),A,o(),e(l,{to:"/tag/biconnected-component.html"},{default:n(()=>[D]),_:1}),o(),e(l,{to:"/tag/union-find.html"},{default:n(()=>[F]),_:1}),o(),e(l,{to:"/tag/trie.html"},{default:n(()=>[G]),_:1}),o(),e(l,{to:"/tag/segment-tree.html"},{default:n(()=>[H]),_:1}),o(),e(l,{to:"/tag/binary-indexed-tree.html"},{default:n(()=>[J]),_:1}),o(),e(l,{to:"/tag/suffix-array.html"},{default:n(()=>[K]),_:1})]),M,t("p",null,[e(l,{to:"/tag/enumeration.html"},{default:n(()=>[O]),_:1}),o(),e(l,{to:"/tag/recursion.html"},{default:n(()=>[P]),_:1}),o(),e(l,{to:"/tag/divide-and-conquer.html"},{default:n(()=>[Q]),_:1}),o(),e(l,{to:"/tag/backtracking.html"},{default:n(()=>[S]),_:1}),o(),e(l,{to:"/tag/greedy.html"},{default:n(()=>[U]),_:1}),o(),e(l,{to:"/tag/dynamic-programming.html"},{default:n(()=>[W]),_:1}),o(),e(l,{to:"/tag/sorting.html"},{default:n(()=>[X]),_:1}),o(),e(l,{to:"/tag/bucket-sort.html"},{default:n(()=>[Y]),_:1}),o(),e(l,{to:"/tag/counting-sort.html"},{default:n(()=>[Z]),_:1}),o(),e(l,{to:"/tag/radix-sort.html"},{default:n(()=>[$]),_:1}),o(),e(l,{to:"/tag/merge-sort.html"},{default:n(()=>[tt]),_:1}),o(),e(l,{to:"/tag/quickselect.html"},{default:n(()=>[et]),_:1}),o(),e(l,{to:"/tag/binary-search.html"},{default:n(()=>[ot]),_:1}),o(),e(l,{to:"/tag/memoization.html"},{default:n(()=>[lt]),_:1}),o(),e(l,{to:"/tag/depth-first-search.html"},{default:n(()=>[nt]),_:1}),o(),e(l,{to:"/tag/breadth-first-search.html"},{default:n(()=>[st]),_:1}),o(),e(l,{to:"/tag/two-pointers.html"},{default:n(()=>[dt]),_:1}),o(),e(l,{to:"/tag/bit-manipulation.html"},{default:n(()=>[_t]),_:1}),o(),e(l,{to:"/tag/prefix-sum.html"},{default:n(()=>[at]),_:1}),o(),e(l,{to:"/tag/counting.html"},{default:n(()=>[ct]),_:1}),o(),e(l,{to:"/tag/sliding-window.html"},{default:n(()=>[it]),_:1}),o(),e(l,{to:"/tag/bitmask.html"},{default:n(()=>[ht]),_:1}),o(),e(l,{to:"/tag/hash-function.html"},{default:n(()=>[ut]),_:1}),o(),e(l,{to:"/tag/rolling-hash.html"},{default:n(()=>[rt]),_:1}),o(),e(l,{to:"/tag/line-sweep.html"},{default:n(()=>[gt]),_:1})]),mt,t("p",null,[e(l,{to:"/tag/math.html"},{default:n(()=>[ft]),_:1}),o(),e(l,{to:"/tag/number-theory.html"},{default:n(()=>[pt]),_:1}),o(),e(l,{to:"/tag/geometry.html"},{default:n(()=>[yt]),_:1}),o(),e(l,{to:"/tag/game-theory.html"},{default:n(()=>[xt]),_:1}),o(),e(l,{to:"/tag/simulation.html"},{default:n(()=>[bt]),_:1}),o(),e(l,{to:"/tag/combinatorics.html"},{default:n(()=>[kt]),_:1}),o(),e(l,{to:"/tag/randomized.html"},{default:n(()=>[vt]),_:1}),o(),e(l,{to:"/tag/probability-and-statistics.html"},{default:n(()=>[wt]),_:1}),o(),e(l,{to:"/tag/reservoir-sampling.html"},{default:n(()=>[qt]),_:1}),o(),e(l,{to:"/tag/rejection-sampling.html"},{default:n(()=>[Ct]),_:1}),o(),e(l,{to:"/tag/database.html"},{default:n(()=>[Lt]),_:1}),o(),e(l,{to:"/tag/design.html"},{default:n(()=>[Nt]),_:1}),o(),e(l,{to:"/tag/data-stream.html"},{default:n(()=>[Vt]),_:1}),o(),e(l,{to:"/tag/brainteaser.html"},{default:n(()=>[Bt]),_:1}),o(),e(l,{to:"/tag/interactive.html"},{default:n(()=>[Et]),_:1}),o(),e(l,{to:"/tag/iterator.html"},{default:n(()=>[zt]),_:1}),o(),e(l,{to:"/tag/concurrency.html"},{default:n(()=>[It]),_:1})])]),Rt,i(" prettier-ignore "),t("table",null,[jt,t("tbody",null,[t("tr",null,[Tt,At,Dt,t("td",Ft,[e(l,{to:"/tag/depth-first-search.html"},{default:n(()=>[Gt]),_:1}),o(),e(l,{to:"/tag/graph.html"},{default:n(()=>[Ht]),_:1}),o(),e(l,{to:"/tag/eulerian-circuit.html"},{default:n(()=>[Jt]),_:1})]),Kt,t("td",Mt,[t("a",Ot,[o("🀄️"),e(s)]),o(),t("a",Pt,[o("🔗"),e(s)])])]),t("tr",null,[Qt,St,Ut,t("td",Wt,[e(l,{to:"/tag/depth-first-search.html"},{default:n(()=>[Xt]),_:1}),o(),e(l,{to:"/tag/graph.html"},{default:n(()=>[Yt]),_:1}),o(),e(l,{to:"/tag/eulerian-circuit.html"},{default:n(()=>[Zt]),_:1})]),$t,t("td",te,[t("a",ee,[o("🀄️"),e(s)]),o(),t("a",oe,[o("🔗"),e(s)])])]),t("tr",null,[le,ne,t("td",se,[e(l,{to:"/problem/2097.html"},{default:n(()=>[o("[✓]")]),_:1})]),t("td",de,[e(l,{to:"/tag/depth-first-search.html"},{default:n(()=>[_e]),_:1}),o(),e(l,{to:"/tag/graph.html"},{default:n(()=>[ae]),_:1}),o(),e(l,{to:"/tag/eulerian-circuit.html"},{default:n(()=>[ce]),_:1})]),ie,t("td",he,[t("a",ue,[o("🀄️"),e(s)]),o(),t("a",re,[o("🔗"),e(s)])])])])])])}const ye=_(h,[["render",ge],["__file","eulerian-circuit.html.vue"]]);export{ye as default};
