import{_ as i,r as o,o as u,c as d,a as n,b as s,d as a,w as t,f as k,e as c}from"./app-fBVbqwGY.js";const r={},m=n("h1",{id:"_460-lfu-缓存",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_460-lfu-缓存","aria-hidden":"true"},"#"),s(" 460. LFU 缓存")],-1),v=n("code",null,"设计",-1),b=n("code",null,"哈希表",-1),h=n("code",null,"链表",-1),f=n("code",null,"双向链表",-1),y={href:"https://leetcode.cn/problems/lfu-cache",target:"_blank",rel:"noopener noreferrer"},g=n("code",null,"力扣",-1),_={href:"https://leetcode.com/problems/lfu-cache",target:"_blank",rel:"noopener noreferrer"},w=n("code",null,"LeetCode",-1),q=n("h2",{id:"题目",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#题目","aria-hidden":"true"},"#"),s(" 题目")],-1),x={href:"https://en.wikipedia.org/wiki/Least_frequently_used",target:"_blank",rel:"noopener noreferrer"},L=c(`<p>Implement the <code>LFUCache</code> class:</p><ul><li><code>LFUCache(int capacity)</code> Initializes the object with the <code>capacity</code> of the data structure.</li><li><code>int get(int key)</code> Gets the value of the <code>key</code> if the <code>key</code> exists in the cache. Otherwise, returns <code>-1</code>.</li><li><code>void put(int key, int value)</code> Update the value of the <code>key</code> if present, or inserts the <code>key</code> if not already present. When the cache reaches its <code>capacity</code>, it should invalidate and remove the <strong>least frequently used</strong> key before inserting a new item. For this problem, when there is a <strong>tie</strong> (i.e., two or more keys with the same frequency), the <strong>least recently used</strong> <code>key</code> would be invalidated.</li></ul><p>To determine the least frequently used key, a <strong>use counter</strong> is maintained for each key in the cache. The key with the smallest <strong>use counter</strong> is the least frequently used key.</p><p>When a key is first inserted into the cache, its <strong>use counter</strong> is set to <code>1</code> (due to the <code>put</code> operation). The <strong>use counter</strong> for a key in the cache is incremented either a <code>get</code> or <code>put</code> operation is called on it.</p><p>The functions <code>get</code> and <code>put</code> must each run in <code>O(1)</code> average time complexity.</p><p><strong>Example 1:</strong></p><blockquote><p><strong>Input</strong></p><p>[&quot;LFUCache&quot;, &quot;put&quot;, &quot;put&quot;, &quot;get&quot;, &quot;put&quot;, &quot;get&quot;, &quot;get&quot;, &quot;put&quot;, &quot;get&quot;, &quot;get&quot;, &quot;get&quot;]</p><p>[[2], [1, 1], [2, 2], [1], [3, 3], [2], [3], [4, 4], [1], [3], [4]]</p><p><strong>Output</strong></p><p>[null, null, null, 1, null, -1, 3, null, -1, 3, 4]</p><p><strong>Explanation</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// cnt(x) = the use counter for key x</span>

<span class="token comment">// cache=[] will show the last used order for tiebreakers (leftmost element is most recent)</span>

LFUCache lfu <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LFUCache</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

lfu<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// cache=[1,_], cnt(1)=1</span>

lfu<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// cache=[2,1], cnt(2)=1, cnt(1)=1</span>

lfu<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// return 1</span>

<span class="token comment">// cache=[1,2], cnt(2)=1, cnt(1)=2</span>

lfu<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2 is the LFU key because cnt(2)=1 is the smallest, invalidate 2.</span>

<span class="token comment">// cache=[3,1], cnt(3)=1, cnt(1)=2</span>

lfu<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// return -1 (not found)</span>

lfu<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// return 3</span>

<span class="token comment">// cache=[3,1], cnt(3)=2, cnt(1)=2</span>

lfu<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Both 1 and 3 have the same cnt, but 1 is LRU, invalidate 1.</span>

<span class="token comment">// cache=[4,3], cnt(4)=1, cnt(3)=2</span>

lfu<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// return -1 (not found)</span>

lfu<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// return 3</span>

<span class="token comment">// cache=[3,4], cnt(4)=1, cnt(3)=3</span>

lfu<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// return 4</span>

<span class="token comment">// cache=[4,3], cnt(4)=2, cnt(3)=3</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><p><strong>Constraints:</strong></p><ul><li><code>1 &lt;= capacity &lt;= 10^4</code></li><li><code>0 &lt;= key &lt;= 10^5</code></li><li><code>0 &lt;= value &lt;= 10^9</code></li><li>At most <code>2 * 10^5</code> calls will be made to <code>get</code> and <code>put</code>.</li></ul><h2 id="题目大意" tabindex="-1"><a class="header-anchor" href="#题目大意" aria-hidden="true">#</a> 题目大意</h2>`,10),N={href:"https://baike.baidu.com/item/%E7%BC%93%E5%AD%98%E7%AE%97%E6%B3%95",target:"_blank",rel:"noopener noreferrer"},F=c(`<p>实现 <code>LFUCache</code> 类：</p><ul><li><code>LFUCache(int capacity)</code>: 用数据结构的容量 <code>capacity</code> 初始化对象</li><li><code>int get(int key)</code>: 如果键 <code>key</code> 存在于缓存中，则获取键的值，否则返回 <code>-1</code> 。</li><li><code>void put(int key, int value)</code>: 如果键 <code>key</code> 已存在，则变更其值；如果键不存在，请插入键值对。当缓存达到其容量 <code>capacity</code> 时，则应该在插入新项之前，移除最不经常使用的项。在此问题中，当存在平局（即两个或更多个键具有相同使用频率）时，应该去除 <strong>最久未使用</strong> 的键。</li></ul><p>为了确定最不常使用的键，可以为缓存中的每个键维护一个 <strong>使用计数器</strong> 。使用计数最小的键是最久未使用的键。</p><p>当一个键首次插入到缓存中时，它的使用计数器被设置为 <code>1</code> (由于 put 操作)。对缓存中的键执行 <code>get</code> 或 <code>put</code> 操作，使用计数器的值将会递增。</p><p>函数 <code>get</code> 和 <code>put</code> 必须以 <code>O(1)</code> 的平均时间复杂度运行。</p><p><strong>示例：</strong></p><blockquote><p><strong>输入：</strong></p><p>[&quot;LFUCache&quot;, &quot;put&quot;, &quot;put&quot;, &quot;get&quot;, &quot;put&quot;, &quot;get&quot;, &quot;get&quot;, &quot;put&quot;, &quot;get&quot;, &quot;get&quot;, &quot;get&quot;]</p><p>[[2], [1, 1], [2, 2], [1], [3, 3], [2], [3], [4, 4], [1], [3], [4]]</p><p><strong>输出：</strong></p><p>[null, null, null, 1, null, -1, 3, null, -1, 3, 4]</p><p><strong>解释：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// cnt(x) = 键 x 的使用计数</span>

<span class="token comment">// cache=[] 将显示最后一次使用的顺序（最左边的元素是最近的）</span>

LFUCache lfu <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LFUCache</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

lfu<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// cache=[1,_], cnt(1)=1</span>

lfu<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// cache=[2,1], cnt(2)=1, cnt(1)=1</span>

lfu<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 返回 1</span>

<span class="token comment">// cache=[1,2], cnt(2)=1, cnt(1)=2</span>

lfu<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 去除键 2 ，因为 cnt(2)=1 ，使用计数最小</span>

<span class="token comment">// cache=[3,1], cnt(3)=1, cnt(1)=2</span>

lfu<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 返回 -1（未找到）</span>

lfu<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 返回 3</span>

<span class="token comment">// cache=[3,1], cnt(3)=2, cnt(1)=2</span>

lfu<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 去除键 1 ，1 和 3 的 cnt 相同，但 1 最久未使用</span>

<span class="token comment">// cache=[4,3], cnt(4)=1, cnt(3)=2</span>

lfu<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 返回 -1（未找到）</span>

lfu<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 返回 3</span>

<span class="token comment">// cache=[3,4], cnt(4)=1, cnt(3)=3</span>

lfu<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 返回 4</span>

<span class="token comment">// cache=[3,4], cnt(4)=2, cnt(3)=3</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><p><strong>提示：</strong></p><ul><li><code>1 &lt;= capacity &lt;= 10^4</code></li><li><code>0 &lt;= key &lt;= 10^5</code></li><li><code>0 &lt;= value &lt;= 10^9</code></li><li>最多调用 <code>2 * 10^5</code> 次 <code>get</code> 和 <code>put</code> 方法</li></ul><h2 id="解题思路" tabindex="-1"><a class="header-anchor" href="#解题思路" aria-hidden="true">#</a> 解题思路</h2><h4 id="核心思路" tabindex="-1"><a class="header-anchor" href="#核心思路" aria-hidden="true">#</a> 核心思路</h4><ol><li><strong>双向链表 (Doubly Linked List):</strong><ul><li>每个频率下的键集合由一个双向链表管理，方便 O(1) 删除和插入操作。</li></ul></li><li><strong>数据结构：</strong><ul><li><strong>哈希表 1:</strong> <code>keyToNode</code>，将键映射到链表节点。</li><li><strong>哈希表 2:</strong> <code>freqToList</code>，将每个频率映射到一个双向链表。</li><li>记录当前最低频率 <code>minFreq</code>，便于快速定位删除键。</li></ul></li></ol><h4 id="数据结构设计" tabindex="-1"><a class="header-anchor" href="#数据结构设计" aria-hidden="true">#</a> 数据结构设计</h4><div class="language-plaintext line-numbers-mode" data-ext="plaintext"><pre class="language-plaintext"><code>LFUCache:
    keyToNode: { key: Node }       // 每个键对应的节点
    freqToList: { freq: DLinkedList }  // 每个频率对应的双向链表
    minFreq: 当前最低频率
    capacity: 缓存容量

Node:
    key: 键
    value: 值
    freq: 频率
    prev, next: 指向链表前后节点

DLinkedList:
    head, tail: 虚拟头尾节点
    size: 当前链表大小
    addNode(node): 添加节点
    removeNode(node): 删除节点
    removeLast(): 删除链表最后一个节点
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="代码思路" tabindex="-1"><a class="header-anchor" href="#代码思路" aria-hidden="true">#</a> 代码思路</h4><ol><li><p><strong>双向链表操作：</strong></p><ul><li><code>addNode</code>：在链表头部插入节点。</li><li><code>removeNode</code>：移除链表中的节点。</li><li><code>removeLast</code>：删除链表尾部节点（用于移除最少频率中最旧的键）。</li></ul></li><li><p><strong><code>get(key)</code>：</strong></p><ul><li>检查 <code>key</code> 是否存在。</li><li>如果存在，更新节点频率并返回值。</li></ul></li><li><p><strong><code>put(key, value)</code>：</strong></p><ul><li>如果键已存在，更新值并更新频率。</li><li>如果键不存在，检查容量是否已满： <ul><li>若满，则移除最低频率中最久未使用的键。</li></ul></li><li>插入新节点到频率为 1 的链表。</li></ul></li><li><p><strong><code>updateNode(node)</code>：</strong></p><ul><li>移除节点的旧频率。</li><li>更新节点频率并插入新的频率链表。</li><li>如果旧频率链表为空且该频率是最低频率，更新 <code>minFreq</code>。</li></ul></li></ol><h4 id="复杂度分析" tabindex="-1"><a class="header-anchor" href="#复杂度分析" aria-hidden="true">#</a> 复杂度分析</h4><ul><li><strong>时间复杂度：</strong> <code>O(1)</code>，因为哈希表和双向链表的操作都是常数时间。</li><li><strong>空间复杂度：</strong> <code>O(n)</code>，存储缓存数据和辅助数据结构。</li></ul><h2 id="代码" tabindex="-1"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">LFUCache</span> <span class="token punctuation">{</span>
	<span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">capacity</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span>capacity <span class="token operator">=</span> capacity<span class="token punctuation">;</span> <span class="token comment">// 缓存容量</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span>size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// 当前缓存大小</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span>minFreq <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// 当前最低频率</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span>keyToNode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 键到节点的映射</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span>freqToList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 频率到双向链表的映射</span>
	<span class="token punctuation">}</span>

	<span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>keyToNode<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>

		<span class="token keyword">const</span> node <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>keyToNode<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">updateNode</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 更新节点频率</span>
		<span class="token keyword">return</span> node<span class="token punctuation">.</span>value<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token function">put</span><span class="token punctuation">(</span><span class="token parameter">key<span class="token punctuation">,</span> value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>capacity <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>

		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>keyToNode<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">const</span> node <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>keyToNode<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
			node<span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span> <span class="token comment">// 更新值</span>
			<span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">updateNode</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 更新频率</span>
		<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>size <span class="token operator">===</span> <span class="token keyword">this</span><span class="token punctuation">.</span>capacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>
				<span class="token comment">// 容量已满，移除最少频率的最久未使用节点</span>
				<span class="token keyword">const</span> minFreqList <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>freqToList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>minFreq<span class="token punctuation">)</span><span class="token punctuation">;</span>
				<span class="token keyword">const</span> toRemove <span class="token operator">=</span> minFreqList<span class="token punctuation">.</span><span class="token function">removeLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
				<span class="token keyword">this</span><span class="token punctuation">.</span>keyToNode<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>toRemove<span class="token punctuation">.</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
				<span class="token keyword">this</span><span class="token punctuation">.</span>size<span class="token operator">--</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span>

			<span class="token comment">// 插入新节点</span>
			<span class="token keyword">const</span> newNode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token keyword">this</span><span class="token punctuation">.</span>keyToNode<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> newNode<span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>freqToList<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
				<span class="token keyword">this</span><span class="token punctuation">.</span>freqToList<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">DLinkedList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span>
			<span class="token keyword">this</span><span class="token punctuation">.</span>freqToList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addNode</span><span class="token punctuation">(</span>newNode<span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token keyword">this</span><span class="token punctuation">.</span>minFreq <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 新插入节点的频率为 1</span>
			<span class="token keyword">this</span><span class="token punctuation">.</span>size<span class="token operator">++</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>

	<span class="token function">updateNode</span><span class="token punctuation">(</span><span class="token parameter">node</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">const</span> freq <span class="token operator">=</span> node<span class="token punctuation">.</span>freq<span class="token punctuation">;</span>
		<span class="token keyword">const</span> list <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>freqToList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>freq<span class="token punctuation">)</span><span class="token punctuation">;</span>
		list<span class="token punctuation">.</span><span class="token function">removeNode</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 从当前频率链表中移除</span>

		<span class="token keyword">if</span> <span class="token punctuation">(</span>list<span class="token punctuation">.</span>size <span class="token operator">===</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> freq <span class="token operator">===</span> <span class="token keyword">this</span><span class="token punctuation">.</span>minFreq<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">this</span><span class="token punctuation">.</span>minFreq<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment">// 更新最低频率</span>
		<span class="token punctuation">}</span>

		node<span class="token punctuation">.</span>freq<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment">// 增加频率</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>freqToList<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>freq<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">this</span><span class="token punctuation">.</span>freqToList<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>freq<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">DLinkedList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span>freqToList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>freq<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addNode</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">Node</span> <span class="token punctuation">{</span>
	<span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">key<span class="token punctuation">,</span> value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span>key <span class="token operator">=</span> key<span class="token punctuation">;</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span>freq <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span>prev <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">DLinkedList</span> <span class="token punctuation">{</span>
	<span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span>head <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 虚拟头节点</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span>tail <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 虚拟尾节点</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span>head<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>tail<span class="token punctuation">;</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span>tail<span class="token punctuation">.</span>prev <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>head<span class="token punctuation">;</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span>size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token function">addNode</span><span class="token punctuation">(</span><span class="token parameter">node</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token comment">// 在头部添加节点</span>
		node<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
		node<span class="token punctuation">.</span>prev <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>head<span class="token punctuation">;</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span>head<span class="token punctuation">.</span>next<span class="token punctuation">.</span>prev <span class="token operator">=</span> node<span class="token punctuation">;</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span>head<span class="token punctuation">.</span>next <span class="token operator">=</span> node<span class="token punctuation">;</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span>size<span class="token operator">++</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token function">removeNode</span><span class="token punctuation">(</span><span class="token parameter">node</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token comment">// 删除节点</span>
		node<span class="token punctuation">.</span>prev<span class="token punctuation">.</span>next <span class="token operator">=</span> node<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
		node<span class="token punctuation">.</span>next<span class="token punctuation">.</span>prev <span class="token operator">=</span> node<span class="token punctuation">.</span>prev<span class="token punctuation">;</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span>size<span class="token operator">--</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token function">removeLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token comment">// 删除链表最后一个节点（真实节点）</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>size <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
		<span class="token keyword">const</span> last <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>tail<span class="token punctuation">.</span>prev<span class="token punctuation">;</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">removeNode</span><span class="token punctuation">(</span>last<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">return</span> last<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="相关题目" tabindex="-1"><a class="header-anchor" href="#相关题目" aria-hidden="true">#</a> 相关题目</h2>`,21),T=n("thead",null,[n("tr",null,[n("th",{style:{"text-align":"center"}},"题号"),n("th",{style:{"text-align":"left"}},"标题"),n("th",{style:{"text-align":"center"}},"题解"),n("th",{style:{"text-align":"left"}},"标签"),n("th",{style:{"text-align":"center"}},"难度"),n("th",{style:{"text-align":"center"}},"力扣")])],-1),U=n("td",{style:{"text-align":"center"}},"146",-1),C=n("td",{style:{"text-align":"left"}},"LRU 缓存",-1),z={style:{"text-align":"center"}},j={style:{"text-align":"left"}},E=n("code",null,"设计",-1),D=n("code",null,"哈希表",-1),O=n("code",null,"链表",-1),B=n("code",null,"1+",-1),R=n("td",{style:{"text-align":"center"}},"🟠",-1),I={style:{"text-align":"center"}},V={href:"https://leetcode.cn/problems/lru-cache",target:"_blank",rel:"noopener noreferrer"},A={href:"https://leetcode.com/problems/lru-cache",target:"_blank",rel:"noopener noreferrer"},M=n("td",{style:{"text-align":"center"}},"588",-1),W=n("td",{style:{"text-align":"left"}},"设计内存文件系统 🔒",-1),G=n("td",{style:{"text-align":"center"}},null,-1),H={style:{"text-align":"left"}},S=n("code",null,"设计",-1),J=n("code",null,"字典树",-1),K=n("code",null,"哈希表",-1),P=n("code",null,"2+",-1),Q=n("td",{style:{"text-align":"center"}},"🔴",-1),X={style:{"text-align":"center"}},Y={href:"https://leetcode.cn/problems/design-in-memory-file-system",target:"_blank",rel:"noopener noreferrer"},Z={href:"https://leetcode.com/problems/design-in-memory-file-system",target:"_blank",rel:"noopener noreferrer"};function $(nn,sn){const l=o("font"),e=o("RouterLink"),p=o("ExternalLinkIcon");return u(),d("div",null,[m,n("p",null,[s("🔴 "),a(l,{color:"#ff334b"},{default:t(()=>[s("Hard")]),_:1}),s("  🔖  "),a(e,{to:"/tag/design.html"},{default:t(()=>[v]),_:1}),s(),a(e,{to:"/tag/hash-table.html"},{default:t(()=>[b]),_:1}),s(),a(e,{to:"/tag/linked-list.html"},{default:t(()=>[h]),_:1}),s(),a(e,{to:"/tag/doubly-linked-list.html"},{default:t(()=>[f]),_:1}),s("  🔗 "),n("a",y,[g,a(p)]),s(),n("a",_,[w,a(p)])]),q,n("p",null,[s("Design and implement a data structure for a "),n("a",x,[s("Least Frequently Used (LFU)"),a(p)]),s(" cache.")]),L,n("p",null,[s("请你为 "),n("a",N,[s("最不经常使用（LFU）"),a(p)]),s("缓存算法设计并实现数据结构。")]),F,k(" prettier-ignore "),n("table",null,[T,n("tbody",null,[n("tr",null,[U,C,n("td",z,[a(e,{to:"/problem/0146.html"},{default:t(()=>[s("[✓]")]),_:1})]),n("td",j,[a(e,{to:"/tag/design.html"},{default:t(()=>[E]),_:1}),s(),a(e,{to:"/tag/hash-table.html"},{default:t(()=>[D]),_:1}),s(),a(e,{to:"/tag/linked-list.html"},{default:t(()=>[O]),_:1}),s(),B]),R,n("td",I,[n("a",V,[s("🀄️"),a(p)]),s(),n("a",A,[s("🔗"),a(p)])])]),n("tr",null,[M,W,G,n("td",H,[a(e,{to:"/tag/design.html"},{default:t(()=>[S]),_:1}),s(),a(e,{to:"/tag/trie.html"},{default:t(()=>[J]),_:1}),s(),a(e,{to:"/tag/hash-table.html"},{default:t(()=>[K]),_:1}),s(),P]),Q,n("td",X,[n("a",Y,[s("🀄️"),a(p)]),s(),n("a",Z,[s("🔗"),a(p)])])])])])])}const tn=i(r,[["render",$],["__file","0460.html.vue"]]);export{tn as default};
