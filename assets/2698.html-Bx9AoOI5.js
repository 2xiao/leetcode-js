import{_ as l,r as c,o as i,c as r,a as n,b as s,d as a,w as t,f as u,e as d}from"./app-fBVbqwGY.js";const k={},m=n("h1",{id:"_2698-求一个整数的惩罚数",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_2698-求一个整数的惩罚数","aria-hidden":"true"},"#"),s(" 2698. 求一个整数的惩罚数")],-1),g=n("code",null,"数学",-1),h=n("code",null,"回溯",-1),b={href:"https://leetcode.cn/problems/find-the-punishment-number-of-an-integer",target:"_blank",rel:"noopener noreferrer"},v=n("code",null,"力扣",-1),f={href:"https://leetcode.com/problems/find-the-punishment-number-of-an-integer",target:"_blank",rel:"noopener noreferrer"},_=n("code",null,"LeetCode",-1),y=d(`<h2 id="题目" tabindex="-1"><a class="header-anchor" href="#题目" aria-hidden="true">#</a> 题目</h2><p>Given a positive integer <code>n</code>, return <em>the<strong>punishment number</strong></em> of <code>n</code>.</p><p>The <strong>punishment number</strong> of <code>n</code> is defined as the sum of the squares of all integers <code>i</code> such that:</p><ul><li><code>1 &lt;= i &lt;= n</code></li><li>The decimal representation of <code>i * i</code> can be partitioned into contiguous substrings such that the sum of the integer values of these substrings equals <code>i</code>.</li></ul><p><strong>Example 1:</strong></p><blockquote><p>Input: n = 10</p><p>Output: 182</p><p>Explanation: There are exactly 3 integers i that satisfy the conditions in the statement:</p><ul><li>1 since 1 * 1 = 1</li><li>9 since 9 * 9 = 81 and 81 can be partitioned into 8 + 1.</li><li>10 since 10 * 10 = 100 and 100 can be partitioned into 10 + 0.</li></ul><p>Hence, the punishment number of 10 is 1 + 81 + 100 = 182</p></blockquote><p><strong>Example 2:</strong></p><blockquote><p>Input: n = 37</p><p>Output: 1478</p><p>Explanation: There are exactly 4 integers i that satisfy the conditions in the statement:</p><ul><li>1 since 1 * 1 = 1.</li><li>9 since 9 * 9 = 81 and 81 can be partitioned into 8 + 1.</li><li>10 since 10 * 10 = 100 and 100 can be partitioned into 10 + 0.</li><li>36 since 36 * 36 = 1296 and 1296 can be partitioned into 1 + 29 + 6.</li></ul><p>Hence, the punishment number of 37 is 1 + 81 + 100 + 1296 = 1478</p></blockquote><p><strong>Constraints:</strong></p><ul><li><code>1 &lt;= n &lt;= 1000</code></li></ul><h2 id="题目大意" tabindex="-1"><a class="header-anchor" href="#题目大意" aria-hidden="true">#</a> 题目大意</h2><p>给你一个正整数 <code>n</code> ，请你返回 <code>n</code> 的 <strong>惩罚数</strong> 。</p><p><code>n</code> 的 <strong>惩罚数</strong> 定义为所有满足以下条件 <code>i</code> 的数的平方和：</p><ul><li><code>1 &lt;= i &lt;= n</code></li><li><code>i * i</code> 的十进制表示的字符串可以分割成若干连续子字符串，且这些子字符串对应的整数值之和等于 <code>i</code> 。</li></ul><p><strong>示例 1：</strong></p><blockquote><p><strong>输入：</strong> n = 10</p><p><strong>输出：</strong> 182</p><p><strong>解释：</strong> 总共有 3 个整数 i 满足要求：</p><ul><li>1 ，因为 1 * 1 = 1</li><li>9 ，因为 9 * 9 = 81 ，且 81 可以分割成 8 + 1 。</li><li>10 ，因为 10 * 10 = 100 ，且 100 可以分割成 10 + 0 。</li></ul><p>因此，10 的惩罚数为 1 + 81 + 100 = 182</p></blockquote><p><strong>示例 2：</strong></p><blockquote><p><strong>输入：</strong> n = 37</p><p><strong>输出：</strong> 1478</p><p><strong>解释：</strong> 总共有 4 个整数 i 满足要求：</p><ul><li>1 ，因为 1 * 1 = 1</li><li>9 ，因为 9 * 9 = 81 ，且 81 可以分割成 8 + 1 。</li><li>10 ，因为 10 * 10 = 100 ，且 100 可以分割成 10 + 0 。</li><li>36 ，因为 36 * 36 = 1296 ，且 1296 可以分割成 1 + 29 + 6 。</li></ul><p>因此，37 的惩罚数为 1 + 81 + 100 + 1296 = 1478</p></blockquote><p><strong>提示：</strong></p><ul><li><code>1 &lt;= n &lt;= 1000</code></li></ul><h2 id="解题思路" tabindex="-1"><a class="header-anchor" href="#解题思路" aria-hidden="true">#</a> 解题思路</h2><ol><li><p><strong>遍历 <code>1</code> 到 <code>n</code>，计算 <code>i^2</code></strong></p><ul><li>对于 <code>1 ≤ i ≤ n</code>，计算 <code>i^2</code> 并将其转换为字符串 <code>str</code>。</li><li>例如，若 <code>i = 10</code>，则 <code>i^2 = 100</code>，转换为字符串 <code>&quot;100&quot;</code>。</li></ul></li><li><p><strong>递归检查 <code>i^2</code> 是否能拆分成多个部分，使其和等于 <code>i</code></strong></p><ul><li>使用递归函数 <code>check(str, target)</code> 来判断 <code>str</code> 是否可以拆分成多个部分，使得这些部分的数值之和等于 <code>target</code>。</li><li>在 <code>check</code> 过程中，使用 <code>cache</code> 记忆化存储，减少重复计算。</li><li><code>check(str, target)</code> 的递归逻辑： <ul><li><strong>终止条件</strong>： <ul><li>若 <code>str</code> 为空且 <code>target == 0</code>，返回 <code>true</code>（说明成功拆分）。</li><li>若 <code>target &lt; 0</code>，返回 <code>false</code>（说明当前路径不可能满足条件）。</li></ul></li><li><strong>尝试不同的拆分方式</strong>： <ul><li>遍历 <code>str</code> 的前缀部分 <code>str[0:i]</code>，将其转换为数字 <code>left</code>。</li><li>递归检查 <code>str[i:]</code> 是否可以构成剩余的 <code>target - left</code>。</li><li>若找到满足条件的拆分，则返回 <code>true</code>，否则继续尝试。</li></ul></li></ul></li></ul></li><li><p><strong>如果 <code>i^2</code> 满足条件，则累加到结果中</strong></p><ul><li>若 <code>check(square.toString(), i)</code> 结果为 <code>true</code>，则将 <code>square</code> 加入最终结果。</li></ul></li><li><p><strong>返回所有满足条件的 <code>i^2</code> 之和</strong></p></li></ol><h4 id="复杂度分析" tabindex="-1"><a class="header-anchor" href="#复杂度分析" aria-hidden="true">#</a> 复杂度分析</h4><ul><li><p><strong>时间复杂度</strong>：<code>O(n * 2^m)</code>，其中 <code>m ≈ log(n^2) = 2 log(n)</code>。</p><ul><li>遍历 <code>1</code> 到 <code>n</code> 需要 <strong>O(n)</strong>。</li><li><code>check(str, target)</code> 递归地尝试所有可能的拆分方式，最坏情况下接近 <strong>O(2^m)</strong>（<code>m</code> 为 <code>i^2</code> 的字符串长度）。</li></ul></li><li><p><strong>空间复杂度</strong>：<code>O(n log(n))</code>。</p><ul><li><p><strong>记忆化哈希表 <code>cache</code></strong>：<code>O(n log(n))</code></p><ul><li>每次调用 <code>check(str, target, cache)</code>，最多存储 <code>O(m * i)</code> 个子问题的解。</li><li>其中 <code>m</code> 是 <code>i^2</code> 的位数，<code>i</code> 是 <code>target</code> 的取值范围（最多 <code>O(n)</code>）。</li><li>由于 <code>m ≈ 2 log(n)</code>，<code>i ≤ n</code>，所以 <code>cache</code> 的大小最多 <code>O(n log(n))</code>。</li></ul></li><li><p><strong>递归调用栈空间</strong>：<code>O(log(n))</code></p><ul><li>在 <code>check()</code> 递归时，每次拆分字符串 <code>square.toString()</code>，深度最多 <code>O(m)</code>（即 <code>2 log(n)</code>）。</li><li>由于<strong>剪枝优化</strong>，实际递归深度通常比 <code>m</code> 更浅。</li><li><strong>最坏情况下</strong>，递归调用栈空间为 <code>O(log(n))</code>。</li></ul></li><li><p><strong>总的空间复杂度</strong>： <code>O(n log(n))</code>，<code>cache</code> 是主要的空间开销，递归调用栈的影响较小。</p></li></ul></li></ul><h2 id="代码" tabindex="-1"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">}</span></span> <span class="token parameter">n</span>
 * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">}</span></span>
 */</span>
<span class="token keyword">var</span> <span class="token function-variable function">punishmentNumber</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">// 递归检查是否可以拆分</span>
	<span class="token keyword">const</span> <span class="token function-variable function">check</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">str<span class="token punctuation">,</span> target<span class="token punctuation">,</span> cache</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
		<span class="token comment">// 如果字符串为空且目标值变为0，说明找到一种合法拆分方式</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>str <span class="token operator">==</span> <span class="token string">&#39;&#39;</span> <span class="token operator">&amp;&amp;</span> target <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
		<span class="token comment">// 如果目标值小于0，则不可能满足条件</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>target <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
		<span class="token comment">// 命中缓存</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>cache<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>str <span class="token operator">+</span> <span class="token string">&#39;,&#39;</span> <span class="token operator">+</span> target<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> cache<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>str <span class="token operator">+</span> <span class="token string">&#39;,&#39;</span> <span class="token operator">+</span> target<span class="token punctuation">)</span><span class="token punctuation">;</span>

		<span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
		<span class="token comment">// 遍历前缀，尝试不同的拆分方式</span>
		<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> str<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">let</span> left <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 当前前缀</span>
			<span class="token keyword">let</span> right <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 剩余部分</span>
			<span class="token comment">// 递归检查剩余部分能否构成 target - left</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">check</span><span class="token punctuation">(</span>right<span class="token punctuation">,</span> target <span class="token operator">-</span> <span class="token function">Number</span><span class="token punctuation">(</span>left<span class="token punctuation">)</span><span class="token punctuation">,</span> cache<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
				cache<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>str <span class="token operator">+</span> <span class="token string">&#39;,&#39;</span> <span class="token operator">+</span> target<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
				res <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
				<span class="token keyword">break</span><span class="token punctuation">;</span> <span class="token comment">// 一旦找到满足条件的拆分方式就退出循环</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
		cache<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>str <span class="token operator">+</span> <span class="token string">&#39;,&#39;</span> <span class="token operator">+</span> target<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">return</span> res<span class="token punctuation">;</span>
	<span class="token punctuation">}</span><span class="token punctuation">;</span>

	<span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token comment">// 遍历 1 到 n，检查哪些 i^2 满足拆分条件</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">let</span> cache <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

		<span class="token keyword">const</span> square <span class="token operator">=</span> i <span class="token operator">*</span> i<span class="token punctuation">;</span> <span class="token comment">// 计算 i^2</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">check</span><span class="token punctuation">(</span>square<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> cache<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token comment">// 检查是否满足拆分条件</span>
			res <span class="token operator">+=</span> square<span class="token punctuation">;</span> <span class="token comment">// 计入最终结果</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> res<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="相关题目" tabindex="-1"><a class="header-anchor" href="#相关题目" aria-hidden="true">#</a> 相关题目</h2>`,27),x=n("thead",null,[n("tr",null,[n("th",{style:{"text-align":"center"}},"题号"),n("th",{style:{"text-align":"left"}},"标题"),n("th",{style:{"text-align":"center"}},"题解"),n("th",{style:{"text-align":"left"}},"标签"),n("th",{style:{"text-align":"center"}},"难度"),n("th",{style:{"text-align":"center"}},"力扣")])],-1),w=n("td",{style:{"text-align":"center"}},"2518",-1),q=n("td",{style:{"text-align":"left"}},"好分区的数目",-1),O=n("td",{style:{"text-align":"center"}},null,-1),E={style:{"text-align":"left"}},N=n("code",null,"数组",-1),C=n("code",null,"动态规划",-1),L=n("td",{style:{"text-align":"center"}},"🔴",-1),T={style:{"text-align":"center"}},V={href:"https://leetcode.cn/problems/number-of-great-partitions",target:"_blank",rel:"noopener noreferrer"},I={href:"https://leetcode.com/problems/number-of-great-partitions",target:"_blank",rel:"noopener noreferrer"};function S(j,B){const p=c("font"),e=c("RouterLink"),o=c("ExternalLinkIcon");return i(),r("div",null,[m,n("p",null,[s("🟠 "),a(p,{color:"#ffb800"},{default:t(()=>[s("Medium")]),_:1}),s("  🔖  "),a(e,{to:"/tag/math.html"},{default:t(()=>[g]),_:1}),s(),a(e,{to:"/tag/backtracking.html"},{default:t(()=>[h]),_:1}),s("  🔗 "),n("a",b,[v,a(o)]),s(),n("a",f,[_,a(o)])]),y,u(" prettier-ignore "),n("table",null,[x,n("tbody",null,[n("tr",null,[w,q,O,n("td",E,[a(e,{to:"/tag/array.html"},{default:t(()=>[N]),_:1}),s(),a(e,{to:"/tag/dynamic-programming.html"},{default:t(()=>[C]),_:1})]),L,n("td",T,[n("a",V,[s("🀄️"),a(o)]),s(),n("a",I,[s("🔗"),a(o)])])])])])])}const M=l(k,[["render",S],["__file","2698.html.vue"]]);export{M as default};
