import{_ as p,r as c,o as i,c as r,a as n,b as t,d as s,w as e,f as u,e as d}from"./app-fBVbqwGY.js";const k={},m=n("h1",{id:"_60-排列序列",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_60-排列序列","aria-hidden":"true"},"#"),t(" 60. 排列序列")],-1),h=n("code",null,"递归",-1),_=n("code",null,"数学",-1),g={href:"https://leetcode.cn/problems/permutation-sequence",target:"_blank",rel:"noopener noreferrer"},b=n("code",null,"力扣",-1),q={href:"https://leetcode.com/problems/permutation-sequence",target:"_blank",rel:"noopener noreferrer"},f=n("code",null,"LeetCode",-1),v=d(`<h2 id="题目" tabindex="-1"><a class="header-anchor" href="#题目" aria-hidden="true">#</a> 题目</h2><p>The set <code>[1, 2, 3, ..., n]</code> contains a total of <code>n!</code> unique permutations.</p><p>By listing and labeling all of the permutations in order, we get the following sequence for <code>n = 3</code>:</p><ol><li><code>&quot;123&quot;</code></li><li><code>&quot;132&quot;</code></li><li><code>&quot;213&quot;</code></li><li><code>&quot;231&quot;</code></li><li><code>&quot;312&quot;</code></li><li><code>&quot;321&quot;</code></li></ol><p>Given <code>n</code> and <code>k</code>, return the <code>kth</code> permutation sequence.</p><p><strong>Example 1:</strong></p><blockquote><p>Input: n = 3, k = 3</p><p>Output: &quot;213&quot;</p></blockquote><p><strong>Example 2:</strong></p><blockquote><p>Input: n = 4, k = 9</p><p>Output: &quot;2314&quot;</p></blockquote><p><strong>Example 3:</strong></p><blockquote><p>Input: n = 3, k = 1</p><p>Output: &quot;123&quot;</p></blockquote><p><strong>Constraints:</strong></p><ul><li><code>1 &lt;= n &lt;= 9</code></li><li><code>1 &lt;= k &lt;= n!</code></li></ul><h2 id="题目大意" tabindex="-1"><a class="header-anchor" href="#题目大意" aria-hidden="true">#</a> 题目大意</h2><p>给出集合 <code>[1,2,3,...,n]</code>，其所有元素共有 <code>n!</code> 种排列。</p><p>按大小顺序列出所有排列情况，并一一标记，当 <code>n = 3</code> 时, 所有排列如下：</p><ol><li><code>&quot;123&quot;</code></li><li><code>&quot;132&quot;</code></li><li><code>&quot;213&quot;</code></li><li><code>&quot;231&quot;</code></li><li><code>&quot;312&quot;</code></li><li><code>&quot;321&quot;</code></li></ol><p>给定 <code>n</code> 和 <code>k</code>，返回第 <code>k</code> 个排列。</p><p><strong>示例 1：</strong></p><blockquote><p><strong>输入：</strong> n = 3, k = 3</p><p><strong>输出：</strong> &quot;213&quot;</p></blockquote><p><strong>示例 2：</strong></p><blockquote><p><strong>输入：</strong> n = 4, k = 9</p><p><strong>输出：</strong> &quot;2314&quot;</p></blockquote><p><strong>示例 3：</strong></p><blockquote><p><strong>输入：</strong> n = 3, k = 1</p><p><strong>输出：</strong> &quot;123&quot;</p></blockquote><p><strong>提示：</strong></p><ul><li><code>1 &lt;= n &lt;= 9</code></li><li><code>1 &lt;= k &lt;= n!</code></li></ul><h2 id="解题思路" tabindex="-1"><a class="header-anchor" href="#解题思路" aria-hidden="true">#</a> 解题思路</h2><p>这道题的核心是利用数学方法直接定位到第 <code>k</code> 个排列，而不是逐个生成所有排列。</p><ol><li><strong>阶乘性质</strong></li></ol><p>对于长度为 <code>n</code> 的排列：</p><ul><li>每个数字可以作为排列的第一个数字。</li><li>当第一个数字固定后，其余数字的排列共有 <code>(n-1)!</code> 种可能。</li></ul><p>例如：</p><ul><li>对于 <code>n = 3</code> 的排列 <code>[&quot;123&quot;, &quot;132&quot;, &quot;213&quot;, &quot;231&quot;, &quot;312&quot;, &quot;321&quot;]</code>： <ul><li>第一个数字为 <code>1</code> 的排列有 <code>2! = 2</code> 个：<code>[&quot;123&quot;, &quot;132&quot;]</code>。</li><li>第一个数字为 <code>2</code> 的排列有 <code>2! = 2</code> 个：<code>[&quot;213&quot;, &quot;231&quot;]</code>。</li><li>第一个数字为 <code>3</code> 的排列有 <code>2! = 2</code> 个：<code>[&quot;312&quot;, &quot;321&quot;]</code>。</li></ul></li></ul><ol start="2"><li><strong>如何确定第一个数字</strong></li></ol><ul><li>使用 <code>k</code> 和 <code>(n-1)!</code> 的关系确定第一个数字。</li><li>计算 <code>index = Math.floor((k-1) / (n-1)!)</code>，这个 <code>index</code> 表示当前可用数字中哪个数字是第一个。</li><li>更新 <code>k = k % (n-1)!</code>，继续对剩余的排列进行同样的计算。</li></ul><ol start="3"><li><strong>重复以上过程</strong></li></ol><ul><li>每次固定一个数字，直到所有数字固定为止。</li></ul><hr><p><strong>算法步骤</strong></p><ol><li><strong>预计算阶乘</strong>： <ul><li>构造一个数组 <code>factorial</code>，保存 <code>0!</code> 到 <code>(n-1)!</code> 的值。</li></ul></li><li><strong>维护候选数字</strong>： <ul><li>使用一个数组 <code>nums</code> 保存当前可用的数字（初始为 <code>[1, 2, ..., n]</code>）。</li></ul></li><li><strong>逐位确定数字</strong>： <ul><li>对于第 <code>i</code> 位，计算 <code>index</code> 和更新 <code>k</code>。</li><li>根据 <code>index</code> 从 <code>nums</code> 中取出数字，加入结果。</li></ul></li></ol><h4 id="复杂度分析" tabindex="-1"><a class="header-anchor" href="#复杂度分析" aria-hidden="true">#</a> 复杂度分析</h4><ul><li><p><strong>时间复杂度</strong>：<code>O(n^2)</code></p><ul><li>计算阶乘：<code>O(n)</code>。</li><li>每次选取数字要进行数组的 <code>splice</code> 操作，复杂度为<code>O(n)</code>，最多取 <code>n</code> 次，总复杂度：<code>O(n^2)</code>。</li></ul></li><li><p><strong>空间复杂度</strong>：<code>O(n)</code>，存储阶乘和候选数字。</p></li></ul><h2 id="代码" tabindex="-1"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">}</span></span> <span class="token parameter">n</span>
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">}</span></span> <span class="token parameter">k</span>
 * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>string<span class="token punctuation">}</span></span>
 */</span>
<span class="token keyword">var</span> <span class="token function-variable function">getPermutation</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">n<span class="token punctuation">,</span> k</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">// 计算阶乘</span>
	<span class="token keyword">const</span> factorial <span class="token operator">=</span> <span class="token function">Array</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		factorial<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> factorial<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> i<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token comment">// 初始化候选数字</span>
	<span class="token keyword">const</span> nums <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">length</span><span class="token operator">:</span> n <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">_<span class="token punctuation">,</span> i</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">;</span>

	<span class="token comment">// 从最高位到最低位确定数字</span>
	k<span class="token operator">--</span><span class="token punctuation">;</span> <span class="token comment">// 转为从 0 开始的索引</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> n<span class="token punctuation">;</span> i <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">const</span> index <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>k <span class="token operator">/</span> factorial<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		result <span class="token operator">+=</span> nums<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>
		nums<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 移除已选数字</span>
		k <span class="token operator">%=</span> factorial<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 更新 k</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="相关题目" tabindex="-1"><a class="header-anchor" href="#相关题目" aria-hidden="true">#</a> 相关题目</h2>`,45),x=n("thead",null,[n("tr",null,[n("th",{style:{"text-align":"center"}},"题号"),n("th",{style:{"text-align":"left"}},"标题"),n("th",{style:{"text-align":"center"}},"题解"),n("th",{style:{"text-align":"left"}},"标签"),n("th",{style:{"text-align":"center"}},"难度"),n("th",{style:{"text-align":"center"}},"力扣")])],-1),y=n("td",{style:{"text-align":"center"}},"31",-1),w=n("td",{style:{"text-align":"left"}},"下一个排列",-1),O={style:{"text-align":"center"}},E={style:{"text-align":"left"}},C=n("code",null,"数组",-1),I=n("code",null,"双指针",-1),L=n("td",{style:{"text-align":"center"}},"🟠",-1),N={style:{"text-align":"center"}},V={href:"https://leetcode.cn/problems/next-permutation",target:"_blank",rel:"noopener noreferrer"},B={href:"https://leetcode.com/problems/next-permutation",target:"_blank",rel:"noopener noreferrer"},j=n("td",{style:{"text-align":"center"}},"46",-1),A=n("td",{style:{"text-align":"left"}},"全排列",-1),M={style:{"text-align":"center"}},R={style:{"text-align":"left"}},T=n("code",null,"数组",-1),G=n("code",null,"回溯",-1),H=n("td",{style:{"text-align":"center"}},"🟠",-1),P={style:{"text-align":"center"}},S={href:"https://leetcode.cn/problems/permutations",target:"_blank",rel:"noopener noreferrer"},z={href:"https://leetcode.com/problems/permutations",target:"_blank",rel:"noopener noreferrer"};function D(F,J){const l=c("font"),o=c("RouterLink"),a=c("ExternalLinkIcon");return i(),r("div",null,[m,n("p",null,[t("🔴 "),s(l,{color:"#ff334b"},{default:e(()=>[t("Hard")]),_:1}),t("  🔖  "),s(o,{to:"/tag/recursion.html"},{default:e(()=>[h]),_:1}),t(),s(o,{to:"/tag/math.html"},{default:e(()=>[_]),_:1}),t("  🔗 "),n("a",g,[b,s(a)]),t(),n("a",q,[f,s(a)])]),v,u(" prettier-ignore "),n("table",null,[x,n("tbody",null,[n("tr",null,[y,w,n("td",O,[s(o,{to:"/problem/0031.html"},{default:e(()=>[t("[✓]")]),_:1})]),n("td",E,[s(o,{to:"/tag/array.html"},{default:e(()=>[C]),_:1}),t(),s(o,{to:"/tag/two-pointers.html"},{default:e(()=>[I]),_:1})]),L,n("td",N,[n("a",V,[t("🀄️"),s(a)]),t(),n("a",B,[t("🔗"),s(a)])])]),n("tr",null,[j,A,n("td",M,[s(o,{to:"/problem/0046.html"},{default:e(()=>[t("[✓]")]),_:1})]),n("td",R,[s(o,{to:"/tag/array.html"},{default:e(()=>[T]),_:1}),t(),s(o,{to:"/tag/backtracking.html"},{default:e(()=>[G]),_:1})]),H,n("td",P,[n("a",S,[t("🀄️"),s(a)]),t(),n("a",z,[t("🔗"),s(a)])])])])])])}const Q=p(k,[["render",D],["__file","0060.html.vue"]]);export{Q as default};
