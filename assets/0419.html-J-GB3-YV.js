import{_ as r,r as l,o as p,c as d,a as t,b as n,d as e,w as s,f as i,e as u}from"./app-B5EG-zH0.js";const h={},k=t("h1",{id:"_419-棋盘上的战舰",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#_419-棋盘上的战舰","aria-hidden":"true"},"#"),n(" 419. 棋盘上的战舰")],-1),_=t("code",null,"深度优先搜索",-1),g=t("code",null,"数组",-1),m=t("code",null,"矩阵",-1),b={href:"https://leetcode.cn/problems/battleships-in-a-board",target:"_blank",rel:"noopener noreferrer"},f=t("code",null,"力扣",-1),y={href:"https://leetcode.com/problems/battleships-in-a-board",target:"_blank",rel:"noopener noreferrer"},x=t("code",null,"LeetCode",-1),v=u(`<h2 id="题目" tabindex="-1"><a class="header-anchor" href="#题目" aria-hidden="true">#</a> 题目</h2><p>Given an <code>m x n</code> matrix <code>board</code> where each cell is a battleship <code>&#39;X&#39;</code> or empty <code>&#39;.&#39;</code>, return <em>the number of the <strong>battleships</strong> on</em> <code>board</code>.</p><p><strong>Battleships</strong> can only be placed horizontally or vertically on <code>board</code>. In other words, they can only be made of the shape <code>1 x k</code> (<code>1</code> row, <code>k</code> columns) or <code>k x 1</code> (<code>k</code> rows, <code>1</code> column), where <code>k</code> can be of any size. At least one horizontal or vertical cell separates between two battleships (i.e., there are no adjacent battleships).</p><p><strong>Example 1:</strong></p><figure><img src="https://assets.leetcode.com/uploads/2024/06/21/image.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><blockquote><p>Input: board = [[&quot;X&quot;,&quot;.&quot;,&quot;.&quot;,&quot;X&quot;],[&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;X&quot;],[&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;X&quot;]]</p><p>Output: 2</p></blockquote><p><strong>Example 2:</strong></p><blockquote><p>Input: board = [[&quot;.&quot;]]</p><p>Output: 0</p></blockquote><p><strong>Constraints:</strong></p><ul><li><code>m == board.length</code></li><li><code>n == board[i].length</code></li><li><code>1 &lt;= m, n &lt;= 200</code></li><li><code>board[i][j]</code> is either <code>&#39;.&#39;</code> or <code>&#39;X&#39;</code>.</li></ul><p><strong>Follow up:</strong> Could you do it in one-pass, using only <code>O(1)</code> extra memory and without modifying the values <code>board</code>?</p><h2 id="题目大意" tabindex="-1"><a class="header-anchor" href="#题目大意" aria-hidden="true">#</a> 题目大意</h2><p>给你一个大小为 <code>m x n</code> 的矩阵 <code>board</code> 表示棋盘，其中，每个单元格可以是一艘战舰 <code>&#39;X&#39;</code> 或者是一个空位 <code>&#39;.&#39;</code> ，返回在棋盘 <code>board</code> 上放置的 <strong>舰队</strong> 的数量。</p><p><strong>舰队</strong> 只能水平或者垂直放置在 <code>board</code> 上。换句话说，舰队只能按 <code>1 x k</code>（<code>1</code> 行，<code>k</code> 列）或 <code>k x 1</code>（<code>k</code> 行，<code>1</code> 列）的形状放置，其中 <code>k</code> 可以是任意大小。两个舰队之间至少有一个水平或垂直的空格分隔 （即没有相邻的舰队）。</p><p><strong>示例 1：</strong></p><figure><img src="https://pic.leetcode.cn/1719200420-KKnzye-image.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><blockquote><p><strong>输入：</strong> board = [[&quot;X&quot;,&quot;.&quot;,&quot;.&quot;,&quot;X&quot;],[&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;X&quot;],[&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;X&quot;]]</p><p><strong>输出：</strong> 2</p></blockquote><p><strong>示例 2：</strong></p><blockquote><p><strong>输入：</strong> board = [[&quot;.&quot;]]</p><p><strong>输出：</strong> 0</p></blockquote><p><strong>提示：</strong></p><ul><li><code>m == board.length</code></li><li><code>n == board[i].length</code></li><li><code>1 &lt;= m, n &lt;= 200</code></li><li><code>board[i][j]</code> 是 <code>&#39;.&#39;</code> 或 <code>&#39;X&#39;</code></li></ul><p><strong>进阶：</strong> 你可以实现一次扫描算法，并只使用 <code>O(1)</code> 额外空间，并且不修改 <code>board</code> 的值来解决这个问题吗？</p><h2 id="解题思路" tabindex="-1"><a class="header-anchor" href="#解题思路" aria-hidden="true">#</a> 解题思路</h2><ol><li><p><strong>观察战舰的特征</strong></p><ul><li>在 <code>m x n</code> 的棋盘上： <ul><li><code>&#39;X&#39;</code> 代表战舰的一部分，<code>.</code> 代表水域。</li><li><strong>战舰只能是水平或垂直排列的连续 <code>&#39;X&#39;</code></strong>。</li><li><strong>战舰不会相邻</strong>，即不会形成 <code>L</code> 形。</li></ul></li><li>目标是<strong>统计战舰的数量</strong>。</li></ul></li><li><p><strong>只统计战舰的起点</strong></p><ul><li>直接遍历棋盘，<strong>只在战舰的“起点”进行计数</strong>，避免重复计算：</li><li><strong>如果当前格子是 <code>&#39;X&#39;</code></strong>： <ul><li>且<strong>左边是水域</strong>（<code>j == 0 || board[i][j-1] == &#39;.&#39;</code>）。</li><li>且<strong>上方是水域</strong>（<code>i == 0 || board[i-1][j] == &#39;.&#39;</code>）。</li><li>那么它就是一个新战舰的起点。</li></ul></li><li>这样，每艘战舰只会被计数一次。</li></ul></li><li><p><strong>初始化</strong></p><ul><li>获取棋盘的行数 <code>m</code> 和列数 <code>n</code>。</li><li>定义 <code>battleships</code> 变量，初始值为 <code>0</code>。</li></ul></li><li><p><strong>遍历棋盘</strong></p><ul><li><strong>外层循环遍历所有行 <code>i</code></strong>。</li><li><strong>内层循环遍历所有列 <code>j</code></strong>。</li><li>如果当前位置是 <code>&#39;X&#39;</code>，并且满足 <strong>左边和上方都不是 <code>&#39;X&#39;</code></strong>，说明发现了一艘新的战舰，<code>battleships++</code>。</li></ul></li><li><p>返回 <code>battleships</code> 作为最终答案。</p></li></ol><h4 id="复杂度分析" tabindex="-1"><a class="header-anchor" href="#复杂度分析" aria-hidden="true">#</a> 复杂度分析</h4><ul><li><strong>时间复杂度</strong>：<code>O(m * n)</code>，遍历整个矩阵一次。</li><li><strong>空间复杂度</strong>：<code>O(1)</code>，仅使用常数额外空间。</li></ul><h2 id="代码" tabindex="-1"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>character<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span> <span class="token parameter">board</span>
 * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">}</span></span>
 */</span>
<span class="token keyword">var</span> <span class="token function-variable function">countBattleships</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">board</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">const</span> m <span class="token operator">=</span> board<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
	<span class="token keyword">const</span> n <span class="token operator">=</span> board<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>
	<span class="token keyword">let</span> battleships <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span>board<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">&#39;X&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
				<span class="token comment">// 只在战舰头部（左侧和上侧没有X）进行计数</span>
				<span class="token keyword">const</span> left <span class="token operator">=</span> i <span class="token operator">===</span> <span class="token number">0</span> <span class="token operator">||</span> board<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">&#39;.&#39;</span><span class="token punctuation">;</span>
				<span class="token keyword">const</span> upper <span class="token operator">=</span> j <span class="token operator">===</span> <span class="token number">0</span> <span class="token operator">||</span> board<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">&#39;.&#39;</span><span class="token punctuation">;</span>
				<span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">&amp;&amp;</span> upper<span class="token punctuation">)</span> <span class="token punctuation">{</span>
					battleships<span class="token operator">++</span><span class="token punctuation">;</span>
				<span class="token punctuation">}</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> battleships<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="相关题目" tabindex="-1"><a class="header-anchor" href="#相关题目" aria-hidden="true">#</a> 相关题目</h2>`,29),q=t("thead",null,[t("tr",null,[t("th",{style:{"text-align":"center"}},"题号"),t("th",{style:{"text-align":"left"}},"标题"),t("th",{style:{"text-align":"center"}},"题解"),t("th",{style:{"text-align":"left"}},"标签"),t("th",{style:{"text-align":"center"}},"难度"),t("th",{style:{"text-align":"center"}},"力扣")])],-1),w=t("td",{style:{"text-align":"center"}},"200",-1),X=t("td",{style:{"text-align":"left"}},"岛屿数量",-1),j={style:{"text-align":"center"}},z={style:{"text-align":"left"}},C=t("code",null,"深度优先搜索",-1),L=t("code",null,"广度优先搜索",-1),O=t("code",null,"并查集",-1),B=t("code",null,"2+",-1),E=t("td",{style:{"text-align":"center"}},"🟠",-1),I={style:{"text-align":"center"}},N={href:"https://leetcode.cn/problems/number-of-islands",target:"_blank",rel:"noopener noreferrer"},V={href:"https://leetcode.com/problems/number-of-islands",target:"_blank",rel:"noopener noreferrer"},K=t("td",{style:{"text-align":"center"}},"286",-1),R=t("td",{style:{"text-align":"left"}},"墙与门 🔒",-1),A=t("td",{style:{"text-align":"center"}},null,-1),F={style:{"text-align":"left"}},G=t("code",null,"广度优先搜索",-1),M=t("code",null,"数组",-1),S=t("code",null,"矩阵",-1),T=t("td",{style:{"text-align":"center"}},"🟠",-1),D={style:{"text-align":"center"}},H={href:"https://leetcode.cn/problems/walls-and-gates",target:"_blank",rel:"noopener noreferrer"},J={href:"https://leetcode.com/problems/walls-and-gates",target:"_blank",rel:"noopener noreferrer"},P=t("td",{style:{"text-align":"center"}},"695",-1),Q=t("td",{style:{"text-align":"left"}},"岛屿的最大面积",-1),U={style:{"text-align":"center"}},W={style:{"text-align":"left"}},Y=t("code",null,"深度优先搜索",-1),Z=t("code",null,"广度优先搜索",-1),$=t("code",null,"并查集",-1),tt=t("code",null,"2+",-1),nt=t("td",{style:{"text-align":"center"}},"🟠",-1),et={style:{"text-align":"center"}},st={href:"https://leetcode.cn/problems/max-area-of-island",target:"_blank",rel:"noopener noreferrer"},ot={href:"https://leetcode.com/problems/max-area-of-island",target:"_blank",rel:"noopener noreferrer"},at=t("td",{style:{"text-align":"center"}},"994",-1),lt=t("td",{style:{"text-align":"left"}},"腐烂的橘子",-1),ct={style:{"text-align":"center"}},rt={style:{"text-align":"left"}},pt=t("code",null,"广度优先搜索",-1),dt=t("code",null,"数组",-1),it=t("code",null,"矩阵",-1),ut=t("td",{style:{"text-align":"center"}},"🟠",-1),ht={style:{"text-align":"center"}},kt={href:"https://leetcode.cn/problems/rotting-oranges",target:"_blank",rel:"noopener noreferrer"},_t={href:"https://leetcode.com/problems/rotting-oranges",target:"_blank",rel:"noopener noreferrer"};function gt(mt,bt){const c=l("font"),o=l("RouterLink"),a=l("ExternalLinkIcon");return p(),d("div",null,[k,t("p",null,[n("🟠 "),e(c,{color:"#ffb800"},{default:s(()=>[n("Medium")]),_:1}),n("  🔖  "),e(o,{to:"/tag/depth-first-search.html"},{default:s(()=>[_]),_:1}),n(),e(o,{to:"/tag/array.html"},{default:s(()=>[g]),_:1}),n(),e(o,{to:"/tag/matrix.html"},{default:s(()=>[m]),_:1}),n("  🔗 "),t("a",b,[f,e(a)]),n(),t("a",y,[x,e(a)])]),v,i(" prettier-ignore "),t("table",null,[q,t("tbody",null,[t("tr",null,[w,X,t("td",j,[e(o,{to:"/problem/0200.html"},{default:s(()=>[n("[✓]")]),_:1})]),t("td",z,[e(o,{to:"/tag/depth-first-search.html"},{default:s(()=>[C]),_:1}),n(),e(o,{to:"/tag/breadth-first-search.html"},{default:s(()=>[L]),_:1}),n(),e(o,{to:"/tag/union-find.html"},{default:s(()=>[O]),_:1}),n(),B]),E,t("td",I,[t("a",N,[n("🀄️"),e(a)]),n(),t("a",V,[n("🔗"),e(a)])])]),t("tr",null,[K,R,A,t("td",F,[e(o,{to:"/tag/breadth-first-search.html"},{default:s(()=>[G]),_:1}),n(),e(o,{to:"/tag/array.html"},{default:s(()=>[M]),_:1}),n(),e(o,{to:"/tag/matrix.html"},{default:s(()=>[S]),_:1})]),T,t("td",D,[t("a",H,[n("🀄️"),e(a)]),n(),t("a",J,[n("🔗"),e(a)])])]),t("tr",null,[P,Q,t("td",U,[e(o,{to:"/problem/0695.html"},{default:s(()=>[n("[✓]")]),_:1})]),t("td",W,[e(o,{to:"/tag/depth-first-search.html"},{default:s(()=>[Y]),_:1}),n(),e(o,{to:"/tag/breadth-first-search.html"},{default:s(()=>[Z]),_:1}),n(),e(o,{to:"/tag/union-find.html"},{default:s(()=>[$]),_:1}),n(),tt]),nt,t("td",et,[t("a",st,[n("🀄️"),e(a)]),n(),t("a",ot,[n("🔗"),e(a)])])]),t("tr",null,[at,lt,t("td",ct,[e(o,{to:"/problem/0994.html"},{default:s(()=>[n("[✓]")]),_:1})]),t("td",rt,[e(o,{to:"/tag/breadth-first-search.html"},{default:s(()=>[pt]),_:1}),n(),e(o,{to:"/tag/array.html"},{default:s(()=>[dt]),_:1}),n(),e(o,{to:"/tag/matrix.html"},{default:s(()=>[it]),_:1})]),ut,t("td",ht,[t("a",kt,[n("🀄️"),e(a)]),n(),t("a",_t,[n("🔗"),e(a)])])])])])])}const yt=r(h,[["render",gt],["__file","0419.html.vue"]]);export{yt as default};
