import{_ as l,r as t,o as u,c as i,a as n,b as s,d as a,w as o,e as r}from"./app-B5EG-zH0.js";const d={},k=n("h1",{id:"_467-环绕字符串中唯一的子字符串",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_467-环绕字符串中唯一的子字符串","aria-hidden":"true"},"#"),s(" 467. 环绕字符串中唯一的子字符串")],-1),m=n("code",null,"字符串",-1),b=n("code",null,"动态规划",-1),g={href:"https://leetcode.cn/problems/unique-substrings-in-wraparound-string",target:"_blank",rel:"noopener noreferrer"},h=n("code",null,"力扣",-1),q={href:"https://leetcode.com/problems/unique-substrings-in-wraparound-string",target:"_blank",rel:"noopener noreferrer"},v=n("code",null,"LeetCode",-1),f=r(`<h2 id="题目" tabindex="-1"><a class="header-anchor" href="#题目" aria-hidden="true">#</a> 题目</h2><p>We define the string <code>base</code> to be the infinite wraparound string of <code>&quot;abcdefghijklmnopqrstuvwxyz&quot;</code>, so <code>base</code> will look like this:</p><ul><li><code>&quot;...zabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcd....&quot;</code>.</li></ul><p>Given a string <code>s</code>, return <em>the number of <strong>unique non-empty substrings</strong> of</em> <code>s</code> <em>are present in</em> <code>base</code>.</p><p><strong>Example 1:</strong></p><blockquote><p>Input: s = &quot;a&quot;</p><p>Output: 1</p><p>Explanation: Only the substring &quot;a&quot; of s is in base.</p></blockquote><p><strong>Example 2:</strong></p><blockquote><p>Input: s = &quot;cac&quot;</p><p>Output: 2</p><p>Explanation: There are two substrings (&quot;a&quot;, &quot;c&quot;) of s in base.</p></blockquote><p><strong>Example 3:</strong></p><blockquote><p>Input: s = &quot;zab&quot;</p><p>Output: 6</p><p>Explanation: There are six substrings (&quot;z&quot;, &quot;a&quot;, &quot;b&quot;, &quot;za&quot;, &quot;ab&quot;, and &quot;zab&quot;) of s in base.</p></blockquote><p><strong>Constraints:</strong></p><ul><li><code>1 &lt;= s.length &lt;= 10^5</code></li><li><code>s</code> consists of lowercase English letters.</li></ul><h2 id="题目大意" tabindex="-1"><a class="header-anchor" href="#题目大意" aria-hidden="true">#</a> 题目大意</h2><p>定义字符串 <code>base</code> 为一个 <code>&quot;abcdefghijklmnopqrstuvwxyz&quot;</code> 无限环绕的字符串，所以 <code>base</code> 看起来是这样的：</p><ul><li><code>&quot;...zabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcd....&quot;</code>.</li></ul><p>给你一个字符串 <code>s</code> ，请你统计并返回 <code>s</code> 中有多少 <strong>不同</strong> 非空子串 也在 <code>base</code> 中出现。</p><p><strong>示例 1：</strong></p><blockquote><p><strong>输入：</strong> s = &quot;a&quot;</p><p><strong>输出：</strong> 1</p><p><strong>解释：</strong> 字符串 s 的子字符串 &quot;a&quot; 在 base 中出现。</p></blockquote><p><strong>示例 2：</strong></p><blockquote><p><strong>输入：</strong> s = &quot;cac&quot;</p><p><strong>输出：</strong> 2</p><p><strong>解释：</strong> 字符串 s 有两个子字符串 (&quot;a&quot;, &quot;c&quot;) 在 base 中出现。</p></blockquote><p><strong>示例 3：</strong></p><blockquote><p><strong>输入：</strong> s = &quot;zab&quot;</p><p><strong>输出：</strong> 6</p><p><strong>解释：</strong> 字符串 s 有六个子字符串 (&quot;z&quot;, &quot;a&quot;, &quot;b&quot;, &quot;za&quot;, &quot;ab&quot;, and &quot;zab&quot;) 在 base 中出现。</p></blockquote><p><strong>提示：</strong></p><ul><li><code>1 &lt;= s.length &lt;= 10^5</code></li><li>s 由小写英文字母组成</li></ul><h2 id="解题思路" tabindex="-1"><a class="header-anchor" href="#解题思路" aria-hidden="true">#</a> 解题思路</h2><ol><li>状态定义</li></ol><ul><li><code>memo[i]</code> 表示以第 <code>i</code> 个字母结尾的最长连续子串的最大长度。</li><li><code>maxLen</code> 记录当前连续递增子串的长度。</li></ul><ol start="2"><li>转移方程</li></ol><ul><li>若 <code>s[i]</code> 是 <code>s[i-1]</code> 的连续字母 (<code>&#39;b&#39;</code> 在 <code>&#39;a&#39;</code> 之后)，则 <code>maxLen++</code>。</li><li>否则，<code>maxLen</code> 重新置为 <code>1</code>。</li><li>更新 <code>memo[s[i]]</code>，确保该字母结尾的最长子串长度最大化。</li></ul><ol start="3"><li>结果计算</li></ol><ul><li><code>memo</code> 存储了所有可能子串的去重结果，直接累加即可。</li></ul><h4 id="复杂度分析" tabindex="-1"><a class="header-anchor" href="#复杂度分析" aria-hidden="true">#</a> 复杂度分析</h4><ul><li><strong>时间复杂度</strong>：<code>O(n)</code>，仅遍历 <code>s</code> 一次，并使用数组存储信息。</li><li><strong>空间复杂度</strong>：<code>O(1)</code>，只用 <code>26</code> 个字符的数组 <code>memo</code>，额外空间消耗很小。</li></ul><h2 id="代码" tabindex="-1"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>string<span class="token punctuation">}</span></span> <span class="token parameter">s</span>
 * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">}</span></span>
 */</span>
<span class="token keyword">var</span> <span class="token function-variable function">findSubstringInWraproundString</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">s</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">let</span> maxLen <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">const</span> memo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">26</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> s<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>
			i <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span>
			<span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">-</span> s<span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token number">25</span> <span class="token operator">||</span>
				s<span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">-</span> s<span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span>
		<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			maxLen<span class="token operator">++</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
			maxLen <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">const</span> index <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">97</span><span class="token punctuation">;</span>
		memo<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>memo<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">,</span> maxLen<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">return</span> memo<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">acc<span class="token punctuation">,</span> cur</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> acc <span class="token operator">+</span> cur<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,35);function _(x,w){const c=t("font"),e=t("RouterLink"),p=t("ExternalLinkIcon");return u(),i("div",null,[k,n("p",null,[s("🟠 "),a(c,{color:"#ffb800"},{default:o(()=>[s("Medium")]),_:1}),s("  🔖  "),a(e,{to:"/tag/string.html"},{default:o(()=>[m]),_:1}),s(),a(e,{to:"/tag/dynamic-programming.html"},{default:o(()=>[b]),_:1}),s("  🔗 "),n("a",g,[h,a(p)]),s(),n("a",q,[v,a(p)])]),f])}const z=l(d,[["render",_],["__file","0467.html.vue"]]);export{z as default};
