import{_ as l,r as e,o as r,c as i,a as n,b as s,d as a,w as o,e as d}from"./app-aQeLbVW9.js";const u={},k=n("h1",{id:"_1822-数组元素积的符号",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_1822-数组元素积的符号","aria-hidden":"true"},"#"),s(" 1822. 数组元素积的符号")],-1),m=n("code",null,"数组",-1),g=n("code",null,"数学",-1),h={href:"https://leetcode.cn/problems/sign-of-the-product-of-an-array",target:"_blank",rel:"noopener noreferrer"},b=n("code",null,"力扣",-1),v={href:"https://leetcode.com/problems/sign-of-the-product-of-an-array",target:"_blank",rel:"noopener noreferrer"},_=n("code",null,"LeetCode",-1),f=d(`<h2 id="题目" tabindex="-1"><a class="header-anchor" href="#题目" aria-hidden="true">#</a> 题目</h2><p>Implement a function <code>signFunc(x)</code> that returns:</p><ul><li><code>1</code> if <code>x</code> is positive.</li><li><code>-1</code> if <code>x</code> is negative.</li><li><code>0</code> if <code>x</code> is equal to <code>0</code>.</li></ul><p>You are given an integer array <code>nums</code>. Let <code>product</code> be the product of all values in the array <code>nums</code>.</p><p>Return <code>signFunc(product)</code>.</p><p><strong>Example 1:</strong></p><blockquote><p>Input: nums = [-1,-2,-3,-4,3,2,1]</p><p>Output: 1</p><p>Explanation: The product of all values in the array is 144, and signFunc(144) = 1</p></blockquote><p><strong>Example 2:</strong></p><blockquote><p>Input: nums = [1,5,0,2,-3]</p><p>Output: 0</p><p>Explanation: The product of all values in the array is 0, and signFunc(0) = 0</p></blockquote><p><strong>Example 3:</strong></p><blockquote><p>Input: nums = [-1,1,-1,1,-1]</p><p>Output: -1</p><p>Explanation: The product of all values in the array is -1, and signFunc(-1) = -1</p></blockquote><p><strong>Constraints:</strong></p><ul><li><code>1 &lt;= nums.length &lt;= 1000</code></li><li><code>-100 &lt;= nums[i] &lt;= 100</code></li></ul><h2 id="题目大意" tabindex="-1"><a class="header-anchor" href="#题目大意" aria-hidden="true">#</a> 题目大意</h2><p>已知函数 <code>signFunc(x)</code> 将会根据 <code>x</code> 的正负返回特定值：</p><ul><li>如果 <code>x</code> 是正数，返回 <code>1</code> 。</li><li>如果 <code>x</code> 是负数，返回 <code>-1</code> 。</li><li>如果 <code>x</code> 是等于 <code>0</code> ，返回 <code>0</code> 。</li></ul><p>给你一个整数数组 <code>nums</code> 。令 <code>product</code> 为数组 <code>nums</code> 中所有元素值的乘积。</p><p>返回 <code>signFunc(product)</code> 。</p><p><strong>示例 1：</strong></p><blockquote><p><strong>输入：</strong> nums = [-1,-2,-3,-4,3,2,1]</p><p><strong>输出：</strong> 1</p><p><strong>解释：</strong> 数组中所有值的乘积是 144 ，且 signFunc(144) = 1</p></blockquote><p><strong>示例 2：</strong></p><blockquote><p><strong>输入：</strong> nums = [1,5,0,2,-3]</p><p><strong>输出：</strong> 0</p><p><strong>解释：</strong> 数组中所有值的乘积是 0 ，且 signFunc(0) = 0</p></blockquote><p><strong>示例 3：</strong></p><blockquote><p><strong>输入：</strong> nums = [-1,1,-1,1,-1]</p><p><strong>输出：</strong> -1</p><p><strong>解释：</strong> 数组中所有值的乘积是 -1 ，且 signFunc(-1) = -1</p></blockquote><p><strong>提示：</strong></p><ul><li><code>1 &lt;= nums.length &lt;= 1000</code></li><li><code>-100 &lt;= nums[i] &lt;= 100</code></li></ul><h2 id="解题思路" tabindex="-1"><a class="header-anchor" href="#解题思路" aria-hidden="true">#</a> 解题思路</h2><ol><li><p><strong>处理零的情况</strong>：</p><ul><li>如果数组中有一个 0，那么乘积必然是 0，因此直接返回 0。</li></ul></li><li><p><strong>负数的个数</strong>：</p><ul><li>由于每个负数都会影响乘积的符号（负负得正），所以我们只关心负数的数量。</li><li>遍历数组并统计负数的个数。</li></ul></li><li><p><strong>返回结果</strong>：</p><ul><li>如果负数的个数是偶数，说明乘积是正数，返回 <code>1</code>（正数）；</li><li>如果负数的个数是奇数，说明乘积是负数，返回 <code>-1</code>（负数）。</li></ul></li></ol><h4 id="复杂度分析" tabindex="-1"><a class="header-anchor" href="#复杂度分析" aria-hidden="true">#</a> 复杂度分析</h4><ul><li><strong>时间复杂度</strong>：<code>O(n)</code>，其中 <code>n</code> 是数组的长度。只遍历数组一次来统计负数的个数。</li><li><strong>空间复杂度</strong>：<code>O(1)</code>，只用了常数空间来存储计数器 <code>negaCount</code>。</li></ul><h2 id="代码" tabindex="-1"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span> <span class="token parameter">nums</span>
 * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">}</span></span>
 */</span>
<span class="token keyword">var</span> <span class="token function-variable function">arraySign</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">nums</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">let</span> negaCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> num <span class="token keyword">of</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token comment">// 如果数组中有 0，返回 0</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>

		<span class="token comment">// 如果是负数，负数计数增加</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			negaCount<span class="token operator">++</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token comment">// 如果负数个数是偶数，返回1，否则返回-1</span>
	<span class="token keyword">return</span> negaCount <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,32);function x(y,w){const p=e("font"),t=e("RouterLink"),c=e("ExternalLinkIcon");return r(),i("div",null,[k,n("p",null,[s("🟢 "),a(p,{color:"#15bd66"},{default:o(()=>[s("Easy")]),_:1}),s("  🔖  "),a(t,{to:"/tag/array.html"},{default:o(()=>[m]),_:1}),s(),a(t,{to:"/tag/math.html"},{default:o(()=>[g]),_:1}),s("  🔗 "),n("a",h,[b,a(c)]),s(),n("a",v,[_,a(c)])]),f])}const E=l(u,[["render",x],["__file","1822.html.vue"]]);export{E as default};
