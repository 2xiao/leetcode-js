import{_ as l,r as p,o as i,c as u,a as n,b as s,d as t,w as a,f as r,e as d}from"./app-B5EG-zH0.js";const k={},m=n("h1",{id:"_542-01-矩阵",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_542-01-矩阵","aria-hidden":"true"},"#"),s(" 542. 01 矩阵")],-1),h=n("code",null,"广度优先搜索",-1),g=n("code",null,"数组",-1),_=n("code",null,"动态规划",-1),b=n("code",null,"矩阵",-1),v={href:"https://leetcode.cn/problems/01-matrix",target:"_blank",rel:"noopener noreferrer"},f=n("code",null,"力扣",-1),y={href:"https://leetcode.com/problems/01-matrix",target:"_blank",rel:"noopener noreferrer"},x=n("code",null,"LeetCode",-1),w=d(`<h2 id="题目" tabindex="-1"><a class="header-anchor" href="#题目" aria-hidden="true">#</a> 题目</h2><p>Given an <code>m x n</code> binary matrix <code>mat</code>, return <em>the distance of the nearest</em><code>0</code><em>for each cell</em>.</p><p>The distance between two adjacent cells is <code>1</code>.</p><p><strong>Example 1:</strong></p><figure><img src="https://assets.leetcode.com/uploads/2021/04/24/01-1-grid.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><blockquote><p>Input: mat = [[0,0,0],[0,1,0],[0,0,0]]</p><p>Output: [[0,0,0],[0,1,0],[0,0,0]]</p></blockquote><p><strong>Example 2:</strong></p><figure><img src="https://assets.leetcode.com/uploads/2021/04/24/01-2-grid.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><blockquote><p>Input: mat = [[0,0,0],[0,1,0],[1,1,1]]</p><p>Output: [[0,0,0],[0,1,0],[1,2,1]]</p></blockquote><p><strong>Constraints:</strong></p><ul><li><code>m == mat.length</code></li><li><code>n == mat[i].length</code></li><li><code>1 &lt;= m, n &lt;= 10^4</code></li><li><code>1 &lt;= m * n &lt;= 10^4</code></li><li><code>mat[i][j]</code> is either <code>0</code> or <code>1</code>.</li><li>There is at least one <code>0</code> in <code>mat</code>.</li></ul><h2 id="题目大意" tabindex="-1"><a class="header-anchor" href="#题目大意" aria-hidden="true">#</a> 题目大意</h2><p>给定一个由 <code>0</code> 和 <code>1</code> 组成的矩阵 <code>mat</code> ，请输出一个大小相同的矩阵，其中每一个格子是 <code>mat</code> 中对应位置元素到最近的 <code>0</code> 的距离。</p><p>两个相邻元素间的距离为 <code>1</code> 。</p><p><strong>示例 1：</strong></p><figure><img src="https://pic.leetcode-cn.com/1626667201-NCWmuP-image.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><blockquote><p><strong>输入：</strong> mat = [[0,0,0],[0,1,0],[0,0,0]]</p><p><strong>输出：</strong>[[0,0,0],[0,1,0],[0,0,0]]</p></blockquote><p><strong>示例 2：</strong></p><figure><img src="https://pic.leetcode-cn.com/1626667205-xFxIeK-image.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><blockquote><p><strong>输入：</strong> mat = [[0,0,0],[0,1,0],[1,1,1]]</p><p><strong>输出：</strong>[[0,0,0],[0,1,0],[1,2,1]]</p></blockquote><p><strong>提示：</strong></p><ul><li><code>m == mat.length</code></li><li><code>n == mat[i].length</code></li><li><code>1 &lt;= m, n &lt;= 10^4</code></li><li><code>1 &lt;= m * n &lt;= 10^4</code></li><li><code>mat[i][j] is either 0 or 1.</code></li><li><code>mat</code> 中至少有一个 <code>0 </code></li></ul><h2 id="解题思路" tabindex="-1"><a class="header-anchor" href="#解题思路" aria-hidden="true">#</a> 解题思路</h2><p>题目要求计算每个 1 到最近的 0 的最短距离。由于 1 只能通过 4 个方向（上、下、左、右）移动，这类 <strong>最短路径问题</strong> 适合使用 <strong>BFS（广度优先搜索）</strong> 进行求解，由于 BFS 按层扩展，因此先遍历到的点，一定是最短路径。</p><p><strong>1. 初始化</strong></p><ul><li>创建 <code>distance</code> 矩阵：所有 <code>0</code> 设为 <code>0</code>，所有 <code>1</code> 设为 <code>Infinity</code>。</li><li>将所有 <code>0</code> 的坐标入队，作为 BFS 起点。</li></ul><p><strong>2. BFS 计算最短距离</strong></p><ul><li>依次从队列中取出 <code>(i, j)</code> 坐标： <ul><li>尝试向 <strong>四个方向</strong> 传播（上、下、左、右）。</li><li>若 <code>distance[nx][ny] &gt; distance[i][j] + 1</code>，说明发现更短路径，则： <ul><li>更新 <code>distance[nx][ny]</code></li><li>把 <code>(nx, ny)</code> <strong>加入队列</strong>，后续继续扩展。</li></ul></li></ul></li></ul><p><strong>3. 返回 <code>distance</code> 矩阵</strong></p><ul><li>经过 BFS 遍历后，<code>distance</code> 矩阵即为 <strong>最短路径结果</strong>。</li></ul><h4 id="复杂度分析" tabindex="-1"><a class="header-anchor" href="#复杂度分析" aria-hidden="true">#</a> 复杂度分析</h4><ul><li><strong>时间复杂度</strong>：<code>O(m * n)</code>，BFS 每次遍历四个方向，每个点最多被访问一次（入队）。</li><li><strong>空间复杂度</strong>：<code>O(m * n)</code>，需要 <code>distance</code> 矩阵存储答案，同时 <code>queue</code> 最坏情况可能存 <code>m * n</code> 个元素。</li></ul><h2 id="代码" tabindex="-1"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span> <span class="token parameter">mat</span>
 * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span>
 */</span>
<span class="token keyword">var</span> <span class="token function-variable function">updateMatrix</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">mat</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">const</span> m <span class="token operator">=</span> mat<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
	<span class="token keyword">const</span> n <span class="token operator">=</span> mat<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>
	<span class="token keyword">let</span> distance <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">length</span><span class="token operator">:</span> m <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">Array</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">Infinity</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">const</span> dirc <span class="token operator">=</span> <span class="token punctuation">[</span>
		<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
		<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
		<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
		<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>
	<span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token keyword">let</span> queue <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

	<span class="token comment">// 预处理：找到所有 0，作为 BFS 起点</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span>mat<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
				distance<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
				queue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">[</span>i<span class="token punctuation">,</span> j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">while</span> <span class="token punctuation">(</span>queue<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">const</span> <span class="token punctuation">[</span>i<span class="token punctuation">,</span> j<span class="token punctuation">]</span> <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> <span class="token punctuation">[</span>dx<span class="token punctuation">,</span> dy<span class="token punctuation">]</span> <span class="token keyword">of</span> dirc<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">const</span> nx <span class="token operator">=</span> i <span class="token operator">+</span> dx<span class="token punctuation">;</span>
			<span class="token keyword">const</span> ny <span class="token operator">=</span> j <span class="token operator">+</span> dy<span class="token punctuation">;</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span>
				nx <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span>
				nx <span class="token operator">&lt;</span> m <span class="token operator">&amp;&amp;</span>
				ny <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span>
				ny <span class="token operator">&lt;</span> n <span class="token operator">&amp;&amp;</span>
				distance<span class="token punctuation">[</span>nx<span class="token punctuation">]</span><span class="token punctuation">[</span>ny<span class="token punctuation">]</span> <span class="token operator">&gt;</span> distance<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span>
			<span class="token punctuation">)</span> <span class="token punctuation">{</span>
				distance<span class="token punctuation">[</span>nx<span class="token punctuation">]</span><span class="token punctuation">[</span>ny<span class="token punctuation">]</span> <span class="token operator">=</span> distance<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
				<span class="token comment">// 只有更新的点才入队，进行下一层遍历，避免重复计算</span>
				queue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">[</span>nx<span class="token punctuation">,</span> ny<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">return</span> distance<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="相关题目" tabindex="-1"><a class="header-anchor" href="#相关题目" aria-hidden="true">#</a> 相关题目</h2>`,35),j=n("thead",null,[n("tr",null,[n("th",{style:{"text-align":"center"}},"题号"),n("th",{style:{"text-align":"left"}},"标题"),n("th",{style:{"text-align":"center"}},"题解"),n("th",{style:{"text-align":"left"}},"标签"),n("th",{style:{"text-align":"center"}},"难度"),n("th",{style:{"text-align":"center"}},"力扣")])],-1),q=n("td",{style:{"text-align":"center"}},"1730",-1),B=n("td",{style:{"text-align":"left"}},"获取食物的最短路径 🔒",-1),F=n("td",{style:{"text-align":"center"}},null,-1),S={style:{"text-align":"left"}},I=n("code",null,"广度优先搜索",-1),z=n("code",null,"数组",-1),C=n("code",null,"矩阵",-1),N=n("td",{style:{"text-align":"center"}},"🟠",-1),E={style:{"text-align":"center"}},L={href:"https://leetcode.cn/problems/shortest-path-to-get-food",target:"_blank",rel:"noopener noreferrer"},V={href:"https://leetcode.com/problems/shortest-path-to-get-food",target:"_blank",rel:"noopener noreferrer"},O=n("td",{style:{"text-align":"center"}},"2123",-1),T=n("td",{style:{"text-align":"left"}},"使矩阵中的 1 互不相邻的最小操作数 🔒",-1),A=n("td",{style:{"text-align":"center"}},null,-1),M={style:{"text-align":"left"}},R=n("code",null,"图",-1),G=n("code",null,"数组",-1),K=n("code",null,"矩阵",-1),P=n("td",{style:{"text-align":"center"}},"🔴",-1),W={style:{"text-align":"center"}},D={href:"https://leetcode.cn/problems/minimum-operations-to-remove-adjacent-ones-in-matrix",target:"_blank",rel:"noopener noreferrer"},H={href:"https://leetcode.com/problems/minimum-operations-to-remove-adjacent-ones-in-matrix",target:"_blank",rel:"noopener noreferrer"},J=n("td",{style:{"text-align":"center"}},"2482",-1),Q=n("td",{style:{"text-align":"left"}},"行和列中一和零的差值",-1),U=n("td",{style:{"text-align":"center"}},null,-1),X={style:{"text-align":"left"}},Y=n("code",null,"数组",-1),Z=n("code",null,"矩阵",-1),$=n("code",null,"模拟",-1),nn=n("td",{style:{"text-align":"center"}},"🟠",-1),sn={style:{"text-align":"center"}},tn={href:"https://leetcode.cn/problems/difference-between-ones-and-zeros-in-row-and-column",target:"_blank",rel:"noopener noreferrer"},an={href:"https://leetcode.com/problems/difference-between-ones-and-zeros-in-row-and-column",target:"_blank",rel:"noopener noreferrer"};function en(on,pn){const c=p("font"),e=p("RouterLink"),o=p("ExternalLinkIcon");return i(),u("div",null,[m,n("p",null,[s("🟠 "),t(c,{color:"#ffb800"},{default:a(()=>[s("Medium")]),_:1}),s("  🔖  "),t(e,{to:"/tag/breadth-first-search.html"},{default:a(()=>[h]),_:1}),s(),t(e,{to:"/tag/array.html"},{default:a(()=>[g]),_:1}),s(),t(e,{to:"/tag/dynamic-programming.html"},{default:a(()=>[_]),_:1}),s(),t(e,{to:"/tag/matrix.html"},{default:a(()=>[b]),_:1}),s("  🔗 "),n("a",v,[f,t(o)]),s(),n("a",y,[x,t(o)])]),w,r(" prettier-ignore "),n("table",null,[j,n("tbody",null,[n("tr",null,[q,B,F,n("td",S,[t(e,{to:"/tag/breadth-first-search.html"},{default:a(()=>[I]),_:1}),s(),t(e,{to:"/tag/array.html"},{default:a(()=>[z]),_:1}),s(),t(e,{to:"/tag/matrix.html"},{default:a(()=>[C]),_:1})]),N,n("td",E,[n("a",L,[s("🀄️"),t(o)]),s(),n("a",V,[s("🔗"),t(o)])])]),n("tr",null,[O,T,A,n("td",M,[t(e,{to:"/tag/graph.html"},{default:a(()=>[R]),_:1}),s(),t(e,{to:"/tag/array.html"},{default:a(()=>[G]),_:1}),s(),t(e,{to:"/tag/matrix.html"},{default:a(()=>[K]),_:1})]),P,n("td",W,[n("a",D,[s("🀄️"),t(o)]),s(),n("a",H,[s("🔗"),t(o)])])]),n("tr",null,[J,Q,U,n("td",X,[t(e,{to:"/tag/array.html"},{default:a(()=>[Y]),_:1}),s(),t(e,{to:"/tag/matrix.html"},{default:a(()=>[Z]),_:1}),s(),t(e,{to:"/tag/simulation.html"},{default:a(()=>[$]),_:1})]),nn,n("td",sn,[n("a",tn,[s("🀄️"),t(o)]),s(),n("a",an,[s("🔗"),t(o)])])])])])])}const ln=l(k,[["render",en],["__file","0542.html.vue"]]);export{ln as default};
