import{_ as l,r as c,o as r,c as i,a as n,b as s,d as t,w as a,f as d,e as u}from"./app-fBVbqwGY.js";const k={},h=n("h1",{id:"_2516-每种字符至少取-k-个",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_2516-每种字符至少取-k-个","aria-hidden":"true"},"#"),s(" 2516. 每种字符至少取 K 个")],-1),m=n("code",null,"哈希表",-1),b=n("code",null,"字符串",-1),_=n("code",null,"滑动窗口",-1),g={href:"https://leetcode.cn/problems/take-k-of-each-character-from-left-and-right",target:"_blank",rel:"noopener noreferrer"},f=n("code",null,"力扣",-1),v={href:"https://leetcode.com/problems/take-k-of-each-character-from-left-and-right",target:"_blank",rel:"noopener noreferrer"},y=n("code",null,"LeetCode",-1),w=u(`<h2 id="题目" tabindex="-1"><a class="header-anchor" href="#题目" aria-hidden="true">#</a> 题目</h2><p>You are given a string <code>s</code> consisting of the characters <code>&#39;a&#39;</code>, <code>&#39;b&#39;</code>, and <code>&#39;c&#39;</code> and a non-negative integer <code>k</code>. Each minute, you may take either the <strong>leftmost</strong> character of <code>s</code>, or the <strong>rightmost</strong> character of <code>s</code>.</p><p>Return _the<strong>minimum</strong> number of minutes needed for you to take <strong>at least</strong> _<code>k</code> <em>of each character, or return</em><code>-1</code> <em>if it is not possible to take</em><code>k</code> <em>of each character.</em></p><p><strong>Example 1:</strong></p><blockquote><p>Input: s = &quot;aabaaaacaabc&quot;, k = 2</p><p>Output: 8</p><p>Explanation:</p><p>Take three characters from the left of s. You now have two &#39;a&#39; characters, and one &#39;b&#39; character.</p><p>Take five characters from the right of s. You now have four &#39;a&#39; characters, two &#39;b&#39; characters, and two &#39;c&#39; characters.</p><p>A total of 3 + 5 = 8 minutes is needed.</p><p>It can be proven that 8 is the minimum number of minutes needed.</p></blockquote><p><strong>Example 2:</strong></p><blockquote><p>Input: s = &quot;a&quot;, k = 1</p><p>Output: -1</p><p>Explanation: It is not possible to take one &#39;b&#39; or &#39;c&#39; so return -1.</p></blockquote><p><strong>Constraints:</strong></p><ul><li><code>1 &lt;= s.length &lt;= 10^5</code></li><li><code>s</code> consists of only the letters <code>&#39;a&#39;</code>, <code>&#39;b&#39;</code>, and <code>&#39;c&#39;</code>.</li><li><code>0 &lt;= k &lt;= s.length</code></li></ul><h2 id="题目大意" tabindex="-1"><a class="header-anchor" href="#题目大意" aria-hidden="true">#</a> 题目大意</h2><p>给你一个由字符 <code>&#39;a&#39;</code>、<code>&#39;b&#39;</code>、<code>&#39;c&#39;</code> 组成的字符串 <code>s</code> 和一个非负整数 <code>k</code> 。每分钟，你可以选择取走 <code>s</code> <strong>最左侧</strong> 还是 <strong>最右侧</strong> 的那个字符。</p><p>你必须取走每种字符 <strong>至少</strong> <code>k</code> 个，返回需要的 <strong>最少</strong> 分钟数；如果无法取到，则返回 <code>-1</code> 。</p><p><strong>示例 1：</strong></p><blockquote><p><strong>输入：</strong> s = &quot;aabaaaacaabc&quot;, k = 2</p><p><strong>输出：</strong> 8</p><p><strong>解释：</strong></p><p>从 s 的左侧取三个字符，现在共取到两个字符 &#39;a&#39; 、一个字符 &#39;b&#39; 。</p><p>从 s 的右侧取五个字符，现在共取到四个字符 &#39;a&#39; 、两个字符 &#39;b&#39; 和两个字符 &#39;c&#39; 。</p><p>共需要 3 + 5 = 8 分钟。</p><p>可以证明需要的最少分钟数是 8 。</p></blockquote><p><strong>示例 2：</strong></p><blockquote><p><strong>输入：</strong> s = &quot;a&quot;, k = 1</p><p><strong>输出：</strong> -1</p><p><strong>解释：</strong> 无法取到一个字符 &#39;b&#39; 或者 &#39;c&#39;，所以返回 -1 。</p></blockquote><p><strong>提示：</strong></p><ul><li><code>1 &lt;= s.length &lt;= 10^5</code></li><li><code>s</code> 仅由字母 <code>&#39;a&#39;</code>、<code>&#39;b&#39;</code>、<code>&#39;c&#39;</code> 组成</li><li><code>0 &lt;= k &lt;= s.length</code></li></ul><h2 id="解题思路" tabindex="-1"><a class="header-anchor" href="#解题思路" aria-hidden="true">#</a> 解题思路</h2><ol><li>统计每种字符的总数</li></ol><p>首先，遍历字符串 <code>s</code> 统计 <code>&#39;a&#39;</code>、<code>&#39;b&#39;</code> 和 <code>&#39;c&#39;</code> 的总数量 <code>total</code>，分别存储在数组 <code>total</code> 中。</p><p>如果任何一种字符的总数量小于 <code>k</code>，直接返回 <code>-1</code>，因为无法满足题目要求。</p><ol start="2"><li>逆向考虑剩余的区间</li></ol><p>要求最短的前缀和后缀，即<strong>最长的中间连续子数组的长度</strong>，满足：中间子数组中每种字符的数量不超过 <code>total[i] - k</code>。</p><p>这是因为，从整个字符串中去掉满足条件的中间部分后，剩下的前缀和后缀的字符数量必然满足要求。</p><ol start="3"><li>使用滑动窗口找到最长中间子数组</li></ol><p>通过滑动窗口维护一个计数数组 <code>window</code>，统计当前窗口内每种字符的数量：</p><ul><li>窗口右边界 <code>right</code> 每次向右扩展，增加字符的计数；</li><li>当窗口内某种字符数量超过允许值 <code>total[i] - k</code> 时，移动左边界 <code>left</code> 缩小窗口；</li><li>每次更新窗口长度 <code>right - left</code> 并与结果 <code>res</code> 比较，取最短的前缀和后缀长度。</li></ul><ol start="4"><li>结果计算</li></ol><p>对于窗口中满足条件的最长中间子数组，剩余的前缀和后缀长度为 <code>n - (right - left)</code>，记录最小值。</p><p>最后返回 <code>res</code>。</p><h4 id="复杂度分析" tabindex="-1"><a class="header-anchor" href="#复杂度分析" aria-hidden="true">#</a> 复杂度分析</h4><ul><li><strong>时间复杂度</strong>：<code>O(n)</code>，其中 <code>n</code> 是字符串 <code>s</code> 的长度，需要遍历两次字符串，统计字符总数一次，滑动窗口一次。</li><li><strong>空间复杂度</strong>：<code>O(1)</code>，使用了常数级别的数组存储字符统计。</li></ul><h2 id="代码" tabindex="-1"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>string<span class="token punctuation">}</span></span> <span class="token parameter">s</span>
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">}</span></span> <span class="token parameter">k</span>
 * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">}</span></span>
 */</span>
<span class="token keyword">var</span> <span class="token function-variable function">takeCharacters</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">s<span class="token punctuation">,</span> k</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">let</span> total <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 统计字符 &#39;a&#39;, &#39;b&#39;, &#39;c&#39; 的总数</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> char <span class="token keyword">of</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		total<span class="token punctuation">[</span>char<span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token string">&#39;a&#39;</span><span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token comment">// 如果任意一种字符不足 k 个，返回 -1</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>total<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> k <span class="token operator">||</span> total<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> k <span class="token operator">||</span> total<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">const</span> n <span class="token operator">=</span> s<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
	<span class="token keyword">let</span> window <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 当前窗口中字符的数量</span>
	<span class="token keyword">let</span> res <span class="token operator">=</span> n<span class="token punctuation">;</span> <span class="token comment">// 结果初始化为字符串长度</span>
	<span class="token keyword">let</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">let</span> right <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

	<span class="token comment">// 滑动窗口</span>
	<span class="token keyword">while</span> <span class="token punctuation">(</span>right <span class="token operator">&lt;</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token comment">// 扩展右边界</span>
		window<span class="token punctuation">[</span>s<span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span>right<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token string">&#39;a&#39;</span><span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>
		right<span class="token operator">++</span><span class="token punctuation">;</span>

		<span class="token comment">// 收缩左边界，使得窗口内字符数量满足条件</span>
		<span class="token keyword">while</span> <span class="token punctuation">(</span>
			window<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&gt;</span> total<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">-</span> k <span class="token operator">||</span>
			window<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&gt;</span> total<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> k <span class="token operator">||</span>
			window<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">&gt;</span> total<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">-</span> k
		<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			window<span class="token punctuation">[</span>s<span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span>left<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token string">&#39;a&#39;</span><span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">--</span><span class="token punctuation">;</span>
			left<span class="token operator">++</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>

		<span class="token comment">// 更新结果：最短前缀和后缀长度</span>
		res <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> n <span class="token operator">-</span> <span class="token punctuation">(</span>right <span class="token operator">-</span> left<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">return</span> res<span class="token punctuation">;</span> <span class="token comment">// 返回结果</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="相关题目" tabindex="-1"><a class="header-anchor" href="#相关题目" aria-hidden="true">#</a> 相关题目</h2>`,36),x=n("thead",null,[n("tr",null,[n("th",{style:{"text-align":"center"}},"题号"),n("th",{style:{"text-align":"left"}},"标题"),n("th",{style:{"text-align":"center"}},"题解"),n("th",{style:{"text-align":"left"}},"标签"),n("th",{style:{"text-align":"center"}},"难度"),n("th",{style:{"text-align":"center"}},"力扣")])],-1),q=n("td",{style:{"text-align":"center"}},"88",-1),C=n("td",{style:{"text-align":"left"}},"合并两个有序数组",-1),E={style:{"text-align":"center"}},A={style:{"text-align":"left"}},I=n("code",null,"数组",-1),L=n("code",null,"双指针",-1),N=n("code",null,"排序",-1),V=n("td",{style:{"text-align":"center"}},"🟢",-1),O={style:{"text-align":"center"}},j={href:"https://leetcode.cn/problems/merge-sorted-array",target:"_blank",rel:"noopener noreferrer"},B={href:"https://leetcode.com/problems/merge-sorted-array",target:"_blank",rel:"noopener noreferrer"},R=n("td",{style:{"text-align":"center"}},"143",-1),T=n("td",{style:{"text-align":"left"}},"重排链表",-1),Y={style:{"text-align":"center"}},M={style:{"text-align":"left"}},K=n("code",null,"栈",-1),S=n("code",null,"递归",-1),z=n("code",null,"链表",-1),D=n("code",null,"1+",-1),F=n("td",{style:{"text-align":"center"}},"🟠",-1),G={style:{"text-align":"center"}},H={href:"https://leetcode.cn/problems/reorder-list",target:"_blank",rel:"noopener noreferrer"},J={href:"https://leetcode.com/problems/reorder-list",target:"_blank",rel:"noopener noreferrer"},P=n("td",{style:{"text-align":"center"}},"1652",-1),Q=n("td",{style:{"text-align":"left"}},"拆炸弹",-1),U={style:{"text-align":"center"}},W={style:{"text-align":"left"}},X=n("code",null,"数组",-1),Z=n("code",null,"滑动窗口",-1),$=n("td",{style:{"text-align":"center"}},"🟢",-1),nn={style:{"text-align":"center"}},sn={href:"https://leetcode.cn/problems/defuse-the-bomb",target:"_blank",rel:"noopener noreferrer"},tn={href:"https://leetcode.com/problems/defuse-the-bomb",target:"_blank",rel:"noopener noreferrer"};function an(en,on){const p=c("font"),e=c("RouterLink"),o=c("ExternalLinkIcon");return r(),i("div",null,[h,n("p",null,[s("🟠 "),t(p,{color:"#ffb800"},{default:a(()=>[s("Medium")]),_:1}),s("  🔖  "),t(e,{to:"/tag/hash-table.html"},{default:a(()=>[m]),_:1}),s(),t(e,{to:"/tag/string.html"},{default:a(()=>[b]),_:1}),s(),t(e,{to:"/tag/sliding-window.html"},{default:a(()=>[_]),_:1}),s("  🔗 "),n("a",g,[f,t(o)]),s(),n("a",v,[y,t(o)])]),w,d(" prettier-ignore "),n("table",null,[x,n("tbody",null,[n("tr",null,[q,C,n("td",E,[t(e,{to:"/problem/0088.html"},{default:a(()=>[s("[✓]")]),_:1})]),n("td",A,[t(e,{to:"/tag/array.html"},{default:a(()=>[I]),_:1}),s(),t(e,{to:"/tag/two-pointers.html"},{default:a(()=>[L]),_:1}),s(),t(e,{to:"/tag/sorting.html"},{default:a(()=>[N]),_:1})]),V,n("td",O,[n("a",j,[s("🀄️"),t(o)]),s(),n("a",B,[s("🔗"),t(o)])])]),n("tr",null,[R,T,n("td",Y,[t(e,{to:"/problem/0143.html"},{default:a(()=>[s("[✓]")]),_:1})]),n("td",M,[t(e,{to:"/tag/stack.html"},{default:a(()=>[K]),_:1}),s(),t(e,{to:"/tag/recursion.html"},{default:a(()=>[S]),_:1}),s(),t(e,{to:"/tag/linked-list.html"},{default:a(()=>[z]),_:1}),s(),D]),F,n("td",G,[n("a",H,[s("🀄️"),t(o)]),s(),n("a",J,[s("🔗"),t(o)])])]),n("tr",null,[P,Q,n("td",U,[t(e,{to:"/problem/1652.html"},{default:a(()=>[s("[✓]")]),_:1})]),n("td",W,[t(e,{to:"/tag/array.html"},{default:a(()=>[X]),_:1}),s(),t(e,{to:"/tag/sliding-window.html"},{default:a(()=>[Z]),_:1})]),$,n("td",nn,[n("a",sn,[s("🀄️"),t(o)]),s(),n("a",tn,[s("🔗"),t(o)])])])])])])}const pn=l(k,[["render",an],["__file","2516.html.vue"]]);export{pn as default};
