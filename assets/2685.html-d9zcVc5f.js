import{_ as i,r as p,o as l,c as u,a as n,b as s,d as a,w as t,f as r,e as d}from"./app-fBVbqwGY.js";const k={},g=n("h1",{id:"_2685-统计完全连通分量的数量",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_2685-统计完全连通分量的数量","aria-hidden":"true"},"#"),s(" 2685. 统计完全连通分量的数量")],-1),h=n("code",null,"深度优先搜索",-1),m=n("code",null,"广度优先搜索",-1),v=n("code",null,"图",-1),b={href:"https://leetcode.cn/problems/count-the-number-of-complete-components",target:"_blank",rel:"noopener noreferrer"},f=n("code",null,"力扣",-1),_={href:"https://leetcode.com/problems/count-the-number-of-complete-components",target:"_blank",rel:"noopener noreferrer"},y=n("code",null,"LeetCode",-1),w=d(`<h2 id="题目" tabindex="-1"><a class="header-anchor" href="#题目" aria-hidden="true">#</a> 题目</h2><p>You are given an integer <code>n</code>. There is an <strong>undirected</strong> graph with <code>n</code> vertices, numbered from <code>0</code> to <code>n - 1</code>. You are given a 2D integer array <code>edges</code> where <code>edges[i] = [ai, bi]</code> denotes that there exists an <strong>undirected</strong> edge connecting vertices <code>ai</code> and <code>bi</code>.</p><p>Return <em>the number of<strong>complete connected components</strong> of the graph</em>.</p><p>A <strong>connected component</strong> is a subgraph of a graph in which there exists a path between any two vertices, and no vertex of the subgraph shares an edge with a vertex outside of the subgraph.</p><p>A connected component is said to be <strong>complete</strong> if there exists an edge between every pair of its vertices.</p><p><strong>Example 1:</strong></p><figure><img src="https://assets.leetcode.com/uploads/2023/04/11/screenshot-from-2023-04-11-23-31-23.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><blockquote><p>Input: n = 6, edges = [[0,1],[0,2],[1,2],[3,4]]</p><p>Output: 3</p><p>Explanation: From the picture above, one can see that all of the components of this graph are complete.</p></blockquote><p><strong>Example 2:</strong></p><figure><img src="https://assets.leetcode.com/uploads/2023/04/11/screenshot-from-2023-04-11-23-32-00.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><blockquote><p>Input: n = 6, edges = [[0,1],[0,2],[1,2],[3,4],[3,5]]</p><p>Output: 1</p><p>Explanation: The component containing vertices 0, 1, and 2 is complete since there is an edge between every pair of two vertices. On the other hand, the component containing vertices 3, 4, and 5 is not complete since there is no edge between vertices 4 and 5. Thus, the number of complete components in this graph is 1.</p></blockquote><p><strong>Constraints:</strong></p><ul><li><code>1 &lt;= n &lt;= 50</code></li><li><code>0 &lt;= edges.length &lt;= n * (n - 1) / 2</code></li><li><code>edges[i].length == 2</code></li><li><code>0 &lt;= ai, bi &lt;= n - 1</code></li><li><code>ai != bi</code></li><li>There are no repeated edges.</li></ul><h2 id="题目大意" tabindex="-1"><a class="header-anchor" href="#题目大意" aria-hidden="true">#</a> 题目大意</h2><p>给你一个整数 <code>n</code> 。现有一个包含 <code>n</code> 个顶点的 <strong>无向</strong> 图，顶点按从 <code>0</code> 到 <code>n - 1</code> 编号。给你一个二维整数数组 <code>edges</code> 其中 <code>edges[i] = [ai, bi]</code> 表示顶点 <code>ai</code> 和 <code>bi</code> 之间存在一条 <strong>无向</strong> 边。</p><p>返回图中 <strong>完全连通分量</strong> 的数量。</p><p>如果在子图中任意两个顶点之间都存在路径，并且子图中没有任何一个顶点与子图外部的顶点共享边，则称其为 <strong>连通分量</strong> 。</p><p>如果连通分量中每对节点之间都存在一条边，则称其为 <strong>完全连通分量</strong> 。</p><p><strong>示例 1：</strong></p><figure><img src="https://assets.leetcode.com/uploads/2023/04/11/screenshot-from-2023-04-11-23-31-23.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><blockquote><p><strong>输入：</strong> n = 6, edges = [[0,1],[0,2],[1,2],[3,4]]</p><p><strong>输出：</strong> 3</p><p><strong>解释：</strong> 如上图所示，可以看到此图所有分量都是完全连通分量。</p></blockquote><p><strong>示例 2：</strong></p><figure><img src="https://assets.leetcode.com/uploads/2023/04/11/screenshot-from-2023-04-11-23-32-00.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><blockquote><p><strong>输入：</strong> n = 6, edges = [[0,1],[0,2],[1,2],[3,4],[3,5]]</p><p><strong>输出：</strong> 1</p><p><strong>解释：</strong> 包含节点 0、1 和 2 的分量是完全连通分量，因为每对节点之间都存在一条边。</p><p>包含节点 3 、4 和 5 的分量不是完全连通分量，因为节点 4 和 5 之间不存在边。</p><p>因此，在图中完全连接分量的数量是 1 。</p></blockquote><p><strong>提示：</strong></p><ul><li><code>1 &lt;= n &lt;= 50</code></li><li><code>0 &lt;= edges.length &lt;= n * (n - 1) / 2</code></li><li><code>edges[i].length == 2</code></li><li><code>0 &lt;= ai, bi &lt;= n - 1</code></li><li><code>ai != bi</code></li><li>不存在重复的边</li></ul><h2 id="解题思路" tabindex="-1"><a class="header-anchor" href="#解题思路" aria-hidden="true">#</a> 解题思路</h2><ol><li><p><strong>构建图</strong>：</p><ul><li>使用邻接表 <code>graph</code> 表示图结构，<code>graph[a]</code> 存储与节点 <code>a</code> 相邻的节点列表。</li></ul></li><li><p><strong>DFS 遍历</strong>：</p><ul><li>对每个未访问的节点 <code>i</code> 进行 DFS 遍历，找到当前的连通分量 <code>component</code>。</li><li>DFS 过程中： <ul><li><code>component</code> 记录当前连通分量内的所有节点。</li><li><code>visited</code> 集合记录已访问的节点，避免重复遍历。</li></ul></li></ul></li><li><p><strong>检查是否为完全图</strong>：</p><ul><li>对于一个连通分量 <code>component</code>： <ul><li><strong>完全图性质</strong>：对于每个节点 <code>node</code>，应有 <code>graph[node]</code> 的邻居数量 == <code>component.size - 1</code>。</li><li>如果所有节点都满足上述条件，则该连通分量为完全图。</li></ul></li></ul></li><li><p><strong>统计满足条件的连通分量数量</strong>。</p></li></ol><h4 id="复杂度分析" tabindex="-1"><a class="header-anchor" href="#复杂度分析" aria-hidden="true">#</a> 复杂度分析</h4><ul><li><p><strong>时间复杂度</strong>：<code>O(n + m)</code>。</p><ul><li>遍历每个节点 <code>O(n)</code>。</li><li>DFS 遍历所有边 <code>O(m)</code>。</li><li>对每个连通分量进行完全性检查，最差情况 <code>O(n)</code>。</li></ul></li><li><p><strong>空间复杂度</strong>：<code>O(n + m)</code>。</p><ul><li><code>graph</code> 邻接表存储 <code>m</code> 条边：<code>O(m)</code>。</li><li><code>visited</code> 和 <code>component</code> 集合最差情况 <code>O(n)</code>。</li></ul></li></ul><h2 id="代码" tabindex="-1"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">}</span></span> <span class="token parameter">n</span>
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span> <span class="token parameter">edges</span>
 * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">}</span></span>
 */</span>
<span class="token keyword">var</span> <span class="token function-variable function">countCompleteComponents</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">n<span class="token punctuation">,</span> edges</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">let</span> graph <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

	<span class="token comment">// 构建图</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> <span class="token punctuation">[</span>a<span class="token punctuation">,</span> b<span class="token punctuation">]</span> <span class="token keyword">of</span> edges<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>graph<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			graph<span class="token punctuation">[</span>a<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>graph<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			graph<span class="token punctuation">[</span>b<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		graph<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
		graph<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">let</span> visited <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

	<span class="token comment">// 遍历每个节点，查找连通分量</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>visited<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">let</span> component <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token function">dfs</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> component<span class="token punctuation">,</span> visited<span class="token punctuation">)</span><span class="token punctuation">;</span>

			<span class="token comment">// 判断该连通分量是否是完全图</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span>
				<span class="token punctuation">[</span><span class="token operator">...</span>component<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">every</span><span class="token punctuation">(</span>
					<span class="token punctuation">(</span><span class="token parameter">node</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span>graph<span class="token punctuation">[</span>node<span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length <span class="token operator">===</span> component<span class="token punctuation">.</span>size <span class="token operator">-</span> <span class="token number">1</span>
				<span class="token punctuation">)</span>
			<span class="token punctuation">)</span> <span class="token punctuation">{</span>
				count<span class="token operator">++</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">return</span> count<span class="token punctuation">;</span>

	<span class="token comment">// DFS 遍历</span>
	<span class="token keyword">function</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token parameter">node<span class="token punctuation">,</span> component<span class="token punctuation">,</span> visited</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		component<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>
		visited<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> neighbor <span class="token keyword">of</span> graph<span class="token punctuation">[</span>node<span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>visited<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>neighbor<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
				<span class="token function">dfs</span><span class="token punctuation">(</span>neighbor<span class="token punctuation">,</span> component<span class="token punctuation">,</span> visited<span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="相关题目" tabindex="-1"><a class="header-anchor" href="#相关题目" aria-hidden="true">#</a> 相关题目</h2>`,33),x=n("thead",null,[n("tr",null,[n("th",{style:{"text-align":"center"}},"题号"),n("th",{style:{"text-align":"left"}},"标题"),n("th",{style:{"text-align":"center"}},"题解"),n("th",{style:{"text-align":"left"}},"标签"),n("th",{style:{"text-align":"center"}},"难度"),n("th",{style:{"text-align":"center"}},"力扣")])],-1),O=n("td",{style:{"text-align":"center"}},"323",-1),q=n("td",{style:{"text-align":"left"}},"无向图中连通分量的数目 🔒",-1),S=n("td",{style:{"text-align":"center"}},null,-1),C={style:{"text-align":"left"}},E=n("code",null,"深度优先搜索",-1),z=n("code",null,"广度优先搜索",-1),D=n("code",null,"并查集",-1),F=n("code",null,"1+",-1),L=n("td",{style:{"text-align":"center"}},"🟠",-1),N={style:{"text-align":"center"}},T={href:"https://leetcode.cn/problems/number-of-connected-components-in-an-undirected-graph",target:"_blank",rel:"noopener noreferrer"},V={href:"https://leetcode.com/problems/number-of-connected-components-in-an-undirected-graph",target:"_blank",rel:"noopener noreferrer"};function I(j,B){const c=p("font"),e=p("RouterLink"),o=p("ExternalLinkIcon");return l(),u("div",null,[g,n("p",null,[s("🟠 "),a(c,{color:"#ffb800"},{default:t(()=>[s("Medium")]),_:1}),s("  🔖  "),a(e,{to:"/tag/depth-first-search.html"},{default:t(()=>[h]),_:1}),s(),a(e,{to:"/tag/breadth-first-search.html"},{default:t(()=>[m]),_:1}),s(),a(e,{to:"/tag/graph.html"},{default:t(()=>[v]),_:1}),s("  🔗 "),n("a",b,[f,a(o)]),s(),n("a",_,[y,a(o)])]),w,r(" prettier-ignore "),n("table",null,[x,n("tbody",null,[n("tr",null,[O,q,S,n("td",C,[a(e,{to:"/tag/depth-first-search.html"},{default:t(()=>[E]),_:1}),s(),a(e,{to:"/tag/breadth-first-search.html"},{default:t(()=>[z]),_:1}),s(),a(e,{to:"/tag/union-find.html"},{default:t(()=>[D]),_:1}),s(),F]),L,n("td",N,[n("a",T,[s("🀄️"),a(o)]),s(),n("a",V,[s("🔗"),a(o)])])])])])])}const A=i(k,[["render",I],["__file","2685.html.vue"]]);export{A as default};
