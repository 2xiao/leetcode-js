import{_ as l}from"./705-6E08G9Ez.js";import{_ as i,r as p,o as u,c as d,a as n,b as s,d as a,w as t,f as r,e as k}from"./app-B5EG-zH0.js";const h={},m=n("h1",{id:"_705-设计哈希集合",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_705-设计哈希集合","aria-hidden":"true"},"#"),s(" 705. 设计哈希集合")],-1),v=n("code",null,"设计",-1),b=n("code",null,"数组",-1),y=n("code",null,"哈希表",-1),_=n("code",null,"链表",-1),f=n("code",null,"哈希函数",-1),g={href:"https://leetcode.cn/problems/design-hashset",target:"_blank",rel:"noopener noreferrer"},w=n("code",null,"力扣",-1),x={href:"https://leetcode.com/problems/design-hashset",target:"_blank",rel:"noopener noreferrer"},S=n("code",null,"LeetCode",-1),H=k('<h2 id="题目" tabindex="-1"><a class="header-anchor" href="#题目" aria-hidden="true">#</a> 题目</h2><p>Design a HashSet without using any built-in hash table libraries.</p><p>Implement <code>MyHashSet</code> class:</p><ul><li><code>void add(key)</code> Inserts the value <code>key</code> into the HashSet.</li><li><code>bool contains(key)</code> Returns whether the value <code>key</code> exists in the HashSet or not.</li><li><code>void remove(key)</code> Removes the value <code>key</code> in the HashSet. If <code>key</code> does not exist in the HashSet, do nothing.</li></ul><p><strong>Example 1:</strong></p><blockquote><p><strong>Input</strong></p><p>[&quot;MyHashSet&quot;, &quot;add&quot;, &quot;add&quot;, &quot;contains&quot;, &quot;contains&quot;, &quot;add&quot;, &quot;contains&quot;, &quot;remove&quot;, &quot;contains&quot;]</p><p>[[], [1], [2], [1], [3], [2], [2], [2], [2]]</p><p><strong>Output</strong></p><p>[null, null, null, true, false, null, true, null, false]</p><p><strong>Explanation</strong></p><p>MyHashSet myHashSet = new MyHashSet();</p><p>myHashSet.add(1); // set = [1]</p><p>myHashSet.add(2); // set = [1, 2]</p><p>myHashSet.contains(1); // return True</p><p>myHashSet.contains(3); // return False, (not found)</p><p>myHashSet.add(2); // set = [1, 2]</p><p>myHashSet.contains(2); // return True</p><p>myHashSet.remove(2); // set = [1]</p><p>myHashSet.contains(2); // return False,(already removed)</p></blockquote><p><strong>Constraints:</strong></p><ul><li><code>0 &lt;= key &lt;= 10^6</code></li><li>At most <code>104</code> calls will be made to <code>add</code>, <code>remove</code>, and <code>contains</code>.</li></ul><h2 id="题目大意" tabindex="-1"><a class="header-anchor" href="#题目大意" aria-hidden="true">#</a> 题目大意</h2><p>不使用任何内建的哈希表库设计一个哈希集合（HashSet）。</p><p>实现 <code>MyHashSet</code> 类：</p><ul><li><code>void add(key)</code> 向哈希集合中插入值 <code>key</code> 。</li><li><code>bool contains(key)</code> 返回哈希集合中是否存在这个值 <code>key</code> 。</li><li><code>void remove(key)</code> 将给定值 <code>key</code> 从哈希集合中删除。如果哈希集合中没有这个值，什么也不做。</li></ul><h2 id="解题思路" tabindex="-1"><a class="header-anchor" href="#解题思路" aria-hidden="true">#</a> 解题思路</h2><p>链地址法：</p><ul><li>设哈希表的大小为 <code>base</code>，则可以设计一个简单的哈希函数：<code>hash(x) = x mod base</code>；</li><li>开辟一个大小为 <code>base</code> 的数组，数组的每个位置是一个链表。当计算出哈希值之后，就插入到对应位置的链表当中；</li><li>由于使用整数除法作为哈希函数，为了尽可能避免冲突，应当将 <code>base</code> 取为一个质数，如 <code>base = 769</code>；</li></ul><figure><img src="'+l+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="复杂度分析" tabindex="-1"><a class="header-anchor" href="#复杂度分析" aria-hidden="true">#</a> 复杂度分析</h4><ul><li><strong>时间复杂度</strong>：<code>O(n / b)</code>。其中 <code>n</code> 为哈希表中的元素数量，<code>b</code> 为链表的数量，假设哈希值是均匀分布的，则每个链表大概长度为 <code>n / b</code>；</li><li><strong>空间复杂度</strong>：<code>O(n+b)</code>。</li></ul><h2 id="代码" tabindex="-1"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">MyHashSet</span> <span class="token punctuation">{</span>
	<span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span>base <span class="token operator">=</span> <span class="token number">769</span><span class="token punctuation">;</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span>data <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>base<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token comment">// @param {number} key</span>
	<span class="token comment">// @return {number}</span>
	<span class="token function">hash</span><span class="token punctuation">(</span><span class="token parameter">key</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> key <span class="token operator">%</span> <span class="token keyword">this</span><span class="token punctuation">.</span>base<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token comment">// @param {number} key</span>
	<span class="token comment">// @return {void}</span>
	<span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter">key</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">const</span> h <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">hash</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> item <span class="token keyword">of</span> <span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">[</span>h<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span>item <span class="token operator">===</span> key<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">[</span>h<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token comment">// @param {number} key</span>
	<span class="token comment">// @return {void}</span>
	<span class="token function">remove</span><span class="token punctuation">(</span><span class="token parameter">key</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">const</span> h <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">hash</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">const</span> hList <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">[</span>h<span class="token punctuation">]</span><span class="token punctuation">;</span>
		<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> hList<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span>hList<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">===</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
				hList<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
				<span class="token keyword">return</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>

	<span class="token comment">// @param {number} key</span>
	<span class="token comment">// @return {boolean}</span>
	<span class="token function">contains</span><span class="token punctuation">(</span><span class="token parameter">key</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">const</span> h <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">hash</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> item <span class="token keyword">of</span> <span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">[</span>h<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span>item <span class="token operator">===</span> key<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token doc-comment comment">/**
 * Your MyHashSet object will be instantiated and called as such:
 * var obj = new MyHashSet()
 * obj.add(key)
 * obj.remove(key)
 * var param_3 = obj.contains(key)
 */</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="相关题目" tabindex="-1"><a class="header-anchor" href="#相关题目" aria-hidden="true">#</a> 相关题目</h2>`,21),q=n("thead",null,[n("tr",null,[n("th",{style:{"text-align":"center"}},"题号"),n("th",{style:{"text-align":"left"}},"标题"),n("th",{style:{"text-align":"center"}},"题解"),n("th",{style:{"text-align":"left"}},"标签"),n("th",{style:{"text-align":"center"}},"难度"),n("th",{style:{"text-align":"center"}},"力扣")])],-1),L=n("td",{style:{"text-align":"center"}},"706",-1),j=n("td",{style:{"text-align":"left"}},"设计哈希映射",-1),M={style:{"text-align":"center"}},E={style:{"text-align":"left"}},I=n("code",null,"设计",-1),C=n("code",null,"数组",-1),N=n("code",null,"哈希表",-1),V=n("code",null,"2+",-1),R=n("td",{style:{"text-align":"center"}},"🟢",-1),A={style:{"text-align":"center"}},B={href:"https://leetcode.cn/problems/design-hashmap",target:"_blank",rel:"noopener noreferrer"},O={href:"https://leetcode.com/problems/design-hashmap",target:"_blank",rel:"noopener noreferrer"},T=n("td",{style:{"text-align":"center"}},"1206",-1),F=n("td",{style:{"text-align":"left"}},"设计跳表",-1),z=n("td",{style:{"text-align":"center"}},null,-1),D={style:{"text-align":"left"}},Y=n("code",null,"设计",-1),G=n("code",null,"链表",-1),J=n("td",{style:{"text-align":"center"}},"🔴",-1),K={style:{"text-align":"center"}},P={href:"https://leetcode.cn/problems/design-skiplist",target:"_blank",rel:"noopener noreferrer"},Q={href:"https://leetcode.com/problems/design-skiplist",target:"_blank",rel:"noopener noreferrer"};function U(W,X){const c=p("font"),e=p("RouterLink"),o=p("ExternalLinkIcon");return u(),d("div",null,[m,n("p",null,[s("🟢 "),a(c,{color:"#15bd66"},{default:t(()=>[s("Easy")]),_:1}),s("  🔖  "),a(e,{to:"/tag/design.html"},{default:t(()=>[v]),_:1}),s(),a(e,{to:"/tag/array.html"},{default:t(()=>[b]),_:1}),s(),a(e,{to:"/tag/hash-table.html"},{default:t(()=>[y]),_:1}),s(),a(e,{to:"/tag/linked-list.html"},{default:t(()=>[_]),_:1}),s(),a(e,{to:"/tag/hash-function.html"},{default:t(()=>[f]),_:1}),s("  🔗 "),n("a",g,[w,a(o)]),s(),n("a",x,[S,a(o)])]),H,r(" prettier-ignore "),n("table",null,[q,n("tbody",null,[n("tr",null,[L,j,n("td",M,[a(e,{to:"/problem/0706.html"},{default:t(()=>[s("[✓]")]),_:1})]),n("td",E,[a(e,{to:"/tag/design.html"},{default:t(()=>[I]),_:1}),s(),a(e,{to:"/tag/array.html"},{default:t(()=>[C]),_:1}),s(),a(e,{to:"/tag/hash-table.html"},{default:t(()=>[N]),_:1}),s(),V]),R,n("td",A,[n("a",B,[s("🀄️"),a(o)]),s(),n("a",O,[s("🔗"),a(o)])])]),n("tr",null,[T,F,z,n("td",D,[a(e,{to:"/tag/design.html"},{default:t(()=>[Y]),_:1}),s(),a(e,{to:"/tag/linked-list.html"},{default:t(()=>[G]),_:1})]),J,n("td",K,[n("a",P,[s("🀄️"),a(o)]),s(),n("a",Q,[s("🔗"),a(o)])])])])])])}const nn=i(h,[["render",U],["__file","0705.html.vue"]]);export{nn as default};
