import{_ as l,r as e,o as u,c as i,a as n,b as s,d as t,w as a,e as r}from"./app-aQeLbVW9.js";const d={},k=n("h1",{id:"_1079-活字印刷",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_1079-活字印刷","aria-hidden":"true"},"#"),s(" 1079. 活字印刷")],-1),b=n("code",null,"哈希表",-1),m=n("code",null,"字符串",-1),h=n("code",null,"回溯",-1),g=n("code",null,"计数",-1),q={href:"https://leetcode.cn/problems/letter-tile-possibilities",target:"_blank",rel:"noopener noreferrer"},v=n("code",null,"力扣",-1),_={href:"https://leetcode.com/problems/letter-tile-possibilities",target:"_blank",rel:"noopener noreferrer"},f=n("code",null,"LeetCode",-1),A=r(`<h2 id="题目" tabindex="-1"><a class="header-anchor" href="#题目" aria-hidden="true">#</a> 题目</h2><p>You have <code>n</code> <code>tiles</code>, where each tile has one letter <code>tiles[i]</code> printed on it.</p><p>Return <em>the number of possible non-empty sequences of letters</em> you can make using the letters printed on those <code>tiles</code>.</p><p><strong>Example 1:</strong></p><blockquote><p>Input: tiles = &quot;AAB&quot;</p><p>Output: 8</p><p>Explanation: The possible sequences are &quot;A&quot;, &quot;B&quot;, &quot;AA&quot;, &quot;AB&quot;, &quot;BA&quot;, &quot;AAB&quot;, &quot;ABA&quot;, &quot;BAA&quot;.</p></blockquote><p><strong>Example 2:</strong></p><blockquote><p>Input: tiles = &quot;AAABBC&quot;</p><p>Output: 188</p></blockquote><p><strong>Example 3:</strong></p><blockquote><p>Input: tiles = &quot;V&quot;</p><p>Output: 1</p></blockquote><p><strong>Constraints:</strong></p><ul><li><code>1 &lt;= tiles.length &lt;= 7</code></li><li><code>tiles</code> consists of uppercase English letters.</li></ul><h2 id="题目大意" tabindex="-1"><a class="header-anchor" href="#题目大意" aria-hidden="true">#</a> 题目大意</h2><p>你有一套活字字模 <code>tiles</code>，其中每个字模上都刻有一个字母 <code>tiles[i]</code>。返回你可以印出的非空字母序列的数目。</p><p><strong>注意：</strong> 本题中，每个活字字模只能使用一次。</p><p><strong>示例 1：</strong></p><blockquote><p><strong>输入：</strong> &quot;AAB&quot;</p><p><strong>输出：</strong> 8</p><p><strong>解释：</strong> 可能的序列为 &quot;A&quot;, &quot;B&quot;, &quot;AA&quot;, &quot;AB&quot;, &quot;BA&quot;, &quot;AAB&quot;, &quot;ABA&quot;, &quot;BAA&quot;。</p></blockquote><p><strong>示例 2：</strong></p><blockquote><p><strong>输入：</strong> &quot;AAABBC&quot;</p><p><strong>输出：</strong> 188</p></blockquote><p><strong>示例 3：</strong></p><blockquote><p><strong>输入：</strong> &quot;V&quot;</p><p><strong>输出：</strong> 1</p></blockquote><p><strong>提示：</strong></p><ul><li><code>1 &lt;= tiles.length &lt;= 7</code></li><li><code>tiles</code> 由大写英文字母组成</li></ul><h2 id="解题思路" tabindex="-1"><a class="header-anchor" href="#解题思路" aria-hidden="true">#</a> 解题思路</h2><p>本题的目标是计算出 <code>tiles</code> 中所有可能的排列数，包括长度不同的排列。由于 <code>tiles</code> 可能包含重复字符，直接使用全排列的方式会导致重复计算，因此采用<strong>回溯 + 计数数组</strong>的方式。</p><ol><li><strong>预处理字符频次</strong></li></ol><p>由于 <code>tiles</code> 只包含大写英文字母（A-Z），我们可以使用<strong>长度为 26 的数组</strong> <code>count</code> 来记录每个字符的出现次数：</p><ul><li>例如 <code>tiles = &quot;AAB&quot;</code>，那么 <code>count = [2, 1, 0, 0, ..., 0]</code>。</li></ul><ol start="2"><li><strong>回溯生成排列</strong></li></ol><p>递归函数 <code>backtrack(count)</code> 负责构造所有可能的排列：</p><ol><li><strong>遍历 26 个字母</strong>，如果 <code>count[i] &gt; 0</code>，表示该字母可以使用： <ul><li>选择该字母，将其 <code>count[i]--</code>（标记已使用）。</li><li>递归调用 <code>backtrack(count)</code> 计算当前状态下的所有可能排列数。</li><li>递归返回后，将 <code>count[i]++</code> 复原，进行下一次尝试（<strong>回溯</strong>）。</li></ul></li><li>每次选择一个字母都会生成一个新的排列，因此 <code>total += 1 + backtrack(count)</code>。</li></ol><h4 id="复杂度分析" tabindex="-1"><a class="header-anchor" href="#复杂度分析" aria-hidden="true">#</a> 复杂度分析</h4><ul><li><p><strong>时间复杂度</strong>：<code>O(n!)</code>，</p><ul><li><code>tiles</code> 长度为 <code>n</code>，最坏情况下 <code>tiles</code> 中所有字符不同，则问题等价于全排列，复杂度接近 <code>O(n!)</code>。</li><li>但由于存在<strong>重复字符</strong>，实际复杂度远小于 <code>O(n!)</code>，大约 <code>O(k^n)</code>，其中 <code>k</code> 为不同字符的个数，最大为 26。</li></ul></li><li><p><strong>空间复杂度</strong>：<code>O(n)</code></p><ul><li><code>count</code> 数组固定为 26，<code>O(1)</code>。</li><li>递归深度最多 <code>O(n)</code>，因此总空间复杂度为 <code>O(n)</code>。</li></ul></li></ul><h2 id="代码" tabindex="-1"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>string<span class="token punctuation">}</span></span> <span class="token parameter">tiles</span>
 * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">}</span></span>
 */</span>
<span class="token keyword">var</span> <span class="token function-variable function">numTilePossibilities</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">tiles</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">26</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> tile <span class="token keyword">of</span> tiles<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		count<span class="token punctuation">[</span>tile<span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">65</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">const</span> <span class="token function-variable function">backtrack</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">count</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
		<span class="token keyword">let</span> total <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
		<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">26</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span>count<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
				<span class="token keyword">continue</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span>
			count<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">--</span><span class="token punctuation">;</span>
			total <span class="token operator">+=</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token function">backtrack</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>
			count<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">return</span> total<span class="token punctuation">;</span>
	<span class="token punctuation">}</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token function">backtrack</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,34);function B(w,y){const c=e("font"),o=e("RouterLink"),p=e("ExternalLinkIcon");return u(),i("div",null,[k,n("p",null,[s("🟠 "),t(c,{color:"#ffb800"},{default:a(()=>[s("Medium")]),_:1}),s("  🔖  "),t(o,{to:"/tag/hash-table.html"},{default:a(()=>[b]),_:1}),s(),t(o,{to:"/tag/string.html"},{default:a(()=>[m]),_:1}),s(),t(o,{to:"/tag/backtracking.html"},{default:a(()=>[h]),_:1}),s(),t(o,{to:"/tag/counting.html"},{default:a(()=>[g]),_:1}),s("  🔗 "),n("a",q,[v,t(p)]),s(),n("a",_,[f,t(p)])]),A])}const O=l(d,[["render",B],["__file","1079.html.vue"]]);export{O as default};
