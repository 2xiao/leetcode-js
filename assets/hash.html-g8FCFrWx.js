import{_ as u}from"./705-6E08G9Ez.js";import{_ as r,r as p,o as d,c as k,a as n,b as s,d as a,w as t,f as c,e as l}from"./app-fBVbqwGY.js";const m="/leetcode-js/assets/2-5-1-uAPN8fXL.png",h={},b=l('<h1 id="_2-5-哈希表" tabindex="-1"><a class="header-anchor" href="#_2-5-哈希表" aria-hidden="true">#</a> 2.5 哈希表</h1><h2 id="哈希表的定义" tabindex="-1"><a class="header-anchor" href="#哈希表的定义" aria-hidden="true">#</a> 哈希表的定义</h2><div class="hint-container info"><p class="hint-container-title">定义</p><p><strong>哈希表（Hash Table）</strong> ：也叫做散列表。是根据关键码值（Key Value）直接进行访问的数据结构。</p></div><p>哈希表通过 <strong>键 <code>key</code></strong> 和 <strong>映射函数 <code>Hash(key)</code></strong> 计算出对应的 <strong>值 <code>value</code></strong> ，把关键码值映射到表中一个位置来访问记录，以加快查找的速度。这个映射函数叫做 <strong>哈希函数（散列函数）</strong> ，存放记录的数组叫做 <strong>哈希表（散列表）</strong> 。</p><figure><img src="'+m+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>哈希表的两个核心问题是：<strong>哈希函数设计</strong> 和 <strong>哈希冲突解决</strong> 。</p><h2 id="哈希函数" tabindex="-1"><a class="header-anchor" href="#哈希函数" aria-hidden="true">#</a> 哈希函数</h2><div class="hint-container info"><p class="hint-container-title">定义</p><p>哈希函数是将哈希表中元素的关键键值映射为元素存储位置的函数。</p></div><p>哈希函数是哈希表中最重要的部分一般来说，哈希函数会满足以下几个条件：</p><ul><li>哈希函数应该易于计算，并且尽量使计算出来的索引值均匀分布；</li><li>哈希函数计算得到的哈希值是一个固定长度的非负整数；</li><li>如果 <code>key1 = key2</code>，那 <code>hash(key1) == hash(key2)</code>；</li><li>如果 <code>key1 ≠ key2</code>，那 <code>hash(key1) ≠ hash(key2)</code>；</li></ul><p>常用的哈希函数方法有：直接定址法、除留余数法、平方取中法、基数转换法。</p><h2 id="哈希冲突" tabindex="-1"><a class="header-anchor" href="#哈希冲突" aria-hidden="true">#</a> 哈希冲突</h2><div class="hint-container info"><p class="hint-container-title">定义</p><p><strong>哈希冲突（Hash Collision）</strong> ：不同的关键字通过同一个哈希函数可能得到同一哈希地址，即 <code>key1 ≠ key2</code>，而 <code>Hash(key1) = Hash(key2)</code>，这种现象称为哈希冲突。</p></div>',13),_=n("code",null,"key",-1),v={href:"https://zh.wikipedia.org/wiki/MD5",target:"_blank",rel:"noopener noreferrer"},y={href:"https://zh.wikipedia.org/wiki/SHA%E5%AE%B6%E6%97%8F",target:"_blank",rel:"noopener noreferrer"},g={href:"https://zh.wikipedia.org/wiki/%E5%BE%AA%E7%92%B0%E5%86%97%E9%A4%98%E6%A0%A1%E9%A9%97",target:"_blank",rel:"noopener noreferrer"},f=n("strong",null,"哈希冲突",-1),w=l('<p>解决哈希冲突问题常用的方法有两类，开放寻址法（open addressing）和链表法（chaining）。</p><h3 id="开放寻址法" tabindex="-1"><a class="header-anchor" href="#开放寻址法" aria-hidden="true">#</a> 开放寻址法</h3><p>开放寻址法的核心思想是，如果出现了哈希冲突，就重新探测一个空闲位置，将其插入。</p><p>以线性探测为例，往哈希表中插入数据时，如果某个数据经过哈希函数哈希之后，存储位置已经被占用了，就从当前位置开始，依次往后查找，看是否有空闲位置，直到找到为止。</p><p>当发现哈希值 <code>h</code> 处产生冲突时，从 <code>h</code> 出发，不断地检查 <code>h+1,h+2,h+3,…</code> 这些整数对应的位置。</p><h3 id="链表法" tabindex="-1"><a class="header-anchor" href="#链表法" aria-hidden="true">#</a> 链表法</h3><p>链表法的核心思想是，为每个哈希值维护一个链表，并将具有相同哈希值的元素都放入这一链表当中。</p><p>链表法是一种更加常用的哈希冲突解决方法。相比于开放地址法，链地址法更加简单。</p><h2 id="哈希表的实现" tabindex="-1"><a class="header-anchor" href="#哈希表的实现" aria-hidden="true">#</a> 哈希表的实现</h2><h3 id="哈希集合" tabindex="-1"><a class="header-anchor" href="#哈希集合" aria-hidden="true">#</a> 哈希集合</h3>',10),x={id:"📌-705-设计哈希集合-leetcode",tabindex:"-1"},M=n("a",{class:"header-anchor",href:"#📌-705-设计哈希集合-leetcode","aria-hidden":"true"},"#",-1),j={href:"https://wangfuyou.com/leetcode-js/problem/0705.html",target:"_blank",rel:"noopener noreferrer"},S=n("h4",{id:"💻-题目大意",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#💻-题目大意","aria-hidden":"true"},"#"),s(" 💻 "),n("strong",null,"题目大意")],-1),H=n("p",null,"不使用任何内建的哈希表库设计一个哈希集合（HashSet）。",-1),T=n("p",null,[s("实现 "),n("code",null,"MyHashSet"),s(" 类：")],-1),q=n("ul",null,[n("li",null,[n("code",null,"void add(key)"),s(" 向哈希集合中插入值 "),n("code",null,"key"),s(" 。")]),n("li",null,[n("code",null,"bool contains(key)"),s(" 返回哈希集合中是否存在这个值 "),n("code",null,"key"),s(" 。")]),n("li",null,[n("code",null,"void remove(key)"),s(" 将给定值 "),n("code",null,"key"),s(" 从哈希集合中删除。如果哈希集合中没有这个值，什么也不做。")])],-1),O=n("p",null,[n("strong",null,"示例"),s("：")],-1),N=n("div",{class:"language-javascript line-numbers-mode","data-ext":"js"},[n("pre",{class:"language-javascript"},[n("code",null,[s("MyHashSet myHashSet "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"MyHashSet"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
myHashSet`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"add"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s("      "),n("span",{class:"token comment"},"// set = [1]"),s(`
myHashSet`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"add"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"2"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s("      "),n("span",{class:"token comment"},"// set = [1, 2]"),s(`
myHashSet`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"contains"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(),n("span",{class:"token comment"},"// return True"),s(`
myHashSet`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"contains"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"3"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(),n("span",{class:"token comment"},"// return False, (not found)"),s(`
myHashSet`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"add"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"2"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s("      "),n("span",{class:"token comment"},"// set = [1, 2]"),s(`
myHashSet`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"contains"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"2"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(),n("span",{class:"token comment"},"// return True"),s(`
myHashSet`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"remove"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"2"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s("   "),n("span",{class:"token comment"},"// set = [1]"),s(`
myHashSet`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"contains"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"2"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(),n("span",{class:"token comment"},"// return False, (already removed)"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),A=n("p",null,[n("strong",null,"说明"),s("：")],-1),E=n("ul",null,[n("li",null,[n("code",null,"0 <= key <= 10^6"),s(";")]),n("li",null,[s("最多调用 "),n("code",null,"10^4"),s(" 次 "),n("code",null,"add"),s("、"),n("code",null,"remove"),s(" 和 "),n("code",null,"contains"),s(";")])],-1),L=n("hr",null,null,-1),z=n("h4",{id:"💡-解题思路",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#💡-解题思路","aria-hidden":"true"},"#"),s(" 💡 "),n("strong",null,"解题思路")],-1),J=n("p",null,"链地址法：",-1),I=n("ul",null,[n("li",null,[s("设哈希表的大小为 "),n("code",null,"base"),s("，则可以设计一个简单的哈希函数："),n("code",null,"hash(x) = x mod base"),s("；")]),n("li",null,[s("开辟一个大小为 "),n("code",null,"base"),s(" 的数组，数组的每个位置是一个链表。当计算出哈希值之后，就插入到对应位置的链表当中；")]),n("li",null,[s("由于使用整数除法作为哈希函数，为了尽可能避免冲突，应当将 "),n("code",null,"base"),s(" 取为一个质数，如 "),n("code",null,"base = 769"),s("；")])],-1),C=n("figure",null,[n("img",{src:u,alt:"",tabindex:"0",loading:"lazy"}),n("figcaption")],-1),D=n("ul",null,[n("li",null,[s("时间复杂度："),n("code",null,"O(n / b)"),s("。其中 "),n("code",null,"n"),s(" 为哈希表中的元素数量，"),n("code",null,"b"),s(" 为链表的数量，假设哈希值是均匀分布的，则每个链表大概长度为 "),n("code",null,"n / b"),s("；")]),n("li",null,[s("空间复杂度："),n("code",null,"O(n+b)"),s("。")])],-1),B=n("hr",null,null,-1),V=n("h4",{id:"💎-代码",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#💎-代码","aria-hidden":"true"},"#"),s(" 💎 "),n("strong",null,"代码")],-1),R=n("div",{class:"language-javascript line-numbers-mode","data-ext":"js"},[n("pre",{class:"language-javascript"},[n("code",null,[n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"MyHashSet"),s(),n("span",{class:"token punctuation"},"{"),s(`
	`),n("span",{class:"token function"},"constructor"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
		`),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),s("base "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"769"),n("span",{class:"token punctuation"},";"),s(`
		`),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),s("data "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"Array"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),s("base"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"fill"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"map"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"=>"),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"Array"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
	`),n("span",{class:"token punctuation"},"}"),s(`

	`),n("span",{class:"token comment"},"// @param {number} key"),s(`
	`),n("span",{class:"token comment"},"// @return {number}"),s(`
	`),n("span",{class:"token function"},"hash"),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"key"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
		`),n("span",{class:"token keyword"},"return"),s(" key "),n("span",{class:"token operator"},"%"),s(),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),s("base"),n("span",{class:"token punctuation"},";"),s(`
	`),n("span",{class:"token punctuation"},"}"),s(`

	`),n("span",{class:"token comment"},"// @param {number} key"),s(`
	`),n("span",{class:"token comment"},"// @return {void}"),s(`
	`),n("span",{class:"token function"},"add"),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"key"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
		`),n("span",{class:"token keyword"},"const"),s(" h "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"hash"),n("span",{class:"token punctuation"},"("),s("key"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
		`),n("span",{class:"token keyword"},"for"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"let"),s(" item "),n("span",{class:"token keyword"},"of"),s(),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),s("data"),n("span",{class:"token punctuation"},"["),s("h"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
			`),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("item "),n("span",{class:"token operator"},"==="),s(" key"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token keyword"},"return"),n("span",{class:"token punctuation"},";"),s(`
		`),n("span",{class:"token punctuation"},"}"),s(`
		`),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),s("data"),n("span",{class:"token punctuation"},"["),s("h"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"push"),n("span",{class:"token punctuation"},"("),s("key"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
	`),n("span",{class:"token punctuation"},"}"),s(`

	`),n("span",{class:"token comment"},"// @param {number} key"),s(`
	`),n("span",{class:"token comment"},"// @return {void}"),s(`
	`),n("span",{class:"token function"},"remove"),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"key"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
		`),n("span",{class:"token keyword"},"const"),s(" h "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"hash"),n("span",{class:"token punctuation"},"("),s("key"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
		`),n("span",{class:"token keyword"},"const"),s(" hList "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),s("data"),n("span",{class:"token punctuation"},"["),s("h"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),s(`
		`),n("span",{class:"token keyword"},"for"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"let"),s(" i "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},";"),s(" i "),n("span",{class:"token operator"},"<"),s(" hList"),n("span",{class:"token punctuation"},"."),s("length"),n("span",{class:"token punctuation"},";"),s(" i"),n("span",{class:"token operator"},"++"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
			`),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("hList"),n("span",{class:"token punctuation"},"["),s("i"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token operator"},"==="),s(" key"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
				hList`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"splice"),n("span",{class:"token punctuation"},"("),s("i"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
				`),n("span",{class:"token keyword"},"return"),n("span",{class:"token punctuation"},";"),s(`
			`),n("span",{class:"token punctuation"},"}"),s(`
		`),n("span",{class:"token punctuation"},"}"),s(`
	`),n("span",{class:"token punctuation"},"}"),s(`

	`),n("span",{class:"token comment"},"// @param {number} key"),s(`
	`),n("span",{class:"token comment"},"// @return {boolean}"),s(`
	`),n("span",{class:"token function"},"contains"),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"key"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
		`),n("span",{class:"token keyword"},"const"),s(" h "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"hash"),n("span",{class:"token punctuation"},"("),s("key"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
		`),n("span",{class:"token keyword"},"for"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"let"),s(" item "),n("span",{class:"token keyword"},"of"),s(),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),s("data"),n("span",{class:"token punctuation"},"["),s("h"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
			`),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("item "),n("span",{class:"token operator"},"==="),s(" key"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token boolean"},"true"),n("span",{class:"token punctuation"},";"),s(`
		`),n("span",{class:"token punctuation"},"}"),s(`
		`),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token boolean"},"false"),n("span",{class:"token punctuation"},";"),s(`
	`),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`

`),n("span",{class:"token doc-comment comment"},`/**
 * Your MyHashSet object will be instantiated and called as such:
 * var obj = new MyHashSet()
 * obj.add(key)
 * obj.remove(key)
 * var param_3 = obj.contains(key)
 */`),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),F=n("div",{class:"language-markdown line-numbers-mode","data-ext":"md"},[n("pre",{class:"language-markdown"},[n("code",null,[n("span",{class:"token title important"},[n("span",{class:"token punctuation"},"####"),s(" 📌 [705. 设计哈希集合 - LeetCode](https://wangfuyou.com/leetcode-js/problem/0705.html)")]),s(`

`),n("span",{class:"token title important"},[n("span",{class:"token punctuation"},"####"),s(" 💻 **题目大意**")]),s(`

不使用任何内建的哈希表库设计一个哈希集合（HashSet）。

实现 `),n("span",{class:"token code-snippet code keyword"},"`MyHashSet`"),s(` 类：

`),n("span",{class:"token list punctuation"},"-"),s(),n("span",{class:"token code-snippet code keyword"},"`void add(key)`"),s(" 向哈希集合中插入值 "),n("span",{class:"token code-snippet code keyword"},"`key`"),s(` 。
`),n("span",{class:"token list punctuation"},"-"),s(),n("span",{class:"token code-snippet code keyword"},"`bool contains(key)`"),s(" 返回哈希集合中是否存在这个值 "),n("span",{class:"token code-snippet code keyword"},"`key`"),s(` 。
`),n("span",{class:"token list punctuation"},"-"),s(),n("span",{class:"token code-snippet code keyword"},"`void remove(key)`"),s(" 将给定值 "),n("span",{class:"token code-snippet code keyword"},"`key`"),s(` 从哈希集合中删除。如果哈希集合中没有这个值，什么也不做。

`),n("span",{class:"token bold"},[n("span",{class:"token punctuation"},"**"),n("span",{class:"token content"},"示例"),n("span",{class:"token punctuation"},"**")]),s(`：

`),n("span",{class:"token code"},[n("span",{class:"token punctuation"},"```"),n("span",{class:"token code-language"},"javascript"),s(`
`),n("span",{class:"token code-block language-javascript"},[s("MyHashSet myHashSet "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"MyHashSet"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
myHashSet`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"add"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s("      "),n("span",{class:"token comment"},"// set = [1]"),s(`
myHashSet`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"add"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"2"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s("      "),n("span",{class:"token comment"},"// set = [1, 2]"),s(`
myHashSet`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"contains"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(),n("span",{class:"token comment"},"// return True"),s(`
myHashSet`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"contains"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"3"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(),n("span",{class:"token comment"},"// return False, (not found)"),s(`
myHashSet`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"add"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"2"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s("      "),n("span",{class:"token comment"},"// set = [1, 2]"),s(`
myHashSet`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"contains"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"2"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(),n("span",{class:"token comment"},"// return True"),s(`
myHashSet`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"remove"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"2"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s("   "),n("span",{class:"token comment"},"// set = [1]"),s(`
myHashSet`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"contains"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"2"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(),n("span",{class:"token comment"},"// return False, (already removed)")]),s(`
`),n("span",{class:"token punctuation"},"```")]),s(`

`),n("span",{class:"token bold"},[n("span",{class:"token punctuation"},"**"),n("span",{class:"token content"},"说明"),n("span",{class:"token punctuation"},"**")]),s(`：

`),n("span",{class:"token list punctuation"},"-"),s(),n("span",{class:"token code-snippet code keyword"},"`0 <= key <= 10^6`"),s(`;
`),n("span",{class:"token list punctuation"},"-"),s(" 最多调用 "),n("span",{class:"token code-snippet code keyword"},"`10^4`"),s(" 次 "),n("span",{class:"token code-snippet code keyword"},"`add`"),s("、"),n("span",{class:"token code-snippet code keyword"},"`remove`"),s(" 和 "),n("span",{class:"token code-snippet code keyword"},"`contains`"),s(`;

`),n("span",{class:"token hr punctuation"},"---"),s(`

`),n("span",{class:"token title important"},[n("span",{class:"token punctuation"},"####"),s(" 💡 **解题思路**")]),s(`

链地址法：

`),n("span",{class:"token list punctuation"},"-"),s(" 设哈希表的大小为 "),n("span",{class:"token code-snippet code keyword"},"`base`"),s("，则可以设计一个简单的哈希函数："),n("span",{class:"token code-snippet code keyword"},"`hash(x) = x mod base`"),s(`；
`),n("span",{class:"token list punctuation"},"-"),s(" 开辟一个大小为 "),n("span",{class:"token code-snippet code keyword"},"`base`"),s(` 的数组，数组的每个位置是一个链表。当计算出哈希值之后，就插入到对应位置的链表当中；
`),n("span",{class:"token list punctuation"},"-"),s(" 由于使用整数除法作为哈希函数，为了尽可能避免冲突，应当将 "),n("span",{class:"token code-snippet code keyword"},"`base`"),s(" 取为一个质数，如 "),n("span",{class:"token code-snippet code keyword"},"`base = 769`"),s(`；

![](../image/705.png)

`),n("span",{class:"token list punctuation"},"-"),s(" 时间复杂度："),n("span",{class:"token code-snippet code keyword"},"`O(n / b)`"),s("。其中 "),n("span",{class:"token code-snippet code keyword"},"`n`"),s(" 为哈希表中的元素数量，"),n("span",{class:"token code-snippet code keyword"},"`b`"),s(" 为链表的数量，假设哈希值是均匀分布的，则每个链表大概长度为 "),n("span",{class:"token code-snippet code keyword"},"`n / b`"),s(`；
`),n("span",{class:"token list punctuation"},"-"),s(" 空间复杂度："),n("span",{class:"token code-snippet code keyword"},"`O(n+b)`"),s(`。

`),n("span",{class:"token hr punctuation"},"---"),s(`

`),n("span",{class:"token title important"},[n("span",{class:"token punctuation"},"####"),s(" 💎 **代码**")]),s(`

`),n("span",{class:"token code"},[n("span",{class:"token punctuation"},"```"),n("span",{class:"token code-language"},"javascript"),s(`
`),n("span",{class:"token code-block language-javascript"},[n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"MyHashSet"),s(),n("span",{class:"token punctuation"},"{"),s(`
	`),n("span",{class:"token function"},"constructor"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
		`),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),s("base "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"769"),n("span",{class:"token punctuation"},";"),s(`
		`),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),s("data "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"Array"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),s("base"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"fill"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"map"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"=>"),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"Array"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
	`),n("span",{class:"token punctuation"},"}"),s(`

	`),n("span",{class:"token comment"},"// @param {number} key"),s(`
	`),n("span",{class:"token comment"},"// @return {number}"),s(`
	`),n("span",{class:"token function"},"hash"),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"key"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
		`),n("span",{class:"token keyword"},"return"),s(" key "),n("span",{class:"token operator"},"%"),s(),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),s("base"),n("span",{class:"token punctuation"},";"),s(`
	`),n("span",{class:"token punctuation"},"}"),s(`

	`),n("span",{class:"token comment"},"// @param {number} key"),s(`
	`),n("span",{class:"token comment"},"// @return {void}"),s(`
	`),n("span",{class:"token function"},"add"),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"key"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
		`),n("span",{class:"token keyword"},"const"),s(" h "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"hash"),n("span",{class:"token punctuation"},"("),s("key"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
		`),n("span",{class:"token keyword"},"for"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"let"),s(" item "),n("span",{class:"token keyword"},"of"),s(),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),s("data"),n("span",{class:"token punctuation"},"["),s("h"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
			`),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("item "),n("span",{class:"token operator"},"==="),s(" key"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token keyword"},"return"),n("span",{class:"token punctuation"},";"),s(`
		`),n("span",{class:"token punctuation"},"}"),s(`
		`),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),s("data"),n("span",{class:"token punctuation"},"["),s("h"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"push"),n("span",{class:"token punctuation"},"("),s("key"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
	`),n("span",{class:"token punctuation"},"}"),s(`

	`),n("span",{class:"token comment"},"// @param {number} key"),s(`
	`),n("span",{class:"token comment"},"// @return {void}"),s(`
	`),n("span",{class:"token function"},"remove"),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"key"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
		`),n("span",{class:"token keyword"},"const"),s(" h "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"hash"),n("span",{class:"token punctuation"},"("),s("key"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
		`),n("span",{class:"token keyword"},"const"),s(" hList "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),s("data"),n("span",{class:"token punctuation"},"["),s("h"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),s(`
		`),n("span",{class:"token keyword"},"for"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"let"),s(" i "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},";"),s(" i "),n("span",{class:"token operator"},"<"),s(" hList"),n("span",{class:"token punctuation"},"."),s("length"),n("span",{class:"token punctuation"},";"),s(" i"),n("span",{class:"token operator"},"++"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
			`),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("hList"),n("span",{class:"token punctuation"},"["),s("i"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token operator"},"==="),s(" key"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
				hList`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"splice"),n("span",{class:"token punctuation"},"("),s("i"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
				`),n("span",{class:"token keyword"},"return"),n("span",{class:"token punctuation"},";"),s(`
			`),n("span",{class:"token punctuation"},"}"),s(`
		`),n("span",{class:"token punctuation"},"}"),s(`
	`),n("span",{class:"token punctuation"},"}"),s(`

	`),n("span",{class:"token comment"},"// @param {number} key"),s(`
	`),n("span",{class:"token comment"},"// @return {boolean}"),s(`
	`),n("span",{class:"token function"},"contains"),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"key"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
		`),n("span",{class:"token keyword"},"const"),s(" h "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"hash"),n("span",{class:"token punctuation"},"("),s("key"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
		`),n("span",{class:"token keyword"},"for"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"let"),s(" item "),n("span",{class:"token keyword"},"of"),s(),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),s("data"),n("span",{class:"token punctuation"},"["),s("h"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
			`),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("item "),n("span",{class:"token operator"},"==="),s(" key"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token boolean"},"true"),n("span",{class:"token punctuation"},";"),s(`
		`),n("span",{class:"token punctuation"},"}"),s(`
		`),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token boolean"},"false"),n("span",{class:"token punctuation"},";"),s(`
	`),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`

`),n("span",{class:"token doc-comment comment"},`/**
 * Your MyHashSet object will be instantiated and called as such:
 * var obj = new MyHashSet()
 * obj.add(key)
 * obj.remove(key)
 * var param_3 = obj.contains(key)
 */`)]),s(`
`),n("span",{class:"token punctuation"},"```")]),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),Y=n("h3",{id:"哈希映射",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#哈希映射","aria-hidden":"true"},"#"),s(" 哈希映射")],-1),P={id:"📌-706-设计哈希映射-leetcode",tabindex:"-1"},U=n("a",{class:"header-anchor",href:"#📌-706-设计哈希映射-leetcode","aria-hidden":"true"},"#",-1),K={href:"https://wangfuyou.com/leetcode-js/problem/0706.html",target:"_blank",rel:"noopener noreferrer"},X=n("h4",{id:"💻-题目大意-1",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#💻-题目大意-1","aria-hidden":"true"},"#"),s(" 💻 "),n("strong",null,"题目大意")],-1),$=n("p",null,"不使用任何内建的哈希表库设计一个哈希映射（HashMap）。",-1),G=n("p",null,[s("实现 "),n("code",null,"MyHashMap"),s(" 类：")],-1),Q=n("ul",null,[n("li",null,[n("code",null,"MyHashMap()"),s(" 用空映射初始化对象")]),n("li",null,[n("code",null,"void put(int key, int value)"),s(" 向 "),n("code",null,"HashMap"),s(" 插入一个键值对 "),n("code",null,"(key, value)"),s(" 。如果 "),n("code",null,"key"),s(" 已经存在于映射中，则更新其对应的值 "),n("code",null,"value"),s(" 。")]),n("li",null,[n("code",null,"int get(int key)"),s(" 返回特定的 "),n("code",null,"key"),s(" 所映射的 "),n("code",null,"value"),s(" ；如果映射中不包含 "),n("code",null,"key"),s(" 的映射，返回 "),n("code",null,"-1"),s(" 。")]),n("li",null,[n("code",null,"void remove(key)"),s(" 如果映射中存在 "),n("code",null,"key"),s(" 的映射，则移除 "),n("code",null,"key"),s(" 和它所对应的 "),n("code",null,"value"),s(" 。")])],-1),W=n("p",null,[n("strong",null,"示例"),s("：")],-1),Z=n("div",{class:"language-javascript line-numbers-mode","data-ext":"js"},[n("pre",{class:"language-javascript"},[n("code",null,[s("MyHashMap myHashMap "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"MyHashMap"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
myHashMap`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"put"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(),n("span",{class:"token comment"},"// The map is now [[1,1]]"),s(`
myHashMap`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"put"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"2"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"2"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(),n("span",{class:"token comment"},"// The map is now [[1,1], [2,2]]"),s(`
myHashMap`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"get"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s("    "),n("span",{class:"token comment"},"// return 1, The map is now [[1,1], [2,2]]"),s(`
myHashMap`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"get"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"3"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s("    "),n("span",{class:"token comment"},"// return -1 (i.e., not found), The map is now [[1,1], [2,2]]"),s(`
myHashMap`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"put"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"2"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(),n("span",{class:"token comment"},"// The map is now [[1,1], [2,1]] (i.e., update the existing value)"),s(`
myHashMap`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"get"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"2"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s("    "),n("span",{class:"token comment"},"// return 1, The map is now [[1,1], [2,1]]"),s(`
myHashMap`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"remove"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"2"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(),n("span",{class:"token comment"},"// remove the mapping for 2, The map is now [[1,1]]"),s(`
myHashMap`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"get"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"2"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s("    "),n("span",{class:"token comment"},"// return -1 (i.e., not found), The map is now [[1,1]]"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),nn=n("p",null,[n("strong",null,"说明"),s("：")],-1),sn=n("ul",null,[n("li",null,[n("code",null,"0 <= key, value <= 10^6")]),n("li",null,[s("最多调用 "),n("code",null,"10^4"),s(" 次 "),n("code",null,"put"),s("、"),n("code",null,"get"),s(" 和 "),n("code",null,"remove"),s(";")])],-1),an=n("hr",null,null,-1),tn=n("h4",{id:"💡-解题思路-1",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#💡-解题思路-1","aria-hidden":"true"},"#"),s(" 💡 "),n("strong",null,"解题思路")],-1),en=n("p",null,[s("链地址法，「设计哈希映射」与「设计哈希集合」解法接近，唯一的区别在于存储的不是 "),n("code",null,"key"),s(" 本身，而是 "),n("code",null,"(key,value)"),s(" 对，其他代码都一样。")],-1),on=n("hr",null,null,-1),cn=n("h4",{id:"💎-代码-1",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#💎-代码-1","aria-hidden":"true"},"#"),s(" 💎 "),n("strong",null,"代码")],-1),pn=n("div",{class:"language-javascript line-numbers-mode","data-ext":"js"},[n("pre",{class:"language-javascript"},[n("code",null,[n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"MyHashMap"),s(),n("span",{class:"token punctuation"},"{"),s(`
	`),n("span",{class:"token function"},"constructor"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
		`),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),s("base "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"769"),n("span",{class:"token punctuation"},";"),s(`
		`),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),s("data "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"Array"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),s("base"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"fill"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"map"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"=>"),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"Array"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
	`),n("span",{class:"token punctuation"},"}"),s(`

	`),n("span",{class:"token comment"},"// @param {number} key"),s(`
	`),n("span",{class:"token comment"},"// @return {number}"),s(`
	`),n("span",{class:"token function"},"hash"),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"key"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
		`),n("span",{class:"token keyword"},"return"),s(" key "),n("span",{class:"token operator"},"%"),s(),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),s("base"),n("span",{class:"token punctuation"},";"),s(`
	`),n("span",{class:"token punctuation"},"}"),s(`

	`),n("span",{class:"token comment"},"// @param {number} key"),s(`
	`),n("span",{class:"token comment"},"// @param {number} value"),s(`
	`),n("span",{class:"token comment"},"// @return {void}"),s(`
	`),n("span",{class:"token function"},"put"),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},[s("key"),n("span",{class:"token punctuation"},","),s(" value")]),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
		`),n("span",{class:"token keyword"},"const"),s(" h "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"hash"),n("span",{class:"token punctuation"},"("),s("key"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
		`),n("span",{class:"token keyword"},"for"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"let"),s(" item "),n("span",{class:"token keyword"},"of"),s(),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),s("data"),n("span",{class:"token punctuation"},"["),s("h"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
			`),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("item"),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token operator"},"==="),s(" key"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
				item`),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token operator"},"="),s(" value"),n("span",{class:"token punctuation"},";"),s(`
				`),n("span",{class:"token keyword"},"return"),n("span",{class:"token punctuation"},";"),s(`
			`),n("span",{class:"token punctuation"},"}"),s(`
		`),n("span",{class:"token punctuation"},"}"),s(`
		`),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),s("data"),n("span",{class:"token punctuation"},"["),s("h"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"push"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"["),s("key"),n("span",{class:"token punctuation"},","),s(" value"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
	`),n("span",{class:"token punctuation"},"}"),s(`

	`),n("span",{class:"token comment"},"// @param {number} key"),s(`
	`),n("span",{class:"token comment"},"// @return {number}"),s(`
	`),n("span",{class:"token function"},"get"),n("span",{class:"token punctuation"},"("),s("key"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
		`),n("span",{class:"token keyword"},"const"),s(" h "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"hash"),n("span",{class:"token punctuation"},"("),s("key"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
		`),n("span",{class:"token keyword"},"for"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"let"),s(" item "),n("span",{class:"token keyword"},"of"),s(),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),s("data"),n("span",{class:"token punctuation"},"["),s("h"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
			`),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("item"),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token operator"},"==="),s(" key"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token keyword"},"return"),s(" item"),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),s(`
		`),n("span",{class:"token punctuation"},"}"),s(`
		`),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token operator"},"-"),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},";"),s(`
	`),n("span",{class:"token punctuation"},"}"),s(`

	`),n("span",{class:"token comment"},"// @param {number} key"),s(`
	`),n("span",{class:"token comment"},"// @return {void}"),s(`
	`),n("span",{class:"token function"},"remove"),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"key"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
		`),n("span",{class:"token keyword"},"const"),s(" h "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"hash"),n("span",{class:"token punctuation"},"("),s("key"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
		`),n("span",{class:"token keyword"},"const"),s(" hList "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),s("data"),n("span",{class:"token punctuation"},"["),s("h"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),s(`
		`),n("span",{class:"token keyword"},"for"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"let"),s(" i "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},";"),s(" i "),n("span",{class:"token operator"},"<"),s(" hList"),n("span",{class:"token punctuation"},"."),s("length"),n("span",{class:"token punctuation"},";"),s(" i"),n("span",{class:"token operator"},"++"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
			`),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("hList"),n("span",{class:"token punctuation"},"["),s("i"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token operator"},"==="),s(" key"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
				hList`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"splice"),n("span",{class:"token punctuation"},"("),s("i"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
				`),n("span",{class:"token keyword"},"return"),n("span",{class:"token punctuation"},";"),s(`
			`),n("span",{class:"token punctuation"},"}"),s(`
		`),n("span",{class:"token punctuation"},"}"),s(`
	`),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token doc-comment comment"},`/**
 * Your MyHashMap object will be instantiated and called as such:
 * var obj = new MyHashMap()
 * obj.put(key,value)
 * var param_2 = obj.get(key)
 * obj.remove(key)
 */`),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),ln=n("div",{class:"language-markdown line-numbers-mode","data-ext":"md"},[n("pre",{class:"language-markdown"},[n("code",null,[n("span",{class:"token title important"},[n("span",{class:"token punctuation"},"####"),s(" 📌 [706. 设计哈希映射 - LeetCode](https://wangfuyou.com/leetcode-js/problem/0706.html)")]),s(`

`),n("span",{class:"token title important"},[n("span",{class:"token punctuation"},"####"),s(" 💻 **题目大意**")]),s(`

不使用任何内建的哈希表库设计一个哈希映射（HashMap）。

实现 `),n("span",{class:"token code-snippet code keyword"},"`MyHashMap`"),s(` 类：

`),n("span",{class:"token list punctuation"},"-"),s(),n("span",{class:"token code-snippet code keyword"},"`MyHashMap()`"),s(` 用空映射初始化对象
`),n("span",{class:"token list punctuation"},"-"),s(),n("span",{class:"token code-snippet code keyword"},"`void put(int key, int value)`"),s(" 向 "),n("span",{class:"token code-snippet code keyword"},"`HashMap`"),s(" 插入一个键值对 "),n("span",{class:"token code-snippet code keyword"},"`(key, value)`"),s(" 。如果 "),n("span",{class:"token code-snippet code keyword"},"`key`"),s(" 已经存在于映射中，则更新其对应的值 "),n("span",{class:"token code-snippet code keyword"},"`value`"),s(` 。
`),n("span",{class:"token list punctuation"},"-"),s(),n("span",{class:"token code-snippet code keyword"},"`int get(int key)`"),s(" 返回特定的 "),n("span",{class:"token code-snippet code keyword"},"`key`"),s(" 所映射的 "),n("span",{class:"token code-snippet code keyword"},"`value`"),s(" ；如果映射中不包含 "),n("span",{class:"token code-snippet code keyword"},"`key`"),s(" 的映射，返回 "),n("span",{class:"token code-snippet code keyword"},"`-1`"),s(` 。
`),n("span",{class:"token list punctuation"},"-"),s(),n("span",{class:"token code-snippet code keyword"},"`void remove(key)`"),s(" 如果映射中存在 "),n("span",{class:"token code-snippet code keyword"},"`key`"),s(" 的映射，则移除 "),n("span",{class:"token code-snippet code keyword"},"`key`"),s(" 和它所对应的 "),n("span",{class:"token code-snippet code keyword"},"`value`"),s(` 。

`),n("span",{class:"token bold"},[n("span",{class:"token punctuation"},"**"),n("span",{class:"token content"},"示例"),n("span",{class:"token punctuation"},"**")]),s(`：

`),n("span",{class:"token code"},[n("span",{class:"token punctuation"},"```"),n("span",{class:"token code-language"},"javascript"),s(`
`),n("span",{class:"token code-block language-javascript"},[s("MyHashMap myHashMap "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"MyHashMap"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
myHashMap`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"put"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(),n("span",{class:"token comment"},"// The map is now [[1,1]]"),s(`
myHashMap`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"put"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"2"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"2"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(),n("span",{class:"token comment"},"// The map is now [[1,1], [2,2]]"),s(`
myHashMap`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"get"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s("    "),n("span",{class:"token comment"},"// return 1, The map is now [[1,1], [2,2]]"),s(`
myHashMap`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"get"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"3"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s("    "),n("span",{class:"token comment"},"// return -1 (i.e., not found), The map is now [[1,1], [2,2]]"),s(`
myHashMap`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"put"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"2"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(),n("span",{class:"token comment"},"// The map is now [[1,1], [2,1]] (i.e., update the existing value)"),s(`
myHashMap`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"get"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"2"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s("    "),n("span",{class:"token comment"},"// return 1, The map is now [[1,1], [2,1]]"),s(`
myHashMap`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"remove"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"2"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(),n("span",{class:"token comment"},"// remove the mapping for 2, The map is now [[1,1]]"),s(`
myHashMap`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"get"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"2"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s("    "),n("span",{class:"token comment"},"// return -1 (i.e., not found), The map is now [[1,1]]")]),s(`
`),n("span",{class:"token punctuation"},"```")]),s(`

`),n("span",{class:"token bold"},[n("span",{class:"token punctuation"},"**"),n("span",{class:"token content"},"说明"),n("span",{class:"token punctuation"},"**")]),s(`：

`),n("span",{class:"token list punctuation"},"-"),s(),n("span",{class:"token code-snippet code keyword"},"`0 <= key, value <= 10^6`"),s(`
`),n("span",{class:"token list punctuation"},"-"),s(" 最多调用 "),n("span",{class:"token code-snippet code keyword"},"`10^4`"),s(" 次 "),n("span",{class:"token code-snippet code keyword"},"`put`"),s("、"),n("span",{class:"token code-snippet code keyword"},"`get`"),s(" 和 "),n("span",{class:"token code-snippet code keyword"},"`remove`"),s(`;

`),n("span",{class:"token hr punctuation"},"---"),s(`

`),n("span",{class:"token title important"},[n("span",{class:"token punctuation"},"####"),s(" 💡 **解题思路**")]),s(`

链地址法，「设计哈希映射」与「设计哈希集合」解法接近，唯一的区别在于存储的不是 `),n("span",{class:"token code-snippet code keyword"},"`key`"),s(" 本身，而是 "),n("span",{class:"token code-snippet code keyword"},"`(key,value)`"),s(` 对，其他代码都一样。

`),n("span",{class:"token hr punctuation"},"---"),s(`

`),n("span",{class:"token title important"},[n("span",{class:"token punctuation"},"####"),s(" 💎 **代码**")]),s(`

`),n("span",{class:"token code"},[n("span",{class:"token punctuation"},"```"),n("span",{class:"token code-language"},"javascript"),s(`
`),n("span",{class:"token code-block language-javascript"},[n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"MyHashMap"),s(),n("span",{class:"token punctuation"},"{"),s(`
	`),n("span",{class:"token function"},"constructor"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
		`),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),s("base "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"769"),n("span",{class:"token punctuation"},";"),s(`
		`),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),s("data "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"Array"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),s("base"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"fill"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"map"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"=>"),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"Array"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
	`),n("span",{class:"token punctuation"},"}"),s(`

	`),n("span",{class:"token comment"},"// @param {number} key"),s(`
	`),n("span",{class:"token comment"},"// @return {number}"),s(`
	`),n("span",{class:"token function"},"hash"),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"key"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
		`),n("span",{class:"token keyword"},"return"),s(" key "),n("span",{class:"token operator"},"%"),s(),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),s("base"),n("span",{class:"token punctuation"},";"),s(`
	`),n("span",{class:"token punctuation"},"}"),s(`

	`),n("span",{class:"token comment"},"// @param {number} key"),s(`
	`),n("span",{class:"token comment"},"// @param {number} value"),s(`
	`),n("span",{class:"token comment"},"// @return {void}"),s(`
	`),n("span",{class:"token function"},"put"),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},[s("key"),n("span",{class:"token punctuation"},","),s(" value")]),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
		`),n("span",{class:"token keyword"},"const"),s(" h "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"hash"),n("span",{class:"token punctuation"},"("),s("key"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
		`),n("span",{class:"token keyword"},"for"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"let"),s(" item "),n("span",{class:"token keyword"},"of"),s(),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),s("data"),n("span",{class:"token punctuation"},"["),s("h"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
			`),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("item"),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token operator"},"==="),s(" key"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
				item`),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token operator"},"="),s(" value"),n("span",{class:"token punctuation"},";"),s(`
				`),n("span",{class:"token keyword"},"return"),n("span",{class:"token punctuation"},";"),s(`
			`),n("span",{class:"token punctuation"},"}"),s(`
		`),n("span",{class:"token punctuation"},"}"),s(`
		`),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),s("data"),n("span",{class:"token punctuation"},"["),s("h"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"push"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"["),s("key"),n("span",{class:"token punctuation"},","),s(" value"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
	`),n("span",{class:"token punctuation"},"}"),s(`

	`),n("span",{class:"token comment"},"// @param {number} key"),s(`
	`),n("span",{class:"token comment"},"// @return {number}"),s(`
	`),n("span",{class:"token function"},"get"),n("span",{class:"token punctuation"},"("),s("key"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
		`),n("span",{class:"token keyword"},"const"),s(" h "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"hash"),n("span",{class:"token punctuation"},"("),s("key"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
		`),n("span",{class:"token keyword"},"for"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"let"),s(" item "),n("span",{class:"token keyword"},"of"),s(),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),s("data"),n("span",{class:"token punctuation"},"["),s("h"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
			`),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("item"),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token operator"},"==="),s(" key"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token keyword"},"return"),s(" item"),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),s(`
		`),n("span",{class:"token punctuation"},"}"),s(`
		`),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token operator"},"-"),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},";"),s(`
	`),n("span",{class:"token punctuation"},"}"),s(`

	`),n("span",{class:"token comment"},"// @param {number} key"),s(`
	`),n("span",{class:"token comment"},"// @return {void}"),s(`
	`),n("span",{class:"token function"},"remove"),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"key"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
		`),n("span",{class:"token keyword"},"const"),s(" h "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"hash"),n("span",{class:"token punctuation"},"("),s("key"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
		`),n("span",{class:"token keyword"},"const"),s(" hList "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),s("data"),n("span",{class:"token punctuation"},"["),s("h"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),s(`
		`),n("span",{class:"token keyword"},"for"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"let"),s(" i "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},";"),s(" i "),n("span",{class:"token operator"},"<"),s(" hList"),n("span",{class:"token punctuation"},"."),s("length"),n("span",{class:"token punctuation"},";"),s(" i"),n("span",{class:"token operator"},"++"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
			`),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("hList"),n("span",{class:"token punctuation"},"["),s("i"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token operator"},"==="),s(" key"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
				hList`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"splice"),n("span",{class:"token punctuation"},"("),s("i"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
				`),n("span",{class:"token keyword"},"return"),n("span",{class:"token punctuation"},";"),s(`
			`),n("span",{class:"token punctuation"},"}"),s(`
		`),n("span",{class:"token punctuation"},"}"),s(`
	`),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token doc-comment comment"},`/**
 * Your MyHashMap object will be instantiated and called as such:
 * var obj = new MyHashMap()
 * obj.put(key,value)
 * var param_2 = obj.get(key)
 * obj.remove(key)
 */`)]),s(`
`),n("span",{class:"token punctuation"},"```")]),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),un=l(`<h2 id="javascript-set" tabindex="-1"><a class="header-anchor" href="#javascript-set" aria-hidden="true">#</a> JavaScript Set</h2><div class="hint-container info"><p class="hint-container-title">定义</p><p><strong>Set</strong> 是 ES6 新提供的数据结构，它类似于数组，但是成员的值都是唯一的，<strong>没有重复的值</strong>。</p></div><p><code>Set</code>本身是一个构造函数，用来生成 <code>Set</code> 数据结构。<code>Set</code>函数可以接受一个数组（或者具有 <code>iterable</code> 接口的其他数据结构）作为参数，用来初始化。</p><p>向 <code>Set</code> 加入值的时候，不会发生类型转换，所以<code>5</code>和<code>&quot;5&quot;</code>是两个不同的值。但两个对象总是不相等的，如例三，由于两个空对象不相等，所以它们被视为两个值。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// eg1：数组</span>
<span class="token keyword">const</span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">[</span><span class="token operator">...</span>set<span class="token punctuation">]</span> <span class="token comment">// [1, 2, 3, 4]</span>
set<span class="token punctuation">.</span>size <span class="token comment">// 4</span>

<span class="token comment">// eg2：字符串</span>
<span class="token punctuation">[</span><span class="token operator">...</span><span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token string">&#39;ababbc&#39;</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span> <span class="token comment">// &quot;abc&quot;</span>

<span class="token comment">// eg3：对象</span>
<span class="token keyword">let</span> set3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
set3<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
set3<span class="token punctuation">.</span>size <span class="token comment">// 1</span>
set3<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
set3<span class="token punctuation">.</span>size <span class="token comment">// 2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>判断是否包括一个键，Object 结构和 Set 结构写法的不同。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 对象的写法</span>
<span class="token keyword">const</span> properties <span class="token operator">=</span> <span class="token punctuation">{</span>
	<span class="token literal-property property">width</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
	<span class="token literal-property property">height</span><span class="token operator">:</span> <span class="token number">1</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span>properties<span class="token punctuation">[</span>someName<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">// do something</span>
<span class="token punctuation">}</span>

<span class="token comment">// Set的写法</span>
<span class="token keyword">const</span> properties <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

properties<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&#39;width&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
properties<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&#39;height&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span>properties<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>someName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">// do something</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="属性和方法" tabindex="-1"><a class="header-anchor" href="#属性和方法" aria-hidden="true">#</a> 属性和方法</h3><p><code>Set</code> 结构的实例有以下属性：</p><ul><li><code>constructor</code>：构造函数，默认就是<code>Set</code>函数。</li><li><code>size</code>：返回<code>Set</code>实例的成员总数。</li></ul><p><code>Set</code> 实例的方法分为两大类：操作方法（用于操作数据）和遍历方法（用于遍历成员）。</p><ul><li>操作方法： <ul><li><code>add(value)</code>：添加某个值，返回 <code>Set</code> 结构本身；</li><li><code>delete(value)</code>：删除某个值，返回一个布尔值，表示删除是否成功；</li><li><code>has(value)</code>：返回一个布尔值，表示该值是否为<code>Set</code>的成员；</li><li><code>clear()</code>：清除所有成员，没有返回值；</li></ul></li><li>遍历方法： <ul><li><code>keys()</code>：返回键名的遍历器；</li><li><code>values()</code>：返回键值的遍历器；</li><li><code>entries()</code>：返回键值对的遍历器；</li><li><code>forEach()</code>：使用回调函数遍历每个成员；</li></ul></li></ul><p>需要特别指出的是，<code>Set</code>的遍历顺序就是插入顺序。这个特性有时非常有用，比如使用 <code>Set</code> 保存一个回调函数列表，调用时就能保证按照添加顺序调用。</p><p>由于 <code>Set</code> 结构没有键名，只有键值（或者说键名和键值是同一个值），所以<code>keys</code>方法和<code>values</code>方法的行为完全一致。</p><h3 id="set-的应用" tabindex="-1"><a class="header-anchor" href="#set-的应用" aria-hidden="true">#</a> Set 的应用</h3><h4 id="_1-数组去重" tabindex="-1"><a class="header-anchor" href="#_1-数组去重" aria-hidden="true">#</a> 1. 数组去重</h4><p>利用 <code>Set</code> 成员唯一的特点，可以去除数组重复成员。</p><p>将数组作为参数初始化 <code>Set</code> ，再利用<code>Array.from()</code>方法将 <code>Set</code> 结构转为数组。扩展运算符（<code>...</code>）内部使用<code>for...of</code>循环，所以也可以用于 Set 结构。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 去除数组的重复成员</span>
<span class="token keyword">let</span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;red&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;green&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;blue&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;green&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>set<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token comment">// [&#39;red&#39;, &#39;green&#39;, &#39;blue&#39;]</span>

<span class="token keyword">let</span> arr2 <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>set<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// [&#39;red&#39;, &#39;green&#39;, &#39;blue&#39;]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的方法也可以用于，去除字符串里面的重复字符。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">[</span><span class="token operator">...</span><span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token string">&#39;ababbc&#39;</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// &quot;abc&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-求并集、交集和差集" tabindex="-1"><a class="header-anchor" href="#_2-求并集、交集和差集" aria-hidden="true">#</a> 2. 求并集、交集和差集</h4><p>将数组的<code>map</code>和<code>filter</code>方法间接用于 <code>Set</code> ，可以很容易地实现并集（Union）、交集（Intersect）和差集（Difference）。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">...</span>set<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> x <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 返回Set结构：{2, 4, 6}</span>

<span class="token keyword">let</span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">...</span>set<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> x <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 返回Set结构：{2, 4}</span>

<span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 并集</span>
<span class="token keyword">let</span> union <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">...</span>a<span class="token punctuation">,</span> <span class="token operator">...</span>b<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Set {1, 2, 3, 4}</span>

<span class="token comment">// 交集</span>
<span class="token keyword">let</span> intersect <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">...</span>a<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> b<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// set {2, 3}</span>

<span class="token comment">// （a 相对于 b 的）差集</span>
<span class="token keyword">let</span> difference <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">...</span>a<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token operator">!</span>b<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Set {1}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-改变原-set-结构" tabindex="-1"><a class="header-anchor" href="#_3-改变原-set-结构" aria-hidden="true">#</a> 3. 改变原 Set 结构</h4><p>如果想在遍历操作中，同步改变原来的 Set 结构，目前没有直接的方法，但有两种变通方法。一种是利用原 Set 结构映射出一个新的结构，然后赋值给原来的 Set 结构；另一种是利用<code>Array.from</code>方法。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 方法一</span>
<span class="token keyword">let</span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">...</span>set<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> val <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// set的值是2, 4, 6</span>

<span class="token comment">// 方法二</span>
<span class="token keyword">let</span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>set<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> val <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// set的值是2, 4, 6</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="javascript-map" tabindex="-1"><a class="header-anchor" href="#javascript-map" aria-hidden="true">#</a> JavaScript Map</h2><div class="hint-container info"><p class="hint-container-title">定义</p><p><strong>Map</strong> 是 <code>ES6</code> 新提供的数据结构，它类似于对象，也是键值对的集合，但是“ <strong>键</strong> ”的范围不限于字符串，<strong>各种类型的值</strong> （包括对象）都可以当作键。</p></div><p>JavaScript 的对象（<code>Object</code>），本质上是键值对的集合（<code>Hash</code> 结构），但是传统上只能用字符串当作键，这给它的使用带来了很大的限制。</p><p>为了解决这个问题，<code>ES6</code> 提供了 <code>Map</code> 数据结构。<code>Map</code>也是键值对的集合，但是各种类型的值都可以当作键。<code>Object</code> 结构提供了“字符串—值”的对应，<code>Map</code> 结构提供了“值—值”的对应，是一种更完善的 <code>Hash</code> 结构实现。</p><p>作为构造函数，Map 可以接受一个数组作为参数。该数组的成员是一个个表示键值对的数组。除了数组，任何具有 <code>Iterator</code> 接口、且每个成员都是一个双元素的数组的数据结构都可以当作<code>Map</code>构造函数的参数。这就是说，<code>Set</code>和<code>Map</code>都可以用来生成新的 Map。</p><p>如果 Map 的键是一个简单类型的值（数字、字符串、布尔值），则只要两个值严格相等，Map 将其视为一个键，比如<code>0</code>和<code>-0</code>就是一个键，布尔值<code>true</code>和字符串<code>true</code>则是两个不同的键。另外，<code>undefined</code>和<code>null</code>也是两个不同的键。虽然<code>NaN</code>不严格相等于自身，但 Map 将其视为同一个键。</p><p>如果 Map 的键是对象，只有对同一个对象的引用，Map 结构才将其视为同一个键。Map 的键实际上是跟内存地址绑定的，只要内存地址不一样，就视为两个键。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 用数组初始化</span>
<span class="token keyword">const</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
	<span class="token punctuation">[</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;张三&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
	<span class="token punctuation">[</span><span class="token string">&#39;title&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Author&#39;</span><span class="token punctuation">]</span>
<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 用 Set 初始化</span>
<span class="token keyword">const</span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
	<span class="token punctuation">[</span><span class="token string">&#39;foo&#39;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
	<span class="token punctuation">[</span><span class="token string">&#39;bar&#39;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span>
<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> m1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span>set<span class="token punctuation">)</span><span class="token punctuation">;</span>
m1<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;foo&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span>

<span class="token comment">// 用 Map 初始化</span>
<span class="token keyword">const</span> m2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">&#39;baz&#39;</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> m3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span>m2<span class="token punctuation">)</span><span class="token punctuation">;</span>
m3<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;baz&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3</span>

<span class="token comment">// 键值为数字</span>
map<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token operator">+</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 123</span>

<span class="token comment">// 键值为布尔值</span>
map<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
map<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&#39;true&#39;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span>

<span class="token comment">// 键值为undefined null</span>
map<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
map<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3</span>

<span class="token comment">// 键值为NaN</span>
map<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">NaN</span><span class="token punctuation">,</span> <span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">NaN</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 123</span>

<span class="token comment">// 键值为对象</span>
<span class="token comment">// 非同一个数组实例，内存地址不一样</span>
map<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">555</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="属性和方法-1" tabindex="-1"><a class="header-anchor" href="#属性和方法-1" aria-hidden="true">#</a> 属性和方法</h3><p><code>Map</code> 结构的实例有以下属性：</p><ul><li><code>constructor</code>：构造函数，默认就是<code>Map</code>函数。</li><li><code>size</code>：返回<code>Map</code>实例的成员总数。</li></ul><p><code>Map</code> 实例的方法分为两大类：操作方法（用于操作数据）和遍历方法（用于遍历成员）。</p><ul><li>操作方法： <ul><li><code>set(key, value)</code>：设置键名<code>key</code>对应的键值为<code>value</code>，返回 <code>Map</code> 结构本身，如果<code>key</code>已经有值，则键值会被更新，否则就新生成该键；</li><li><code>get(key)</code>：读取<code>key</code>对应的键值，如果找不到<code>key</code>，返回<code>undefined</code>；</li><li><code>delete(value)</code>：删除某个键，返回<code>true</code>，如果删除失败，返回<code>false</code>；</li><li><code>has(value)</code>：返回一个布尔值，表示某个键是否在当前 <code>Map</code> 对象之中；</li><li><code>clear()</code>：清除所有成员，没有返回值；</li></ul></li><li>遍历方法： <ul><li><code>keys()</code>：返回键名的遍历器；</li><li><code>values()</code>：返回键值的遍历器；</li><li><code>entries()</code>：返回键值对的遍历器；</li><li><code>forEach()</code>：使用回调函数遍历每个成员；</li></ul></li></ul><p>需要特别注意的是，Map 的遍历顺序就是插入顺序。</p><h3 id="数据结构的互相转换" tabindex="-1"><a class="header-anchor" href="#数据结构的互相转换" aria-hidden="true">#</a> 数据结构的互相转换</h3><h4 id="_1-map-转为数组" tabindex="-1"><a class="header-anchor" href="#_1-map-转为数组" aria-hidden="true">#</a> 1. Map 转为数组</h4><p>Map 转为数组最方便的方法，就是使用扩展运算符（<code>...</code>）。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> myMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">foo</span><span class="token operator">:</span> <span class="token number">3</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&quot;abc&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">[</span><span class="token operator">...</span>myMap<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token comment">// [ [ true, 7 ], [ { foo: 3 }, [ &#39;abc&#39; ] ] ]</span>

<span class="token punctuation">[</span><span class="token operator">...</span>myMap<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
<span class="token comment">// [true, { foo: 3 }]</span>

<span class="token punctuation">[</span><span class="token operator">...</span>map<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
<span class="token comment">// [7, [ &#39;abc&#39; ]]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>结合数组的<code>map</code>方法、<code>filter</code>方法，可以实现 <code>Map</code> 的遍历和过滤（<code>Map</code> 本身没有<code>map</code>和<code>filter</code>方法）。<code>Map</code> 有一个<code>forEach</code>方法，与数组的<code>forEach</code>方法类似，也可以实现遍历</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> map0 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&#39;a&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">&#39;c&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> map1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">...</span>map0<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">[</span>k<span class="token punctuation">,</span> v<span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> k <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 产生 Map 结构 {1 =&gt; &#39;a&#39;, 2 =&gt; &#39;b&#39;}</span>

<span class="token keyword">const</span> map2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">...</span>map0<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">[</span>k<span class="token punctuation">,</span> v<span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span>k <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">&#39;_&#39;</span> <span class="token operator">+</span> v<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 产生 Map 结构 {2 =&gt; &#39;_a&#39;, 4 =&gt; &#39;_b&#39;, 6 =&gt; &#39;_c&#39;}</span>

map<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">value<span class="token punctuation">,</span> key<span class="token punctuation">,</span> map</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Key: %s, Value: %s&#39;</span><span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-数组-转为-map" tabindex="-1"><a class="header-anchor" href="#_2-数组-转为-map" aria-hidden="true">#</a> 2. 数组 转为 Map</h4><p>将数组传入 <code>Map</code> 构造函数，就可以转为 <code>Map</code>。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
	<span class="token punctuation">[</span><span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
	<span class="token punctuation">[</span><span class="token punctuation">{</span> <span class="token literal-property property">foo</span><span class="token operator">:</span> <span class="token number">3</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&#39;abc&#39;</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Map {</span>
<span class="token comment">//   true =&gt; 7,</span>
<span class="token comment">//   Object {foo: 3} =&gt; [&#39;abc&#39;]</span>
<span class="token comment">// }</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-map-转为对象" tabindex="-1"><a class="header-anchor" href="#_3-map-转为对象" aria-hidden="true">#</a> 3. Map 转为对象</h4><p>如果所有 <code>Map</code> 的键都是字符串，它可以无损地转为对象。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">strMapToObj</span><span class="token punctuation">(</span><span class="token parameter">strMap</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">let</span> obj <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> <span class="token punctuation">[</span>k<span class="token punctuation">,</span> v<span class="token punctuation">]</span> <span class="token keyword">of</span> strMap<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		obj<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> v<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> obj<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> myMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&#39;yes&#39;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&#39;no&#39;</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">strMapToObj</span><span class="token punctuation">(</span>myMap<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// { yes: true, no: false }</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果有非字符串的键名，那么这个键名会被转成字符串，再作为对象的键名。</p><h4 id="_4-对象转为-map" tabindex="-1"><a class="header-anchor" href="#_4-对象转为-map" aria-hidden="true">#</a> 4. 对象转为 Map</h4><p>对象转为 <code>Map</code> 可以通过<code>Object.entries()</code>。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>此外，也可以自己实现一个转换函数。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">objToStrMap</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">let</span> strMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> k <span class="token keyword">of</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		strMap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> obj<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> strMap<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token function">objToStrMap</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">yes</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token literal-property property">no</span><span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Map {&quot;yes&quot; =&gt; true, &quot;no&quot; =&gt; false}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_5-map-转为-json" tabindex="-1"><a class="header-anchor" href="#_5-map-转为-json" aria-hidden="true">#</a> 5. Map 转为 JSON</h4><p><code>Map</code> 转为 <code>JSON</code> 要区分两种情况。一种情况是，<code>Map</code> 的键名都是字符串，这时可以选择转为对象 <code>JSON</code>。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">strMapToJson</span><span class="token punctuation">(</span><span class="token parameter">strMap</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token function">strMapToObj</span><span class="token punctuation">(</span>strMap<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">let</span> myMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&#39;yes&#39;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&#39;no&#39;</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">strMapToJson</span><span class="token punctuation">(</span>myMap<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// &#39;{&quot;yes&quot;:true,&quot;no&quot;:false}&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>另一种情况是，<code>Map</code> 的键名有非字符串，这时可以选择转为数组 <code>JSON</code>。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">mapToArrayJson</span><span class="token punctuation">(</span><span class="token parameter">map</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">...</span>map<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">let</span> myMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">foo</span><span class="token operator">:</span> <span class="token number">3</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&#39;abc&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">mapToArrayJson</span><span class="token punctuation">(</span>myMap<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// &#39;[[true,7],[{&quot;foo&quot;:3},[&quot;abc&quot;]]]&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_6-json-转为-map" tabindex="-1"><a class="header-anchor" href="#_6-json-转为-map" aria-hidden="true">#</a> 6. JSON 转为 Map</h4><p><code>JSON</code> 转为 <code>Map</code>，正常情况下，所有键名都是字符串。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">jsonToStrMap</span><span class="token punctuation">(</span><span class="token parameter">jsonStr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> <span class="token function">objToStrMap</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>jsonStr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token function">jsonToStrMap</span><span class="token punctuation">(</span><span class="token string">&#39;{&quot;yes&quot;: true, &quot;no&quot;: false}&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Map {&#39;yes&#39; =&gt; true, &#39;no&#39; =&gt; false}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>但是，有一种特殊情况，整个 <code>JSON</code> 就是一个数组，且每个数组成员本身，又是一个有两个成员的数组。这时，它可以一一对应地转为 <code>Map</code>。这往往是 <code>Map</code> 转为数组 <code>JSON</code> 的逆操作。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">jsonToMap</span><span class="token punctuation">(</span><span class="token parameter">jsonStr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>jsonStr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token function">jsonToMap</span><span class="token punctuation">(</span><span class="token string">&#39;[[true,7],[{&quot;foo&quot;:3},[&quot;abc&quot;]]]&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Map {true =&gt; 7, Object {foo: 3} =&gt; [&#39;abc&#39;]}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,69),rn=n("h2",{id:"相关题目",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#相关题目","aria-hidden":"true"},"#"),s(" 相关题目")],-1),dn=n("thead",null,[n("tr",null,[n("th",{style:{"text-align":"center"}},"题号"),n("th",{style:{"text-align":"left"}},"标题"),n("th",{style:{"text-align":"center"}},"题解"),n("th",{style:{"text-align":"left"}},"标签"),n("th",{style:{"text-align":"center"}},"难度"),n("th",{style:{"text-align":"center"}},"力扣")])],-1),kn=n("td",{style:{"text-align":"center"}},"705",-1),mn=n("td",{style:{"text-align":"left"}},"设计哈希集合",-1),hn={style:{"text-align":"center"}},bn={style:{"text-align":"left"}},_n=n("code",null,"设计",-1),vn=n("code",null,"数组",-1),yn=n("code",null,"哈希表",-1),gn=n("code",null,"2+",-1),fn=n("td",{style:{"text-align":"center"}},"🟢",-1),wn={style:{"text-align":"center"}},xn={href:"https://leetcode.cn/problems/design-hashset",target:"_blank",rel:"noopener noreferrer"},Mn={href:"https://leetcode.com/problems/design-hashset",target:"_blank",rel:"noopener noreferrer"},jn=n("td",{style:{"text-align":"center"}},"706",-1),Sn=n("td",{style:{"text-align":"left"}},"设计哈希映射",-1),Hn={style:{"text-align":"center"}},Tn={style:{"text-align":"left"}},qn=n("code",null,"设计",-1),On=n("code",null,"数组",-1),Nn=n("code",null,"哈希表",-1),An=n("code",null,"2+",-1),En=n("td",{style:{"text-align":"center"}},"🟢",-1),Ln={style:{"text-align":"center"}},zn={href:"https://leetcode.cn/problems/design-hashmap",target:"_blank",rel:"noopener noreferrer"},Jn={href:"https://leetcode.com/problems/design-hashmap",target:"_blank",rel:"noopener noreferrer"},In=n("td",{style:{"text-align":"center"}},"217",-1),Cn=n("td",{style:{"text-align":"left"}},"存在重复元素",-1),Dn={style:{"text-align":"center"}},Bn={style:{"text-align":"left"}},Vn=n("code",null,"数组",-1),Rn=n("code",null,"哈希表",-1),Fn=n("code",null,"排序",-1),Yn=n("td",{style:{"text-align":"center"}},"🟢",-1),Pn={style:{"text-align":"center"}},Un={href:"https://leetcode.cn/problems/contains-duplicate",target:"_blank",rel:"noopener noreferrer"},Kn={href:"https://leetcode.com/problems/contains-duplicate",target:"_blank",rel:"noopener noreferrer"},Xn=n("td",{style:{"text-align":"center"}},"219",-1),$n=n("td",{style:{"text-align":"left"}},"存在重复元素 II",-1),Gn={style:{"text-align":"center"}},Qn={style:{"text-align":"left"}},Wn=n("code",null,"数组",-1),Zn=n("code",null,"哈希表",-1),ns=n("code",null,"滑动窗口",-1),ss=n("td",{style:{"text-align":"center"}},"🟢",-1),as={style:{"text-align":"center"}},ts={href:"https://leetcode.cn/problems/contains-duplicate-ii",target:"_blank",rel:"noopener noreferrer"},es={href:"https://leetcode.com/problems/contains-duplicate-ii",target:"_blank",rel:"noopener noreferrer"},os=n("td",{style:{"text-align":"center"}},"220",-1),cs=n("td",{style:{"text-align":"left"}},"存在重复元素 III",-1),ps=n("td",{style:{"text-align":"center"}},null,-1),ls={style:{"text-align":"left"}},is=n("code",null,"数组",-1),us=n("code",null,"桶排序",-1),rs=n("code",null,"有序集合",-1),ds=n("code",null,"2+",-1),ks=n("td",{style:{"text-align":"center"}},"🔴",-1),ms={style:{"text-align":"center"}},hs={href:"https://leetcode.cn/problems/contains-duplicate-iii",target:"_blank",rel:"noopener noreferrer"},bs={href:"https://leetcode.com/problems/contains-duplicate-iii",target:"_blank",rel:"noopener noreferrer"},_s=n("td",{style:{"text-align":"center"}},"1941",-1),vs=n("td",{style:{"text-align":"left"}},"检查是否所有字符出现次数相同",-1),ys={style:{"text-align":"center"}},gs={style:{"text-align":"left"}},fs=n("code",null,"哈希表",-1),ws=n("code",null,"字符串",-1),xs=n("code",null,"计数",-1),Ms=n("td",{style:{"text-align":"center"}},"🟢",-1),js={style:{"text-align":"center"}},Ss={href:"https://leetcode.cn/problems/check-if-all-characters-have-equal-number-of-occurrences",target:"_blank",rel:"noopener noreferrer"},Hs={href:"https://leetcode.com/problems/check-if-all-characters-have-equal-number-of-occurrences",target:"_blank",rel:"noopener noreferrer"},Ts=n("td",{style:{"text-align":"center"}},"136",-1),qs=n("td",{style:{"text-align":"left"}},"只出现一次的数字",-1),Os={style:{"text-align":"center"}},Ns={style:{"text-align":"left"}},As=n("code",null,"位运算",-1),Es=n("code",null,"数组",-1),Ls=n("td",{style:{"text-align":"center"}},"🟢",-1),zs={style:{"text-align":"center"}},Js={href:"https://leetcode.cn/problems/single-number",target:"_blank",rel:"noopener noreferrer"},Is={href:"https://leetcode.com/problems/single-number",target:"_blank",rel:"noopener noreferrer"},Cs=n("td",{style:{"text-align":"center"}},"383",-1),Ds=n("td",{style:{"text-align":"left"}},"赎金信",-1),Bs={style:{"text-align":"center"}},Vs={style:{"text-align":"left"}},Rs=n("code",null,"哈希表",-1),Fs=n("code",null,"字符串",-1),Ys=n("code",null,"计数",-1),Ps=n("td",{style:{"text-align":"center"}},"🟢",-1),Us={style:{"text-align":"center"}},Ks={href:"https://leetcode.cn/problems/ransom-note",target:"_blank",rel:"noopener noreferrer"},Xs={href:"https://leetcode.com/problems/ransom-note",target:"_blank",rel:"noopener noreferrer"},$s=n("td",{style:{"text-align":"center"}},"349",-1),Gs=n("td",{style:{"text-align":"left"}},"两个数组的交集",-1),Qs={style:{"text-align":"center"}},Ws={style:{"text-align":"left"}},Zs=n("code",null,"数组",-1),na=n("code",null,"哈希表",-1),sa=n("code",null,"双指针",-1),aa=n("code",null,"2+",-1),ta=n("td",{style:{"text-align":"center"}},"🟢",-1),ea={style:{"text-align":"center"}},oa={href:"https://leetcode.cn/problems/intersection-of-two-arrays",target:"_blank",rel:"noopener noreferrer"},ca={href:"https://leetcode.com/problems/intersection-of-two-arrays",target:"_blank",rel:"noopener noreferrer"},pa=n("td",{style:{"text-align":"center"}},"350",-1),la=n("td",{style:{"text-align":"left"}},"两个数组的交集 II",-1),ia={style:{"text-align":"center"}},ua={style:{"text-align":"left"}},ra=n("code",null,"数组",-1),da=n("code",null,"哈希表",-1),ka=n("code",null,"双指针",-1),ma=n("code",null,"2+",-1),ha=n("td",{style:{"text-align":"center"}},"🟢",-1),ba={style:{"text-align":"center"}},_a={href:"https://leetcode.cn/problems/intersection-of-two-arrays-ii",target:"_blank",rel:"noopener noreferrer"},va={href:"https://leetcode.com/problems/intersection-of-two-arrays-ii",target:"_blank",rel:"noopener noreferrer"},ya=n("td",{style:{"text-align":"center"}},"36",-1),ga=n("td",{style:{"text-align":"left"}},"有效的数独",-1),fa={style:{"text-align":"center"}},wa={style:{"text-align":"left"}},xa=n("code",null,"数组",-1),Ma=n("code",null,"哈希表",-1),ja=n("code",null,"矩阵",-1),Sa=n("td",{style:{"text-align":"center"}},"🟠",-1),Ha={style:{"text-align":"center"}},Ta={href:"https://leetcode.cn/problems/valid-sudoku",target:"_blank",rel:"noopener noreferrer"},qa={href:"https://leetcode.com/problems/valid-sudoku",target:"_blank",rel:"noopener noreferrer"},Oa=n("td",{style:{"text-align":"center"}},"1",-1),Na=n("td",{style:{"text-align":"left"}},"两数之和",-1),Aa={style:{"text-align":"center"}},Ea={style:{"text-align":"left"}},La=n("code",null,"数组",-1),za=n("code",null,"哈希表",-1),Ja=n("td",{style:{"text-align":"center"}},"🟢",-1),Ia={style:{"text-align":"center"}},Ca={href:"https://leetcode.cn/problems/two-sum",target:"_blank",rel:"noopener noreferrer"},Da={href:"https://leetcode.com/problems/two-sum",target:"_blank",rel:"noopener noreferrer"},Ba=n("td",{style:{"text-align":"center"}},"15",-1),Va=n("td",{style:{"text-align":"left"}},"三数之和",-1),Ra={style:{"text-align":"center"}},Fa={style:{"text-align":"left"}},Ya=n("code",null,"数组",-1),Pa=n("code",null,"双指针",-1),Ua=n("code",null,"排序",-1),Ka=n("td",{style:{"text-align":"center"}},"🟠",-1),Xa={style:{"text-align":"center"}},$a={href:"https://leetcode.cn/problems/3sum",target:"_blank",rel:"noopener noreferrer"},Ga={href:"https://leetcode.com/problems/3sum",target:"_blank",rel:"noopener noreferrer"},Qa=n("td",{style:{"text-align":"center"}},"18",-1),Wa=n("td",{style:{"text-align":"left"}},"四数之和",-1),Za={style:{"text-align":"center"}},nt={style:{"text-align":"left"}},st=n("code",null,"数组",-1),at=n("code",null,"双指针",-1),tt=n("code",null,"排序",-1),et=n("td",{style:{"text-align":"center"}},"🟠",-1),ot={style:{"text-align":"center"}},ct={href:"https://leetcode.cn/problems/4sum",target:"_blank",rel:"noopener noreferrer"},pt={href:"https://leetcode.com/problems/4sum",target:"_blank",rel:"noopener noreferrer"},lt=n("td",{style:{"text-align":"center"}},"454",-1),it=n("td",{style:{"text-align":"left"}},"四数相加 II",-1),ut={style:{"text-align":"center"}},rt={style:{"text-align":"left"}},dt=n("code",null,"数组",-1),kt=n("code",null,"哈希表",-1),mt=n("td",{style:{"text-align":"center"}},"🟠",-1),ht={style:{"text-align":"center"}},bt={href:"https://leetcode.cn/problems/4sum-ii",target:"_blank",rel:"noopener noreferrer"},_t={href:"https://leetcode.com/problems/4sum-ii",target:"_blank",rel:"noopener noreferrer"},vt=n("td",{style:{"text-align":"center"}},"41",-1),yt=n("td",{style:{"text-align":"left"}},"缺失的第一个正数",-1),gt={style:{"text-align":"center"}},ft={style:{"text-align":"left"}},wt=n("code",null,"数组",-1),xt=n("code",null,"哈希表",-1),Mt=n("td",{style:{"text-align":"center"}},"🔴",-1),jt={style:{"text-align":"center"}},St={href:"https://leetcode.cn/problems/first-missing-positive",target:"_blank",rel:"noopener noreferrer"},Ht={href:"https://leetcode.com/problems/first-missing-positive",target:"_blank",rel:"noopener noreferrer"},Tt=n("td",{style:{"text-align":"center"}},"128",-1),qt=n("td",{style:{"text-align":"left"}},"最长连续序列",-1),Ot={style:{"text-align":"center"}},Nt={style:{"text-align":"left"}},At=n("code",null,"并查集",-1),Et=n("code",null,"数组",-1),Lt=n("code",null,"哈希表",-1),zt=n("td",{style:{"text-align":"center"}},"🟠",-1),Jt={style:{"text-align":"center"}},It={href:"https://leetcode.cn/problems/longest-consecutive-sequence",target:"_blank",rel:"noopener noreferrer"},Ct={href:"https://leetcode.com/problems/longest-consecutive-sequence",target:"_blank",rel:"noopener noreferrer"},Dt=n("td",{style:{"text-align":"center"}},"202",-1),Bt=n("td",{style:{"text-align":"left"}},"快乐数",-1),Vt={style:{"text-align":"center"}},Rt={style:{"text-align":"left"}},Ft=n("code",null,"哈希表",-1),Yt=n("code",null,"数学",-1),Pt=n("code",null,"双指针",-1),Ut=n("td",{style:{"text-align":"center"}},"🟢",-1),Kt={style:{"text-align":"center"}},Xt={href:"https://leetcode.cn/problems/happy-number",target:"_blank",rel:"noopener noreferrer"},$t={href:"https://leetcode.com/problems/happy-number",target:"_blank",rel:"noopener noreferrer"},Gt=n("td",{style:{"text-align":"center"}},"242",-1),Qt=n("td",{style:{"text-align":"left"}},"有效的字母异位词",-1),Wt={style:{"text-align":"center"}},Zt={style:{"text-align":"left"}},ne=n("code",null,"哈希表",-1),se=n("code",null,"字符串",-1),ae=n("code",null,"排序",-1),te=n("td",{style:{"text-align":"center"}},"🟢",-1),ee={style:{"text-align":"center"}},oe={href:"https://leetcode.cn/problems/valid-anagram",target:"_blank",rel:"noopener noreferrer"},ce={href:"https://leetcode.com/problems/valid-anagram",target:"_blank",rel:"noopener noreferrer"},pe=n("td",{style:{"text-align":"center"}},"205",-1),le=n("td",{style:{"text-align":"left"}},"同构字符串",-1),ie={style:{"text-align":"center"}},ue={style:{"text-align":"left"}},re=n("code",null,"哈希表",-1),de=n("code",null,"字符串",-1),ke=n("td",{style:{"text-align":"center"}},"🟢",-1),me={style:{"text-align":"center"}},he={href:"https://leetcode.cn/problems/isomorphic-strings",target:"_blank",rel:"noopener noreferrer"},be={href:"https://leetcode.com/problems/isomorphic-strings",target:"_blank",rel:"noopener noreferrer"},_e=n("td",{style:{"text-align":"center"}},"442",-1),ve=n("td",{style:{"text-align":"left"}},"数组中重复的数据",-1),ye={style:{"text-align":"center"}},ge={style:{"text-align":"left"}},fe=n("code",null,"数组",-1),we=n("code",null,"哈希表",-1),xe=n("td",{style:{"text-align":"center"}},"🟠",-1),Me={style:{"text-align":"center"}},je={href:"https://leetcode.cn/problems/find-all-duplicates-in-an-array",target:"_blank",rel:"noopener noreferrer"},Se={href:"https://leetcode.com/problems/find-all-duplicates-in-an-array",target:"_blank",rel:"noopener noreferrer"},He=n("td",{style:{"text-align":"center"}},"剑指 Offer 61",-1),Te=n("td",{style:{"text-align":"left"}},"扑克牌中的顺子",-1),qe={style:{"text-align":"center"}},Oe={style:{"text-align":"left"}},Ne=n("code",null,"数组",-1),Ae=n("code",null,"排序",-1),Ee=n("td",{style:{"text-align":"center"}},"🟢",-1),Le={style:{"text-align":"center"}},ze={href:"https://leetcode.cn/problems/bu-ke-pai-zhong-de-shun-zi-lcof",target:"_blank",rel:"noopener noreferrer"},Je=n("td",{style:{"text-align":"center"}},"268",-1),Ie=n("td",{style:{"text-align":"left"}},"丢失的数字",-1),Ce={style:{"text-align":"center"}},De={style:{"text-align":"left"}},Be=n("code",null,"位运算",-1),Ve=n("code",null,"数组",-1),Re=n("code",null,"哈希表",-1),Fe=n("code",null,"3+",-1),Ye=n("td",{style:{"text-align":"center"}},"🟢",-1),Pe={style:{"text-align":"center"}},Ue={href:"https://leetcode.cn/problems/missing-number",target:"_blank",rel:"noopener noreferrer"},Ke={href:"https://leetcode.com/problems/missing-number",target:"_blank",rel:"noopener noreferrer"},Xe=n("td",{style:{"text-align":"center"}},"剑指 Offer 3",-1),$e=n("td",{style:{"text-align":"left"}},"数组中重复的数字",-1),Ge={style:{"text-align":"center"}},Qe={style:{"text-align":"left"}},We=n("code",null,"数组",-1),Ze=n("code",null,"哈希表",-1),no=n("code",null,"排序",-1),so=n("td",{style:{"text-align":"center"}},"🟢",-1),ao={style:{"text-align":"center"}},to={href:"https://leetcode.cn/problems/shu-zu-zhong-zhong-fu-de-shu-zi-lcof",target:"_blank",rel:"noopener noreferrer"},eo=n("td",{style:{"text-align":"center"}},"451",-1),oo=n("td",{style:{"text-align":"left"}},"根据字符出现频率排序",-1),co={style:{"text-align":"center"}},po={style:{"text-align":"left"}},lo=n("code",null,"哈希表",-1),io=n("code",null,"字符串",-1),uo=n("code",null,"桶排序",-1),ro=n("code",null,"3+",-1),ko=n("td",{style:{"text-align":"center"}},"🟠",-1),mo={style:{"text-align":"center"}},ho={href:"https://leetcode.cn/problems/sort-characters-by-frequency",target:"_blank",rel:"noopener noreferrer"},bo={href:"https://leetcode.com/problems/sort-characters-by-frequency",target:"_blank",rel:"noopener noreferrer"},_o=n("td",{style:{"text-align":"center"}},"49",-1),vo=n("td",{style:{"text-align":"left"}},"字母异位词分组",-1),yo={style:{"text-align":"center"}},go={style:{"text-align":"left"}},fo=n("code",null,"数组",-1),wo=n("code",null,"哈希表",-1),xo=n("code",null,"字符串",-1),Mo=n("code",null,"1+",-1),jo=n("td",{style:{"text-align":"center"}},"🟠",-1),So={style:{"text-align":"center"}},Ho={href:"https://leetcode.cn/problems/group-anagrams",target:"_blank",rel:"noopener noreferrer"},To={href:"https://leetcode.com/problems/group-anagrams",target:"_blank",rel:"noopener noreferrer"},qo=n("td",{style:{"text-align":"center"}},"599",-1),Oo=n("td",{style:{"text-align":"left"}},"两个列表的最小索引总和",-1),No={style:{"text-align":"center"}},Ao={style:{"text-align":"left"}},Eo=n("code",null,"数组",-1),Lo=n("code",null,"哈希表",-1),zo=n("code",null,"字符串",-1),Jo=n("td",{style:{"text-align":"center"}},"🟢",-1),Io={style:{"text-align":"center"}},Co={href:"https://leetcode.cn/problems/minimum-index-sum-of-two-lists",target:"_blank",rel:"noopener noreferrer"},Do={href:"https://leetcode.com/problems/minimum-index-sum-of-two-lists",target:"_blank",rel:"noopener noreferrer"},Bo=n("td",{style:{"text-align":"center"}},"387",-1),Vo=n("td",{style:{"text-align":"left"}},"字符串中的第一个唯一字符",-1),Ro={style:{"text-align":"center"}},Fo={style:{"text-align":"left"}},Yo=n("code",null,"队列",-1),Po=n("code",null,"哈希表",-1),Uo=n("code",null,"字符串",-1),Ko=n("code",null,"1+",-1),Xo=n("td",{style:{"text-align":"center"}},"🟢",-1),$o={style:{"text-align":"center"}},Go={href:"https://leetcode.cn/problems/first-unique-character-in-a-string",target:"_blank",rel:"noopener noreferrer"},Qo={href:"https://leetcode.com/problems/first-unique-character-in-a-string",target:"_blank",rel:"noopener noreferrer"},Wo=n("td",{style:{"text-align":"center"}},"447",-1),Zo=n("td",{style:{"text-align":"left"}},"回旋镖的数量",-1),nc={style:{"text-align":"center"}},sc={style:{"text-align":"left"}},ac=n("code",null,"数组",-1),tc=n("code",null,"哈希表",-1),ec=n("code",null,"数学",-1),oc=n("td",{style:{"text-align":"center"}},"🟠",-1),cc={style:{"text-align":"center"}},pc={href:"https://leetcode.cn/problems/number-of-boomerangs",target:"_blank",rel:"noopener noreferrer"},lc={href:"https://leetcode.com/problems/number-of-boomerangs",target:"_blank",rel:"noopener noreferrer"},ic=n("td",{style:{"text-align":"center"}},"149",-1),uc=n("td",{style:{"text-align":"left"}},"直线上最多的点数",-1),rc={style:{"text-align":"center"}},dc={style:{"text-align":"left"}},kc=n("code",null,"几何",-1),mc=n("code",null,"数组",-1),hc=n("code",null,"哈希表",-1),bc=n("code",null,"1+",-1),_c=n("td",{style:{"text-align":"center"}},"🔴",-1),vc={style:{"text-align":"center"}},yc={href:"https://leetcode.cn/problems/max-points-on-a-line",target:"_blank",rel:"noopener noreferrer"},gc={href:"https://leetcode.com/problems/max-points-on-a-line",target:"_blank",rel:"noopener noreferrer"},fc=n("td",{style:{"text-align":"center"}},"359",-1),wc=n("td",{style:{"text-align":"left"}},"日志速率限制器 🔒",-1),xc=n("td",{style:{"text-align":"center"}},null,-1),Mc={style:{"text-align":"left"}},jc=n("code",null,"设计",-1),Sc=n("code",null,"哈希表",-1),Hc=n("code",null,"数据流",-1),Tc=n("td",{style:{"text-align":"center"}},"🟢",-1),qc={style:{"text-align":"center"}},Oc={href:"https://leetcode.cn/problems/logger-rate-limiter",target:"_blank",rel:"noopener noreferrer"},Nc={href:"https://leetcode.com/problems/logger-rate-limiter",target:"_blank",rel:"noopener noreferrer"},Ac=n("td",{style:{"text-align":"center"}},"811",-1),Ec=n("td",{style:{"text-align":"left"}},"子域名访问计数",-1),Lc=n("td",{style:{"text-align":"center"}},null,-1),zc={style:{"text-align":"left"}},Jc=n("code",null,"数组",-1),Ic=n("code",null,"哈希表",-1),Cc=n("code",null,"字符串",-1),Dc=n("code",null,"1+",-1),Bc=n("td",{style:{"text-align":"center"}},"🟠",-1),Vc={style:{"text-align":"center"}},Rc={href:"https://leetcode.cn/problems/subdomain-visit-count",target:"_blank",rel:"noopener noreferrer"},Fc={href:"https://leetcode.com/problems/subdomain-visit-count",target:"_blank",rel:"noopener noreferrer"};function Yc(Pc,Uc){const o=p("ExternalLinkIcon"),i=p("MdDemo"),e=p("RouterLink");return d(),k("div",null,[b,n("p",null,[s("在真实的情况下，要想找到一个不同的"),_,s("对应的哈希值都不一样的哈希函数，几乎是不可能的。即便像业界著名的 "),n("a",v,[s("MD5"),a(o)]),s("、"),n("a",y,[s("SHA"),a(o)]),s("、"),n("a",g,[s("CRC"),a(o)]),s(" 等哈希算法，也无法完全避免这种 "),f,s("。")]),w,a(i,{title:"相关题目",id:"md-demo-97"},{default:t(()=>[n("h4",x,[M,s(" 📌 "),n("a",j,[s("705. 设计哈希集合 - LeetCode"),a(o)])]),S,H,T,q,O,N,A,E,L,z,J,I,C,D,B,V,R]),code:t(()=>[F]),_:1}),Y,a(i,{title:"相关题目",id:"md-demo-195"},{default:t(()=>[n("h4",P,[U,s(" 📌 "),n("a",K,[s("706. 设计哈希映射 - LeetCode"),a(o)])]),X,$,G,Q,W,Z,nn,sn,an,tn,en,on,cn,pn]),code:t(()=>[ln]),_:1}),un,c(" START TABLE "),c(" Please keep comment here to allow auto update "),c(" DON'T EDIT THIS SECTION, INSTEAD RE-RUN `npm run lc` TO UPDATE "),rn,c(" prettier-ignore "),n("table",null,[dn,n("tbody",null,[n("tr",null,[kn,mn,n("td",hn,[a(e,{to:"/problem/0705.html"},{default:t(()=>[s("[✓]")]),_:1})]),n("td",bn,[a(e,{to:"/tag/design.html"},{default:t(()=>[_n]),_:1}),s(),a(e,{to:"/tag/array.html"},{default:t(()=>[vn]),_:1}),s(),a(e,{to:"/tag/hash-table.html"},{default:t(()=>[yn]),_:1}),s(),gn]),fn,n("td",wn,[n("a",xn,[s("🀄️"),a(o)]),s(),n("a",Mn,[s("🔗"),a(o)])])]),n("tr",null,[jn,Sn,n("td",Hn,[a(e,{to:"/problem/0706.html"},{default:t(()=>[s("[✓]")]),_:1})]),n("td",Tn,[a(e,{to:"/tag/design.html"},{default:t(()=>[qn]),_:1}),s(),a(e,{to:"/tag/array.html"},{default:t(()=>[On]),_:1}),s(),a(e,{to:"/tag/hash-table.html"},{default:t(()=>[Nn]),_:1}),s(),An]),En,n("td",Ln,[n("a",zn,[s("🀄️"),a(o)]),s(),n("a",Jn,[s("🔗"),a(o)])])]),n("tr",null,[In,Cn,n("td",Dn,[a(e,{to:"/problem/0217.html"},{default:t(()=>[s("[✓]")]),_:1})]),n("td",Bn,[a(e,{to:"/tag/array.html"},{default:t(()=>[Vn]),_:1}),s(),a(e,{to:"/tag/hash-table.html"},{default:t(()=>[Rn]),_:1}),s(),a(e,{to:"/tag/sorting.html"},{default:t(()=>[Fn]),_:1})]),Yn,n("td",Pn,[n("a",Un,[s("🀄️"),a(o)]),s(),n("a",Kn,[s("🔗"),a(o)])])]),n("tr",null,[Xn,$n,n("td",Gn,[a(e,{to:"/problem/0219.html"},{default:t(()=>[s("[✓]")]),_:1})]),n("td",Qn,[a(e,{to:"/tag/array.html"},{default:t(()=>[Wn]),_:1}),s(),a(e,{to:"/tag/hash-table.html"},{default:t(()=>[Zn]),_:1}),s(),a(e,{to:"/tag/sliding-window.html"},{default:t(()=>[ns]),_:1})]),ss,n("td",as,[n("a",ts,[s("🀄️"),a(o)]),s(),n("a",es,[s("🔗"),a(o)])])]),n("tr",null,[os,cs,ps,n("td",ls,[a(e,{to:"/tag/array.html"},{default:t(()=>[is]),_:1}),s(),a(e,{to:"/tag/bucket-sort.html"},{default:t(()=>[us]),_:1}),s(),a(e,{to:"/tag/ordered-set.html"},{default:t(()=>[rs]),_:1}),s(),ds]),ks,n("td",ms,[n("a",hs,[s("🀄️"),a(o)]),s(),n("a",bs,[s("🔗"),a(o)])])]),n("tr",null,[_s,vs,n("td",ys,[a(e,{to:"/problem/1941.html"},{default:t(()=>[s("[✓]")]),_:1})]),n("td",gs,[a(e,{to:"/tag/hash-table.html"},{default:t(()=>[fs]),_:1}),s(),a(e,{to:"/tag/string.html"},{default:t(()=>[ws]),_:1}),s(),a(e,{to:"/tag/counting.html"},{default:t(()=>[xs]),_:1})]),Ms,n("td",js,[n("a",Ss,[s("🀄️"),a(o)]),s(),n("a",Hs,[s("🔗"),a(o)])])]),n("tr",null,[Ts,qs,n("td",Os,[a(e,{to:"/problem/0136.html"},{default:t(()=>[s("[✓]")]),_:1})]),n("td",Ns,[a(e,{to:"/tag/bit-manipulation.html"},{default:t(()=>[As]),_:1}),s(),a(e,{to:"/tag/array.html"},{default:t(()=>[Es]),_:1})]),Ls,n("td",zs,[n("a",Js,[s("🀄️"),a(o)]),s(),n("a",Is,[s("🔗"),a(o)])])]),n("tr",null,[Cs,Ds,n("td",Bs,[a(e,{to:"/problem/0383.html"},{default:t(()=>[s("[✓]")]),_:1})]),n("td",Vs,[a(e,{to:"/tag/hash-table.html"},{default:t(()=>[Rs]),_:1}),s(),a(e,{to:"/tag/string.html"},{default:t(()=>[Fs]),_:1}),s(),a(e,{to:"/tag/counting.html"},{default:t(()=>[Ys]),_:1})]),Ps,n("td",Us,[n("a",Ks,[s("🀄️"),a(o)]),s(),n("a",Xs,[s("🔗"),a(o)])])]),n("tr",null,[$s,Gs,n("td",Qs,[a(e,{to:"/problem/0349.html"},{default:t(()=>[s("[✓]")]),_:1})]),n("td",Ws,[a(e,{to:"/tag/array.html"},{default:t(()=>[Zs]),_:1}),s(),a(e,{to:"/tag/hash-table.html"},{default:t(()=>[na]),_:1}),s(),a(e,{to:"/tag/two-pointers.html"},{default:t(()=>[sa]),_:1}),s(),aa]),ta,n("td",ea,[n("a",oa,[s("🀄️"),a(o)]),s(),n("a",ca,[s("🔗"),a(o)])])]),n("tr",null,[pa,la,n("td",ia,[a(e,{to:"/problem/0350.html"},{default:t(()=>[s("[✓]")]),_:1})]),n("td",ua,[a(e,{to:"/tag/array.html"},{default:t(()=>[ra]),_:1}),s(),a(e,{to:"/tag/hash-table.html"},{default:t(()=>[da]),_:1}),s(),a(e,{to:"/tag/two-pointers.html"},{default:t(()=>[ka]),_:1}),s(),ma]),ha,n("td",ba,[n("a",_a,[s("🀄️"),a(o)]),s(),n("a",va,[s("🔗"),a(o)])])]),n("tr",null,[ya,ga,n("td",fa,[a(e,{to:"/problem/0036.html"},{default:t(()=>[s("[✓]")]),_:1})]),n("td",wa,[a(e,{to:"/tag/array.html"},{default:t(()=>[xa]),_:1}),s(),a(e,{to:"/tag/hash-table.html"},{default:t(()=>[Ma]),_:1}),s(),a(e,{to:"/tag/matrix.html"},{default:t(()=>[ja]),_:1})]),Sa,n("td",Ha,[n("a",Ta,[s("🀄️"),a(o)]),s(),n("a",qa,[s("🔗"),a(o)])])]),n("tr",null,[Oa,Na,n("td",Aa,[a(e,{to:"/problem/0001.html"},{default:t(()=>[s("[✓]")]),_:1})]),n("td",Ea,[a(e,{to:"/tag/array.html"},{default:t(()=>[La]),_:1}),s(),a(e,{to:"/tag/hash-table.html"},{default:t(()=>[za]),_:1})]),Ja,n("td",Ia,[n("a",Ca,[s("🀄️"),a(o)]),s(),n("a",Da,[s("🔗"),a(o)])])]),n("tr",null,[Ba,Va,n("td",Ra,[a(e,{to:"/problem/0015.html"},{default:t(()=>[s("[✓]")]),_:1})]),n("td",Fa,[a(e,{to:"/tag/array.html"},{default:t(()=>[Ya]),_:1}),s(),a(e,{to:"/tag/two-pointers.html"},{default:t(()=>[Pa]),_:1}),s(),a(e,{to:"/tag/sorting.html"},{default:t(()=>[Ua]),_:1})]),Ka,n("td",Xa,[n("a",$a,[s("🀄️"),a(o)]),s(),n("a",Ga,[s("🔗"),a(o)])])]),n("tr",null,[Qa,Wa,n("td",Za,[a(e,{to:"/problem/0018.html"},{default:t(()=>[s("[✓]")]),_:1})]),n("td",nt,[a(e,{to:"/tag/array.html"},{default:t(()=>[st]),_:1}),s(),a(e,{to:"/tag/two-pointers.html"},{default:t(()=>[at]),_:1}),s(),a(e,{to:"/tag/sorting.html"},{default:t(()=>[tt]),_:1})]),et,n("td",ot,[n("a",ct,[s("🀄️"),a(o)]),s(),n("a",pt,[s("🔗"),a(o)])])]),n("tr",null,[lt,it,n("td",ut,[a(e,{to:"/problem/0454.html"},{default:t(()=>[s("[✓]")]),_:1})]),n("td",rt,[a(e,{to:"/tag/array.html"},{default:t(()=>[dt]),_:1}),s(),a(e,{to:"/tag/hash-table.html"},{default:t(()=>[kt]),_:1})]),mt,n("td",ht,[n("a",bt,[s("🀄️"),a(o)]),s(),n("a",_t,[s("🔗"),a(o)])])]),n("tr",null,[vt,yt,n("td",gt,[a(e,{to:"/problem/0041.html"},{default:t(()=>[s("[✓]")]),_:1})]),n("td",ft,[a(e,{to:"/tag/array.html"},{default:t(()=>[wt]),_:1}),s(),a(e,{to:"/tag/hash-table.html"},{default:t(()=>[xt]),_:1})]),Mt,n("td",jt,[n("a",St,[s("🀄️"),a(o)]),s(),n("a",Ht,[s("🔗"),a(o)])])]),n("tr",null,[Tt,qt,n("td",Ot,[a(e,{to:"/problem/0128.html"},{default:t(()=>[s("[✓]")]),_:1})]),n("td",Nt,[a(e,{to:"/tag/union-find.html"},{default:t(()=>[At]),_:1}),s(),a(e,{to:"/tag/array.html"},{default:t(()=>[Et]),_:1}),s(),a(e,{to:"/tag/hash-table.html"},{default:t(()=>[Lt]),_:1})]),zt,n("td",Jt,[n("a",It,[s("🀄️"),a(o)]),s(),n("a",Ct,[s("🔗"),a(o)])])]),n("tr",null,[Dt,Bt,n("td",Vt,[a(e,{to:"/problem/0202.html"},{default:t(()=>[s("[✓]")]),_:1})]),n("td",Rt,[a(e,{to:"/tag/hash-table.html"},{default:t(()=>[Ft]),_:1}),s(),a(e,{to:"/tag/math.html"},{default:t(()=>[Yt]),_:1}),s(),a(e,{to:"/tag/two-pointers.html"},{default:t(()=>[Pt]),_:1})]),Ut,n("td",Kt,[n("a",Xt,[s("🀄️"),a(o)]),s(),n("a",$t,[s("🔗"),a(o)])])]),n("tr",null,[Gt,Qt,n("td",Wt,[a(e,{to:"/problem/0242.html"},{default:t(()=>[s("[✓]")]),_:1})]),n("td",Zt,[a(e,{to:"/tag/hash-table.html"},{default:t(()=>[ne]),_:1}),s(),a(e,{to:"/tag/string.html"},{default:t(()=>[se]),_:1}),s(),a(e,{to:"/tag/sorting.html"},{default:t(()=>[ae]),_:1})]),te,n("td",ee,[n("a",oe,[s("🀄️"),a(o)]),s(),n("a",ce,[s("🔗"),a(o)])])]),n("tr",null,[pe,le,n("td",ie,[a(e,{to:"/problem/0205.html"},{default:t(()=>[s("[✓]")]),_:1})]),n("td",ue,[a(e,{to:"/tag/hash-table.html"},{default:t(()=>[re]),_:1}),s(),a(e,{to:"/tag/string.html"},{default:t(()=>[de]),_:1})]),ke,n("td",me,[n("a",he,[s("🀄️"),a(o)]),s(),n("a",be,[s("🔗"),a(o)])])]),n("tr",null,[_e,ve,n("td",ye,[a(e,{to:"/problem/0442.html"},{default:t(()=>[s("[✓]")]),_:1})]),n("td",ge,[a(e,{to:"/tag/array.html"},{default:t(()=>[fe]),_:1}),s(),a(e,{to:"/tag/hash-table.html"},{default:t(()=>[we]),_:1})]),xe,n("td",Me,[n("a",je,[s("🀄️"),a(o)]),s(),n("a",Se,[s("🔗"),a(o)])])]),n("tr",null,[He,Te,n("td",qe,[a(e,{to:"/offer/jz_offer_61_1.html"},{default:t(()=>[s("[✓]")]),_:1})]),n("td",Oe,[a(e,{to:"/tag/array.html"},{default:t(()=>[Ne]),_:1}),s(),a(e,{to:"/tag/sorting.html"},{default:t(()=>[Ae]),_:1})]),Ee,n("td",Le,[n("a",ze,[s("🀄️"),a(o)])])]),n("tr",null,[Je,Ie,n("td",Ce,[a(e,{to:"/problem/0268.html"},{default:t(()=>[s("[✓]")]),_:1})]),n("td",De,[a(e,{to:"/tag/bit-manipulation.html"},{default:t(()=>[Be]),_:1}),s(),a(e,{to:"/tag/array.html"},{default:t(()=>[Ve]),_:1}),s(),a(e,{to:"/tag/hash-table.html"},{default:t(()=>[Re]),_:1}),s(),Fe]),Ye,n("td",Pe,[n("a",Ue,[s("🀄️"),a(o)]),s(),n("a",Ke,[s("🔗"),a(o)])])]),n("tr",null,[Xe,$e,n("td",Ge,[a(e,{to:"/offer/jz_offer_03_1.html"},{default:t(()=>[s("[✓]")]),_:1})]),n("td",Qe,[a(e,{to:"/tag/array.html"},{default:t(()=>[We]),_:1}),s(),a(e,{to:"/tag/hash-table.html"},{default:t(()=>[Ze]),_:1}),s(),a(e,{to:"/tag/sorting.html"},{default:t(()=>[no]),_:1})]),so,n("td",ao,[n("a",to,[s("🀄️"),a(o)])])]),n("tr",null,[eo,oo,n("td",co,[a(e,{to:"/problem/0451.html"},{default:t(()=>[s("[✓]")]),_:1})]),n("td",po,[a(e,{to:"/tag/hash-table.html"},{default:t(()=>[lo]),_:1}),s(),a(e,{to:"/tag/string.html"},{default:t(()=>[io]),_:1}),s(),a(e,{to:"/tag/bucket-sort.html"},{default:t(()=>[uo]),_:1}),s(),ro]),ko,n("td",mo,[n("a",ho,[s("🀄️"),a(o)]),s(),n("a",bo,[s("🔗"),a(o)])])]),n("tr",null,[_o,vo,n("td",yo,[a(e,{to:"/problem/0049.html"},{default:t(()=>[s("[✓]")]),_:1})]),n("td",go,[a(e,{to:"/tag/array.html"},{default:t(()=>[fo]),_:1}),s(),a(e,{to:"/tag/hash-table.html"},{default:t(()=>[wo]),_:1}),s(),a(e,{to:"/tag/string.html"},{default:t(()=>[xo]),_:1}),s(),Mo]),jo,n("td",So,[n("a",Ho,[s("🀄️"),a(o)]),s(),n("a",To,[s("🔗"),a(o)])])]),n("tr",null,[qo,Oo,n("td",No,[a(e,{to:"/problem/0599.html"},{default:t(()=>[s("[✓]")]),_:1})]),n("td",Ao,[a(e,{to:"/tag/array.html"},{default:t(()=>[Eo]),_:1}),s(),a(e,{to:"/tag/hash-table.html"},{default:t(()=>[Lo]),_:1}),s(),a(e,{to:"/tag/string.html"},{default:t(()=>[zo]),_:1})]),Jo,n("td",Io,[n("a",Co,[s("🀄️"),a(o)]),s(),n("a",Do,[s("🔗"),a(o)])])]),n("tr",null,[Bo,Vo,n("td",Ro,[a(e,{to:"/problem/0387.html"},{default:t(()=>[s("[✓]")]),_:1})]),n("td",Fo,[a(e,{to:"/tag/queue.html"},{default:t(()=>[Yo]),_:1}),s(),a(e,{to:"/tag/hash-table.html"},{default:t(()=>[Po]),_:1}),s(),a(e,{to:"/tag/string.html"},{default:t(()=>[Uo]),_:1}),s(),Ko]),Xo,n("td",$o,[n("a",Go,[s("🀄️"),a(o)]),s(),n("a",Qo,[s("🔗"),a(o)])])]),n("tr",null,[Wo,Zo,n("td",nc,[a(e,{to:"/problem/0447.html"},{default:t(()=>[s("[✓]")]),_:1})]),n("td",sc,[a(e,{to:"/tag/array.html"},{default:t(()=>[ac]),_:1}),s(),a(e,{to:"/tag/hash-table.html"},{default:t(()=>[tc]),_:1}),s(),a(e,{to:"/tag/math.html"},{default:t(()=>[ec]),_:1})]),oc,n("td",cc,[n("a",pc,[s("🀄️"),a(o)]),s(),n("a",lc,[s("🔗"),a(o)])])]),n("tr",null,[ic,uc,n("td",rc,[a(e,{to:"/problem/0149.html"},{default:t(()=>[s("[✓]")]),_:1})]),n("td",dc,[a(e,{to:"/tag/geometry.html"},{default:t(()=>[kc]),_:1}),s(),a(e,{to:"/tag/array.html"},{default:t(()=>[mc]),_:1}),s(),a(e,{to:"/tag/hash-table.html"},{default:t(()=>[hc]),_:1}),s(),bc]),_c,n("td",vc,[n("a",yc,[s("🀄️"),a(o)]),s(),n("a",gc,[s("🔗"),a(o)])])]),n("tr",null,[fc,wc,xc,n("td",Mc,[a(e,{to:"/tag/design.html"},{default:t(()=>[jc]),_:1}),s(),a(e,{to:"/tag/hash-table.html"},{default:t(()=>[Sc]),_:1}),s(),a(e,{to:"/tag/data-stream.html"},{default:t(()=>[Hc]),_:1})]),Tc,n("td",qc,[n("a",Oc,[s("🀄️"),a(o)]),s(),n("a",Nc,[s("🔗"),a(o)])])]),n("tr",null,[Ac,Ec,Lc,n("td",zc,[a(e,{to:"/tag/array.html"},{default:t(()=>[Jc]),_:1}),s(),a(e,{to:"/tag/hash-table.html"},{default:t(()=>[Ic]),_:1}),s(),a(e,{to:"/tag/string.html"},{default:t(()=>[Cc]),_:1}),s(),Dc]),Bc,n("td",Vc,[n("a",Rc,[s("🀄️"),a(o)]),s(),n("a",Fc,[s("🔗"),a(o)])])])])])])}const $c=r(h,[["render",Yc],["__file","hash.html.vue"]]);export{$c as default};
