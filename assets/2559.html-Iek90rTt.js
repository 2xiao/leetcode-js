import{_ as l,r as c,o as i,c as u,a as n,b as s,d as e,w as t,f as r,e as d}from"./app-aQeLbVW9.js";const k={},h=n("h1",{id:"_2559-统计范围内的元音字符串数",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_2559-统计范围内的元音字符串数","aria-hidden":"true"},"#"),s(" 2559. 统计范围内的元音字符串数")],-1),g=n("code",null,"数组",-1),m=n("code",null,"字符串",-1),q=n("code",null,"前缀和",-1),_={href:"https://leetcode.cn/problems/count-vowel-strings-in-ranges",target:"_blank",rel:"noopener noreferrer"},v=n("code",null,"力扣",-1),b={href:"https://leetcode.com/problems/count-vowel-strings-in-ranges",target:"_blank",rel:"noopener noreferrer"},f=n("code",null,"LeetCode",-1),w=d(`<h2 id="题目" tabindex="-1"><a class="header-anchor" href="#题目" aria-hidden="true">#</a> 题目</h2><p>You are given a <strong>0-indexed</strong> array of strings <code>words</code> and a 2D array of integers <code>queries</code>.</p><p>Each query <code>queries[i] = [li, ri]</code> asks us to find the number of strings present in the range <code>li</code> to <code>ri</code> (both <strong>inclusive</strong>) of <code>words</code> that start and end with a vowel.</p><p>Return <em>an array</em><code>ans</code> <em>of size</em><code>queries.length</code> <em>, where</em><code>ans[i]</code><em>is the answer to the</em><code>i</code>th <em>query</em>.</p><p><strong>Note</strong> that the vowel letters are <code>&#39;a&#39;</code>, <code>&#39;e&#39;</code>, <code>&#39;i&#39;</code>, <code>&#39;o&#39;</code>, and <code>&#39;u&#39;</code>.</p><p><strong>Example 1:</strong></p><blockquote><p>Input: words = [&quot;aba&quot;,&quot;bcb&quot;,&quot;ece&quot;,&quot;aa&quot;,&quot;e&quot;], queries = [[0,2],[1,4],[1,1]]</p><p>Output: [2,3,0]</p><p>Explanation: The strings starting and ending with a vowel are &quot;aba&quot;, &quot;ece&quot;, &quot;aa&quot; and &quot;e&quot;.</p><p>The answer to the query [0,2] is 2 (strings &quot;aba&quot; and &quot;ece&quot;).</p><p>to query [1,4] is 3 (strings &quot;ece&quot;, &quot;aa&quot;, &quot;e&quot;).</p><p>to query [1,1] is 0.</p><p>We return [2,3,0].</p></blockquote><p><strong>Example 2:</strong></p><blockquote><p>Input: words = [&quot;a&quot;,&quot;e&quot;,&quot;i&quot;], queries = [[0,2],[0,1],[2,2]]</p><p>Output: [3,2,1]</p><p>Explanation: Every string satisfies the conditions, so we return [3,2,1].</p></blockquote><p><strong>Constraints:</strong></p><ul><li><code>1 &lt;= words.length &lt;= 10^5</code></li><li><code>1 &lt;= words[i].length &lt;= 40</code></li><li><code>words[i]</code> consists only of lowercase English letters.</li><li><code>sum(words[i].length) &lt;= 3 * 10^5</code></li><li><code>1 &lt;= queries.length &lt;= 10^5</code></li><li><code>0 &lt;= li &lt;= ri &lt; words.length</code></li></ul><h2 id="题目大意" tabindex="-1"><a class="header-anchor" href="#题目大意" aria-hidden="true">#</a> 题目大意</h2><p>给你一个下标从 <strong>0</strong> 开始的字符串数组 <code>words</code> 以及一个二维整数数组 <code>queries</code> 。</p><p>每个查询 <code>queries[i] = [li, ri]</code> 会要求我们统计在 <code>words</code> 中下标在 <code>li</code> 到 <code>ri</code> 范围内（<strong>包含</strong>这两个值）并且以元音开头和结尾的字符串的数目。</p><p>返回一个整数数组，其中数组的第 <code>i</code> 个元素对应第 <code>i</code> 个查询的答案。</p><p><strong>注意：</strong> 元音字母是 <code>&#39;a&#39;</code>、<code>&#39;e&#39;</code>、<code>&#39;i&#39;</code>、<code>&#39;o&#39;</code> 和 <code>&#39;u&#39;</code> 。</p><p><strong>示例 1：</strong></p><blockquote><p><strong>输入：</strong> words = [&quot;aba&quot;,&quot;bcb&quot;,&quot;ece&quot;,&quot;aa&quot;,&quot;e&quot;], queries = [[0,2],[1,4],[1,1]]</p><p><strong>输出：</strong>[2,3,0]</p><p><strong>解释：</strong> 以元音开头和结尾的字符串是 &quot;aba&quot;、&quot;ece&quot;、&quot;aa&quot; 和 &quot;e&quot; 。</p><p>查询 [0,2] 结果为 2（字符串 &quot;aba&quot; 和 &quot;ece&quot;）。</p><p>查询 [1,4] 结果为 3（字符串 &quot;ece&quot;、&quot;aa&quot;、&quot;e&quot;）。</p><p>查询 [1,1] 结果为 0 。</p><p>返回结果 [2,3,0] 。</p></blockquote><p><strong>示例 2：</strong></p><blockquote><p><strong>输入：</strong> words = [&quot;a&quot;,&quot;e&quot;,&quot;i&quot;], queries = [[0,2],[0,1],[2,2]]</p><p><strong>输出：</strong>[3,2,1]</p><p><strong>解释：</strong> 每个字符串都满足这一条件，所以返回 [3,2,1] 。</p></blockquote><p><strong>提示：</strong></p><ul><li><code>1 &lt;= words.length &lt;= 10^5</code></li><li><code>1 &lt;= words[i].length &lt;= 40</code></li><li><code>words[i]</code> 仅由小写英文字母组成</li><li><code>sum(words[i].length) &lt;= 3 * 10^5</code></li><li><code>1 &lt;= queries.length &lt;= 10^5</code></li><li><code>0 &lt;= queries[j][0] &lt;= queries[j][1] &lt; words.length</code></li></ul><h2 id="解题思路" tabindex="-1"><a class="header-anchor" href="#解题思路" aria-hidden="true">#</a> 解题思路</h2><p>为优化查询效率，可以使用<strong>前缀和</strong>的思想。</p><ol><li><p><strong>前缀和数组</strong>：</p><ul><li>维护一个 <code>prefixCount</code> 数组，其中 <code>prefixCount[i]</code> 表示从索引 <code>0</code> 到 <code>i-1</code> 的符合条件的字符串数量。</li><li>初始化 <code>prefixCount[0] = 0</code>，方便计算差值。</li><li>遍历 <code>words</code> 数组，逐步统计符合条件的字符串数量并更新到 <code>prefixCount</code> 中。</li></ul></li><li><p><strong>查询计算</strong>：</p><ul><li>对每个查询 <code>(l, r)</code>，结果等于： <code>result = prefixCount[r + 1] - prefixCount[l]</code></li><li>通过前缀和的性质，可以在 <code>O(1)</code> 时间内计算出结果。</li></ul></li></ol><h4 id="复杂度分析" tabindex="-1"><a class="header-anchor" href="#复杂度分析" aria-hidden="true">#</a> 复杂度分析</h4><ul><li><strong>时间复杂度</strong>：<code>O(n + m)</code>， <ul><li>前缀和计算：<code>O(n)</code>，其中 <code>n</code> 是 <code>words</code> 的长度。</li><li>查询处理：<code>O(m)</code>，其中 <code>m</code> 是 <code>queries</code> 的长度。</li></ul></li><li><strong>空间复杂度</strong>：<code>O(n + m)</code>，维护了一个长度为 <code>n</code> 的前缀和数组，和一个长度为 <code>m</code> 的结果数组。</li></ul><h2 id="代码" tabindex="-1"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>string<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span> <span class="token parameter">words</span>
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span> <span class="token parameter">queries</span>
 * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span>
 */</span>
<span class="token keyword">var</span> <span class="token function-variable function">vowelStrings</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">words<span class="token punctuation">,</span> queries</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">const</span> vowels <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token string">&#39;aeiou&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">let</span> prefixCount <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

	<span class="token comment">// 构建前缀和数组</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> word <span class="token keyword">of</span> words<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>vowels<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>word<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> vowels<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>word<span class="token punctuation">[</span>word<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			count<span class="token operator">++</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		prefixCount<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token comment">// 处理查询</span>
	<span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> <span class="token punctuation">[</span>l<span class="token punctuation">,</span> r<span class="token punctuation">]</span> <span class="token keyword">of</span> queries<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>prefixCount<span class="token punctuation">[</span>r <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> prefixCount<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> res<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="相关题目" tabindex="-1"><a class="header-anchor" href="#相关题目" aria-hidden="true">#</a> 相关题目</h2>`,30),x=n("thead",null,[n("tr",null,[n("th",{style:{"text-align":"center"}},"题号"),n("th",{style:{"text-align":"left"}},"标题"),n("th",{style:{"text-align":"center"}},"题解"),n("th",{style:{"text-align":"left"}},"标签"),n("th",{style:{"text-align":"center"}},"难度"),n("th",{style:{"text-align":"center"}},"力扣")])],-1),y=n("td",{style:{"text-align":"center"}},"1871",-1),C=n("td",{style:{"text-align":"left"}},"跳跃游戏 VII",-1),E=n("td",{style:{"text-align":"center"}},null,-1),j={style:{"text-align":"left"}},O=n("code",null,"字符串",-1),I=n("code",null,"动态规划",-1),N=n("code",null,"前缀和",-1),V=n("code",null,"1+",-1),L=n("td",{style:{"text-align":"center"}},"🟠",-1),B={style:{"text-align":"center"}},R={href:"https://leetcode.cn/problems/jump-game-vii",target:"_blank",rel:"noopener noreferrer"},S={href:"https://leetcode.com/problems/jump-game-vii",target:"_blank",rel:"noopener noreferrer"};function T(z,D){const p=c("font"),o=c("RouterLink"),a=c("ExternalLinkIcon");return i(),u("div",null,[h,n("p",null,[s("🟠 "),e(p,{color:"#ffb800"},{default:t(()=>[s("Medium")]),_:1}),s("  🔖  "),e(o,{to:"/tag/array.html"},{default:t(()=>[g]),_:1}),s(),e(o,{to:"/tag/string.html"},{default:t(()=>[m]),_:1}),s(),e(o,{to:"/tag/prefix-sum.html"},{default:t(()=>[q]),_:1}),s("  🔗 "),n("a",_,[v,e(a)]),s(),n("a",b,[f,e(a)])]),w,r(" prettier-ignore "),n("table",null,[x,n("tbody",null,[n("tr",null,[y,C,E,n("td",j,[e(o,{to:"/tag/string.html"},{default:t(()=>[O]),_:1}),s(),e(o,{to:"/tag/dynamic-programming.html"},{default:t(()=>[I]),_:1}),s(),e(o,{to:"/tag/prefix-sum.html"},{default:t(()=>[N]),_:1}),s(),V]),L,n("td",B,[n("a",R,[s("🀄️"),e(a)]),s(),n("a",S,[s("🔗"),e(a)])])])])])])}const W=l(k,[["render",T],["__file","2559.html.vue"]]);export{W as default};
