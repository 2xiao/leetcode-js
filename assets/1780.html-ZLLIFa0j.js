import{_ as l,r as c,o as p,c as d,a as e,b as n,d as t,w as s,f as i,e as u}from"./app-B5EG-zH0.js";const h={},k=e("h1",{id:"_1780-判断一个数字是否可以表示成三的幂的和",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#_1780-判断一个数字是否可以表示成三的幂的和","aria-hidden":"true"},"#"),n(" 1780. 判断一个数字是否可以表示成三的幂的和")],-1),g=e("code",null,"数学",-1),m={href:"https://leetcode.cn/problems/check-if-number-is-a-sum-of-powers-of-three",target:"_blank",rel:"noopener noreferrer"},_=e("code",null,"力扣",-1),f={href:"https://leetcode.com/problems/check-if-number-is-a-sum-of-powers-of-three",target:"_blank",rel:"noopener noreferrer"},b=e("code",null,"LeetCode",-1),x=u(`<h2 id="题目" tabindex="-1"><a class="header-anchor" href="#题目" aria-hidden="true">#</a> 题目</h2><p>Given an integer <code>n</code>, return <code>true</code> <em>if it is possible to represent</em><code>n</code> <em>as the sum of distinct powers of three.</em> Otherwise, return <code>false</code>.</p><p>An integer <code>y</code> is a power of three if there exists an integer <code>x</code> such that <code>y == 3x</code>.</p><p><strong>Example 1:</strong></p><blockquote><p>Input: n = 12</p><p>Output: true</p><p>Explanation: 12 = 31 + 32</p></blockquote><p><strong>Example 2:</strong></p><blockquote><p>Input: n = 91</p><p>Output: true</p><p>Explanation: 91 = 30 + 32 + 34</p></blockquote><p><strong>Example 3:</strong></p><blockquote><p>Input: n = 21</p><p>Output: false</p></blockquote><p><strong>Constraints:</strong></p><ul><li><code>1 &lt;= n &lt;= 10^7</code></li></ul><h2 id="题目大意" tabindex="-1"><a class="header-anchor" href="#题目大意" aria-hidden="true">#</a> 题目大意</h2><p>给你一个整数 <code>n</code> ，如果你可以将 <code>n</code> 表示成若干个不同的三的幂之和，请你返回 <code>true</code> ，否则请返回 <code>false</code> 。</p><p>对于一个整数 <code>y</code> ，如果存在整数 <code>x</code> 满足 <code>y == 3x</code> ，我们称这个整数 <code>y</code> 是三的幂。</p><p><strong>示例 1：</strong></p><blockquote><p><strong>输入：</strong> n = 12</p><p><strong>输出：</strong> true</p><p><strong>解释：</strong> 12 = 31 + 32</p></blockquote><p><strong>示例 2：</strong></p><blockquote><p><strong>输入：</strong> n = 91</p><p><strong>输出：</strong> true</p><p><strong>解释：</strong> 91 = 30 + 32 + 34</p></blockquote><p><strong>示例 3：</strong></p><blockquote><p><strong>输入：</strong> n = 21</p><p><strong>输出：</strong> false</p></blockquote><p><strong>提示：</strong></p><ul><li><code>1 &lt;= n &lt;= 10^7</code></li></ul><h2 id="解题思路" tabindex="-1"><a class="header-anchor" href="#解题思路" aria-hidden="true">#</a> 解题思路</h2><p>本题的核心思想是 <strong>三进制表示</strong>，判断 <code>n</code> 是否可以表示为 <strong>若干个不同的 <code>3</code> 的幂之和</strong>，即 <code>n</code> 的三进制表示是否只包含 <code>0</code> 和 <code>1</code>。</p><ul><li>如果 <code>n</code> 在三进制表示中含有 <code>2</code>，则无法由 <code>3</code> 的不同幂之和组成（因为 <code>3^i</code> 只能使用一次）。</li><li><strong>模拟 <code>3</code> 进制除法</strong>： <ul><li>每次取 <code>n % 3</code>，如果余数为 <code>2</code>，返回 <code>false</code>。</li><li>否则，将 <code>n</code> 除以 <code>3</code>，继续判断。</li></ul></li></ul><h4 id="复杂度分析" tabindex="-1"><a class="header-anchor" href="#复杂度分析" aria-hidden="true">#</a> 复杂度分析</h4><ul><li><strong>时间复杂度</strong>：<code>O(log n)</code>，每次 <code>n</code> <strong>除以 <code>3</code></strong>，最多执行 <code>O(log_3 n)</code> 次。</li><li><strong>空间复杂度</strong>：<code>O(1)</code>，仅使用常数额外空间。</li></ul><h2 id="代码" tabindex="-1"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">}</span></span> <span class="token parameter">n</span>
 * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>boolean<span class="token punctuation">}</span></span>
 */</span>
<span class="token keyword">var</span> <span class="token function-variable function">checkPowersOfThree</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">while</span> <span class="token punctuation">(</span>n <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">%</span> <span class="token number">3</span> <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
		n <span class="token operator">=</span> <span class="token punctuation">(</span>n <span class="token operator">/</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="相关题目" tabindex="-1"><a class="header-anchor" href="#相关题目" aria-hidden="true">#</a> 相关题目</h2>`,30),v=e("thead",null,[e("tr",null,[e("th",{style:{"text-align":"center"}},"题号"),e("th",{style:{"text-align":"left"}},"标题"),e("th",{style:{"text-align":"center"}},"题解"),e("th",{style:{"text-align":"left"}},"标签"),e("th",{style:{"text-align":"center"}},"难度"),e("th",{style:{"text-align":"center"}},"力扣")])],-1),y=e("td",{style:{"text-align":"center"}},"326",-1),w=e("td",{style:{"text-align":"left"}},"3 的幂",-1),q={style:{"text-align":"center"}},E={style:{"text-align":"left"}},O=e("code",null,"递归",-1),C=e("code",null,"数学",-1),I=e("td",{style:{"text-align":"center"}},"🟢",-1),L={style:{"text-align":"center"}},N={href:"https://leetcode.cn/problems/power-of-three",target:"_blank",rel:"noopener noreferrer"},V={href:"https://leetcode.com/problems/power-of-three",target:"_blank",rel:"noopener noreferrer"};function j(B,R){const r=c("font"),o=c("RouterLink"),a=c("ExternalLinkIcon");return p(),d("div",null,[k,e("p",null,[n("🟠 "),t(r,{color:"#ffb800"},{default:s(()=>[n("Medium")]),_:1}),n("  🔖  "),t(o,{to:"/tag/math.html"},{default:s(()=>[g]),_:1}),n("  🔗 "),e("a",m,[_,t(a)]),n(),e("a",f,[b,t(a)])]),x,i(" prettier-ignore "),e("table",null,[v,e("tbody",null,[e("tr",null,[y,w,e("td",q,[t(o,{to:"/problem/0326.html"},{default:s(()=>[n("[✓]")]),_:1})]),e("td",E,[t(o,{to:"/tag/recursion.html"},{default:s(()=>[O]),_:1}),n(),t(o,{to:"/tag/math.html"},{default:s(()=>[C]),_:1})]),I,e("td",L,[e("a",N,[n("🀄️"),t(a)]),n(),e("a",V,[n("🔗"),t(a)])])])])])])}const A=l(h,[["render",j],["__file","1780.html.vue"]]);export{A as default};
