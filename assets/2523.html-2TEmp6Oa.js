import{_ as l,r as p,o as i,c as r,a as n,b as s,d as a,w as t,f as u,e as d}from"./app-B5EG-zH0.js";const k={},m=n("h1",{id:"_2523-范围内最接近的两个质数",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_2523-范围内最接近的两个质数","aria-hidden":"true"},"#"),s(" 2523. 范围内最接近的两个质数")],-1),h=n("code",null,"数学",-1),g=n("code",null,"数论",-1),v={href:"https://leetcode.cn/problems/closest-prime-numbers-in-range",target:"_blank",rel:"noopener noreferrer"},b=n("code",null,"力扣",-1),f={href:"https://leetcode.com/problems/closest-prime-numbers-in-range",target:"_blank",rel:"noopener noreferrer"},_=n("code",null,"LeetCode",-1),y=d(`<h2 id="题目" tabindex="-1"><a class="header-anchor" href="#题目" aria-hidden="true">#</a> 题目</h2><p>Given two positive integers <code>left</code> and <code>right</code>, find the two integers <code>num1</code> and <code>num2</code> such that:</p><ul><li><code>left &lt;= num1 &lt; num2 &lt;= right </code>.</li><li><code>num1</code> and <code>num2</code> are both <strong>prime</strong> numbers.</li><li><code>num2 - num1</code> is the <strong>minimum</strong> amongst all other pairs satisfying the above conditions.</li></ul><p>Return <em>the positive integer array</em> <code>ans = [num1, num2]</code>. <em>If there are multiple pairs satisfying these conditions, return the one with the minimum</em><code>num1</code> <em>value or</em> <code>[-1, -1]</code> <em>if such numbers do not exist.</em></p><p>A number greater than <code>1</code> is called <strong>prime</strong> if it is only divisible by <code>1</code> and itself.</p><p><strong>Example 1:</strong></p><blockquote><p>Input: left = 10, right = 19</p><p>Output: [11,13]</p><p>Explanation: The prime numbers between 10 and 19 are 11, 13, 17, and 19.</p><p>The closest gap between any pair is 2, which can be achieved by [11,13] or [17,19].</p><p>Since 11 is smaller than 17, we return the first pair.</p></blockquote><p><strong>Example 2:</strong></p><blockquote><p>Input: left = 4, right = 6</p><p>Output: [-1,-1]</p><p>Explanation: There exists only one prime number in the given range, so the conditions cannot be satisfied.</p></blockquote><p><strong>Constraints:</strong></p><ul><li><code>1 &lt;= left &lt;= right &lt;= 10^6</code></li></ul><h2 id="题目大意" tabindex="-1"><a class="header-anchor" href="#题目大意" aria-hidden="true">#</a> 题目大意</h2><p>给你两个正整数 <code>left</code> 和 <code>right</code> ，请你找到两个整数 <code>num1</code> 和 <code>num2</code> ，它们满足：</p><ul><li><code>left &lt;= nums1 &lt; nums2 &lt;= right </code> 。</li><li><code>nums1</code> 和 <code>nums2</code> 都是 <strong>质数</strong> 。</li><li><code>nums2 - nums1</code> 是满足上述条件的质数对中的 <strong>最小值</strong> 。</li></ul><p>请你返回正整数数组 <code>ans = [nums1, nums2]</code> 。如果有多个整数对满足上述条件，请你返回 <code>nums1</code> 最小的质数对。如果不存在符合题意的质数对，请你返回 <code>[-1, -1]</code> 。</p><p>如果一个整数大于 <code>1</code> ，且只能被 <code>1</code> 和它自己整除，那么它是一个 <strong>质数</strong> 。</p><p><strong>示例 1：</strong></p><blockquote><p><strong>输入：</strong> left = 10, right = 19</p><p><strong>输出：</strong>[11,13]</p><p><strong>解释：</strong> 10 到 19 之间的质数为 11 ，13 ，17 和 19 。</p><p>质数对的最小差值是 2 ，[11,13] 和 [17,19] 都可以得到最小差值。</p><p>由于 11 比 17 小，我们返回第一个质数对。</p></blockquote><p><strong>示例 2：</strong></p><blockquote><p><strong>输入：</strong> left = 4, right = 6</p><p><strong>输出：</strong>[-1,-1]</p><p><strong>解释：</strong> 给定范围内只有一个质数，所以题目条件无法被满足。</p></blockquote><p><strong>提示：</strong></p><ul><li><code>1 &lt;= left &lt;= right &lt;= 10^6</code></li></ul><h2 id="解题思路" tabindex="-1"><a class="header-anchor" href="#解题思路" aria-hidden="true">#</a> 解题思路</h2><p><strong>1. 使用埃拉托色尼筛法</strong></p><p>埃拉托色尼筛法是一种高效找出 <code>1</code> 到 <code>n</code> 之间所有质数的方法，时间复杂度为 <strong><code>O(n log log n)</code></strong>，比朴素的 <code>O(n√n)</code> 质数判断快得多。</p><p>对于范围 <code>[2, n]</code>：</p><ul><li>先假设所有数都是质数。</li><li>从 <code>2</code> 开始，将 <code>2</code> 的所有倍数（<code>4, 6, 8, ...</code>）标记为<strong>合数（非质数）</strong>。</li><li>找到下一个未被标记的数 <code>p</code>（它仍然是质数），再标记 <code>p</code> 的所有倍数为合数。</li><li>重复步骤 <strong>2-3</strong>，直到 <code>p^2 &gt; n</code>，筛选结束。</li><li>最后，所有未被标记的数就是<strong>质数</strong>。</li></ul><p><strong>2. 遍历 <code>[left, right]</code> 找最近质数对</strong></p><ul><li>记录上一个质数 <code>prev</code>，计算当前质数 <code>curr</code> 之间的间距。</li><li>维护最小间距的质数对。</li></ul><h4 id="复杂度分析" tabindex="-1"><a class="header-anchor" href="#复杂度分析" aria-hidden="true">#</a> 复杂度分析</h4><ul><li><strong>时间复杂度</strong>：<code>O(n log log n)</code><ul><li>埃氏筛预处理：<code>O(n log log n)</code></li><li>遍历范围 <code>[left, right]</code> 查找：<code>O(n)</code></li></ul></li><li><strong>空间复杂度</strong>：<code>O(n)</code>，存储质数标记。</li></ul><h2 id="代码" tabindex="-1"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">}</span></span> <span class="token parameter">left</span>
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">}</span></span> <span class="token parameter">right</span>
 * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span>
 */</span>
<span class="token keyword">var</span> <span class="token function-variable function">closestPrimes</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">left<span class="token punctuation">,</span> right</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">// 埃氏筛预处理所有质数</span>
	<span class="token keyword">const</span> sieve <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>right <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	sieve<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> sieve<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment">// 0 和 1 不是质数</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">*</span> i <span class="token operator">&lt;=</span> right<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>sieve<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> i <span class="token operator">*</span> i<span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> right<span class="token punctuation">;</span> j <span class="token operator">+=</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
				sieve<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>

	<span class="token comment">// 遍历 [left, right]，找最近的质数对</span>
	<span class="token keyword">let</span> prev <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>
		minGap <span class="token operator">=</span> <span class="token number">Infinity</span><span class="token punctuation">,</span>
		result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> left<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> right<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>sieve<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span>prev <span class="token operator">!==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> i <span class="token operator">-</span> prev <span class="token operator">&lt;</span> minGap<span class="token punctuation">)</span> <span class="token punctuation">{</span>
				minGap <span class="token operator">=</span> i <span class="token operator">-</span> prev<span class="token punctuation">;</span>
				result <span class="token operator">=</span> <span class="token punctuation">[</span>prev<span class="token punctuation">,</span> i<span class="token punctuation">]</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span>
			prev <span class="token operator">=</span> i<span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="相关题目" tabindex="-1"><a class="header-anchor" href="#相关题目" aria-hidden="true">#</a> 相关题目</h2>`,34),x=n("thead",null,[n("tr",null,[n("th",{style:{"text-align":"center"}},"题号"),n("th",{style:{"text-align":"left"}},"标题"),n("th",{style:{"text-align":"center"}},"题解"),n("th",{style:{"text-align":"left"}},"标签"),n("th",{style:{"text-align":"center"}},"难度"),n("th",{style:{"text-align":"center"}},"力扣")])],-1),w=n("td",{style:{"text-align":"center"}},"1735",-1),q=n("td",{style:{"text-align":"left"}},"生成乘积数组的方案数",-1),O=n("td",{style:{"text-align":"center"}},null,-1),j={style:{"text-align":"left"}},E=n("code",null,"数组",-1),I=n("code",null,"数学",-1),C=n("code",null,"动态规划",-1),L=n("code",null,"2+",-1),N=n("td",{style:{"text-align":"center"}},"🔴",-1),V={style:{"text-align":"center"}},G={href:"https://leetcode.cn/problems/count-ways-to-make-array-with-product",target:"_blank",rel:"noopener noreferrer"},T={href:"https://leetcode.com/problems/count-ways-to-make-array-with-product",target:"_blank",rel:"noopener noreferrer"};function B(R,A){const c=p("font"),e=p("RouterLink"),o=p("ExternalLinkIcon");return i(),r("div",null,[m,n("p",null,[s("🟠 "),a(c,{color:"#ffb800"},{default:t(()=>[s("Medium")]),_:1}),s("  🔖  "),a(e,{to:"/tag/math.html"},{default:t(()=>[h]),_:1}),s(),a(e,{to:"/tag/number-theory.html"},{default:t(()=>[g]),_:1}),s("  🔗 "),n("a",v,[b,a(o)]),s(),n("a",f,[_,a(o)])]),y,u(" prettier-ignore "),n("table",null,[x,n("tbody",null,[n("tr",null,[w,q,O,n("td",j,[a(e,{to:"/tag/array.html"},{default:t(()=>[E]),_:1}),s(),a(e,{to:"/tag/math.html"},{default:t(()=>[I]),_:1}),s(),a(e,{to:"/tag/dynamic-programming.html"},{default:t(()=>[C]),_:1}),s(),L]),N,n("td",V,[n("a",G,[s("🀄️"),a(o)]),s(),n("a",T,[s("🔗"),a(o)])])])])])])}const M=l(k,[["render",B],["__file","2523.html.vue"]]);export{M as default};
