import{_ as p,r as c,o as d,c as i,a as e,b as n,d as t,w as s,f as r,e as u}from"./app-B5EG-zH0.js";const k={},h=e("h1",{id:"_2116-判断一个括号字符串是否有效",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#_2116-判断一个括号字符串是否有效","aria-hidden":"true"},"#"),n(" 2116. 判断一个括号字符串是否有效")],-1),g=e("code",null,"栈",-1),_=e("code",null,"贪心",-1),m=e("code",null,"字符串",-1),f={href:"https://leetcode.cn/problems/check-if-a-parentheses-string-can-be-valid",target:"_blank",rel:"noopener noreferrer"},b=e("code",null,"力扣",-1),v={href:"https://leetcode.com/problems/check-if-a-parentheses-string-can-be-valid",target:"_blank",rel:"noopener noreferrer"},y=e("code",null,"LeetCode",-1),x=u(`<h2 id="题目" tabindex="-1"><a class="header-anchor" href="#题目" aria-hidden="true">#</a> 题目</h2><p>A parentheses string is a <strong>non-empty</strong> string consisting only of <code>&#39;(&#39;</code> and <code>&#39;)&#39;</code>. It is valid if <strong>any</strong> of the following conditions is <strong>true</strong> :</p><ul><li>It is <code>()</code>.</li><li>It can be written as <code>AB</code> (<code>A</code> concatenated with <code>B</code>), where <code>A</code> and <code>B</code> are valid parentheses strings.</li><li>It can be written as <code>(A)</code>, where <code>A</code> is a valid parentheses string.</li></ul><p>You are given a parentheses string <code>s</code> and a string <code>locked</code>, both of length <code>n</code>. <code>locked</code> is a binary string consisting only of <code>&#39;0&#39;</code>s and <code>&#39;1&#39;</code>s. For <strong>each</strong> index <code>i</code> of <code>locked</code>,</p><ul><li>If <code>locked[i]</code> is <code>&#39;1&#39;</code>, you <strong>cannot</strong> change <code>s[i]</code>.</li><li>But if <code>locked[i]</code> is <code>&#39;0&#39;</code>, you <strong>can</strong> change <code>s[i]</code> to either <code>&#39;(&#39;</code> or <code>&#39;)&#39;</code>.</li></ul><p>Return <code>true</code> <em>if you can make<code>s</code> a valid parentheses string</em>. Otherwise, return <code>false</code>.</p><p><strong>Example 1:</strong></p><figure><img src="https://assets.leetcode.com/uploads/2021/11/06/eg1.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><blockquote><p>Input: s = &quot;))()))&quot;, locked = &quot;010100&quot;</p><p>Output: true</p><p>Explanation: locked[1] == &#39;1&#39; and locked[3] == &#39;1&#39;, so we cannot change s[1] or s[3].</p><p>We change s[0] and s[4] to &#39;(&#39; while leaving s[2] and s[5] unchanged to make s valid.</p></blockquote><p><strong>Example 2:</strong></p><blockquote><p>Input: s = &quot;()()&quot;, locked = &quot;0000&quot;</p><p>Output: true</p><p>Explanation: We do not need to make any changes because s is already valid.</p></blockquote><p><strong>Example 3:</strong></p><blockquote><p>Input: s = &quot;)&quot;, locked = &quot;0&quot;</p><p>Output: false</p><p>Explanation: locked permits us to change s[0].</p><p>Changing s[0] to either &#39;(&#39; or &#39;)&#39; will not make s valid.</p></blockquote><p><strong>Constraints:</strong></p><ul><li><code>n == s.length == locked.length</code></li><li><code>1 &lt;= n &lt;= 10^5</code></li><li><code>s[i]</code> is either <code>&#39;(&#39;</code> or <code>&#39;)&#39;</code>.</li><li><code>locked[i]</code> is either <code>&#39;0&#39;</code> or <code>&#39;1&#39;</code>.</li></ul><h2 id="题目大意" tabindex="-1"><a class="header-anchor" href="#题目大意" aria-hidden="true">#</a> 题目大意</h2><p>一个括号字符串是只由 <code>&#39;(&#39;</code> 和 <code>&#39;)&#39;</code> 组成的 <strong>非空</strong> 字符串。如果一个字符串满足下面 <strong>任意</strong> 一个条件，那么它就是有效的：</p><ul><li>字符串为 <code>()</code>.</li><li>它可以表示为 <code>AB</code>（<code>A</code> 与 <code>B</code> 连接），其中<code>A</code> 和 <code>B</code> 都是有效括号字符串。</li><li>它可以表示为 <code>(A)</code> ，其中 <code>A</code> 是一个有效括号字符串。</li></ul><p>给你一个括号字符串 <code>s</code> 和一个字符串 <code>locked</code> ，两者长度都为 <code>n</code> 。<code>locked</code> 是一个二进制字符串，只包含 <code>&#39;0&#39;</code> 和 <code>&#39;1&#39;</code> 。对于 <code>locked</code> 中 <strong>每一个</strong> 下标 <code>i</code> ：</p><ul><li>如果 <code>locked[i]</code> 是 <code>&#39;1&#39;</code> ，你 <strong>不能</strong> 改变 <code>s[i]</code> 。</li><li>如果 <code>locked[i]</code> 是 <code>&#39;0&#39;</code> ，你 <strong>可以</strong> 将 <code>s[i]</code> 变为 <code>&#39;(&#39;</code> 或者 <code>&#39;)&#39;</code> 。</li></ul><p>如果你可以将 <code>s</code> 变为有效括号字符串，请你返回 <code>true</code> ，否则返回 <code>false</code> 。</p><p><strong>示例 1：</strong></p><figure><img src="https://assets.leetcode.com/uploads/2021/11/06/eg1.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><blockquote><p><strong>输入：</strong> s = &quot;))()))&quot;, locked = &quot;010100&quot;</p><p><strong>输出：</strong> true</p><p><strong>解释：</strong> locked[1] == &#39;1&#39; 和 locked[3] == &#39;1&#39; ，所以我们无法改变 s[1] 或者 s[3] 。</p><p>我们可以将 s[0] 和 s[4] 变为 &#39;(&#39; ，不改变 s[2] 和 s[5] ，使 s 变为有效字符串。</p></blockquote><p><strong>示例 2：</strong></p><blockquote><p><strong>输入：</strong> s = &quot;()()&quot;, locked = &quot;0000&quot;</p><p><strong>输出：</strong> true</p><p><strong>解释：</strong> 我们不需要做任何改变，因为 s 已经是有效字符串了。</p></blockquote><p><strong>示例 3：</strong></p><blockquote><p><strong>输入：</strong> s = &quot;)&quot;, locked = &quot;0&quot;</p><p><strong>输出：</strong> false</p><p><strong>解释：</strong> locked 允许改变 s[0] 。</p><p>但无论将 s[0] 变为 &#39;(&#39; 或者 &#39;)&#39; 都无法使 s 变为有效字符串。</p></blockquote><p><strong>提示：</strong></p><ul><li><code>n == s.length == locked.length</code></li><li><code>1 &lt;= n &lt;= 10^5</code></li><li><code>s[i]</code> 要么是 <code>&#39;(&#39;</code> 要么是 <code>&#39;)&#39;</code> 。</li><li><code>locked[i]</code> 要么是 <code>&#39;0&#39;</code> 要么是 <code>&#39;1&#39;</code> 。</li></ul><h2 id="解题思路" tabindex="-1"><a class="header-anchor" href="#解题思路" aria-hidden="true">#</a> 解题思路</h2><ol><li><p><strong>长度约束</strong></p><ul><li>如果字符串长度 <code>s.length</code> 是奇数，则直接返回 <code>false</code>，因为有效括号字符串长度必为偶数。</li></ul></li><li><p><strong>贪心验证</strong></p><ul><li>从左向右遍历： <ul><li>用一个计数器 <code>openCount</code> 表示“可用的左括号数量”，包括未锁定的字符。</li><li>如果遇到 <code>&#39;(&#39;</code> 或未锁定的字符 <code>locked[i] == &#39;0&#39;</code>，则 <code>openCount++</code>。</li><li>如果遇到 <code>&#39;)&#39;</code> 并且 <code>locked[i] == &#39;1&#39;</code>，则 <code>openCount--</code>。</li><li>如果 <code>openCount</code> 小于 0，说明右括号多于可用的左括号，直接返回 <code>false</code>。</li></ul></li><li>从右向左遍历： <ul><li>用一个计数器 <code>closeCount</code> 表示“可用的右括号数量”。</li><li>同理，更新 <code>closeCount</code>，并检查是否满足条件。</li></ul></li></ul></li></ol><h4 id="复杂度分析" tabindex="-1"><a class="header-anchor" href="#复杂度分析" aria-hidden="true">#</a> 复杂度分析</h4><ul><li><strong>时间复杂度</strong>：<code>O(n)</code>，两次遍历字符串。</li><li><strong>空间复杂度</strong>：<code>O(1)</code>，使用了常数空间来存储计数器 <code>openCount</code> 和 <code>closeCount</code>。</li></ul><h2 id="代码" tabindex="-1"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>string<span class="token punctuation">}</span></span> <span class="token parameter">s</span>
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>string<span class="token punctuation">}</span></span> <span class="token parameter">locked</span>
 * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>boolean<span class="token punctuation">}</span></span>
 */</span>
<span class="token keyword">var</span> <span class="token function-variable function">canBeValid</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">s<span class="token punctuation">,</span> locked</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span>length <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>

	<span class="token keyword">let</span> openCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> s<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">&#39;(&#39;</span> <span class="token operator">||</span> locked<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">&#39;0&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			openCount<span class="token operator">++</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
			openCount<span class="token operator">--</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>openCount <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment">// 右括号过多</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">let</span> closeCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> s<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">&#39;)&#39;</span> <span class="token operator">||</span> locked<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">&#39;0&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			closeCount<span class="token operator">++</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
			closeCount<span class="token operator">--</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>closeCount <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment">// 左括号过多</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="相关题目" tabindex="-1"><a class="header-anchor" href="#相关题目" aria-hidden="true">#</a> 相关题目</h2>`,37),q=e("thead",null,[e("tr",null,[e("th",{style:{"text-align":"center"}},"题号"),e("th",{style:{"text-align":"left"}},"标题"),e("th",{style:{"text-align":"center"}},"题解"),e("th",{style:{"text-align":"left"}},"标签"),e("th",{style:{"text-align":"center"}},"难度"),e("th",{style:{"text-align":"center"}},"力扣")])],-1),w=e("td",{style:{"text-align":"center"}},"20",-1),C=e("td",{style:{"text-align":"left"}},"有效的括号",-1),A={style:{"text-align":"center"}},B={style:{"text-align":"left"}},I=e("code",null,"栈",-1),E=e("code",null,"字符串",-1),O=e("td",{style:{"text-align":"center"}},"🟢",-1),V={style:{"text-align":"center"}},L={href:"https://leetcode.cn/problems/valid-parentheses",target:"_blank",rel:"noopener noreferrer"},N={href:"https://leetcode.com/problems/valid-parentheses",target:"_blank",rel:"noopener noreferrer"},j=e("td",{style:{"text-align":"center"}},"22",-1),R=e("td",{style:{"text-align":"left"}},"括号生成",-1),z={style:{"text-align":"center"}},W={style:{"text-align":"left"}},F=e("code",null,"字符串",-1),M=e("code",null,"动态规划",-1),S=e("code",null,"回溯",-1),T=e("td",{style:{"text-align":"center"}},"🟠",-1),Y={style:{"text-align":"center"}},D={href:"https://leetcode.cn/problems/generate-parentheses",target:"_blank",rel:"noopener noreferrer"},G={href:"https://leetcode.com/problems/generate-parentheses",target:"_blank",rel:"noopener noreferrer"},H=e("td",{style:{"text-align":"center"}},"678",-1),J=e("td",{style:{"text-align":"left"}},"有效的括号字符串",-1),K={style:{"text-align":"center"}},P={style:{"text-align":"left"}},Q=e("code",null,"栈",-1),U=e("code",null,"贪心",-1),X=e("code",null,"字符串",-1),Z=e("code",null,"1+",-1),$=e("td",{style:{"text-align":"center"}},"🟠",-1),ee={style:{"text-align":"center"}},ne={href:"https://leetcode.cn/problems/valid-parenthesis-string",target:"_blank",rel:"noopener noreferrer"},te={href:"https://leetcode.com/problems/valid-parenthesis-string",target:"_blank",rel:"noopener noreferrer"},se=e("td",{style:{"text-align":"center"}},"1249",-1),oe=e("td",{style:{"text-align":"left"}},"移除无效的括号",-1),ae=e("td",{style:{"text-align":"center"}},null,-1),ce={style:{"text-align":"left"}},le=e("code",null,"栈",-1),pe=e("code",null,"字符串",-1),de=e("td",{style:{"text-align":"center"}},"🟠",-1),ie={style:{"text-align":"center"}},re={href:"https://leetcode.cn/problems/minimum-remove-to-make-valid-parentheses",target:"_blank",rel:"noopener noreferrer"},ue={href:"https://leetcode.com/problems/minimum-remove-to-make-valid-parentheses",target:"_blank",rel:"noopener noreferrer"},ke=e("td",{style:{"text-align":"center"}},"2267",-1),he=e("td",{style:{"text-align":"left"}},"检查是否有合法括号字符串路径",-1),ge=e("td",{style:{"text-align":"center"}},null,-1),_e={style:{"text-align":"left"}},me=e("code",null,"数组",-1),fe=e("code",null,"动态规划",-1),be=e("code",null,"矩阵",-1),ve=e("td",{style:{"text-align":"center"}},"🔴",-1),ye={style:{"text-align":"center"}},xe={href:"https://leetcode.cn/problems/check-if-there-is-a-valid-parentheses-string-path",target:"_blank",rel:"noopener noreferrer"},qe={href:"https://leetcode.com/problems/check-if-there-is-a-valid-parentheses-string-path",target:"_blank",rel:"noopener noreferrer"};function we(Ce,Ae){const l=c("font"),o=c("RouterLink"),a=c("ExternalLinkIcon");return d(),i("div",null,[h,e("p",null,[n("🟠 "),t(l,{color:"#ffb800"},{default:s(()=>[n("Medium")]),_:1}),n("  🔖  "),t(o,{to:"/tag/stack.html"},{default:s(()=>[g]),_:1}),n(),t(o,{to:"/tag/greedy.html"},{default:s(()=>[_]),_:1}),n(),t(o,{to:"/tag/string.html"},{default:s(()=>[m]),_:1}),n("  🔗 "),e("a",f,[b,t(a)]),n(),e("a",v,[y,t(a)])]),x,r(" prettier-ignore "),e("table",null,[q,e("tbody",null,[e("tr",null,[w,C,e("td",A,[t(o,{to:"/problem/0020.html"},{default:s(()=>[n("[✓]")]),_:1})]),e("td",B,[t(o,{to:"/tag/stack.html"},{default:s(()=>[I]),_:1}),n(),t(o,{to:"/tag/string.html"},{default:s(()=>[E]),_:1})]),O,e("td",V,[e("a",L,[n("🀄️"),t(a)]),n(),e("a",N,[n("🔗"),t(a)])])]),e("tr",null,[j,R,e("td",z,[t(o,{to:"/problem/0022.html"},{default:s(()=>[n("[✓]")]),_:1})]),e("td",W,[t(o,{to:"/tag/string.html"},{default:s(()=>[F]),_:1}),n(),t(o,{to:"/tag/dynamic-programming.html"},{default:s(()=>[M]),_:1}),n(),t(o,{to:"/tag/backtracking.html"},{default:s(()=>[S]),_:1})]),T,e("td",Y,[e("a",D,[n("🀄️"),t(a)]),n(),e("a",G,[n("🔗"),t(a)])])]),e("tr",null,[H,J,e("td",K,[t(o,{to:"/problem/0678.html"},{default:s(()=>[n("[✓]")]),_:1})]),e("td",P,[t(o,{to:"/tag/stack.html"},{default:s(()=>[Q]),_:1}),n(),t(o,{to:"/tag/greedy.html"},{default:s(()=>[U]),_:1}),n(),t(o,{to:"/tag/string.html"},{default:s(()=>[X]),_:1}),n(),Z]),$,e("td",ee,[e("a",ne,[n("🀄️"),t(a)]),n(),e("a",te,[n("🔗"),t(a)])])]),e("tr",null,[se,oe,ae,e("td",ce,[t(o,{to:"/tag/stack.html"},{default:s(()=>[le]),_:1}),n(),t(o,{to:"/tag/string.html"},{default:s(()=>[pe]),_:1})]),de,e("td",ie,[e("a",re,[n("🀄️"),t(a)]),n(),e("a",ue,[n("🔗"),t(a)])])]),e("tr",null,[ke,he,ge,e("td",_e,[t(o,{to:"/tag/array.html"},{default:s(()=>[me]),_:1}),n(),t(o,{to:"/tag/dynamic-programming.html"},{default:s(()=>[fe]),_:1}),n(),t(o,{to:"/tag/matrix.html"},{default:s(()=>[be]),_:1})]),ve,e("td",ye,[e("a",xe,[n("🀄️"),t(a)]),n(),e("a",qe,[n("🔗"),t(a)])])])])])])}const Ie=p(k,[["render",we],["__file","2116.html.vue"]]);export{Ie as default};
