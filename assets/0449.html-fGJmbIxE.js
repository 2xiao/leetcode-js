import{_ as c,r as l,o as r,c as i,a as n,b as s,d as t,w as a,f as d,e as u}from"./app-fBVbqwGY.js";const k={},h=n("h1",{id:"_449-序列化和反序列化二叉搜索树",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_449-序列化和反序列化二叉搜索树","aria-hidden":"true"},"#"),s(" 449. 序列化和反序列化二叉搜索树")],-1),_=n("code",null,"树",-1),g=n("code",null,"深度优先搜索",-1),m=n("code",null,"广度优先搜索",-1),b=n("code",null,"设计",-1),v=n("code",null,"二叉搜索树",-1),f=n("code",null,"字符串",-1),y=n("code",null,"二叉树",-1),x={href:"https://leetcode.cn/problems/serialize-and-deserialize-bst",target:"_blank",rel:"noopener noreferrer"},w=n("code",null,"力扣",-1),z={href:"https://leetcode.com/problems/serialize-and-deserialize-bst",target:"_blank",rel:"noopener noreferrer"},T=n("code",null,"LeetCode",-1),N=u(`<h2 id="题目" tabindex="-1"><a class="header-anchor" href="#题目" aria-hidden="true">#</a> 题目</h2><p>Serialization is converting a data structure or object into a sequence of bits so that it can be stored in a file or memory buffer, or transmitted across a network connection link to be reconstructed later in the same or another computer environment.</p><p>Design an algorithm to serialize and deserialize a <strong>binary search tree</strong>. There is no restriction on how your serialization/deserialization algorithm should work. You need to ensure that a binary search tree can be serialized to a string, and this string can be deserialized to the original tree structure.</p><p><strong>The encoded string should be as compact as possible.</strong></p><p><strong>Example 1:</strong></p><blockquote><p>Input: root = [2,1,3]</p><p>Output: [2,1,3]</p></blockquote><p><strong>Example 2:</strong></p><blockquote><p>Input: root = []</p><p>Output: []</p></blockquote><p><strong>Constraints:</strong></p><ul><li>The number of nodes in the tree is in the range <code>[0, 104]</code>.</li><li><code>0 &lt;= Node.val &lt;= 10^4</code></li><li>The input tree is <strong>guaranteed</strong> to be a binary search tree.</li></ul><h2 id="题目大意" tabindex="-1"><a class="header-anchor" href="#题目大意" aria-hidden="true">#</a> 题目大意</h2><p>序列化是将数据结构或对象转换为一系列位的过程，以便它可以存储在文件或内存缓冲区中，或通过网络连接链路传输，以便稍后在同一个或另一个计算机环境中重建。</p><p>设计一个算法来序列化和反序列化<strong>二叉搜索树</strong> 。 对序列化/反序列化算法的工作方式没有限制。 您只需确保二叉搜索树可以序列化为字符串，并且可以将该字符串反序列化为最初的二叉搜索树。</p><p><strong>编码的字符串应尽可能紧凑。</strong></p><p><strong>示例 1：</strong></p><blockquote><p><strong>输入：</strong> root = [2,1,3]</p><p><strong>输出：</strong>[2,1,3]</p></blockquote><p><strong>示例 2：</strong></p><blockquote><p><strong>输入：</strong> root = []</p><p><strong>输出：</strong>[]</p></blockquote><p><strong>提示：</strong></p><ul><li>树中节点数范围是 <code>[0, 104]</code></li><li><code>0 &lt;= Node.val &lt;= 10^4</code></li><li>题目数据 <strong>保证</strong> 输入的树是一棵二叉搜索树。</li></ul><h2 id="解题思路" tabindex="-1"><a class="header-anchor" href="#解题思路" aria-hidden="true">#</a> 解题思路</h2><p>本题要求对 <strong>二叉搜索树（BST）</strong> 进行 <strong>序列化</strong>（转字符串）和 <strong>反序列化</strong>（恢复原树）。<br> 由于 <strong>BST 的前序遍历（Preorder）可以唯一确定 BST 结构</strong>，我们可以利用这一性质高效完成题目。</p><ol><li><strong>序列化（Serialize）</strong></li></ol><ul><li>采用 <strong>前序遍历（先根后左右）</strong> 遍历 BST，并 <strong>将节点值存入数组</strong>。</li><li>遇到 <code>null</code> 不存储，只存非空节点的值，减少存储开销。</li></ul><h4 id="复杂度分析" tabindex="-1"><a class="header-anchor" href="#复杂度分析" aria-hidden="true">#</a> 复杂度分析</h4><ul><li><strong>时间复杂度：</strong> <code>O(n)</code>，遍历所有 <code>n</code> 个节点一次。</li><li><strong>空间复杂度：</strong> <code>O(n)</code>，存储 <code>n</code> 个节点的值。</li></ul><hr><ol start="2"><li><strong>反序列化（Deserialize）</strong></li></ol><ul><li>由于 <code>preorder</code> 遍历是 <strong>根 → 左 → 右</strong>： <ol><li>取出当前子树的根节点（数组第一个元素）。</li><li>利用 BST 的性质（左子树 &lt; 根 &lt; 右子树），用上下界 <code>lower</code> 和 <code>upper</code> 限制节点值范围： <ul><li><strong>左子树</strong> 递归构造范围 <code>[lower, root.val]</code>。</li><li><strong>右子树</strong> 递归构造范围 <code>[root.val, upper]</code>。</li></ul></li><li>如果当前值不在 <code>[lower, upper]</code> 范围内，说明不属于当前子树，回溯。</li></ol></li></ul><h4 id="复杂度分析-1" tabindex="-1"><a class="header-anchor" href="#复杂度分析-1" aria-hidden="true">#</a> 复杂度分析</h4><ul><li><strong>时间复杂度：</strong> <code>O(n)</code>，每个节点最多访问一次。</li><li><strong>空间复杂度：</strong> <code>O(n)</code>，递归栈的最大深度 <strong>最坏 <code>O(n)</code>（退化为链表）</strong>，<strong>最优 <code>O(log n)</code>（平衡 BST）</strong>。</li></ul><h2 id="代码" tabindex="-1"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * Encodes a tree to a single string.
 *
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>TreeNode<span class="token punctuation">}</span></span> <span class="token parameter">root</span>
 * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>string<span class="token punctuation">}</span></span>
 */</span>
<span class="token keyword">var</span> <span class="token function-variable function">serialize</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">root</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

	<span class="token keyword">const</span> <span class="token function-variable function">preorder</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">node</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>node<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
		arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">preorder</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">preorder</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span><span class="token punctuation">;</span>

	<span class="token function">preorder</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> arr<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;,&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * Decodes your encoded data to tree.
 *
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>string<span class="token punctuation">}</span></span> <span class="token parameter">data</span>
 * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>TreeNode<span class="token punctuation">}</span></span>
 */</span>
<span class="token keyword">var</span> <span class="token function-variable function">deserialize</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>data<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>

	<span class="token keyword">const</span> arr <span class="token operator">=</span> data<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;,&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>Number<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">const</span> <span class="token function-variable function">buildTree</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">lower<span class="token punctuation">,</span> upper</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>arr<span class="token punctuation">.</span>length <span class="token operator">||</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> lower <span class="token operator">||</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&gt;</span> upper<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>

		<span class="token keyword">let</span> val <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">let</span> root <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>
		root<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token function">buildTree</span><span class="token punctuation">(</span>lower<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>
		root<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token function">buildTree</span><span class="token punctuation">(</span>val<span class="token punctuation">,</span> upper<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">return</span> root<span class="token punctuation">;</span>
	<span class="token punctuation">}</span><span class="token punctuation">;</span>

	<span class="token keyword">return</span> <span class="token function">buildTree</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">Infinity</span><span class="token punctuation">,</span> <span class="token number">Infinity</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="相关题目" tabindex="-1"><a class="header-anchor" href="#相关题目" aria-hidden="true">#</a> 相关题目</h2>`,34),q=n("thead",null,[n("tr",null,[n("th",{style:{"text-align":"center"}},"题号"),n("th",{style:{"text-align":"left"}},"标题"),n("th",{style:{"text-align":"center"}},"题解"),n("th",{style:{"text-align":"left"}},"标签"),n("th",{style:{"text-align":"center"}},"难度"),n("th",{style:{"text-align":"center"}},"力扣")])],-1),B=n("td",{style:{"text-align":"center"}},"297",-1),S=n("td",{style:{"text-align":"left"}},"二叉树的序列化与反序列化",-1),O={style:{"text-align":"center"}},E={style:{"text-align":"left"}},I=n("code",null,"树",-1),j=n("code",null,"深度优先搜索",-1),C=n("code",null,"广度优先搜索",-1),L=n("code",null,"3+",-1),V=n("td",{style:{"text-align":"center"}},"🔴",-1),D={style:{"text-align":"center"}},R={href:"https://leetcode.cn/problems/serialize-and-deserialize-binary-tree",target:"_blank",rel:"noopener noreferrer"},M={href:"https://leetcode.com/problems/serialize-and-deserialize-binary-tree",target:"_blank",rel:"noopener noreferrer"},P=n("td",{style:{"text-align":"center"}},"428",-1),Y=n("td",{style:{"text-align":"left"}},"序列化和反序列化 N 叉树 🔒",-1),A=n("td",{style:{"text-align":"center"}},null,-1),F={style:{"text-align":"left"}},G=n("code",null,"树",-1),H=n("code",null,"深度优先搜索",-1),J=n("code",null,"广度优先搜索",-1),K=n("code",null,"1+",-1),Q=n("td",{style:{"text-align":"center"}},"🔴",-1),U={style:{"text-align":"center"}},W={href:"https://leetcode.cn/problems/serialize-and-deserialize-n-ary-tree",target:"_blank",rel:"noopener noreferrer"},X={href:"https://leetcode.com/problems/serialize-and-deserialize-n-ary-tree",target:"_blank",rel:"noopener noreferrer"},Z=n("td",{style:{"text-align":"center"}},"652",-1),$=n("td",{style:{"text-align":"left"}},"寻找重复的子树",-1),nn=n("td",{style:{"text-align":"center"}},null,-1),sn={style:{"text-align":"left"}},tn=n("code",null,"树",-1),an=n("code",null,"深度优先搜索",-1),en=n("code",null,"哈希表",-1),on=n("code",null,"1+",-1),ln=n("td",{style:{"text-align":"center"}},"🟠",-1),pn={style:{"text-align":"center"}},cn={href:"https://leetcode.cn/problems/find-duplicate-subtrees",target:"_blank",rel:"noopener noreferrer"},rn={href:"https://leetcode.com/problems/find-duplicate-subtrees",target:"_blank",rel:"noopener noreferrer"};function dn(un,kn){const p=l("font"),e=l("RouterLink"),o=l("ExternalLinkIcon");return r(),i("div",null,[h,n("p",null,[s("🟠 "),t(p,{color:"#ffb800"},{default:a(()=>[s("Medium")]),_:1}),s("  🔖  "),t(e,{to:"/tag/tree.html"},{default:a(()=>[_]),_:1}),s(),t(e,{to:"/tag/depth-first-search.html"},{default:a(()=>[g]),_:1}),s(),t(e,{to:"/tag/breadth-first-search.html"},{default:a(()=>[m]),_:1}),s(),t(e,{to:"/tag/design.html"},{default:a(()=>[b]),_:1}),s(),t(e,{to:"/tag/binary-search-tree.html"},{default:a(()=>[v]),_:1}),s(),t(e,{to:"/tag/string.html"},{default:a(()=>[f]),_:1}),s(),t(e,{to:"/tag/binary-tree.html"},{default:a(()=>[y]),_:1}),s("  🔗 "),n("a",x,[w,t(o)]),s(),n("a",z,[T,t(o)])]),N,d(" prettier-ignore "),n("table",null,[q,n("tbody",null,[n("tr",null,[B,S,n("td",O,[t(e,{to:"/problem/0297.html"},{default:a(()=>[s("[✓]")]),_:1})]),n("td",E,[t(e,{to:"/tag/tree.html"},{default:a(()=>[I]),_:1}),s(),t(e,{to:"/tag/depth-first-search.html"},{default:a(()=>[j]),_:1}),s(),t(e,{to:"/tag/breadth-first-search.html"},{default:a(()=>[C]),_:1}),s(),L]),V,n("td",D,[n("a",R,[s("🀄️"),t(o)]),s(),n("a",M,[s("🔗"),t(o)])])]),n("tr",null,[P,Y,A,n("td",F,[t(e,{to:"/tag/tree.html"},{default:a(()=>[G]),_:1}),s(),t(e,{to:"/tag/depth-first-search.html"},{default:a(()=>[H]),_:1}),s(),t(e,{to:"/tag/breadth-first-search.html"},{default:a(()=>[J]),_:1}),s(),K]),Q,n("td",U,[n("a",W,[s("🀄️"),t(o)]),s(),n("a",X,[s("🔗"),t(o)])])]),n("tr",null,[Z,$,nn,n("td",sn,[t(e,{to:"/tag/tree.html"},{default:a(()=>[tn]),_:1}),s(),t(e,{to:"/tag/depth-first-search.html"},{default:a(()=>[an]),_:1}),s(),t(e,{to:"/tag/hash-table.html"},{default:a(()=>[en]),_:1}),s(),on]),ln,n("td",pn,[n("a",cn,[s("🀄️"),t(o)]),s(),n("a",rn,[s("🔗"),t(o)])])])])])])}const _n=c(k,[["render",dn],["__file","0449.html.vue"]]);export{_n as default};
