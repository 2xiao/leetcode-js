import{_ as l,r as o,o as u,c as r,a as n,b as s,d as e,w as t,e as d}from"./app-aQeLbVW9.js";const i={},k=n("h1",{id:"_456-132-模式",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_456-132-模式","aria-hidden":"true"},"#"),s(" 456. 132 模式")],-1),m=n("code",null,"栈",-1),h=n("code",null,"数组",-1),g=n("code",null,"二分查找",-1),b=n("code",null,"有序集合",-1),_=n("code",null,"单调栈",-1),f={href:"https://leetcode.cn/problems/132-pattern",target:"_blank",rel:"noopener noreferrer"},v=n("code",null,"力扣",-1),x={href:"https://leetcode.com/problems/132-pattern",target:"_blank",rel:"noopener noreferrer"},j=n("code",null,"LeetCode",-1),q=d(`<h2 id="题目" tabindex="-1"><a class="header-anchor" href="#题目" aria-hidden="true">#</a> 题目</h2><p>Given an array of <code>n</code> integers <code>nums</code>, a <strong>132 pattern</strong> is a subsequence of three integers <code>nums[i]</code>, <code>nums[j]</code> and <code>nums[k]</code> such that <code>i &lt; j &lt; k</code> and <code>nums[i] &lt; nums[k] &lt; nums[j]</code>.</p><p>Return <code>true</code> <em>if there is a<strong>132 pattern</strong> in</em> <code>nums</code> <em>, otherwise, return</em><code>false</code> <em>.</em></p><p><strong>Example 1:</strong></p><blockquote><p>Input: nums = [1,2,3,4]</p><p>Output: false</p><p>Explanation: There is no 132 pattern in the sequence.</p></blockquote><p><strong>Example 2:</strong></p><blockquote><p>Input: nums = [3,1,4,2]</p><p>Output: true</p><p>Explanation: There is a 132 pattern in the sequence: [1, 4, 2].</p></blockquote><p><strong>Example 3:</strong></p><blockquote><p>Input: nums = [-1,3,2,0]</p><p>Output: true</p><p>Explanation: There are three 132 patterns in the sequence: [-1, 3, 2], [-1, 3, 0] and [-1, 2, 0].</p></blockquote><p><strong>Constraints:</strong></p><ul><li><code>n == nums.length</code></li><li><code>1 &lt;= n &lt;= 2 * 10^5</code></li><li><code>-10^9 &lt;= nums[i] &lt;= 10^9</code></li></ul><h2 id="题目大意" tabindex="-1"><a class="header-anchor" href="#题目大意" aria-hidden="true">#</a> 题目大意</h2><p>给你一个整数数组 <code>nums</code> ，数组中共有 <code>n</code> 个整数。<strong>132 模式的子序列</strong> 由三个整数 <code>nums[i]</code>、<code>nums[j]</code> 和 <code>nums[k]</code> 组成，并同时满足：<code>i &lt; j &lt; k</code> 和 <code>nums[i] &lt; nums[k] &lt; nums[j]</code> 。</p><p>如果 <code>nums</code> 中存在 <strong>132 模式的子序列</strong> ，返回 <code>true</code> ；否则，返回 <code>false</code> 。</p><p><strong>示例 1：</strong></p><blockquote><p><strong>输入：</strong> nums = [1,2,3,4]</p><p><strong>输出：</strong> false</p><p><strong>解释：</strong> 序列中不存在 132 模式的子序列。</p></blockquote><p><strong>示例 2：</strong></p><blockquote><p><strong>输入：</strong> nums = [3,1,4,2]</p><p><strong>输出：</strong> true</p><p><strong>解释：</strong> 序列中有 1 个 132 模式的子序列： [1, 4, 2] 。</p></blockquote><p><strong>示例 3：</strong></p><blockquote><p><strong>输入：</strong> nums = [-1,3,2,0]</p><p><strong>输出：</strong> true</p><p><strong>解释：</strong> 序列中有 3 个 132 模式的的子序列：[-1, 3, 2]、[-1, 3, 0] 和 [-1, 2, 0] 。</p></blockquote><p><strong>提示：</strong></p><ul><li><code>n == nums.length</code></li><li><code>1 &lt;= n &lt;= 2 * 10^5</code></li><li><code>-10^9 &lt;= nums[i] &lt;= 10^9</code></li></ul><h2 id="解题思路" tabindex="-1"><a class="header-anchor" href="#解题思路" aria-hidden="true">#</a> 解题思路</h2><p><strong>目标</strong>：找到一个满足 <code>nums[i] &lt; nums[k] &lt; nums[j]</code> (<code>i &lt; j &lt; k</code>) 的 <code>132</code> 模式。</p><p>我们可以利用 <strong>单调栈</strong> 来高效地维护 <code>nums[j]</code>（132 模式中的第二个元素），从而在 <code>O(n)</code> 时间复杂度内解决问题。</p><ol><li><p><strong>倒序遍历 <code>nums</code></strong></p><ul><li><code>nums[k]</code> 必须出现在 <code>nums[j]</code> 之后，因此倒序遍历 <code>nums</code>，先找到 <code>nums[j]</code>，从而确保 <code>nums[i] &lt; nums[k] &lt; nums[j]</code>。</li></ul></li><li><p><strong>使用单调递减栈维护 <code>nums[j]</code></strong></p><ul><li><code>stack</code> 存储可能的 <code>nums[j]</code>，并保持<strong>单调递减</strong>（栈顶元素最大）。</li></ul></li><li><p><strong>使用 <code>third</code> 存储可能的 <code>nums[k]</code></strong></p><ul><li>当 <code>stack</code> 不为空，且 <code>stack</code> 栈顶元素小于当前 <code>nums[i]</code>，说明 <code>stack.pop()</code> 是一个合适的 <code>nums[k]</code>，将 <code>third = stack.pop()</code> 进行更新。</li><li>然后将当前 <code>nums[i]</code> 放入栈顶，这样就确保了 <code>nums[k] &lt; nums[j]</code>。</li></ul></li><li><p><strong>判断 <code>nums[i]</code> 是否满足 <code>nums[i] &lt; third</code></strong></p><ul><li>如果 <code>nums[i] &lt; third</code>，说明找到了 <code>132</code> 模式，直接返回 <code>true</code>。</li></ul></li></ol><h4 id="复杂度分析" tabindex="-1"><a class="header-anchor" href="#复杂度分析" aria-hidden="true">#</a> 复杂度分析</h4><ul><li><strong>时间复杂度</strong>：<code>O(n)</code>，每个元素最多入栈、出栈一次，总共 <code>O(n)</code>。</li><li><strong>空间复杂度</strong>：<code>O(n)</code>，最坏情况下栈存储 <code>n</code> 个元素。</li></ul><h2 id="代码" tabindex="-1"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span> <span class="token parameter">nums</span>
 * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>boolean<span class="token punctuation">}</span></span>
 */</span>
<span class="token keyword">var</span> <span class="token function-variable function">find132pattern</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">nums</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">let</span> stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token keyword">let</span> third <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">Infinity</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> nums<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> third<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
		<span class="token keyword">while</span> <span class="token punctuation">(</span>stack<span class="token punctuation">.</span>length <span class="token operator">&amp;&amp;</span> stack<span class="token punctuation">[</span>stack<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			third <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,30);function w(y,E){const p=o("font"),a=o("RouterLink"),c=o("ExternalLinkIcon");return u(),r("div",null,[k,n("p",null,[s("🟠 "),e(p,{color:"#ffb800"},{default:t(()=>[s("Medium")]),_:1}),s("  🔖  "),e(a,{to:"/tag/stack.html"},{default:t(()=>[m]),_:1}),s(),e(a,{to:"/tag/array.html"},{default:t(()=>[h]),_:1}),s(),e(a,{to:"/tag/binary-search.html"},{default:t(()=>[g]),_:1}),s(),e(a,{to:"/tag/ordered-set.html"},{default:t(()=>[b]),_:1}),s(),e(a,{to:"/tag/monotonic-stack.html"},{default:t(()=>[_]),_:1}),s("  🔗 "),n("a",f,[v,e(c)]),s(),n("a",x,[j,e(c)])]),q])}const I=l(i,[["render",w],["__file","0456.html.vue"]]);export{I as default};
