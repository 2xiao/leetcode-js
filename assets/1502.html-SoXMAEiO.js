import{_ as l,r as p,o as r,c as i,a as n,b as s,d as a,w as t,f as u,e as d}from"./app-aQeLbVW9.js";const k={},m=n("h1",{id:"_1502-判断能否形成等差数列",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_1502-判断能否形成等差数列","aria-hidden":"true"},"#"),s(" 1502. 判断能否形成等差数列")],-1),h=n("code",null,"数组",-1),v=n("code",null,"排序",-1),b={href:"https://leetcode.cn/problems/can-make-arithmetic-progression-from-sequence",target:"_blank",rel:"noopener noreferrer"},g=n("code",null,"力扣",-1),f={href:"https://leetcode.com/problems/can-make-arithmetic-progression-from-sequence",target:"_blank",rel:"noopener noreferrer"},_=n("code",null,"LeetCode",-1),y=d(`<h2 id="题目" tabindex="-1"><a class="header-anchor" href="#题目" aria-hidden="true">#</a> 题目</h2><p>A sequence of numbers is called an <strong>arithmetic progression</strong> if the difference between any two consecutive elements is the same.</p><p>Given an array of numbers <code>arr</code>, return <code>true</code> <em>if the array can be rearranged to form an<strong>arithmetic progression</strong>. Otherwise, return</em> <code>false</code>.</p><p><strong>Example 1:</strong></p><blockquote><p>Input: arr = [3,5,1]</p><p>Output: true</p><p>Explanation: We can reorder the elements as [1,3,5] or [5,3,1] with differences 2 and -2 respectively, between each consecutive elements.</p></blockquote><p><strong>Example 2:</strong></p><blockquote><p>Input: arr = [1,2,4]</p><p>Output: false</p><p>Explanation: There is no way to reorder the elements to obtain an arithmetic progression.</p></blockquote><p><strong>Constraints:</strong></p><ul><li><code>2 &lt;= arr.length &lt;= 1000</code></li><li><code>-10^6 &lt;= arr[i] &lt;= 10^6</code></li></ul><h2 id="题目大意" tabindex="-1"><a class="header-anchor" href="#题目大意" aria-hidden="true">#</a> 题目大意</h2><p>给你一个数字数组 <code>arr</code> 。</p><p>如果一个数列中，任意相邻两项的差总等于同一个常数，那么这个数列就称为 <strong>等差数列</strong> 。</p><p>如果可以重新排列数组形成等差数列，请返回 <code>true</code> ；否则，返回 <code>false</code> 。</p><p><strong>示例 1：</strong></p><blockquote><p><strong>输入：</strong> arr = [3,5,1]</p><p><strong>输出：</strong> true</p><p><strong>解释：</strong> 对数组重新排序得到 [1,3,5] 或者 [5,3,1] ，任意相邻两项的差分别为 2 或 -2 ，可以形成等差数列。</p></blockquote><p><strong>示例 2：</strong></p><blockquote><p><strong>输入：</strong> arr = [1,2,4]</p><p><strong>输出：</strong> false</p><p><strong>解释：</strong> 无法通过重新排序得到等差数列。</p></blockquote><p><strong>提示：</strong></p><ul><li><code>2 &lt;= arr.length &lt;= 1000</code></li><li><code>-10^6 &lt;= arr[i] &lt;= 10^6</code></li></ul><h2 id="解题思路" tabindex="-1"><a class="header-anchor" href="#解题思路" aria-hidden="true">#</a> 解题思路</h2><ol><li><p><strong>等差数列的特性</strong>:</p><ul><li>对于一个等差数列，最大值和最小值确定后，每两个相邻数之间的差是固定的 (<code>gap</code>)。</li><li>给定最小值 <code>min</code> 和间隔 <code>gap</code>，等差数列中每个数字 <code>arr[i]</code> 都应该满足： <code>arr[i] = min + i * gap</code></li><li>如果某个数不在其目标位置（即 <code>arr[i] ≠ min + i * gap</code>），可以将其与目标位置上的数交换，直到所有数都在目标位置。</li></ul></li><li><p><strong>检查位置是否正确</strong>:</p><ul><li>如果当前数字已经在正确位置（即 <code>arr[i] === min + i * gap</code>），则继续处理下一个数字。</li><li>如果当前数字不在正确位置： <ul><li>通过目标位置公式计算正确位置 <code>pos = (arr[i] - min) / gap</code>。</li><li>检查 <code>pos</code> 是否有效（范围在 <code>[0, n-1]</code> 之间的整数），并确保目标位置的数字与当前数字不同，避免重复。</li></ul></li></ul></li><li><p><strong>交换数字</strong>:</p><ul><li>如果发现数字不在目标位置，交换 <code>arr[i]</code> 和 <code>arr[pos]</code>。</li><li>重复检查新的 <code>arr[i]</code>，直到该位置数字满足等差数列的条件。</li></ul></li><li><p><strong>继续遍历</strong>:</p><ul><li>处理下一个数字，直到所有数字都在正确位置。</li></ul></li></ol><h4 id="复杂度分析" tabindex="-1"><a class="header-anchor" href="#复杂度分析" aria-hidden="true">#</a> 复杂度分析</h4><ul><li><strong>时间复杂度</strong>: <code>O(n)</code>，遍历数组两次：一次找最大值和最小值，一次调整元素位置。</li><li><strong>空间复杂度</strong>: <code>O(1)</code>，原地修改数组，无额外空间。</li></ul><h2 id="代码" tabindex="-1"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span> <span class="token parameter">arr</span>
 * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>boolean<span class="token punctuation">}</span></span>
 */</span>
<span class="token keyword">var</span> <span class="token function-variable function">canMakeArithmeticProgression</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">let</span> min <span class="token operator">=</span> <span class="token number">Infinity</span><span class="token punctuation">,</span>
		max <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">Infinity</span><span class="token punctuation">;</span>

	<span class="token comment">// 找到数组的最小值和最大值</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> num <span class="token keyword">of</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">&gt;</span> max<span class="token punctuation">)</span> max <span class="token operator">=</span> num<span class="token punctuation">;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">&lt;</span> min<span class="token punctuation">)</span> min <span class="token operator">=</span> num<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">const</span> n <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
	<span class="token keyword">const</span> gap <span class="token operator">=</span> <span class="token punctuation">(</span>max <span class="token operator">-</span> min<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token comment">// 特殊情况，数组中的数全部相同时，也是等差数列，返回 true</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>gap <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>

	<span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token comment">// 检查当前元素是否在正确位置</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">===</span> min <span class="token operator">+</span> i <span class="token operator">*</span> gap<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			i<span class="token operator">++</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
			<span class="token keyword">const</span> diff <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> min<span class="token punctuation">;</span>

			<span class="token comment">// 检查当前元素是否满足等差公式</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span>diff <span class="token operator">%</span> gap <span class="token operator">!==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>

			<span class="token keyword">const</span> pos <span class="token operator">=</span> diff <span class="token operator">/</span> gap<span class="token punctuation">;</span>

			<span class="token comment">// 检查是否出现重复</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>pos<span class="token punctuation">]</span> <span class="token operator">===</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>

			<span class="token comment">// 交换到正确位置</span>
			<span class="token keyword">let</span> temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">;</span>
			arr<span class="token punctuation">[</span>pos<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
			arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="相关题目" tabindex="-1"><a class="header-anchor" href="#相关题目" aria-hidden="true">#</a> 相关题目</h2>`,26),w=n("thead",null,[n("tr",null,[n("th",{style:{"text-align":"center"}},"题号"),n("th",{style:{"text-align":"left"}},"标题"),n("th",{style:{"text-align":"center"}},"题解"),n("th",{style:{"text-align":"left"}},"标签"),n("th",{style:{"text-align":"center"}},"难度"),n("th",{style:{"text-align":"center"}},"力扣")])],-1),x=n("td",{style:{"text-align":"center"}},"1630",-1),q=n("td",{style:{"text-align":"left"}},"等差子数组",-1),E=n("td",{style:{"text-align":"center"}},null,-1),I={style:{"text-align":"left"}},C=n("code",null,"数组",-1),L=n("code",null,"哈希表",-1),N=n("code",null,"排序",-1),O=n("td",{style:{"text-align":"center"}},"🟠",-1),V={style:{"text-align":"center"}},j={href:"https://leetcode.cn/problems/arithmetic-subarrays",target:"_blank",rel:"noopener noreferrer"},B={href:"https://leetcode.com/problems/arithmetic-subarrays",target:"_blank",rel:"noopener noreferrer"};function A(R,T){const c=p("font"),e=p("RouterLink"),o=p("ExternalLinkIcon");return r(),i("div",null,[m,n("p",null,[s("🟢 "),a(c,{color:"#15bd66"},{default:t(()=>[s("Easy")]),_:1}),s("  🔖  "),a(e,{to:"/tag/array.html"},{default:t(()=>[h]),_:1}),s(),a(e,{to:"/tag/sorting.html"},{default:t(()=>[v]),_:1}),s("  🔗 "),n("a",b,[g,a(o)]),s(),n("a",f,[_,a(o)])]),y,u(" prettier-ignore "),n("table",null,[w,n("tbody",null,[n("tr",null,[x,q,E,n("td",I,[a(e,{to:"/tag/array.html"},{default:t(()=>[C]),_:1}),s(),a(e,{to:"/tag/hash-table.html"},{default:t(()=>[L]),_:1}),s(),a(e,{to:"/tag/sorting.html"},{default:t(()=>[N]),_:1})]),O,n("td",V,[n("a",j,[s("🀄️"),a(o)]),s(),n("a",B,[s("🔗"),a(o)])])])])])])}const M=l(k,[["render",A],["__file","1502.html.vue"]]);export{M as default};
