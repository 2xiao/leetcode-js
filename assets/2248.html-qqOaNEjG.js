import{_ as c,r as l,o as i,c as p,a as t,b as n,d as e,w as s,f as d,e as u}from"./app-fBVbqwGY.js";const m={},h=t("h1",{id:"_2248-多个数组求交集",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#_2248-多个数组求交集","aria-hidden":"true"},"#"),n(" 2248. 多个数组求交集")],-1),_=t("code",null,"数组",-1),g=t("code",null,"哈希表",-1),k=t("code",null,"计数",-1),f=t("code",null,"排序",-1),b={href:"https://leetcode.cn/problems/intersection-of-multiple-arrays",target:"_blank",rel:"noopener noreferrer"},y=t("code",null,"力扣",-1),x={href:"https://leetcode.com/problems/intersection-of-multiple-arrays",target:"_blank",rel:"noopener noreferrer"},v=t("code",null,"LeetCode",-1),w=u(`<h2 id="题目" tabindex="-1"><a class="header-anchor" href="#题目" aria-hidden="true">#</a> 题目</h2><p>Given a 2D integer array <code>nums</code> where <code>nums[i]</code> is a non-empty array of <strong>distinct</strong> positive integers, return <em>the list of integers that are present in <strong>each array</strong> of</em> <code>nums</code> <em>sorted in <strong>ascending order</strong></em>.</p><p><strong>Example 1:</strong></p><blockquote><p>Input: nums = [[<em><strong>3</strong></em> ,1,2,<em><strong>4</strong></em> ,5],[1,2,<em><strong>3</strong></em> ,<em><strong>4</strong></em>],[<em><strong>3</strong></em> ,<em><strong>4</strong></em> ,5,6]]</p><p>Output: [3,4]</p><p>Explanation:</p><p>The only integers present in each of nums[0] = [<em><strong>3</strong></em> ,1,2,<em><strong>4</strong></em> ,5], nums[1] = [1,2,<em><strong>3</strong></em> ,<em><strong>4</strong></em>], and nums[2] = [<em><strong>3</strong></em> ,<em><strong>4</strong></em> ,5,6] are 3 and 4, so we return [3,4].</p></blockquote><p><strong>Example 2:</strong></p><blockquote><p>Input: nums = [[1,2,3],[4,5,6]]</p><p>Output: []</p><p>Explanation:</p><p>There does not exist any integer present both in nums[0] and nums[1], so we return an empty list [].</p></blockquote><p><strong>Constraints:</strong></p><ul><li><code>1 &lt;= nums.length &lt;= 1000</code></li><li><code>1 &lt;= sum(nums[i].length) &lt;= 1000</code></li><li><code>1 &lt;= nums[i][j] &lt;= 1000</code></li><li>All the values of <code>nums[i]</code> are <strong>unique</strong>.</li></ul><h2 id="题目大意" tabindex="-1"><a class="header-anchor" href="#题目大意" aria-hidden="true">#</a> 题目大意</h2><p>给你一个二维整数数组 <code>nums</code> ，其中 <code>nums[i]</code> 是由 <strong>不同</strong> 正整数组成的一个非空数组，按 <strong>升序排列</strong> 返回一个数组，数组中的每个元素在 <code>nums</code> <strong>所有数组</strong> 中都出现过。</p><p><strong>示例 1：</strong></p><blockquote><p><strong>输入：</strong> nums = [[<em><strong>3</strong></em> ,1,2,<em><strong>4</strong></em> ,5],[1,2,<em><strong>3</strong></em> ,<em><strong>4</strong></em>],[<em><strong>3</strong></em> ,<em><strong>4</strong></em> ,5,6]]</p><p><strong>输出：</strong>[3,4]</p><p><strong>解释：</strong></p><p>nums[0] = [<em><strong>3</strong></em> ,1,2,<em><strong>4</strong></em> ,5]，nums[1] = [1,2,<em><strong>3</strong></em> ,<em><strong>4</strong></em>]，nums[2] = [<em><strong>3</strong></em> ,<em><strong>4</strong></em> ,5,6]，在 nums 中每个数组中都出现的数字是 3 和 4 ，所以返回 [3,4] 。</p></blockquote><p><strong>示例 2：</strong></p><blockquote><p><strong>输入：</strong> nums = [[1,2,3],[4,5,6]]</p><p><strong>输出：</strong>[]</p><p><strong>解释：</strong></p><p>不存在同时出现在 nums[0] 和 nums[1] 的整数，所以返回一个空列表 [] 。</p></blockquote><p><strong>提示：</strong></p><ul><li><code>1 &lt;= nums.length &lt;= 1000</code></li><li><code>1 &lt;= sum(nums[i].length) &lt;= 1000</code></li><li><code>1 &lt;= nums[i][j] &lt;= 1000</code></li><li><code>nums[i]</code> 中的所有值 <strong>互不相同</strong></li></ul><h2 id="解题思路" tabindex="-1"><a class="header-anchor" href="#解题思路" aria-hidden="true">#</a> 解题思路</h2><ol><li><p><strong>交集的定义</strong>：</p><ul><li>交集中的每个元素必须出现在所有数组中。</li><li>如果一个数字出现的次数等于数组的数量 <code>nums.length</code>，那么它属于交集。</li></ul></li><li><p><strong>利用频率统计</strong>：</p><ul><li>用一个哈希表（对象）统计每个数字出现的次数。</li><li>遍历所有数组，将每个数字出现的次数存入哈希表。</li></ul></li><li><p><strong>过滤结果</strong>：</p><ul><li>筛选出出现次数等于 <code>nums.length</code> 的数字，即为交集。</li><li>由于取对象的 <code>keys</code> 会自动从小到大排序，因此输出的顺序符合要求。</li></ul></li></ol><h4 id="复杂度分析" tabindex="-1"><a class="header-anchor" href="#复杂度分析" aria-hidden="true">#</a> 复杂度分析</h4><ul><li><strong>时间复杂度</strong>：<code>O(n * m + k log k)</code><ul><li>遍历所有数组统计频率：<code>O(n * m)</code>，其中 <code>n</code> 是数组数量，<code>m</code> 是单个数组的平均长度。</li><li>过滤和排序：<code>O(k log k)</code>，其中 <code>k</code> 是哈希表中符合条件的数字数量。</li><li>总复杂度：<code>O(n * m + k log k)</code>。</li></ul></li><li><strong>空间复杂度</strong>：<code>O(u)</code>，其中 <code>u</code> 是所有数组中不重复数字的数量，使用了一个哈希表存储数字频率。</li></ul><h2 id="代码" tabindex="-1"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span> <span class="token parameter">nums</span>
 * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span>
 */</span>
<span class="token keyword">var</span> <span class="token function-variable function">intersection</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">nums</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">let</span> freq <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

	<span class="token comment">// 统计每个数字的出现次数</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> arr <span class="token keyword">of</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> num <span class="token keyword">of</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			freq<span class="token punctuation">[</span>num<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>freq<span class="token punctuation">[</span>num<span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>

	<span class="token comment">// 筛选出出现次数等于数组数的数字，并排序</span>
	<span class="token keyword">return</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>freq<span class="token punctuation">)</span>
		<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">i</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> freq<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">)</span>
		<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>Number<span class="token punctuation">)</span>
		<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> a <span class="token operator">-</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="相关题目" tabindex="-1"><a class="header-anchor" href="#相关题目" aria-hidden="true">#</a> 相关题目</h2>`,23),q=t("thead",null,[t("tr",null,[t("th",{style:{"text-align":"center"}},"题号"),t("th",{style:{"text-align":"left"}},"标题"),t("th",{style:{"text-align":"center"}},"题解"),t("th",{style:{"text-align":"left"}},"标签"),t("th",{style:{"text-align":"center"}},"难度"),t("th",{style:{"text-align":"center"}},"力扣")])],-1),E=t("td",{style:{"text-align":"center"}},"349",-1),O=t("td",{style:{"text-align":"left"}},"两个数组的交集",-1),j={style:{"text-align":"center"}},I={style:{"text-align":"left"}},N=t("code",null,"数组",-1),C=t("code",null,"哈希表",-1),L=t("code",null,"双指针",-1),V=t("code",null,"2+",-1),B=t("td",{style:{"text-align":"center"}},"🟢",-1),T={style:{"text-align":"center"}},R={href:"https://leetcode.cn/problems/intersection-of-two-arrays",target:"_blank",rel:"noopener noreferrer"},A={href:"https://leetcode.com/problems/intersection-of-two-arrays",target:"_blank",rel:"noopener noreferrer"},D=t("td",{style:{"text-align":"center"}},"350",-1),G=t("td",{style:{"text-align":"left"}},"两个数组的交集 II",-1),S={style:{"text-align":"center"}},z={style:{"text-align":"left"}},F=t("code",null,"数组",-1),H=t("code",null,"哈希表",-1),J=t("code",null,"双指针",-1),K=t("code",null,"2+",-1),M=t("td",{style:{"text-align":"center"}},"🟢",-1),P={style:{"text-align":"center"}},Q={href:"https://leetcode.cn/problems/intersection-of-two-arrays-ii",target:"_blank",rel:"noopener noreferrer"},U={href:"https://leetcode.com/problems/intersection-of-two-arrays-ii",target:"_blank",rel:"noopener noreferrer"},W=t("td",{style:{"text-align":"center"}},"1198",-1),X=t("td",{style:{"text-align":"left"}},"找出所有行中最小公共元素 🔒",-1),Y=t("td",{style:{"text-align":"center"}},null,-1),Z={style:{"text-align":"left"}},$=t("code",null,"数组",-1),tt=t("code",null,"哈希表",-1),nt=t("code",null,"二分查找",-1),et=t("code",null,"2+",-1),st=t("td",{style:{"text-align":"center"}},"🟠",-1),ot={style:{"text-align":"center"}},at={href:"https://leetcode.cn/problems/find-smallest-common-element-in-all-rows",target:"_blank",rel:"noopener noreferrer"},lt={href:"https://leetcode.com/problems/find-smallest-common-element-in-all-rows",target:"_blank",rel:"noopener noreferrer"},rt=t("td",{style:{"text-align":"center"}},"1213",-1),ct=t("td",{style:{"text-align":"left"}},"三个有序数组的交集 🔒",-1),it=t("td",{style:{"text-align":"center"}},null,-1),pt={style:{"text-align":"left"}},dt=t("code",null,"数组",-1),ut=t("code",null,"哈希表",-1),mt=t("code",null,"二分查找",-1),ht=t("code",null,"1+",-1),_t=t("td",{style:{"text-align":"center"}},"🟢",-1),gt={style:{"text-align":"center"}},kt={href:"https://leetcode.cn/problems/intersection-of-three-sorted-arrays",target:"_blank",rel:"noopener noreferrer"},ft={href:"https://leetcode.com/problems/intersection-of-three-sorted-arrays",target:"_blank",rel:"noopener noreferrer"},bt=t("td",{style:{"text-align":"center"}},"2215",-1),yt=t("td",{style:{"text-align":"left"}},"找出两数组的不同",-1),xt={style:{"text-align":"center"}},vt={style:{"text-align":"left"}},wt=t("code",null,"数组",-1),qt=t("code",null,"哈希表",-1),Et=t("td",{style:{"text-align":"center"}},"🟢",-1),Ot={style:{"text-align":"center"}},jt={href:"https://leetcode.cn/problems/find-the-difference-of-two-arrays",target:"_blank",rel:"noopener noreferrer"},It={href:"https://leetcode.com/problems/find-the-difference-of-two-arrays",target:"_blank",rel:"noopener noreferrer"};function Nt(Ct,Lt){const r=l("font"),o=l("RouterLink"),a=l("ExternalLinkIcon");return i(),p("div",null,[h,t("p",null,[n("🟢 "),e(r,{color:"#15bd66"},{default:s(()=>[n("Easy")]),_:1}),n("  🔖  "),e(o,{to:"/tag/array.html"},{default:s(()=>[_]),_:1}),n(),e(o,{to:"/tag/hash-table.html"},{default:s(()=>[g]),_:1}),n(),e(o,{to:"/tag/counting.html"},{default:s(()=>[k]),_:1}),n(),e(o,{to:"/tag/sorting.html"},{default:s(()=>[f]),_:1}),n("  🔗 "),t("a",b,[y,e(a)]),n(),t("a",x,[v,e(a)])]),w,d(" prettier-ignore "),t("table",null,[q,t("tbody",null,[t("tr",null,[E,O,t("td",j,[e(o,{to:"/problem/0349.html"},{default:s(()=>[n("[✓]")]),_:1})]),t("td",I,[e(o,{to:"/tag/array.html"},{default:s(()=>[N]),_:1}),n(),e(o,{to:"/tag/hash-table.html"},{default:s(()=>[C]),_:1}),n(),e(o,{to:"/tag/two-pointers.html"},{default:s(()=>[L]),_:1}),n(),V]),B,t("td",T,[t("a",R,[n("🀄️"),e(a)]),n(),t("a",A,[n("🔗"),e(a)])])]),t("tr",null,[D,G,t("td",S,[e(o,{to:"/problem/0350.html"},{default:s(()=>[n("[✓]")]),_:1})]),t("td",z,[e(o,{to:"/tag/array.html"},{default:s(()=>[F]),_:1}),n(),e(o,{to:"/tag/hash-table.html"},{default:s(()=>[H]),_:1}),n(),e(o,{to:"/tag/two-pointers.html"},{default:s(()=>[J]),_:1}),n(),K]),M,t("td",P,[t("a",Q,[n("🀄️"),e(a)]),n(),t("a",U,[n("🔗"),e(a)])])]),t("tr",null,[W,X,Y,t("td",Z,[e(o,{to:"/tag/array.html"},{default:s(()=>[$]),_:1}),n(),e(o,{to:"/tag/hash-table.html"},{default:s(()=>[tt]),_:1}),n(),e(o,{to:"/tag/binary-search.html"},{default:s(()=>[nt]),_:1}),n(),et]),st,t("td",ot,[t("a",at,[n("🀄️"),e(a)]),n(),t("a",lt,[n("🔗"),e(a)])])]),t("tr",null,[rt,ct,it,t("td",pt,[e(o,{to:"/tag/array.html"},{default:s(()=>[dt]),_:1}),n(),e(o,{to:"/tag/hash-table.html"},{default:s(()=>[ut]),_:1}),n(),e(o,{to:"/tag/binary-search.html"},{default:s(()=>[mt]),_:1}),n(),ht]),_t,t("td",gt,[t("a",kt,[n("🀄️"),e(a)]),n(),t("a",ft,[n("🔗"),e(a)])])]),t("tr",null,[bt,yt,t("td",xt,[e(o,{to:"/problem/2215.html"},{default:s(()=>[n("[✓]")]),_:1})]),t("td",vt,[e(o,{to:"/tag/array.html"},{default:s(()=>[wt]),_:1}),n(),e(o,{to:"/tag/hash-table.html"},{default:s(()=>[qt]),_:1})]),Et,t("td",Ot,[t("a",jt,[n("🀄️"),e(a)]),n(),t("a",It,[n("🔗"),e(a)])])])])])])}const Bt=c(m,[["render",Nt],["__file","2248.html.vue"]]);export{Bt as default};
