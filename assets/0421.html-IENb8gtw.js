import{_ as i,r as l,o as r,c as d,a as t,b as e,d as n,w as s,f as p,e as u}from"./app-fBVbqwGY.js";const m={},_=t("h1",{id:"_421-数组中两个数的最大异或值",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#_421-数组中两个数的最大异或值","aria-hidden":"true"},"#"),e(" 421. 数组中两个数的最大异或值")],-1),h=t("code",null,"位运算",-1),k=t("code",null,"字典树",-1),g=t("code",null,"数组",-1),f=t("code",null,"哈希表",-1),x={href:"https://leetcode.cn/problems/maximum-xor-of-two-numbers-in-an-array",target:"_blank",rel:"noopener noreferrer"},b=t("code",null,"力扣",-1),y={href:"https://leetcode.com/problems/maximum-xor-of-two-numbers-in-an-array",target:"_blank",rel:"noopener noreferrer"},v=t("code",null,"LeetCode",-1),w=u(`<h2 id="题目" tabindex="-1"><a class="header-anchor" href="#题目" aria-hidden="true">#</a> 题目</h2><p>Given an integer array <code>nums</code>, return <em>the maximum result of</em> <code>nums[i] XOR nums[j]</code>, where <code>0 &lt;= i &lt;= j &lt; n</code>.</p><p><strong>Example 1:</strong></p><blockquote><p>Input: nums = [3,10,5,25,2,8]</p><p>Output: 28</p><p>Explanation: The maximum result is 5 XOR 25 = 28.</p></blockquote><p><strong>Example 2:</strong></p><blockquote><p>Input: nums = [14,70,53,83,49,91,36,80,92,51,66,70]</p><p>Output: 127</p></blockquote><p><strong>Constraints:</strong></p><ul><li><code>1 &lt;= nums.length &lt;= 2 * 10^5</code></li><li><code>0 &lt;= nums[i] &lt;= 2^31 - 1</code></li></ul><h2 id="题目大意" tabindex="-1"><a class="header-anchor" href="#题目大意" aria-hidden="true">#</a> 题目大意</h2><p>给你一个整数数组 <code>nums</code> ，返回 <code>nums[i] XOR nums[j]</code> 的最大运算结果，其中 <code>0 ≤ i ≤ j &lt; n</code> 。</p><p><strong>示例 1：</strong></p><blockquote><p><strong>输入：</strong> nums = [3,10,5,25,2,8]</p><p><strong>输出：</strong> 28</p><p><strong>解释：</strong> 最大运算结果是 5 XOR 25 = 28.</p></blockquote><p><strong>示例 2：</strong></p><blockquote><p><strong>输入：</strong> nums = [14,70,53,83,49,91,36,80,92,51,66,70]</p><p><strong>输出：</strong> 127</p></blockquote><p><strong>提示：</strong></p><ul><li><code>1 &lt;= nums.length &lt;= 2 * 10^5</code></li><li><code>0 &lt;= nums[i] &lt;= 2^31 - 1</code></li></ul><h2 id="解题思路" tabindex="-1"><a class="header-anchor" href="#解题思路" aria-hidden="true">#</a> 解题思路</h2><ol><li><p><strong>观察异或的性质</strong> 异或（XOR）的重要特性：</p><ul><li><code>a ^ a = 0</code></li><li><code>a ^ 0 = a</code></li><li>异或运算的结果越大，意味着两个数的二进制表示越不同。</li></ul><p>题目要求在 <code>nums</code> 数组中找到两个数 <code>a</code> 和 <code>b</code>，使 <code>a ^ b</code> 的值最大，即：<code>max(a ^ b)</code></p></li><li><p><strong>逐位构造最大异或值</strong></p><ul><li><strong>从最高位到最低位</strong> 逐步确定 <code>max</code> 的每一位是否可以为 <code>1</code>。</li><li>维护一个<strong>掩码 <code>mask</code></strong>，用于保留当前考虑的高位部分。</li><li>用<strong>哈希集合 <code>set</code> 记录所有数的前缀</strong>（保留 <code>mask</code> 位）。</li></ul></li><li><p><strong>贪心推导最大值</strong> 假设 <code>max</code> 目前的值是 <code>X</code>，希望新的一位也能是 <code>1</code>：</p><ul><li>计算 <code>temp = max | (1 &lt;&lt; i)</code>，即尝试将 <code>i</code> 位置为 <code>1</code>。</li><li>遍历哈希集合 <code>set</code>，查找是否存在 <code>prefix1</code> 和 <code>prefix2</code> 使： <code>prefix1 ^ prefix2 = temp</code></li><li>如果找到了，说明 <code>max</code> 可以取 <code>temp</code>，否则 <code>max</code> 保持不变。</li></ul></li><li><p><strong>初始化</strong></p><ul><li><code>max = 0</code>：存储最大异或值。</li><li><code>mask = 0</code>：用于保留高 <code>i</code> 位。</li><li><code>i</code> 从 <code>31</code> 到 <code>0</code> 遍历（因为 <code>nums[i]</code> 在 JavaScript 中是 32 位整数）。</li></ul></li><li><p><strong>遍历构造最大值</strong></p><ul><li><strong>更新 <code>mask</code></strong>，保留当前高 <code>i</code> 位。</li><li><strong>遍历 <code>nums</code></strong>，用 <code>mask</code> 提取所有前缀存入 <code>set</code>。</li><li><strong>尝试更新 <code>max</code></strong>： <ul><li>假设新 <code>max</code> 值 <code>temp = max | (1 &lt;&lt; i)</code>。</li><li>检查 <code>set</code> 是否存在 <code>prefix1</code> 和 <code>prefix2</code> 使 <code>prefix1 ^ prefix2 == temp</code>。</li><li>如果存在，则更新 <code>max = temp</code>。</li></ul></li></ul></li><li><p><strong>返回最大异或值</strong> 最终 <code>max</code> 存储了最大的 <code>a ^ b</code> 结果。</p></li></ol><h4 id="复杂度分析" tabindex="-1"><a class="header-anchor" href="#复杂度分析" aria-hidden="true">#</a> 复杂度分析</h4><ul><li><strong>时间复杂度</strong>：<code>O(32 * n) = O(n)</code>，外层循环运行 32 次，内层循环遍历 <code>nums</code> 计算哈希集合 <code>set</code>，时间复杂度 <code>O(n)</code>。</li><li><strong>空间复杂度</strong>：<code>O(n)</code>，哈希集合 <code>set</code> 最多存储 n 个不同的前缀值。</li></ul><h2 id="代码" tabindex="-1"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span> <span class="token parameter">nums</span>
 * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">}</span></span>
 */</span>
<span class="token keyword">var</span> <span class="token function-variable function">findMaximumXOR</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">nums</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">let</span> max <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">let</span> mask <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">31</span><span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		mask <span class="token operator">|=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> i<span class="token punctuation">;</span> <span class="token comment">// 保留当前最高的 i 位</span>
		<span class="token keyword">let</span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

		<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> num <span class="token keyword">of</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>num <span class="token operator">&amp;</span> mask<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 仅保留前 i 位</span>
		<span class="token punctuation">}</span>

		<span class="token keyword">let</span> temp <span class="token operator">=</span> max <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 期望 i 位置为 1</span>
		<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> prefix <span class="token keyword">of</span> set<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span>set<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>temp <span class="token operator">^</span> prefix<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
				<span class="token comment">// 是否存在 prefix1 和 prefix2 使 prefix1 ^ prefix2 = temp</span>
				max <span class="token operator">=</span> temp<span class="token punctuation">;</span>
				<span class="token keyword">break</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">return</span> max<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="相关题目" tabindex="-1"><a class="header-anchor" href="#相关题目" aria-hidden="true">#</a> 相关题目</h2>`,23),O=t("thead",null,[t("tr",null,[t("th",{style:{"text-align":"center"}},"题号"),t("th",{style:{"text-align":"left"}},"标题"),t("th",{style:{"text-align":"center"}},"题解"),t("th",{style:{"text-align":"left"}},"标签"),t("th",{style:{"text-align":"center"}},"难度"),t("th",{style:{"text-align":"center"}},"力扣")])],-1),q=t("td",{style:{"text-align":"center"}},"1707",-1),R=t("td",{style:{"text-align":"left"}},"与数组中元素的最大异或值",-1),j=t("td",{style:{"text-align":"center"}},null,-1),I={style:{"text-align":"left"}},X=t("code",null,"位运算",-1),E=t("code",null,"字典树",-1),C=t("code",null,"数组",-1),L=t("td",{style:{"text-align":"center"}},"🔴",-1),N={style:{"text-align":"center"}},V={href:"https://leetcode.cn/problems/maximum-xor-with-an-element-from-array",target:"_blank",rel:"noopener noreferrer"},B={href:"https://leetcode.com/problems/maximum-xor-with-an-element-from-array",target:"_blank",rel:"noopener noreferrer"},S=t("td",{style:{"text-align":"center"}},"2317",-1),z=t("td",{style:{"text-align":"left"}},"操作后的最大异或和",-1),M=t("td",{style:{"text-align":"center"}},null,-1),T={style:{"text-align":"left"}},G=t("code",null,"位运算",-1),J=t("code",null,"数组",-1),A=t("code",null,"数学",-1),D=t("td",{style:{"text-align":"center"}},"🟠",-1),F={style:{"text-align":"center"}},H={href:"https://leetcode.cn/problems/maximum-xor-after-operations",target:"_blank",rel:"noopener noreferrer"},K={href:"https://leetcode.com/problems/maximum-xor-after-operations",target:"_blank",rel:"noopener noreferrer"},P=t("td",{style:{"text-align":"center"}},"2416",-1),Q=t("td",{style:{"text-align":"left"}},"字符串的前缀分数和",-1),U={style:{"text-align":"center"}},W={style:{"text-align":"left"}},Y=t("code",null,"字典树",-1),Z=t("code",null,"数组",-1),$=t("code",null,"字符串",-1),tt=t("code",null,"1+",-1),et=t("td",{style:{"text-align":"center"}},"🔴",-1),nt={style:{"text-align":"center"}},st={href:"https://leetcode.cn/problems/sum-of-prefix-scores-of-strings",target:"_blank",rel:"noopener noreferrer"},ot={href:"https://leetcode.com/problems/sum-of-prefix-scores-of-strings",target:"_blank",rel:"noopener noreferrer"},at=t("td",{style:{"text-align":"center"}},"2429",-1),lt=t("td",{style:{"text-align":"left"}},"最小异或",-1),ct={style:{"text-align":"center"}},it={style:{"text-align":"left"}},rt=t("code",null,"贪心",-1),dt=t("code",null,"位运算",-1),pt=t("td",{style:{"text-align":"center"}},"🟠",-1),ut={style:{"text-align":"center"}},mt={href:"https://leetcode.cn/problems/minimize-xor",target:"_blank",rel:"noopener noreferrer"},_t={href:"https://leetcode.com/problems/minimize-xor",target:"_blank",rel:"noopener noreferrer"},ht=t("td",{style:{"text-align":"center"}},"2932",-1),kt=t("td",{style:{"text-align":"left"}},"找出强数对的最大异或值 I",-1),gt=t("td",{style:{"text-align":"center"}},null,-1),ft={style:{"text-align":"left"}},xt=t("code",null,"位运算",-1),bt=t("code",null,"字典树",-1),yt=t("code",null,"数组",-1),vt=t("code",null,"2+",-1),wt=t("td",{style:{"text-align":"center"}},"🟢",-1),Ot={style:{"text-align":"center"}},qt={href:"https://leetcode.cn/problems/maximum-strong-pair-xor-i",target:"_blank",rel:"noopener noreferrer"},Rt={href:"https://leetcode.com/problems/maximum-strong-pair-xor-i",target:"_blank",rel:"noopener noreferrer"},jt=t("td",{style:{"text-align":"center"}},"2935",-1),It=t("td",{style:{"text-align":"left"}},"找出强数对的最大异或值 II",-1),Xt=t("td",{style:{"text-align":"center"}},null,-1),Et={style:{"text-align":"left"}},Ct=t("code",null,"位运算",-1),Lt=t("code",null,"字典树",-1),Nt=t("code",null,"数组",-1),Vt=t("code",null,"2+",-1),Bt=t("td",{style:{"text-align":"center"}},"🔴",-1),St={style:{"text-align":"center"}},zt={href:"https://leetcode.cn/problems/maximum-strong-pair-xor-ii",target:"_blank",rel:"noopener noreferrer"},Mt={href:"https://leetcode.com/problems/maximum-strong-pair-xor-ii",target:"_blank",rel:"noopener noreferrer"};function Tt(Gt,Jt){const c=l("font"),o=l("RouterLink"),a=l("ExternalLinkIcon");return r(),d("div",null,[_,t("p",null,[e("🟠 "),n(c,{color:"#ffb800"},{default:s(()=>[e("Medium")]),_:1}),e("  🔖  "),n(o,{to:"/tag/bit-manipulation.html"},{default:s(()=>[h]),_:1}),e(),n(o,{to:"/tag/trie.html"},{default:s(()=>[k]),_:1}),e(),n(o,{to:"/tag/array.html"},{default:s(()=>[g]),_:1}),e(),n(o,{to:"/tag/hash-table.html"},{default:s(()=>[f]),_:1}),e("  🔗 "),t("a",x,[b,n(a)]),e(),t("a",y,[v,n(a)])]),w,p(" prettier-ignore "),t("table",null,[O,t("tbody",null,[t("tr",null,[q,R,j,t("td",I,[n(o,{to:"/tag/bit-manipulation.html"},{default:s(()=>[X]),_:1}),e(),n(o,{to:"/tag/trie.html"},{default:s(()=>[E]),_:1}),e(),n(o,{to:"/tag/array.html"},{default:s(()=>[C]),_:1})]),L,t("td",N,[t("a",V,[e("🀄️"),n(a)]),e(),t("a",B,[e("🔗"),n(a)])])]),t("tr",null,[S,z,M,t("td",T,[n(o,{to:"/tag/bit-manipulation.html"},{default:s(()=>[G]),_:1}),e(),n(o,{to:"/tag/array.html"},{default:s(()=>[J]),_:1}),e(),n(o,{to:"/tag/math.html"},{default:s(()=>[A]),_:1})]),D,t("td",F,[t("a",H,[e("🀄️"),n(a)]),e(),t("a",K,[e("🔗"),n(a)])])]),t("tr",null,[P,Q,t("td",U,[n(o,{to:"/problem/2416.html"},{default:s(()=>[e("[✓]")]),_:1})]),t("td",W,[n(o,{to:"/tag/trie.html"},{default:s(()=>[Y]),_:1}),e(),n(o,{to:"/tag/array.html"},{default:s(()=>[Z]),_:1}),e(),n(o,{to:"/tag/string.html"},{default:s(()=>[$]),_:1}),e(),tt]),et,t("td",nt,[t("a",st,[e("🀄️"),n(a)]),e(),t("a",ot,[e("🔗"),n(a)])])]),t("tr",null,[at,lt,t("td",ct,[n(o,{to:"/problem/2429.html"},{default:s(()=>[e("[✓]")]),_:1})]),t("td",it,[n(o,{to:"/tag/greedy.html"},{default:s(()=>[rt]),_:1}),e(),n(o,{to:"/tag/bit-manipulation.html"},{default:s(()=>[dt]),_:1})]),pt,t("td",ut,[t("a",mt,[e("🀄️"),n(a)]),e(),t("a",_t,[e("🔗"),n(a)])])]),t("tr",null,[ht,kt,gt,t("td",ft,[n(o,{to:"/tag/bit-manipulation.html"},{default:s(()=>[xt]),_:1}),e(),n(o,{to:"/tag/trie.html"},{default:s(()=>[bt]),_:1}),e(),n(o,{to:"/tag/array.html"},{default:s(()=>[yt]),_:1}),e(),vt]),wt,t("td",Ot,[t("a",qt,[e("🀄️"),n(a)]),e(),t("a",Rt,[e("🔗"),n(a)])])]),t("tr",null,[jt,It,Xt,t("td",Et,[n(o,{to:"/tag/bit-manipulation.html"},{default:s(()=>[Ct]),_:1}),e(),n(o,{to:"/tag/trie.html"},{default:s(()=>[Lt]),_:1}),e(),n(o,{to:"/tag/array.html"},{default:s(()=>[Nt]),_:1}),e(),Vt]),Bt,t("td",St,[t("a",zt,[e("🀄️"),n(a)]),e(),t("a",Mt,[e("🔗"),n(a)])])])])])])}const Dt=i(m,[["render",Tt],["__file","0421.html.vue"]]);export{Dt as default};
