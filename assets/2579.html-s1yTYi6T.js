import{_ as c,r as l,o as i,c as p,a as e,b as n,d as t,w as o,f as d,e as u}from"./app-fBVbqwGY.js";const g={},h=e("h1",{id:"_2579-统计染色格子数",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#_2579-统计染色格子数","aria-hidden":"true"},"#"),n(" 2579. 统计染色格子数")],-1),m=e("code",null,"数学",-1),_={href:"https://leetcode.cn/problems/count-total-number-of-colored-cells",target:"_blank",rel:"noopener noreferrer"},f=e("code",null,"力扣",-1),k={href:"https://leetcode.com/problems/count-total-number-of-colored-cells",target:"_blank",rel:"noopener noreferrer"},b=e("code",null,"LeetCode",-1),x=u(`<h2 id="题目" tabindex="-1"><a class="header-anchor" href="#题目" aria-hidden="true">#</a> 题目</h2><p>There exists an infinitely large two-dimensional grid of uncolored unit cells. You are given a positive integer <code>n</code>, indicating that you must do the following routine for <code>n</code> minutes:</p><ul><li>At the first minute, color <strong>any</strong> arbitrary unit cell blue.</li><li>Every minute thereafter, color blue <strong>every</strong> uncolored cell that touches a blue cell.</li></ul><p>Below is a pictorial representation of the state of the grid after minutes 1, 2, and 3.</p><figure><img src="https://assets.leetcode.com/uploads/2023/01/10/example-copy-2.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>Return _the number of<strong>colored cells</strong> at the end of _<code>n</code> <em>minutes</em>.</p><p><strong>Example 1:</strong></p><blockquote><p>Input: n = 1</p><p>Output: 1</p><p>Explanation: After 1 minute, there is only 1 blue cell, so we return 1.</p></blockquote><p><strong>Example 2:</strong></p><blockquote><p>Input: n = 2</p><p>Output: 5</p><p>Explanation: After 2 minutes, there are 4 colored cells on the boundary and 1 in the center, so we return 5.</p></blockquote><p><strong>Constraints:</strong></p><ul><li><code>1 &lt;= n &lt;= 10^5</code></li></ul><h2 id="题目大意" tabindex="-1"><a class="header-anchor" href="#题目大意" aria-hidden="true">#</a> 题目大意</h2><p>有一个无穷大的二维网格图，一开始所有格子都未染色。给你一个正整数 <code>n</code> ，表示你需要执行以下步骤 <code>n</code> 分钟：</p><ul><li>第一分钟，将 <strong>任一</strong> 格子染成蓝色。</li><li>之后的每一分钟，将与蓝色格子相邻的 <strong>所有</strong> 未染色格子染成蓝色。</li></ul><p>下图分别是 1、2、3 分钟后的网格图。</p><figure><img src="https://assets.leetcode.com/uploads/2023/01/10/example-copy-2.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>请你返回 <code>n</code> 分钟之后 <strong>被染色的格子</strong> 数目。</p><p><strong>示例 1：</strong></p><blockquote><p><strong>输入：</strong> n = 1</p><p><strong>输出：</strong> 1</p><p><strong>解释：</strong> 1 分钟后，只有 1 个蓝色的格子，所以返回 1 。</p></blockquote><p><strong>示例 2：</strong></p><blockquote><p><strong>输入：</strong> n = 2</p><p><strong>输出：</strong> 5</p><p><strong>解释：</strong> 2 分钟后，有 4 个在边缘的蓝色格子和 1 个在中间的蓝色格子，所以返回 5 。</p></blockquote><p><strong>提示：</strong></p><ul><li><code>1 &lt;= n &lt;= 10^5</code></li></ul><h2 id="解题思路" tabindex="-1"><a class="header-anchor" href="#解题思路" aria-hidden="true">#</a> 解题思路</h2><p>题目要求计算 <strong>n 层正方形网格</strong> 中 <strong>被涂色的单元格总数</strong>。可以观察到：</p><ul><li><strong>n=1 时，只有 1 个单元格</strong>。</li><li><strong>n=2 时，在 n=1 的基础上增加了 4 个单元格</strong>。</li><li><strong>n=3 时，在 n=2 的基础上增加了 8 个单元格</strong>。</li></ul><p>通过归纳可以发现：</p><ul><li>第 <code>n</code> 层的新增单元格数量为 <code>4 * (n - 1)</code>。</li><li>递推公式：<code>f(n) = f(n - 1) + 4(n - 1)</code></li><li><strong>初始条件</strong>：<code>f(1) = 1</code></li></ul><p>递归会导致 <strong>O(n) 递归深度</strong>，可以转换为 <strong>数学公式求解</strong>：</p><ul><li><p>展开递推公式： <code>f(n) = 1 + 4 * 1 + 4 * 2 + 4 * 3 + ... + 4(n - 2) + 4(n - 1)</code></p></li><li><p>提取 <code>4</code>，转换为等差数列求和： <code>f(n) = 1 + 4 * ((n - 1) * n / 2)</code></p></li><li><p><strong>最终公式</strong>： <code>f(n) = 1 + 2(n - 1) * n</code></p></li><li><p><strong>时间复杂度</strong>：<code>O(1)</code>，直接使用公式计算。</p></li><li><p><strong>空间复杂度</strong>：<code>O(1)</code>，没有使用其他参数。</p></li></ul><h2 id="代码" tabindex="-1"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">}</span></span> <span class="token parameter">n</span>
 * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">}</span></span>
 */</span>
<span class="token keyword">var</span> <span class="token function-variable function">coloredCells</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">*</span> n <span class="token operator">*</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="相关题目" tabindex="-1"><a class="header-anchor" href="#相关题目" aria-hidden="true">#</a> 相关题目</h2>`,34),v=e("thead",null,[e("tr",null,[e("th",{style:{"text-align":"center"}},"题号"),e("th",{style:{"text-align":"left"}},"标题"),e("th",{style:{"text-align":"center"}},"题解"),e("th",{style:{"text-align":"left"}},"标签"),e("th",{style:{"text-align":"center"}},"难度"),e("th",{style:{"text-align":"center"}},"力扣")])],-1),y=e("td",{style:{"text-align":"center"}},"2481",-1),w=e("td",{style:{"text-align":"left"}},"分割圆的最少切割次数",-1),q={style:{"text-align":"center"}},E={style:{"text-align":"left"}},C=e("code",null,"几何",-1),L=e("code",null,"数学",-1),N=e("td",{style:{"text-align":"center"}},"🟢",-1),O={style:{"text-align":"center"}},V={href:"https://leetcode.cn/problems/minimum-cuts-to-divide-a-circle",target:"_blank",rel:"noopener noreferrer"},B={href:"https://leetcode.com/problems/minimum-cuts-to-divide-a-circle",target:"_blank",rel:"noopener noreferrer"};function I(j,A){const r=l("font"),s=l("RouterLink"),a=l("ExternalLinkIcon");return i(),p("div",null,[h,e("p",null,[n("🟠 "),t(r,{color:"#ffb800"},{default:o(()=>[n("Medium")]),_:1}),n("  🔖  "),t(s,{to:"/tag/math.html"},{default:o(()=>[m]),_:1}),n("  🔗 "),e("a",_,[f,t(a)]),n(),e("a",k,[b,t(a)])]),x,d(" prettier-ignore "),e("table",null,[v,e("tbody",null,[e("tr",null,[y,w,e("td",q,[t(s,{to:"/problem/2481.html"},{default:o(()=>[n("[✓]")]),_:1})]),e("td",E,[t(s,{to:"/tag/geometry.html"},{default:o(()=>[C]),_:1}),n(),t(s,{to:"/tag/math.html"},{default:o(()=>[L]),_:1})]),N,e("td",O,[e("a",V,[n("🀄️"),t(a)]),n(),e("a",B,[n("🔗"),t(a)])])])])])])}const z=c(g,[["render",I],["__file","2579.html.vue"]]);export{z as default};
