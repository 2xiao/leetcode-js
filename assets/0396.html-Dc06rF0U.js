import{_ as l,r as t,o as i,c as r,a as n,b as s,d as a,w as e,e as d}from"./app-B5EG-zH0.js";const u={},k=n("h1",{id:"_396-旋转函数",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_396-旋转函数","aria-hidden":"true"},"#"),s(" 396. 旋转函数")],-1),m=n("code",null,"数组",-1),v=n("code",null,"数学",-1),g=n("code",null,"动态规划",-1),h={href:"https://leetcode.cn/problems/rotate-function",target:"_blank",rel:"noopener noreferrer"},b=n("code",null,"力扣",-1),_={href:"https://leetcode.com/problems/rotate-function",target:"_blank",rel:"noopener noreferrer"},f=n("code",null,"LeetCode",-1),F=d(`<h2 id="题目" tabindex="-1"><a class="header-anchor" href="#题目" aria-hidden="true">#</a> 题目</h2><p>You are given an integer array <code>nums</code> of length <code>n</code>.</p><p>Assume <code>arrk</code> to be an array obtained by rotating <code>nums</code> by <code>k</code> positions clock-wise. We define the <strong>rotation function</strong> <code>F</code> on <code>nums</code> as follow:</p><ul><li><code>F(k) = 0 * arrk[0] + 1 * arrk[1] + ... + (n - 1) * arrk[n - 1].</code></li></ul><p>Return <em>the maximum value of</em> <code>F(0), F(1), ..., F(n-1)</code>.</p><p>The test cases are generated so that the answer fits in a <strong>32-bit</strong> integer.</p><p><strong>Example 1:</strong></p><blockquote><p>Input: nums = [4,3,2,6]</p><p>Output: 26</p><p>Explanation:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>F(0) = (0 * 4) + (1 * 3) + (2 * 2) + (3 * 6) = 0 + 3 + 4 + 18 = 25

F(1) = (0 * 6) + (1 * 4) + (2 * 3) + (3 * 2) = 0 + 4 + 6 + 6 = 16

F(2) = (0 * 2) + (1 * 6) + (2 * 4) + (3 * 3) = 0 + 6 + 8 + 9 = 23

F(3) = (0 * 3) + (1 * 2) + (2 * 6) + (3 * 4) = 0 + 2 + 12 + 12 = 26
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>So the maximum value of F(0), F(1), F(2), F(3) is F(3) = 26.</p></blockquote><p><strong>Example 2:</strong></p><blockquote><p>Input: nums = [100]</p><p>Output: 0</p></blockquote><p><strong>Constraints:</strong></p><ul><li><code>n == nums.length</code></li><li><code>1 &lt;= n &lt;= 10^5</code></li><li><code>-100 &lt;= nums[i] &lt;= 100</code></li></ul><h2 id="题目大意" tabindex="-1"><a class="header-anchor" href="#题目大意" aria-hidden="true">#</a> 题目大意</h2><p>给定一个长度为 <code>n</code> 的整数数组 <code>nums</code> 。</p><p>假设 <code>arrk</code> 是数组 <code>nums</code> 顺时针旋转 <code>k</code> 个位置后的数组，我们定义 <code>nums</code> 的 <strong>旋转函数</strong> <code>F</code> 为：</p><ul><li><code>F(k) = 0 * arrk[0] + 1 * arrk[1] + ... + (n - 1) * arrk[n - 1]</code></li></ul><p>返回 <em><code>F(0), F(1), ..., F(n-1)</code>中的最大值</em>。</p><p>生成的测试用例让答案符合 <strong>32 位</strong> 整数。</p><p><strong>示例 1:</strong></p><blockquote><p><strong>输入:</strong> nums = [4,3,2,6]</p><p><strong>输出:</strong> 26</p><p><strong>解释:</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>F(0) = (0 * 4) + (1 * 3) + (2 * 2) + (3 * 6) = 0 + 3 + 4 + 18 = 25

F(1) = (0 * 6) + (1 * 4) + (2 * 3) + (3 * 2) = 0 + 4 + 6 + 6 = 16

F(2) = (0 * 2) + (1 * 6) + (2 * 4) + (3 * 3) = 0 + 6 + 8 + 9 = 23

F(3) = (0 * 3) + (1 * 2) + (2 * 6) + (3 * 4) = 0 + 2 + 12 + 12 = 26
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>所以 F(0), F(1), F(2), F(3) 中的最大值是 F(3) = 26 。</p></blockquote><p><strong>示例 2:</strong></p><blockquote><p><strong>输入:</strong> nums = [100]</p><p><strong>输出:</strong> 0</p></blockquote><p><strong>提示:</strong></p><ul><li><code>n == nums.length</code></li><li><code>1 &lt;= n &lt;= 10^5</code></li><li><code>-100 &lt;= nums[i] &lt;= 100</code></li></ul><h2 id="解题思路" tabindex="-1"><a class="header-anchor" href="#解题思路" aria-hidden="true">#</a> 解题思路</h2><ol><li><strong>观察旋转变化规律</strong></li></ol><p>题目要求我们找到数组 <code>nums</code> 所有旋转状态下的最大旋转函数值 <code>F(k)</code>，其中</p><p><code>F(k) = [k, k+1...n-2,n-1,0,....k-1] * nums</code></p><p>可以通过数学公式推导得出：</p><p><code>F(k + 1) = [k+1,k+2...n-1,0, 1,.....k] * nums</code></p><p>观察旋转变化规律：</p><p><code>F(k + 1) = F(k) + sum - n * nums[n - 1 - k]</code></p><ol start="2"><li><strong>初始化</strong></li></ol><ul><li>数组长度为 <code>n</code></li><li>计算数组元素和为 <code>sum = nums[0] + nums[1] + ... + nums[n - 1]</code></li><li>初始旋转函数值 <code>rotation = 0 * nums[0] + 1 * nums[1] + ... + (n - 1) * nums[n - 1]</code></li><li>初始旋转函数最大值 <code>maxRotation = rotation</code></li></ul><ol start="3"><li><strong>遍历求最大值</strong></li></ol><p>遍历 <code>k = 1</code> 到 <code>n - 1</code>，根据公式递推计算 <code>F(k)</code> 并更新最大值。</p><ol start="4"><li><strong>返回最大值</strong></li></ol><p>返回旋转函数最大值 <code>maxRotation</code>。</p><h4 id="复杂度分析" tabindex="-1"><a class="header-anchor" href="#复杂度分析" aria-hidden="true">#</a> 复杂度分析</h4><ul><li><strong>时间复杂度</strong>：<code>O(n)</code>，遍历一次数组计算 <code>sum</code> 和 <code>F(0)</code>，再用 <code>O(n)</code> 计算每次旋转函数值。</li><li><strong>空间复杂度</strong>：<code>O(1)</code>，只需常数空间存储中间变量。</li></ul><h2 id="代码" tabindex="-1"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span> <span class="token parameter">nums</span>
 * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">}</span></span>
 */</span>
<span class="token keyword">var</span> <span class="token function-variable function">maxRotateFunction</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">nums</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">const</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
	<span class="token keyword">const</span> sum <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">acc<span class="token punctuation">,</span> cur</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> acc <span class="token operator">+</span> cur<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">let</span> rotation <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">acc<span class="token punctuation">,</span> cur<span class="token punctuation">,</span> i</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> acc <span class="token operator">+</span> cur <span class="token operator">*</span> i<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">let</span> maxRotation <span class="token operator">=</span> rotation<span class="token punctuation">;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		rotation <span class="token operator">=</span> rotation <span class="token operator">+</span> sum <span class="token operator">-</span> n <span class="token operator">*</span> nums<span class="token punctuation">[</span>n <span class="token operator">-</span> i<span class="token punctuation">]</span><span class="token punctuation">;</span>
		maxRotation <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>maxRotation<span class="token punctuation">,</span> rotation<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> maxRotation<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,42);function x(y,w){const p=t("font"),o=t("RouterLink"),c=t("ExternalLinkIcon");return i(),r("div",null,[k,n("p",null,[s("🟠 "),a(p,{color:"#ffb800"},{default:e(()=>[s("Medium")]),_:1}),s("  🔖  "),a(o,{to:"/tag/array.html"},{default:e(()=>[m]),_:1}),s(),a(o,{to:"/tag/math.html"},{default:e(()=>[v]),_:1}),s(),a(o,{to:"/tag/dynamic-programming.html"},{default:e(()=>[g]),_:1}),s("  🔗 "),n("a",h,[b,a(c)]),s(),n("a",_,[f,a(c)])]),F])}const q=l(u,[["render",x],["__file","0396.html.vue"]]);export{q as default};
