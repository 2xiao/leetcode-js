import{_ as l,r as e,o as u,c as i,a as n,b as s,d as a,w as t,e as r}from"./app-aQeLbVW9.js";const d={},k=n("h1",{id:"_2762-不间断子数组",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_2762-不间断子数组","aria-hidden":"true"},"#"),s(" 2762. 不间断子数组")],-1),m=n("code",null,"队列",-1),b=n("code",null,"数组",-1),v=n("code",null,"有序集合",-1),g=n("code",null,"滑动窗口",-1),h=n("code",null,"单调队列",-1),f=n("code",null,"堆（优先队列）",-1),_={href:"https://leetcode.cn/problems/continuous-subarrays",target:"_blank",rel:"noopener noreferrer"},y=n("code",null,"力扣",-1),j={href:"https://leetcode.com/problems/continuous-subarrays",target:"_blank",rel:"noopener noreferrer"},w=n("code",null,"LeetCode",-1),x=r(`<h2 id="题目" tabindex="-1"><a class="header-anchor" href="#题目" aria-hidden="true">#</a> 题目</h2><p>You are given a <strong>0-indexed</strong> integer array <code>nums</code>. A subarray of <code>nums</code> is called <strong>continuous</strong> if:</p><ul><li>Let <code>i</code>, <code>i + 1</code>, ..., <code>j</code> be the indices in the subarray. Then, for each pair of indices <code>i &lt;= i1, i2 &lt;= j</code>, <code>0 &lt;= |nums[i1] - nums[i2]| &lt;= 2</code>.</li></ul><p>Return <em>the total number of<strong>continuous</strong> subarrays.</em></p><p>A subarray is a contiguous <strong>non-empty</strong> sequence of elements within an array.</p><p><strong>Example 1:</strong></p><blockquote><p>Input: nums = [5,4,2,4]</p><p>Output: 8</p><p>Explanation:</p><p>Continuous subarray of size 1: [5], [4], [2], [4].</p><p>Continuous subarray of size 2: [5,4], [4,2], [2,4].</p><p>Continuous subarray of size 3: [4,2,4].</p><p>Thereare no subarrys of size 4.</p><p>Total continuous subarrays = 4 + 3 + 1 = 8.</p><p>It can be shown that there are no more continuous subarrays.</p></blockquote><p><strong>Example 2:</strong></p><blockquote><p>Input: nums = [1,2,3]</p><p>Output: 6</p><p>Explanation:</p><p>Continuous subarray of size 1: [1], [2], [3].</p><p>Continuous subarray of size 2: [1,2], [2,3].</p><p>Continuous subarray of size 3: [1,2,3].</p><p>Total continuous subarrays = 3 + 2 + 1 = 6.</p></blockquote><p><strong>Constraints:</strong></p><ul><li><code>1 &lt;= nums.length &lt;= 10^5</code></li><li><code>1 &lt;= nums[i] &lt;= 10^9</code></li></ul><h2 id="题目大意" tabindex="-1"><a class="header-anchor" href="#题目大意" aria-hidden="true">#</a> 题目大意</h2><p>给你一个下标从 <strong>0</strong> 开始的整数数组 <code>nums</code> 。<code>nums</code> 的一个子数组如果满足以下条件，那么它是 <strong>不间断</strong> 的：</p><ul><li><code>i</code>，<code>i + 1</code> ，...，<code>j</code> 表示子数组中的下标。对于所有满足 <code>i &lt;= i1, i2 &lt;= j</code> 的下标对，都有 <code>0 &lt;= |nums[i1] - nums[i2]| &lt;= 2</code> 。</li></ul><p>请你返回 <strong>不间断</strong> 子数组的总数目。</p><p>子数组是一个数组中一段连续 <strong>非空</strong> 的元素序列。</p><p><strong>示例 1：</strong></p><blockquote><p><strong>输入：</strong> nums = [5,4,2,4]</p><p><strong>输出：</strong> 8</p><p><strong>解释：</strong></p><p>大小为 1 的不间断子数组：[5], [4], [2], [4] 。</p><p>大小为 2 的不间断子数组：[5,4], [4,2], [2,4] 。</p><p>大小为 3 的不间断子数组：[4,2,4] 。</p><p>没有大小为 4 的不间断子数组。</p><p>不间断子数组的总数目为 4 + 3 + 1 = 8 。</p><p>除了这些以外，没有别的不间断子数组。</p></blockquote><p><strong>示例 2：</strong></p><blockquote><p><strong>输入：</strong> nums = [1,2,3]</p><p><strong>输出：</strong> 6</p><p><strong>解释：</strong></p><p>大小为 1 的不间断子数组：[1], [2], [3] 。</p><p>大小为 2 的不间断子数组：[1,2], [2,3] 。</p><p>大小为 3 的不间断子数组：[1,2,3] 。</p><p>不间断子数组的总数目为 3 + 2 + 1 = 6 。</p></blockquote><p><strong>提示：</strong></p><ul><li><code>1 &lt;= nums.length &lt;= 10^5</code></li><li><code>1 &lt;= nums[i] &lt;= 10^9</code></li></ul><h2 id="解题思路" tabindex="-1"><a class="header-anchor" href="#解题思路" aria-hidden="true">#</a> 解题思路</h2><ol><li><p><strong>滑动窗口</strong>：</p><ul><li>本题要求计算连续子数组，且子数组需要满足一定的条件，滑动窗口是一个非常适合解决此类问题的技巧。</li><li>滑动窗口的核心在于，通过移动窗口的边界（起点 <code>i</code> 和终点 <code>j</code>）动态调整窗口范围，从而高效地确定满足条件的子数组。</li></ul></li><li><p><strong>使用哈希表记录窗口状态</strong>：</p><ul><li>为了高效地判断窗口内元素是否满足条件，可以使用一个哈希表 <code>map</code> 记录窗口内每个数的频率。</li></ul></li><li><p><strong>窗口合法性检查</strong>：</p><ul><li>判断窗口是否满足条件的方法：窗口内的元素必须满足任意两个数 <code>nums[i]</code> 和 <code>nums[j]</code> 的绝对差值不超过 2。</li><li>对于滑动窗口的每个位置 <code>j</code>，通过一个辅助函数 <code>getCount(num)</code>，统计 <code>num</code> 及其相邻值 <code>num±1</code> 和 <code>num±2</code> 的出现频次，与当前窗口长度 <code>(j - i + 1)</code> 对比，从而判断当前窗口是否满足条件。 <ul><li>如果 <code>getCount(num) == (j - i + 1)</code>，说明窗口中所有数的绝对差值都不超过 2，所有以 <code>j</code> 为右边界的子数组的个数为 <code>(j - i + 1)</code>，将其加入子数组总数中。</li><li>如果 <code>getCount(num) &lt; (j - i + 1)</code>，说明窗口中出现了绝对差值超过 2 的数字，逐步收缩左边界 <code>i</code>，同时更新哈希表 <code>map</code>。</li></ul></li></ul></li><li><p><strong>遍历数组 <code>nums</code></strong>：</p><ul><li>将当前元素加入窗口（更新 <code>map</code>）。</li><li>检查当前窗口是否满足条件。如果不满足，则收缩窗口（调整 <code>i</code> 并更新 <code>map</code>）。</li><li>累加以 <code>j</code> 为右边界的子数组数：<code>total += (j - i + 1)</code>。</li></ul></li><li><p><strong>返回结果</strong>：</p><ul><li>返回 <code>total</code> 作为结果。</li></ul></li></ol><h4 id="复杂度分析" tabindex="-1"><a class="header-anchor" href="#复杂度分析" aria-hidden="true">#</a> 复杂度分析</h4><ul><li><strong>时间复杂度</strong>：<code>O(n)</code>，遍历数组的时间复杂度为 <code>O(n)</code>，哈希表的插入、删除、查询操作时间复杂度为 <code>O(1)</code>。</li><li><strong>空间复杂度</strong>：<code>O(n)</code>，使用了一个哈希表 <code>map</code>，其大小取决于窗口中不同数字的数量，最坏情况下，空间复杂度为 <code>O(n)</code>。</li></ul><h2 id="代码" tabindex="-1"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span> <span class="token parameter">nums</span>
 * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">}</span></span>
 */</span>
<span class="token keyword">var</span> <span class="token function-variable function">continuousSubarrays</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">nums</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">const</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
	<span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// 滑动窗口左边界</span>
	<span class="token keyword">let</span> total <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// 满足条件的子数组总数</span>
	<span class="token keyword">let</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 哈希表记录窗口内数字出现的频率</span>

	<span class="token comment">// 辅助函数：统计num及其相邻数字的总频率</span>
	<span class="token keyword">const</span> <span class="token function-variable function">getCount</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">num</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token punctuation">(</span>
			<span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span>
			<span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>num <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span>
			<span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>num <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span>
			<span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>num <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span>
			<span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>num <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token number">0</span><span class="token punctuation">)</span>
		<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span><span class="token punctuation">;</span>

	<span class="token comment">// 遍历数组</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token comment">// 将当前元素加入窗口</span>
		map<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

		<span class="token comment">// 调整窗口的左边界，确保窗口合法</span>
		<span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">-</span> i <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&gt;</span> <span class="token function">getCount</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			map<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 移除左边界元素</span>
			i<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment">// 收缩左边界</span>
		<span class="token punctuation">}</span>

		<span class="token comment">// 累加以j为右边界的子数组数</span>
		total <span class="token operator">+=</span> j <span class="token operator">-</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">return</span> total<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,28);function C(q,z){const c=e("font"),o=e("RouterLink"),p=e("ExternalLinkIcon");return u(),i("div",null,[k,n("p",null,[s("🟠 "),a(c,{color:"#ffb800"},{default:t(()=>[s("Medium")]),_:1}),s("  🔖  "),a(o,{to:"/tag/queue.html"},{default:t(()=>[m]),_:1}),s(),a(o,{to:"/tag/array.html"},{default:t(()=>[b]),_:1}),s(),a(o,{to:"/tag/ordered-set.html"},{default:t(()=>[v]),_:1}),s(),a(o,{to:"/tag/sliding-window.html"},{default:t(()=>[g]),_:1}),s(),a(o,{to:"/tag/monotonic-queue.html"},{default:t(()=>[h]),_:1}),s(),a(o,{to:"/tag/heap-priority-queue.html"},{default:t(()=>[f]),_:1}),s("  🔗 "),n("a",_,[y,a(p)]),s(),n("a",j,[w,a(p)])]),x])}const O=l(d,[["render",C],["__file","2762.html.vue"]]);export{O as default};
