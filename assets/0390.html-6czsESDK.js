import{_ as c,r as l,o as p,c as i,a as n,b as e,d as t,w as s,f as d,e as u}from"./app-aQeLbVW9.js";const m={},g=n("h1",{id:"_390-消除游戏",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_390-消除游戏","aria-hidden":"true"},"#"),e(" 390. 消除游戏")],-1),h=n("code",null,"递归",-1),k=n("code",null,"数学",-1),_={href:"https://leetcode.cn/problems/elimination-game",target:"_blank",rel:"noopener noreferrer"},b=n("code",null,"力扣",-1),f={href:"https://leetcode.com/problems/elimination-game",target:"_blank",rel:"noopener noreferrer"},v=n("code",null,"LeetCode",-1),x=u(`<h2 id="题目" tabindex="-1"><a class="header-anchor" href="#题目" aria-hidden="true">#</a> 题目</h2><p>You have a list <code>arr</code> of all integers in the range <code>[1, n]</code> sorted in a strictly increasing order. Apply the following algorithm on <code>arr</code>:</p><ul><li>Starting from left to right, remove the first number and every other number afterward until you reach the end of the list.</li><li>Repeat the previous step again, but this time from right to left, remove the rightmost number and every other number from the remaining numbers.</li><li>Keep repeating the steps again, alternating left to right and right to left, until a single number remains.</li></ul><p>Given the integer <code>n</code>, return <em>the last number that remains in</em> <code>arr</code>.</p><p><strong>Example 1:</strong></p><blockquote><p>Input: n = 9</p><p>Output: 6</p><p>Explanation:</p><p>arr = [<strong><em>1</em></strong> , 2, <em><strong>3</strong></em> , 4, <em><strong>5</strong></em> , 6, <em><strong>7</strong></em> , 8, <em><strong>9</strong></em>]</p><p>arr = [2, <em><strong>4</strong></em> , 6, <em><strong>8</strong></em>]</p><p>arr = [<em><strong>2</strong></em> , 6]</p><p>arr = [6]</p></blockquote><p><strong>Example 2:</strong></p><blockquote><p>Input: n = 1</p><p>Output: 1</p></blockquote><p><strong>Constraints:</strong></p><ul><li><code>1 &lt;= n &lt;= 10^9</code></li></ul><h2 id="题目大意" tabindex="-1"><a class="header-anchor" href="#题目大意" aria-hidden="true">#</a> 题目大意</h2><p>列表 <code>arr</code> 由在范围 <code>[1, n]</code> 中的所有整数组成，并按严格递增排序。请你对 <code>arr</code> 应用下述算法：</p><ul><li>从左到右，删除第一个数字，然后每隔一个数字删除一个，直到到达列表末尾。</li><li>重复上面的步骤，但这次是从右到左。也就是，删除最右侧的数字，然后剩下的数字每隔一个删除一个。</li><li>不断重复这两步，从左到右和从右到左交替进行，直到只剩下一个数字。</li></ul><p>给你整数 <code>n</code> ，返回 <code>arr</code> 最后剩下的数字。</p><p><strong>示例 1：</strong></p><blockquote><p><strong>输入：</strong> n = 9</p><p><strong>输出：</strong> 6</p><p><strong>解释：</strong></p><p>arr = [<strong><em>1</em></strong> , 2, <em><strong>3</strong></em> , 4, <em><strong>5</strong></em> , 6, <em><strong>7</strong></em> , 8, <em><strong>9</strong></em>]</p><p>arr = [2, <em><strong>4</strong></em> , 6, <em><strong>8</strong></em>]</p><p>arr = [<em><strong>2</strong></em> , 6]</p><p>arr = [6]</p></blockquote><p><strong>示例 2：</strong></p><blockquote><p><strong>输入：</strong> n = 1</p><p><strong>输出：</strong> 1</p></blockquote><p><strong>提示：</strong></p><ul><li><code>1 &lt;= n &lt;= 10^9</code></li></ul><h2 id="解题思路" tabindex="-1"><a class="header-anchor" href="#解题思路" aria-hidden="true">#</a> 解题思路</h2><ol><li><strong>观察删除规律</strong></li></ol><p>每轮的删除分为两种方式：</p><ul><li><strong>从左到右删除</strong>：序列中每个奇数位置的元素都会被删除。这时，剩余的元素序列首项始终发生变化。</li><li><strong>从右到左删除</strong>：若剩余元素数量为奇数时，序列首项也会变化；若为偶数时，序列首项保持不变。</li></ul><ol start="2"><li><strong>关键变量</strong></li></ol><ul><li><code>head</code>：记录当前序列的起始数字。</li><li><code>step</code>：当前序列中两个相邻数字之间的距离，初始为 <code>1</code>。</li><li><code>n</code>：当前序列中剩余的数字个数。</li><li><code>left</code>：布尔变量，标识当前轮的删除方向，<code>true</code> 表示从左到右，<code>false</code> 表示从右到左。</li></ul><ol start="3"><li><strong>状态更新规则</strong></li></ol><ul><li><strong>更新首项 (<code>head</code>)</strong><ul><li>如果从左到右删除，首项一定变化：<code>head += step</code></li><li>如果从右到左删除，只有当 <code>n</code> 为奇数时首项变化：<code>head += step</code></li></ul></li><li><strong>更新步长 (<code>step</code>)</strong><ul><li>每轮步长加倍：<code>step *= 2</code></li></ul></li><li><strong>更新剩余长度 (<code>n</code>)</strong><ul><li>每轮删除一半元素：<code>n = Math.floor(n / 2)</code></li></ul></li><li><strong>切换方向</strong><ul><li><code>left = !left</code></li></ul></li></ul><ol start="4"><li><strong>算法结束条件</strong></li></ol><p>当序列只剩下一个元素时 (<code>n === 1</code>)，即为最终结果。</p><h4 id="复杂度分析" tabindex="-1"><a class="header-anchor" href="#复杂度分析" aria-hidden="true">#</a> 复杂度分析</h4><ul><li><strong>时间复杂度</strong>：<code>O(log n)</code>，每轮 <code>n</code> 减半，因此需要进行 <code>log n</code> 轮操作。</li><li><strong>空间复杂度</strong>：<code>O(1)</code>，只使用了常数空间存储变量。</li></ul><h2 id="代码" tabindex="-1"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">}</span></span> <span class="token parameter">n</span>
 * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">}</span></span>
 */</span>
<span class="token keyword">var</span> <span class="token function-variable function">lastRemaining</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">let</span> head <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token keyword">let</span> step <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token keyword">let</span> left <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
	<span class="token keyword">while</span> <span class="token punctuation">(</span>n <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">||</span> n <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			head <span class="token operator">+=</span> step<span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		step <span class="token operator">*=</span> <span class="token number">2</span><span class="token punctuation">;</span>
		n <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>n <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		left <span class="token operator">=</span> <span class="token operator">!</span>left<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> head<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="相关题目" tabindex="-1"><a class="header-anchor" href="#相关题目" aria-hidden="true">#</a> 相关题目</h2>`,35),y=n("thead",null,[n("tr",null,[n("th",{style:{"text-align":"center"}},"题号"),n("th",{style:{"text-align":"left"}},"标题"),n("th",{style:{"text-align":"center"}},"题解"),n("th",{style:{"text-align":"left"}},"标签"),n("th",{style:{"text-align":"center"}},"难度"),n("th",{style:{"text-align":"center"}},"力扣")])],-1),w=n("td",{style:{"text-align":"center"}},"2293",-1),q=n("td",{style:{"text-align":"left"}},"极大极小游戏",-1),E={style:{"text-align":"center"}},C={style:{"text-align":"left"}},L=n("code",null,"数组",-1),N=n("code",null,"模拟",-1),V=n("td",{style:{"text-align":"center"}},"🟢",-1),I={style:{"text-align":"center"}},O={href:"https://leetcode.cn/problems/min-max-game",target:"_blank",rel:"noopener noreferrer"},R={href:"https://leetcode.com/problems/min-max-game",target:"_blank",rel:"noopener noreferrer"};function j(B,M){const r=l("font"),a=l("RouterLink"),o=l("ExternalLinkIcon");return p(),i("div",null,[g,n("p",null,[e("🟠 "),t(r,{color:"#ffb800"},{default:s(()=>[e("Medium")]),_:1}),e("  🔖  "),t(a,{to:"/tag/recursion.html"},{default:s(()=>[h]),_:1}),e(),t(a,{to:"/tag/math.html"},{default:s(()=>[k]),_:1}),e("  🔗 "),n("a",_,[b,t(o)]),e(),n("a",f,[v,t(o)])]),x,d(" prettier-ignore "),n("table",null,[y,n("tbody",null,[n("tr",null,[w,q,n("td",E,[t(a,{to:"/problem/2293.html"},{default:s(()=>[e("[✓]")]),_:1})]),n("td",C,[t(a,{to:"/tag/array.html"},{default:s(()=>[L]),_:1}),e(),t(a,{to:"/tag/simulation.html"},{default:s(()=>[N]),_:1})]),V,n("td",I,[n("a",O,[e("🀄️"),t(o)]),e(),n("a",R,[e("🔗"),t(o)])])])])])])}const A=c(m,[["render",j],["__file","0390.html.vue"]]);export{A as default};
