import{_ as i,r as o,o as u,c as r,a as s,b as n,d as a,w as t,e as p}from"./app-fBVbqwGY.js";const d={},k=s("h1",{id:"_78-合并排序链表",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#_78-合并排序链表","aria-hidden":"true"},"#"),n(" 78. 合并排序链表")],-1),v=s("code",null,"链表",-1),m=s("code",null,"分治",-1),g=s("code",null,"堆（优先队列）",-1),h=s("code",null,"归并排序",-1),_={href:"https://leetcode.cn/problems/vvXgSW",target:"_blank",rel:"noopener noreferrer"},b=s("code",null,"力扣",-1),f=p('<h2 id="题目" tabindex="-1"><a class="header-anchor" href="#题目" aria-hidden="true">#</a> 题目</h2><p>给定一个链表数组，每个链表都已经按升序排列。</p><p>请将所有链表合并到一个升序链表中，返回合并后的链表。</p><p><strong>示例 1：</strong></p><blockquote><p><strong>输入：</strong> lists = [[1,4,5],[1,3,4],[2,6]]</p><p><strong>输出：</strong>[1,1,2,3,4,4,5,6]</p><p><strong>解释：</strong> 链表数组如下：</p><p>[</p><p>1-&gt;4-&gt;5,</p><p>1-&gt;3-&gt;4,</p><p>2-&gt;6</p><p>]</p><p>将它们合并到一个有序链表中得到。</p><p>1-&gt;1-&gt;2-&gt;3-&gt;4-&gt;4-&gt;5-&gt;6</p></blockquote><p><strong>示例 2：</strong></p><blockquote><p><strong>输入：</strong> lists = []</p><p><strong>输出：</strong>[]</p></blockquote><p><strong>示例 3：</strong></p><blockquote><p><strong>输入：</strong> lists = [[]]</p><p><strong>输出：</strong>[]</p></blockquote><p><strong>提示：</strong></p><ul><li><code>k == lists.length</code></li><li><code>0 &lt;= k &lt;= 10^4</code></li><li><code>0 &lt;= lists[i].length &lt;= 500</code></li><li><code>-10^4 &lt;= lists[i][j] &lt;= 10^4</code></li><li><code>lists[i]</code> 按 <strong>升序</strong> 排列</li><li><code>lists[i].length</code> 的总和不超过 <code>10^4</code></li></ul>',11),w={class:"hint-container warning"},y=s("p",{class:"hint-container-title"},"注意",-1),x=s("h2",{id:"解题思路",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#解题思路","aria-hidden":"true"},"#"),n(" 解题思路")],-1),L=p(`<p>可以借助分治的思想，把合并 K 个有序链表，转化为逐步合并两个有序链表的问题。</p><ol><li><strong>分治法</strong>：每次将链表列表 <code>lists</code> 分为左右两部分，递归地合并左半部分和右半部分的链表，最后将左右两部分的合并结果再进行合并。这类似于归并排序的思路。</li><li><strong>合并两个有序链表</strong>：定义一个辅助函数 <code>mergeTwoLists</code>，用于合并两个有序链表。通过遍历两个链表的节点，比较当前节点值的大小，将较小的节点连接到结果链表中，直到其中一个链表遍历完毕，然后直接连接剩余的链表。</li><li><strong>递归终止条件</strong>：当 <code>lists</code> 长度为 0 时，返回 <code>null</code>；当 <code>lists</code> 长度为 1 时，直接返回该链表。</li></ol><h4 id="空间复杂度" tabindex="-1"><a class="header-anchor" href="#空间复杂度" aria-hidden="true">#</a> 空间复杂度</h4><ul><li><strong>时间复杂度</strong>：<code>O(nk * log k)</code>，其中<code>k</code> 是链表的个数，每个链表的平均长度为 <code>n</code>。 <ul><li>合并两个有序链表的时间复杂度为 <code>O(n)</code>；</li><li>使用分治法将 <code>k</code> 个链表合并，分治的过程会有 <code>log(k)</code> 层递归，每层递归合并的代价为 <code>O(nk)</code>，因为每一层需要合并所有链表的节点。</li><li>因此，总时间复杂度为 <code>O(nk * log k)</code>。</li></ul></li><li><strong>空间复杂度</strong>：<code>O(log k)</code>，主要由递归调用栈的深度决定，递归深度为 <code>log k</code>。</li></ul><h2 id="代码" tabindex="-1"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>ListNode<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span> <span class="token parameter">lists</span>
 * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>ListNode<span class="token punctuation">}</span></span>
 */</span>
<span class="token keyword">var</span> <span class="token function-variable function">mergeKLists</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">lists</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">let</span> len <span class="token operator">=</span> lists<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>len <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>len <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> lists<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token keyword">const</span> medium <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>len <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">const</span> left <span class="token operator">=</span> <span class="token function">mergeKLists</span><span class="token punctuation">(</span>lists<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> medium<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">const</span> right <span class="token operator">=</span> <span class="token function">mergeKLists</span><span class="token punctuation">(</span>lists<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>medium<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token function">mergeTwoLists</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">var</span> <span class="token function-variable function">mergeTwoLists</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">left<span class="token punctuation">,</span> right</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">let</span> prev <span class="token operator">=</span> res<span class="token punctuation">;</span>
	<span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&amp;&amp;</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>left<span class="token punctuation">.</span>val <span class="token operator">&lt;</span> right<span class="token punctuation">.</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			prev<span class="token punctuation">.</span>next <span class="token operator">=</span> left<span class="token punctuation">;</span>
			left <span class="token operator">=</span> left<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
		<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
			prev<span class="token punctuation">.</span>next <span class="token operator">=</span> right<span class="token punctuation">;</span>
			right <span class="token operator">=</span> right<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		prev <span class="token operator">=</span> prev<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	prev<span class="token punctuation">.</span>next <span class="token operator">=</span> left <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">?</span> left <span class="token operator">:</span> right<span class="token punctuation">;</span>
	<span class="token keyword">return</span> res<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,6);function q(N,j){const c=o("font"),e=o("RouterLink"),l=o("ExternalLinkIcon");return u(),r("div",null,[k,s("p",null,[n("🔴 "),a(c,{color:"#ff334b"},{default:t(()=>[n("Hard")]),_:1}),n("  🔖  "),a(e,{to:"/tag/linked-list.html"},{default:t(()=>[v]),_:1}),n(),a(e,{to:"/tag/divide-and-conquer.html"},{default:t(()=>[m]),_:1}),n(),a(e,{to:"/tag/heap-priority-queue.html"},{default:t(()=>[g]),_:1}),n(),a(e,{to:"/tag/merge-sort.html"},{default:t(()=>[h]),_:1}),n("  🔗 "),s("a",_,[b,a(l)])]),f,s("div",w,[y,s("p",null,[n("本题与 LeetCode "),a(e,{to:"/problem/0023.html"},{default:t(()=>[n("第 23 题")]),_:1}),n(" 相同。")])]),x,s("p",null,[n("这道题是 "),a(e,{to:"/problem/0021.html"},{default:t(()=>[n("第 21 题")]),_:1}),n(" 的加强版。")]),L])}const O=i(d,[["render",q],["__file","jz_offer_II_078.html.vue"]]);export{O as default};
