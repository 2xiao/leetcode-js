import{_ as c,r as o,o as i,c as r,a as n,b as s,d as a,w as t,e as u}from"./app-fBVbqwGY.js";const d={},k=n("h1",{id:"_33-二叉搜索树的后序遍历序列",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_33-二叉搜索树的后序遍历序列","aria-hidden":"true"},"#"),s(" 33. 二叉搜索树的后序遍历序列")],-1),m=n("code",null,"栈",-1),v=n("code",null,"树",-1),b=n("code",null,"二叉搜索树",-1),f=n("code",null,"递归",-1),h=n("code",null,"数组",-1),_=n("code",null,"二叉树",-1),g=n("code",null,"单调栈",-1),y={href:"https://leetcode.cn/problems/er-cha-sou-suo-shu-de-hou-xu-bian-li-xu-lie-lcof",target:"_blank",rel:"noopener noreferrer"},w=n("code",null,"力扣",-1),x=u(`<h2 id="题目" tabindex="-1"><a class="header-anchor" href="#题目" aria-hidden="true">#</a> 题目</h2><p>请实现一个函数来判断整数数组 <code>postorder</code> 是否为二叉搜索树的后序遍历结果。</p><p><strong>示例 1：</strong></p><figure><img src="https://pic.leetcode.cn/1706665328-rfvWhs-截屏2024-01-31 09.41.48.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><blockquote><p>输入: postorder = [4,9,6,5,8]</p><p>输出: false</p><p>解释：从上图可以看出这不是一颗二叉搜索树</p></blockquote><p><strong>示例 2：</strong></p><figure><img src="https://pic.leetcode.cn/1694762510-vVpTic-剑指33.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><blockquote><p>输入: postorder = [4,6,5,9,8]</p><p>输出: true</p><p>解释：可构建的二叉搜索树如上图</p></blockquote><p><strong>提示：</strong></p><ul><li><code>数组长度 &lt;= 1000</code></li><li><code>postorder</code> 中无重复数字</li></ul><h2 id="解题思路" tabindex="-1"><a class="header-anchor" href="#解题思路" aria-hidden="true">#</a> 解题思路</h2><ul><li>后序遍历结果的特点是：左边一部分是左子树，右边一部分是右子树，最后一个元素是根节点。</li><li>BST 的特点是：左子树元素都小于根节点，右子树元素都大于根节点。</li></ul><p>结合上述规律，就可以得到本题的解题思路：</p><ol><li>先找到根节点元素</li><li>根据根节点元素找到左子树元素，递归检查左子树是否是 BST</li><li>根据根节点元素找到右子树元素，递归检查右子树是否是 BST</li></ol><h2 id="代码" tabindex="-1"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span> <span class="token parameter">postorder</span>
 * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>boolean<span class="token punctuation">}</span></span>
 */</span>
<span class="token keyword">var</span> <span class="token function-variable function">verifyTreeOrder</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">postorder</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">const</span> len <span class="token operator">=</span> postorder<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>len <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>

	<span class="token comment">// 根节点的值是后序遍历结果的最后一个元素</span>
	<span class="token keyword">let</span> root <span class="token operator">=</span> postorder<span class="token punctuation">[</span>len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

	<span class="token comment">// postorder[0..left) 是左子树，应该都小于 root</span>
	<span class="token keyword">let</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> len <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> postorder<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">&lt;</span> root<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		left<span class="token operator">++</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token comment">// postorder[left..len - 1) 是右子树，应该都大于 root</span>
	<span class="token keyword">let</span> right <span class="token operator">=</span> left<span class="token punctuation">;</span>
	<span class="token keyword">while</span> <span class="token punctuation">(</span>right <span class="token operator">&lt;</span> len <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> postorder<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">&gt;</span> root<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		right<span class="token operator">++</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">if</span> <span class="token punctuation">(</span>right <span class="token operator">!==</span> len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token comment">// 递归检查左子树 [0..left) 和右子树 [left..len - 1) 也符合 BST 的性质</span>
	<span class="token keyword">return</span> <span class="token punctuation">(</span>
		<span class="token function">verifyTreeOrder</span><span class="token punctuation">(</span>postorder<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> left<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>
		<span class="token function">verifyTreeOrder</span><span class="token punctuation">(</span>postorder<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span> len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,16);function T(B,j){const p=o("font"),e=o("RouterLink"),l=o("ExternalLinkIcon");return i(),r("div",null,[k,n("p",null,[s("🟠 "),a(p,{color:"#ffb800"},{default:t(()=>[s("Medium")]),_:1}),s("  🔖  "),a(e,{to:"/tag/stack.html"},{default:t(()=>[m]),_:1}),s(),a(e,{to:"/tag/tree.html"},{default:t(()=>[v]),_:1}),s(),a(e,{to:"/tag/binary-search-tree.html"},{default:t(()=>[b]),_:1}),s(),a(e,{to:"/tag/recursion.html"},{default:t(()=>[f]),_:1}),s(),a(e,{to:"/tag/array.html"},{default:t(()=>[h]),_:1}),s(),a(e,{to:"/tag/binary-tree.html"},{default:t(()=>[_]),_:1}),s(),a(e,{to:"/tag/monotonic-stack.html"},{default:t(()=>[g]),_:1}),s("  🔗 "),n("a",y,[w,a(l)])]),x])}const V=c(d,[["render",T],["__file","jz_offer_33_1.html.vue"]]);export{V as default};
