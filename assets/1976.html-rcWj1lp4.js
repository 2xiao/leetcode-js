import{_ as l,r as p,o as i,c as u,a as n,b as s,d as a,w as t,f as r,e as k}from"./app-aQeLbVW9.js";const d={},m=n("h1",{id:"_1976-到达目的地的方案数",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_1976-到达目的地的方案数","aria-hidden":"true"},"#"),s(" 1976. 到达目的地的方案数")],-1),h=n("code",null,"图",-1),v=n("code",null,"拓扑排序",-1),b=n("code",null,"动态规划",-1),g=n("code",null,"最短路",-1),y={href:"https://leetcode.cn/problems/number-of-ways-to-arrive-at-destination",target:"_blank",rel:"noopener noreferrer"},f=n("code",null,"力扣",-1),w={href:"https://leetcode.com/problems/number-of-ways-to-arrive-at-destination",target:"_blank",rel:"noopener noreferrer"},_=n("code",null,"LeetCode",-1),x=k(`<h2 id="题目" tabindex="-1"><a class="header-anchor" href="#题目" aria-hidden="true">#</a> 题目</h2><p>You are in a city that consists of <code>n</code> intersections numbered from <code>0</code> to <code>n - 1</code> with <strong>bi-directional</strong> roads between some intersections. The inputs are generated such that you can reach any intersection from any other intersection and that there is at most one road between any two intersections.</p><p>You are given an integer <code>n</code> and a 2D integer array <code>roads</code> where <code>roads[i] = [ui, vi, timei]</code> means that there is a road between intersections <code>ui</code> and <code>vi</code> that takes <code>timei</code> minutes to travel. You want to know in how many ways you can travel from intersection <code>0</code> to intersection <code>n - 1</code> in the <strong>shortest amount of time</strong>.</p><p>Return <em>the <strong>number of ways</strong> you can arrive at your destination in the <strong>shortest amount of time</strong></em>. Since the answer may be large, return it <strong>modulo</strong> <code>10^9 + 7</code>.</p><p><strong>Example 1:</strong></p><figure><img src="https://assets.leetcode.com/uploads/2021/07/17/graph2.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><blockquote><p>Input: n = 7, roads = [[0,6,7],[0,1,2],[1,2,3],[1,3,3],[6,3,3],[3,5,1],[6,5,1],[2,5,1],[0,4,5],[4,6,2]]</p><p>Output: 4</p><p>Explanation: The shortest amount of time it takes to go from intersection 0 to intersection 6 is 7 minutes.</p><p>The four ways to get there in 7 minutes are:</p><ul><li>0 ➝ 6</li><li>0 ➝ 4 ➝ 6</li><li>0 ➝ 1 ➝ 2 ➝ 5 ➝ 6</li><li>0 ➝ 1 ➝ 3 ➝ 5 ➝ 6</li></ul></blockquote><p><strong>Example 2:</strong></p><blockquote><p>Input: n = 2, roads = [[1,0,10]]</p><p>Output: 1</p><p>Explanation: There is only one way to go from intersection 0 to intersection 1, and it takes 10 minutes.</p></blockquote><p><strong>Constraints:</strong></p><ul><li><code>1 &lt;= n &lt;= 200</code></li><li><code>n - 1 &lt;= roads.length &lt;= n * (n - 1) / 2</code></li><li><code>roads[i].length == 3</code></li><li><code>0 &lt;= ui, vi &lt;= n - 1</code></li><li><code>1 &lt;= timei &lt;= 10^9</code></li><li><code>ui != vi</code></li><li>There is at most one road connecting any two intersections.</li><li>You can reach any intersection from any other intersection.</li></ul><h2 id="题目大意" tabindex="-1"><a class="header-anchor" href="#题目大意" aria-hidden="true">#</a> 题目大意</h2><p>你在一个城市里，城市由 <code>n</code> 个路口组成，路口编号为 <code>0</code> 到 <code>n - 1</code> ，某些路口之间有 <strong>双向</strong> 道路。输入保证你可以从任意路口出发到达其他任意路口，且任意两个路口之间最多有一条路。</p><p>给你一个整数 <code>n</code> 和二维整数数组 <code>roads</code> ，其中 <code>roads[i] = [ui, vi, timei]</code> 表示在路口 <code>ui</code> 和 <code>vi</code> 之间有一条需要花费 <code>timei</code> 时间才能通过的道路。你想知道花费 <strong>最少时间</strong> 从路口 <code>0</code> 出发到达路口 <code>n - 1</code> 的方案数。</p><p>请返回花费 <strong>最少时间</strong> 到达目的地的 <strong>路径数目</strong> 。由于答案可能很大，将结果对 <code>10^9 + 7</code> <strong>取余</strong> 后返回。</p><p><strong>示例 1：</strong></p><figure><img src="https://assets.leetcode.com/uploads/2021/07/17/graph2.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><blockquote><p><strong>输入：</strong> n = 7, roads = [[0,6,7],[0,1,2],[1,2,3],[1,3,3],[6,3,3],[3,5,1],[6,5,1],[2,5,1],[0,4,5],[4,6,2]]</p><p><strong>输出：</strong> 4</p><p><strong>解释：</strong> 从路口 0 出发到路口 6 花费的最少时间是 7 分钟。</p><p>四条花费 7 分钟的路径分别为：</p><ul><li>0 ➝ 6</li><li>0 ➝ 4 ➝ 6</li><li>0 ➝ 1 ➝ 2 ➝ 5 ➝ 6</li><li>0 ➝ 1 ➝ 3 ➝ 5 ➝ 6</li></ul></blockquote><p><strong>示例 2：</strong></p><blockquote><p><strong>输入：</strong> n = 2, roads = [[1,0,10]]</p><p><strong>输出：</strong> 1</p><p><strong>解释：</strong> 只有一条从路口 0 到路口 1 的路，花费 10 分钟。</p></blockquote><p><strong>提示：</strong></p><ul><li><code>1 &lt;= n &lt;= 200</code></li><li><code>n - 1 &lt;= roads.length &lt;= n * (n - 1) / 2</code></li><li><code>roads[i].length == 3</code></li><li><code>0 &lt;= ui, vi &lt;= n - 1</code></li><li><code>1 &lt;= timei &lt;= 10^9</code></li><li><code>ui != vi</code></li><li>任意两个路口之间至多有一条路。</li><li>从任意路口出发，你能够到达其他任意路口。</li></ul><h2 id="解题思路" tabindex="-1"><a class="header-anchor" href="#解题思路" aria-hidden="true">#</a> 解题思路</h2><ol><li><p><strong>使用 Dijkstra 算法寻找最短路径</strong></p><ul><li><strong>为什么用 Dijkstra</strong>： <ul><li>由于图中边的权重非负，Dijkstra 算法能够高效地找到从起点到每个节点的最短路径。</li><li>同时，Dijkstra 算法的遍历顺序可以自然地记录到达每个节点的最短路径数量。</li></ul></li><li><strong>如何表示图</strong>： <ul><li>用邻接表 <code>graph</code> 表示图，其中 <code>graph[u]</code> 包含所有与 <code>u</code> 相邻的节点及到达时间 <code>[v, time]</code>。</li></ul></li></ul></li><li><p><strong>初始化 <code>dist</code> 和 <code>ways</code> 数组</strong></p><ul><li><code>dist[i]</code>：表示从起点 <code>0</code> 到节点 <code>i</code> 的最短距离，初始值为 <code>Infinity</code>。</li><li><code>ways[i]</code>：表示从起点 <code>0</code> 到节点 <code>i</code> 的最短路径数量，初始值为 <code>0</code>。</li><li>设置 <code>dist[0] = 0</code> 和 <code>ways[0] = 1</code>。</li></ul></li><li><p><strong>使用最小堆（Min Heap）来优化遍历顺序</strong></p><ul><li><strong>为什么用最小堆</strong>： <ul><li>每次从堆中弹出当前距离最短的节点，能够避免遍历所有节点，提升效率。</li></ul></li><li>堆中元素为 <code>[time, node]</code>，表示当前节点及到达所需的总时间。</li></ul></li><li><p><strong>遍历图并更新最短路径</strong></p><ul><li><strong>对每个相邻节点</strong>： <ul><li>计算从当前节点到相邻节点的总时间 <code>newTime</code>。</li><li><strong>如果 <code>newTime &lt; dist[neighbor]</code></strong>： <ul><li>说明找到了一条更短的路径，更新 <code>dist[neighbor]</code> 为 <code>newTime</code>。</li><li>将 <code>ways[neighbor]</code> 更新为 <code>ways[node]</code>（即当前节点路径数量）。</li><li>将 <code>neighbor</code> 节点及其距离加入堆中。</li></ul></li><li><strong>如果 <code>newTime === dist[neighbor]</code></strong>： <ul><li>说明找到了一条与最短路径等长的路径，将 <code>ways[neighbor]</code> 累加上 <code>ways[node]</code>。</li></ul></li></ul></li></ul></li><li><p><strong>输出结果</strong></p><ul><li>返回 <code>ways[n - 1]</code>，即到达终点节点 <code>n - 1</code> 的最短路径数量，并对 <code>10^9 + 7</code> 取模。</li></ul></li></ol><h4 id="复杂度分析" tabindex="-1"><a class="header-anchor" href="#复杂度分析" aria-hidden="true">#</a> 复杂度分析</h4><ul><li><p><strong>时间复杂度</strong>：<code>O((e + n) * log n)</code>，其中，<code>e</code> 为 <code>roads</code> 的长度，也就是图中有多少条边。</p><ul><li>遍历 <code>e</code> 条边的时间复杂度为 <code>O(e)</code>。</li><li>使用最小堆，每次 <code>insert</code> 和 <code>pop</code> 的时间复杂度为 <code>O(log n)</code>，最多进行 <code>n</code> 次操作。</li></ul></li><li><p><strong>空间复杂度</strong>：<code>O(e + n)</code></p><ul><li>需要存储邻接表 <code>graph</code>、<code>dist</code> 数组、<code>ways</code> 数组、以及最小堆 <code>heap</code>。</li><li>总空间需求与 <code>e</code> 和 <code>n</code> 呈线性关系。</li></ul></li></ul><h2 id="代码" tabindex="-1"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">}</span></span> <span class="token parameter">n</span>
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span> <span class="token parameter">roads</span>
 * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">}</span></span>
 */</span>
<span class="token keyword">var</span> <span class="token function-variable function">countPaths</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">n<span class="token punctuation">,</span> roads</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">const</span> <span class="token constant">MOD</span> <span class="token operator">=</span> <span class="token number">1e9</span> <span class="token operator">+</span> <span class="token number">7</span><span class="token punctuation">;</span>

	<span class="token comment">// 构建图</span>
	<span class="token keyword">let</span> graph <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> <span class="token punctuation">[</span>u<span class="token punctuation">,</span> v<span class="token punctuation">,</span> time<span class="token punctuation">]</span> <span class="token keyword">of</span> roads<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		graph<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">[</span>v<span class="token punctuation">,</span> time<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		graph<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">[</span>u<span class="token punctuation">,</span> time<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token comment">// 初始化</span>
	<span class="token keyword">let</span> dist <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">Infinity</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">let</span> ways <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	dist<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	ways<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>

	<span class="token comment">// 使用最小堆（优先队列）</span>
	<span class="token keyword">let</span> heap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MinHeap</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> b<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">while</span> <span class="token punctuation">(</span>heap<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">const</span> <span class="token punctuation">[</span>time<span class="token punctuation">,</span> node<span class="token punctuation">]</span> <span class="token operator">=</span> heap<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

		<span class="token comment">// 跳过已更新的更短路径</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>time <span class="token operator">&gt;</span> dist<span class="token punctuation">[</span>node<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>

		<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> <span class="token punctuation">[</span>neighbor<span class="token punctuation">,</span> t<span class="token punctuation">]</span> <span class="token keyword">of</span> graph<span class="token punctuation">[</span>node<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">const</span> newTime <span class="token operator">=</span> time <span class="token operator">+</span> t<span class="token punctuation">;</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span>newTime <span class="token operator">&lt;</span> dist<span class="token punctuation">[</span>neighbor<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
				<span class="token comment">// 找到更短路径，更新最短距离和路径数</span>
				dist<span class="token punctuation">[</span>neighbor<span class="token punctuation">]</span> <span class="token operator">=</span> newTime<span class="token punctuation">;</span>
				ways<span class="token punctuation">[</span>neighbor<span class="token punctuation">]</span> <span class="token operator">=</span> ways<span class="token punctuation">[</span>node<span class="token punctuation">]</span><span class="token punctuation">;</span>
				heap<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token punctuation">[</span>newTime<span class="token punctuation">,</span> neighbor<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>newTime <span class="token operator">===</span> dist<span class="token punctuation">[</span>neighbor<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
				<span class="token comment">// 如果路径长度相同，累加路径数</span>
				ways<span class="token punctuation">[</span>neighbor<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>ways<span class="token punctuation">[</span>neighbor<span class="token punctuation">]</span> <span class="token operator">+</span> ways<span class="token punctuation">[</span>node<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token constant">MOD</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">return</span> ways<span class="token punctuation">[</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">MinHeap</span> <span class="token punctuation">{</span>
	<span class="token function">constructor</span><span class="token punctuation">(</span>arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token function-variable function">priority</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> a <span class="token operator">&lt;</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span>heap <span class="token operator">=</span> arr<span class="token punctuation">;</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span>priority <span class="token operator">=</span> priority<span class="token punctuation">;</span>
		<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>heap<span class="token punctuation">.</span>length <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">heapifyDown</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>

	<span class="token function">insert</span><span class="token punctuation">(</span><span class="token parameter">num</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span>heap<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">heapifyUp</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>heap<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>heap<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
		<span class="token keyword">const</span> top <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>heap<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
		<span class="token keyword">const</span> last <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>heap<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>heap<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">this</span><span class="token punctuation">.</span>heap<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> last<span class="token punctuation">;</span>
			<span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">heapifyDown</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">return</span> top<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>heap<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>heap<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token function">heapifyDown</span><span class="token punctuation">(</span><span class="token parameter">i</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">const</span> n <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>heap<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
		<span class="token keyword">const</span> left <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
		<span class="token keyword">const</span> right <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> i <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span>
		<span class="token keyword">let</span> smallest <span class="token operator">=</span> i<span class="token punctuation">;</span>

		<span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> n <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">priority</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>heap<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>heap<span class="token punctuation">[</span>smallest<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			smallest <span class="token operator">=</span> left<span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>right <span class="token operator">&lt;</span> n <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">priority</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>heap<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>heap<span class="token punctuation">[</span>smallest<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			smallest <span class="token operator">=</span> right<span class="token punctuation">;</span>
		<span class="token punctuation">}</span>

		<span class="token keyword">if</span> <span class="token punctuation">(</span>smallest <span class="token operator">!==</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>heap<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>heap<span class="token punctuation">[</span>smallest<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>heap<span class="token punctuation">[</span>smallest<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>heap<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
			<span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">heapifyDown</span><span class="token punctuation">(</span>smallest<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>

	<span class="token function">heapifyUp</span><span class="token punctuation">(</span><span class="token parameter">i</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">const</span> parent <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">priority</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>heap<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>heap<span class="token punctuation">[</span>parent<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
				<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>heap<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>heap<span class="token punctuation">[</span>parent<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>heap<span class="token punctuation">[</span>parent<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>heap<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
				i <span class="token operator">=</span> parent<span class="token punctuation">;</span>
			<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
				<span class="token keyword">break</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="相关题目" tabindex="-1"><a class="header-anchor" href="#相关题目" aria-hidden="true">#</a> 相关题目</h2>`,29),T=n("thead",null,[n("tr",null,[n("th",{style:{"text-align":"center"}},"题号"),n("th",{style:{"text-align":"left"}},"标题"),n("th",{style:{"text-align":"center"}},"题解"),n("th",{style:{"text-align":"left"}},"标签"),n("th",{style:{"text-align":"center"}},"难度"),n("th",{style:{"text-align":"center"}},"力扣")])],-1),D=n("td",{style:{"text-align":"center"}},"797",-1),q=n("td",{style:{"text-align":"left"}},"所有可能的路径",-1),E=n("td",{style:{"text-align":"center"}},null,-1),M={style:{"text-align":"left"}},O=n("code",null,"深度优先搜索",-1),j=n("code",null,"广度优先搜索",-1),I=n("code",null,"图",-1),C=n("code",null,"1+",-1),L=n("td",{style:{"text-align":"center"}},"🟠",-1),N={style:{"text-align":"center"}},V={href:"https://leetcode.cn/problems/all-paths-from-source-to-target",target:"_blank",rel:"noopener noreferrer"},z={href:"https://leetcode.com/problems/all-paths-from-source-to-target",target:"_blank",rel:"noopener noreferrer"},Y=n("td",{style:{"text-align":"center"}},"1514",-1),A=n("td",{style:{"text-align":"left"}},"概率最大的路径",-1),B=n("td",{style:{"text-align":"center"}},null,-1),H={style:{"text-align":"left"}},R=n("code",null,"图",-1),S=n("code",null,"数组",-1),U=n("code",null,"最短路",-1),P=n("code",null,"1+",-1),F=n("td",{style:{"text-align":"center"}},"🟠",-1),G={style:{"text-align":"center"}},J={href:"https://leetcode.cn/problems/path-with-maximum-probability",target:"_blank",rel:"noopener noreferrer"},K={href:"https://leetcode.com/problems/path-with-maximum-probability",target:"_blank",rel:"noopener noreferrer"},Q=n("td",{style:{"text-align":"center"}},"2045",-1),W=n("td",{style:{"text-align":"left"}},"到达目的地的第二短时间",-1),X=n("td",{style:{"text-align":"center"}},null,-1),Z={style:{"text-align":"left"}},$=n("code",null,"广度优先搜索",-1),nn=n("code",null,"图",-1),sn=n("code",null,"最短路",-1),an=n("td",{style:{"text-align":"center"}},"🔴",-1),tn={style:{"text-align":"center"}},en={href:"https://leetcode.cn/problems/second-minimum-time-to-reach-destination",target:"_blank",rel:"noopener noreferrer"},on={href:"https://leetcode.com/problems/second-minimum-time-to-reach-destination",target:"_blank",rel:"noopener noreferrer"};function pn(cn,ln){const c=p("font"),e=p("RouterLink"),o=p("ExternalLinkIcon");return i(),u("div",null,[m,n("p",null,[s("🟠 "),a(c,{color:"#ffb800"},{default:t(()=>[s("Medium")]),_:1}),s("  🔖  "),a(e,{to:"/tag/graph.html"},{default:t(()=>[h]),_:1}),s(),a(e,{to:"/tag/topological-sort.html"},{default:t(()=>[v]),_:1}),s(),a(e,{to:"/tag/dynamic-programming.html"},{default:t(()=>[b]),_:1}),s(),a(e,{to:"/tag/shortest-path.html"},{default:t(()=>[g]),_:1}),s("  🔗 "),n("a",y,[f,a(o)]),s(),n("a",w,[_,a(o)])]),x,r(" prettier-ignore "),n("table",null,[T,n("tbody",null,[n("tr",null,[D,q,E,n("td",M,[a(e,{to:"/tag/depth-first-search.html"},{default:t(()=>[O]),_:1}),s(),a(e,{to:"/tag/breadth-first-search.html"},{default:t(()=>[j]),_:1}),s(),a(e,{to:"/tag/graph.html"},{default:t(()=>[I]),_:1}),s(),C]),L,n("td",N,[n("a",V,[s("🀄️"),a(o)]),s(),n("a",z,[s("🔗"),a(o)])])]),n("tr",null,[Y,A,B,n("td",H,[a(e,{to:"/tag/graph.html"},{default:t(()=>[R]),_:1}),s(),a(e,{to:"/tag/array.html"},{default:t(()=>[S]),_:1}),s(),a(e,{to:"/tag/shortest-path.html"},{default:t(()=>[U]),_:1}),s(),P]),F,n("td",G,[n("a",J,[s("🀄️"),a(o)]),s(),n("a",K,[s("🔗"),a(o)])])]),n("tr",null,[Q,W,X,n("td",Z,[a(e,{to:"/tag/breadth-first-search.html"},{default:t(()=>[$]),_:1}),s(),a(e,{to:"/tag/graph.html"},{default:t(()=>[nn]),_:1}),s(),a(e,{to:"/tag/shortest-path.html"},{default:t(()=>[sn]),_:1})]),an,n("td",tn,[n("a",en,[s("🀄️"),a(o)]),s(),n("a",on,[s("🔗"),a(o)])])])])])])}const rn=l(d,[["render",pn],["__file","1976.html.vue"]]);export{rn as default};
