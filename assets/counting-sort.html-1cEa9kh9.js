import{_,r as d,o as a,c,a as t,d as o,w as n,b as e,f as r}from"./app-B5EG-zH0.js";const i={},h=t("h1",{id:"计数排序",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#计数排序","aria-hidden":"true"},"#"),e(" 计数排序")],-1),u=t("summary",null,"全部标签",-1),g=t("p",null,[t("strong",null,"数据结构")],-1),m=t("code",null,"数组",-1),f=t("code",null,"矩阵",-1),y=t("code",null,"链表",-1),p=t("code",null,"双向链表",-1),x=t("code",null,"栈",-1),b=t("code",null,"单调栈",-1),k=t("code",null,"队列",-1),v=t("code",null,"单调队列",-1),q=t("code",null,"堆（优先队列）",-1),w=t("code",null,"哈希表",-1),C=t("code",null,"字符串",-1),I=t("code",null,"字符串匹配",-1),L=t("code",null,"树",-1),N=t("code",null,"二叉树",-1),V=t("code",null,"二叉搜索树",-1),B=t("code",null,"最小生成树",-1),E=t("code",null,"图",-1),z=t("code",null,"有序集合",-1),H=t("code",null,"拓扑排序",-1),R=t("code",null,"最短路",-1),j=t("code",null,"强连通分量",-1),O=t("code",null,"欧拉回路",-1),S=t("code",null,"双连通分量",-1),T=t("code",null,"并查集",-1),Z=t("code",null,"字典树",-1),A=t("code",null,"线段树",-1),D=t("code",null,"树状数组",-1),F=t("code",null,"后缀数组",-1),G=t("p",null,[t("strong",null,"算法")],-1),J=t("code",null,"枚举",-1),K=t("code",null,"递归",-1),M=t("code",null,"分治",-1),P=t("code",null,"回溯",-1),Q=t("code",null,"贪心",-1),U=t("code",null,"动态规划",-1),W=t("code",null,"排序",-1),X=t("code",null,"桶排序",-1),Y=t("span",{class:"blue"},"计数排序",-1),$=t("code",null,"基数排序",-1),tt=t("code",null,"归并排序",-1),et=t("code",null,"快速选择",-1),ot=t("code",null,"二分查找",-1),lt=t("code",null,"记忆化搜索",-1),nt=t("code",null,"深度优先搜索",-1),st=t("code",null,"广度优先搜索",-1),dt=t("code",null,"双指针",-1),_t=t("code",null,"位运算",-1),at=t("code",null,"前缀和",-1),ct=t("code",null,"计数",-1),rt=t("code",null,"滑动窗口",-1),it=t("code",null,"状态压缩",-1),ht=t("code",null,"哈希函数",-1),ut=t("code",null,"滚动哈希",-1),gt=t("code",null,"扫描线",-1),mt=t("p",null,[t("strong",null,"其他")],-1),ft=t("code",null,"数学",-1),yt=t("code",null,"数论",-1),pt=t("code",null,"几何",-1),xt=t("code",null,"博弈",-1),bt=t("code",null,"模拟",-1),kt=t("code",null,"组合数学",-1),vt=t("code",null,"随机化",-1),qt=t("code",null,"概率与统计",-1),wt=t("code",null,"水塘抽样",-1),Ct=t("code",null,"拒绝采样",-1),It=t("code",null,"数据库",-1),Lt=t("code",null,"设计",-1),Nt=t("code",null,"数据流",-1),Vt=t("code",null,"脑筋急转弯",-1),Bt=t("code",null,"交互",-1),Et=t("code",null,"迭代器",-1),zt=t("code",null,"多线程",-1),Ht=t("hr",null,null,-1),Rt=t("thead",null,[t("tr",null,[t("th",{style:{"text-align":"center"}},"题号"),t("th",{style:{"text-align":"left"}},"标题"),t("th",{style:{"text-align":"center"}},"题解"),t("th",{style:{"text-align":"left"}},"标签"),t("th",{style:{"text-align":"center"}},"难度"),t("th",{style:{"text-align":"center"}},"力扣")])],-1),jt=t("td",{style:{"text-align":"center"}},"274",-1),Ot=t("td",{style:{"text-align":"left"}},"H 指数",-1),St={style:{"text-align":"center"}},Tt={style:{"text-align":"left"}},Zt=t("code",null,"数组",-1),At=t("code",null,"计数排序",-1),Dt=t("code",null,"排序",-1),Ft=t("td",{style:{"text-align":"center"}},"🟠",-1),Gt={style:{"text-align":"center"}},Jt={href:"https://leetcode.cn/problems/h-index",target:"_blank",rel:"noopener noreferrer"},Kt={href:"https://leetcode.com/problems/h-index",target:"_blank",rel:"noopener noreferrer"},Mt=t("td",{style:{"text-align":"center"}},"561",-1),Pt=t("td",{style:{"text-align":"left"}},"数组拆分",-1),Qt={style:{"text-align":"center"}},Ut={style:{"text-align":"left"}},Wt=t("code",null,"贪心",-1),Xt=t("code",null,"数组",-1),Yt=t("code",null,"计数排序",-1),$t=t("code",null,"1+",-1),te=t("td",{style:{"text-align":"center"}},"🟢",-1),ee={style:{"text-align":"center"}},oe={href:"https://leetcode.cn/problems/array-partition",target:"_blank",rel:"noopener noreferrer"},le={href:"https://leetcode.com/problems/array-partition",target:"_blank",rel:"noopener noreferrer"},ne=t("td",{style:{"text-align":"center"}},"912",-1),se=t("td",{style:{"text-align":"left"}},"排序数组",-1),de=t("td",{style:{"text-align":"center"}},null,-1),_e={style:{"text-align":"left"}},ae=t("code",null,"数组",-1),ce=t("code",null,"分治",-1),re=t("code",null,"桶排序",-1),ie=t("code",null,"5+",-1),he=t("td",{style:{"text-align":"center"}},"🟠",-1),ue={style:{"text-align":"center"}},ge={href:"https://leetcode.cn/problems/sort-an-array",target:"_blank",rel:"noopener noreferrer"},me={href:"https://leetcode.com/problems/sort-an-array",target:"_blank",rel:"noopener noreferrer"},fe=t("td",{style:{"text-align":"center"}},"1051",-1),ye=t("td",{style:{"text-align":"left"}},"高度检查器",-1),pe={style:{"text-align":"center"}},xe={style:{"text-align":"left"}},be=t("code",null,"数组",-1),ke=t("code",null,"计数排序",-1),ve=t("code",null,"排序",-1),qe=t("td",{style:{"text-align":"center"}},"🟢",-1),we={style:{"text-align":"center"}},Ce={href:"https://leetcode.cn/problems/height-checker",target:"_blank",rel:"noopener noreferrer"},Ie={href:"https://leetcode.com/problems/height-checker",target:"_blank",rel:"noopener noreferrer"},Le=t("td",{style:{"text-align":"center"}},"1122",-1),Ne=t("td",{style:{"text-align":"left"}},"数组的相对排序",-1),Ve={style:{"text-align":"center"}},Be={style:{"text-align":"left"}},Ee=t("code",null,"数组",-1),ze=t("code",null,"哈希表",-1),He=t("code",null,"计数排序",-1),Re=t("code",null,"1+",-1),je=t("td",{style:{"text-align":"center"}},"🟢",-1),Oe={style:{"text-align":"center"}},Se={href:"https://leetcode.cn/problems/relative-sort-array",target:"_blank",rel:"noopener noreferrer"},Te={href:"https://leetcode.com/problems/relative-sort-array",target:"_blank",rel:"noopener noreferrer"},Ze=t("td",{style:{"text-align":"center"}},"1833",-1),Ae=t("td",{style:{"text-align":"left"}},"雪糕的最大数量",-1),De=t("td",{style:{"text-align":"center"}},null,-1),Fe={style:{"text-align":"left"}},Ge=t("code",null,"贪心",-1),Je=t("code",null,"数组",-1),Ke=t("code",null,"计数排序",-1),Me=t("code",null,"1+",-1),Pe=t("td",{style:{"text-align":"center"}},"🟠",-1),Qe={style:{"text-align":"center"}},Ue={href:"https://leetcode.cn/problems/maximum-ice-cream-bars",target:"_blank",rel:"noopener noreferrer"},We={href:"https://leetcode.com/problems/maximum-ice-cream-bars",target:"_blank",rel:"noopener noreferrer"},Xe=t("td",{style:{"text-align":"center"}},"2037",-1),Ye=t("td",{style:{"text-align":"left"}},"使每位学生都有座位的最少移动次数",-1),$e={style:{"text-align":"center"}},to={style:{"text-align":"left"}},eo=t("code",null,"贪心",-1),oo=t("code",null,"数组",-1),lo=t("code",null,"计数排序",-1),no=t("code",null,"1+",-1),so=t("td",{style:{"text-align":"center"}},"🟢",-1),_o={style:{"text-align":"center"}},ao={href:"https://leetcode.cn/problems/minimum-number-of-moves-to-seat-everyone",target:"_blank",rel:"noopener noreferrer"},co={href:"https://leetcode.com/problems/minimum-number-of-moves-to-seat-everyone",target:"_blank",rel:"noopener noreferrer"},ro=t("td",{style:{"text-align":"center"}},"3088",-1),io=t("td",{style:{"text-align":"left"}},"使字符串反回文 🔒",-1),ho=t("td",{style:{"text-align":"center"}},null,-1),uo={style:{"text-align":"left"}},go=t("code",null,"贪心",-1),mo=t("code",null,"字符串",-1),fo=t("code",null,"计数排序",-1),yo=t("code",null,"1+",-1),po=t("td",{style:{"text-align":"center"}},"🔴",-1),xo={style:{"text-align":"center"}},bo={href:"https://leetcode.cn/problems/make-string-anti-palindrome",target:"_blank",rel:"noopener noreferrer"},ko={href:"https://leetcode.com/problems/make-string-anti-palindrome",target:"_blank",rel:"noopener noreferrer"},vo=t("td",{style:{"text-align":"center"}},"3189",-1),qo=t("td",{style:{"text-align":"left"}},"得到一个和平棋盘的最少步骤 🔒",-1),wo=t("td",{style:{"text-align":"center"}},null,-1),Co={style:{"text-align":"left"}},Io=t("code",null,"贪心",-1),Lo=t("code",null,"数组",-1),No=t("code",null,"计数排序",-1),Vo=t("code",null,"1+",-1),Bo=t("td",{style:{"text-align":"center"}},"🟠",-1),Eo={style:{"text-align":"center"}},zo={href:"https://leetcode.cn/problems/minimum-moves-to-get-a-peaceful-board",target:"_blank",rel:"noopener noreferrer"},Ho={href:"https://leetcode.com/problems/minimum-moves-to-get-a-peaceful-board",target:"_blank",rel:"noopener noreferrer"},Ro=t("td",{style:{"text-align":"center"}},"剑指 Offer II 75",-1),jo=t("td",{style:{"text-align":"left"}},"数组相对排序",-1),Oo=t("td",{style:{"text-align":"center"}},null,-1),So={style:{"text-align":"left"}},To=t("code",null,"数组",-1),Zo=t("code",null,"哈希表",-1),Ao=t("code",null,"计数排序",-1),Do=t("code",null,"1+",-1),Fo=t("td",{style:{"text-align":"center"}},"🟢",-1),Go={style:{"text-align":"center"}},Jo={href:"https://leetcode.cn/problems/0H97ZC",target:"_blank",rel:"noopener noreferrer"};function Ko(Mo,Po){const l=d("RouterLink"),s=d("ExternalLinkIcon");return a(),c("div",null,[h,t("details",null,[u,g,t("p",null,[o(l,{to:"/tag/array.html"},{default:n(()=>[m]),_:1}),e(),o(l,{to:"/tag/matrix.html"},{default:n(()=>[f]),_:1}),e(),o(l,{to:"/tag/linked-list.html"},{default:n(()=>[y]),_:1}),e(),o(l,{to:"/tag/doubly-linked-list.html"},{default:n(()=>[p]),_:1}),e(),o(l,{to:"/tag/stack.html"},{default:n(()=>[x]),_:1}),e(),o(l,{to:"/tag/monotonic-stack.html"},{default:n(()=>[b]),_:1}),e(),o(l,{to:"/tag/queue.html"},{default:n(()=>[k]),_:1}),e(),o(l,{to:"/tag/monotonic-queue.html"},{default:n(()=>[v]),_:1}),e(),o(l,{to:"/tag/heap-priority-queue.html"},{default:n(()=>[q]),_:1}),e(),o(l,{to:"/tag/hash-table.html"},{default:n(()=>[w]),_:1}),e(),o(l,{to:"/tag/string.html"},{default:n(()=>[C]),_:1}),e(),o(l,{to:"/tag/string-matching.html"},{default:n(()=>[I]),_:1}),e(),o(l,{to:"/tag/tree.html"},{default:n(()=>[L]),_:1}),e(),o(l,{to:"/tag/binary-tree.html"},{default:n(()=>[N]),_:1}),e(),o(l,{to:"/tag/binary-search-tree.html"},{default:n(()=>[V]),_:1}),e(),o(l,{to:"/tag/minimum-spanning-tree.html"},{default:n(()=>[B]),_:1}),e(),o(l,{to:"/tag/graph.html"},{default:n(()=>[E]),_:1}),e(),o(l,{to:"/tag/ordered-set.html"},{default:n(()=>[z]),_:1}),e(),o(l,{to:"/tag/topological-sort.html"},{default:n(()=>[H]),_:1}),e(),o(l,{to:"/tag/shortest-path.html"},{default:n(()=>[R]),_:1}),e(),o(l,{to:"/tag/strongly-connected-component.html"},{default:n(()=>[j]),_:1}),e(),o(l,{to:"/tag/eulerian-circuit.html"},{default:n(()=>[O]),_:1}),e(),o(l,{to:"/tag/biconnected-component.html"},{default:n(()=>[S]),_:1}),e(),o(l,{to:"/tag/union-find.html"},{default:n(()=>[T]),_:1}),e(),o(l,{to:"/tag/trie.html"},{default:n(()=>[Z]),_:1}),e(),o(l,{to:"/tag/segment-tree.html"},{default:n(()=>[A]),_:1}),e(),o(l,{to:"/tag/binary-indexed-tree.html"},{default:n(()=>[D]),_:1}),e(),o(l,{to:"/tag/suffix-array.html"},{default:n(()=>[F]),_:1})]),G,t("p",null,[o(l,{to:"/tag/enumeration.html"},{default:n(()=>[J]),_:1}),e(),o(l,{to:"/tag/recursion.html"},{default:n(()=>[K]),_:1}),e(),o(l,{to:"/tag/divide-and-conquer.html"},{default:n(()=>[M]),_:1}),e(),o(l,{to:"/tag/backtracking.html"},{default:n(()=>[P]),_:1}),e(),o(l,{to:"/tag/greedy.html"},{default:n(()=>[Q]),_:1}),e(),o(l,{to:"/tag/dynamic-programming.html"},{default:n(()=>[U]),_:1}),e(),o(l,{to:"/tag/sorting.html"},{default:n(()=>[W]),_:1}),e(),o(l,{to:"/tag/bucket-sort.html"},{default:n(()=>[X]),_:1}),e(),Y,e(),o(l,{to:"/tag/radix-sort.html"},{default:n(()=>[$]),_:1}),e(),o(l,{to:"/tag/merge-sort.html"},{default:n(()=>[tt]),_:1}),e(),o(l,{to:"/tag/quickselect.html"},{default:n(()=>[et]),_:1}),e(),o(l,{to:"/tag/binary-search.html"},{default:n(()=>[ot]),_:1}),e(),o(l,{to:"/tag/memoization.html"},{default:n(()=>[lt]),_:1}),e(),o(l,{to:"/tag/depth-first-search.html"},{default:n(()=>[nt]),_:1}),e(),o(l,{to:"/tag/breadth-first-search.html"},{default:n(()=>[st]),_:1}),e(),o(l,{to:"/tag/two-pointers.html"},{default:n(()=>[dt]),_:1}),e(),o(l,{to:"/tag/bit-manipulation.html"},{default:n(()=>[_t]),_:1}),e(),o(l,{to:"/tag/prefix-sum.html"},{default:n(()=>[at]),_:1}),e(),o(l,{to:"/tag/counting.html"},{default:n(()=>[ct]),_:1}),e(),o(l,{to:"/tag/sliding-window.html"},{default:n(()=>[rt]),_:1}),e(),o(l,{to:"/tag/bitmask.html"},{default:n(()=>[it]),_:1}),e(),o(l,{to:"/tag/hash-function.html"},{default:n(()=>[ht]),_:1}),e(),o(l,{to:"/tag/rolling-hash.html"},{default:n(()=>[ut]),_:1}),e(),o(l,{to:"/tag/line-sweep.html"},{default:n(()=>[gt]),_:1})]),mt,t("p",null,[o(l,{to:"/tag/math.html"},{default:n(()=>[ft]),_:1}),e(),o(l,{to:"/tag/number-theory.html"},{default:n(()=>[yt]),_:1}),e(),o(l,{to:"/tag/geometry.html"},{default:n(()=>[pt]),_:1}),e(),o(l,{to:"/tag/game-theory.html"},{default:n(()=>[xt]),_:1}),e(),o(l,{to:"/tag/simulation.html"},{default:n(()=>[bt]),_:1}),e(),o(l,{to:"/tag/combinatorics.html"},{default:n(()=>[kt]),_:1}),e(),o(l,{to:"/tag/randomized.html"},{default:n(()=>[vt]),_:1}),e(),o(l,{to:"/tag/probability-and-statistics.html"},{default:n(()=>[qt]),_:1}),e(),o(l,{to:"/tag/reservoir-sampling.html"},{default:n(()=>[wt]),_:1}),e(),o(l,{to:"/tag/rejection-sampling.html"},{default:n(()=>[Ct]),_:1}),e(),o(l,{to:"/tag/database.html"},{default:n(()=>[It]),_:1}),e(),o(l,{to:"/tag/design.html"},{default:n(()=>[Lt]),_:1}),e(),o(l,{to:"/tag/data-stream.html"},{default:n(()=>[Nt]),_:1}),e(),o(l,{to:"/tag/brainteaser.html"},{default:n(()=>[Vt]),_:1}),e(),o(l,{to:"/tag/interactive.html"},{default:n(()=>[Bt]),_:1}),e(),o(l,{to:"/tag/iterator.html"},{default:n(()=>[Et]),_:1}),e(),o(l,{to:"/tag/concurrency.html"},{default:n(()=>[zt]),_:1})])]),Ht,r(" prettier-ignore "),t("table",null,[Rt,t("tbody",null,[t("tr",null,[jt,Ot,t("td",St,[o(l,{to:"/problem/0274.html"},{default:n(()=>[e("[✓]")]),_:1})]),t("td",Tt,[o(l,{to:"/tag/array.html"},{default:n(()=>[Zt]),_:1}),e(),o(l,{to:"/tag/counting-sort.html"},{default:n(()=>[At]),_:1}),e(),o(l,{to:"/tag/sorting.html"},{default:n(()=>[Dt]),_:1})]),Ft,t("td",Gt,[t("a",Jt,[e("🀄️"),o(s)]),e(),t("a",Kt,[e("🔗"),o(s)])])]),t("tr",null,[Mt,Pt,t("td",Qt,[o(l,{to:"/problem/0561.html"},{default:n(()=>[e("[✓]")]),_:1})]),t("td",Ut,[o(l,{to:"/tag/greedy.html"},{default:n(()=>[Wt]),_:1}),e(),o(l,{to:"/tag/array.html"},{default:n(()=>[Xt]),_:1}),e(),o(l,{to:"/tag/counting-sort.html"},{default:n(()=>[Yt]),_:1}),e(),$t]),te,t("td",ee,[t("a",oe,[e("🀄️"),o(s)]),e(),t("a",le,[e("🔗"),o(s)])])]),t("tr",null,[ne,se,de,t("td",_e,[o(l,{to:"/tag/array.html"},{default:n(()=>[ae]),_:1}),e(),o(l,{to:"/tag/divide-and-conquer.html"},{default:n(()=>[ce]),_:1}),e(),o(l,{to:"/tag/bucket-sort.html"},{default:n(()=>[re]),_:1}),e(),ie]),he,t("td",ue,[t("a",ge,[e("🀄️"),o(s)]),e(),t("a",me,[e("🔗"),o(s)])])]),t("tr",null,[fe,ye,t("td",pe,[o(l,{to:"/problem/1051.html"},{default:n(()=>[e("[✓]")]),_:1})]),t("td",xe,[o(l,{to:"/tag/array.html"},{default:n(()=>[be]),_:1}),e(),o(l,{to:"/tag/counting-sort.html"},{default:n(()=>[ke]),_:1}),e(),o(l,{to:"/tag/sorting.html"},{default:n(()=>[ve]),_:1})]),qe,t("td",we,[t("a",Ce,[e("🀄️"),o(s)]),e(),t("a",Ie,[e("🔗"),o(s)])])]),t("tr",null,[Le,Ne,t("td",Ve,[o(l,{to:"/problem/1122.html"},{default:n(()=>[e("[✓]")]),_:1})]),t("td",Be,[o(l,{to:"/tag/array.html"},{default:n(()=>[Ee]),_:1}),e(),o(l,{to:"/tag/hash-table.html"},{default:n(()=>[ze]),_:1}),e(),o(l,{to:"/tag/counting-sort.html"},{default:n(()=>[He]),_:1}),e(),Re]),je,t("td",Oe,[t("a",Se,[e("🀄️"),o(s)]),e(),t("a",Te,[e("🔗"),o(s)])])]),t("tr",null,[Ze,Ae,De,t("td",Fe,[o(l,{to:"/tag/greedy.html"},{default:n(()=>[Ge]),_:1}),e(),o(l,{to:"/tag/array.html"},{default:n(()=>[Je]),_:1}),e(),o(l,{to:"/tag/counting-sort.html"},{default:n(()=>[Ke]),_:1}),e(),Me]),Pe,t("td",Qe,[t("a",Ue,[e("🀄️"),o(s)]),e(),t("a",We,[e("🔗"),o(s)])])]),t("tr",null,[Xe,Ye,t("td",$e,[o(l,{to:"/problem/2037.html"},{default:n(()=>[e("[✓]")]),_:1})]),t("td",to,[o(l,{to:"/tag/greedy.html"},{default:n(()=>[eo]),_:1}),e(),o(l,{to:"/tag/array.html"},{default:n(()=>[oo]),_:1}),e(),o(l,{to:"/tag/counting-sort.html"},{default:n(()=>[lo]),_:1}),e(),no]),so,t("td",_o,[t("a",ao,[e("🀄️"),o(s)]),e(),t("a",co,[e("🔗"),o(s)])])]),t("tr",null,[ro,io,ho,t("td",uo,[o(l,{to:"/tag/greedy.html"},{default:n(()=>[go]),_:1}),e(),o(l,{to:"/tag/string.html"},{default:n(()=>[mo]),_:1}),e(),o(l,{to:"/tag/counting-sort.html"},{default:n(()=>[fo]),_:1}),e(),yo]),po,t("td",xo,[t("a",bo,[e("🀄️"),o(s)]),e(),t("a",ko,[e("🔗"),o(s)])])]),t("tr",null,[vo,qo,wo,t("td",Co,[o(l,{to:"/tag/greedy.html"},{default:n(()=>[Io]),_:1}),e(),o(l,{to:"/tag/array.html"},{default:n(()=>[Lo]),_:1}),e(),o(l,{to:"/tag/counting-sort.html"},{default:n(()=>[No]),_:1}),e(),Vo]),Bo,t("td",Eo,[t("a",zo,[e("🀄️"),o(s)]),e(),t("a",Ho,[e("🔗"),o(s)])])]),t("tr",null,[Ro,jo,Oo,t("td",So,[o(l,{to:"/tag/array.html"},{default:n(()=>[To]),_:1}),e(),o(l,{to:"/tag/hash-table.html"},{default:n(()=>[Zo]),_:1}),e(),o(l,{to:"/tag/counting-sort.html"},{default:n(()=>[Ao]),_:1}),e(),Do]),Fo,t("td",Go,[t("a",Jo,[e("🀄️"),o(s)])])])])])])}const Uo=_(i,[["render",Ko],["__file","counting-sort.html.vue"]]);export{Uo as default};
