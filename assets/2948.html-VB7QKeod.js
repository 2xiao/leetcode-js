import{_ as l,r as p,o as i,c as u,a as n,b as s,d as a,w as t,f as r,e as d}from"./app-aQeLbVW9.js";const k={},m=n("h1",{id:"_2948-交换得到字典序最小的数组",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_2948-交换得到字典序最小的数组","aria-hidden":"true"},"#"),s(" 2948. 交换得到字典序最小的数组")],-1),h=n("code",null,"并查集",-1),g=n("code",null,"数组",-1),b=n("code",null,"排序",-1),_={href:"https://leetcode.cn/problems/make-lexicographically-smallest-array-by-swapping-elements",target:"_blank",rel:"noopener noreferrer"},v=n("code",null,"力扣",-1),y={href:"https://leetcode.com/problems/make-lexicographically-smallest-array-by-swapping-elements",target:"_blank",rel:"noopener noreferrer"},f=n("code",null,"LeetCode",-1),x=d(`<h2 id="题目" tabindex="-1"><a class="header-anchor" href="#题目" aria-hidden="true">#</a> 题目</h2><p>You are given a <strong>0-indexed</strong> array of <strong>positive</strong> integers <code>nums</code> and a <strong>positive</strong> integer <code>limit</code>.</p><p>In one operation, you can choose any two indices <code>i</code> and <code>j</code> and swap <code>nums[i]</code> and <code>nums[j]</code> <strong>if</strong> <code>|nums[i] - nums[j]| &lt;= limit</code>.</p><p>Return <em>the <strong>lexicographically smallest array</strong> that can be obtained by performing the operation any number of times</em>.</p><p>An array <code>a</code> is lexicographically smaller than an array <code>b</code> if in the first position where <code>a</code> and <code>b</code> differ, array <code>a</code> has an element that is less than the corresponding element in <code>b</code>. For example, the array <code>[2,10,3]</code> is lexicographically smaller than the array <code>[10,2,3]</code> because they differ at index <code>0</code> and <code>2 &lt; 10</code>.</p><p><strong>Example 1:</strong></p><blockquote><p>Input: nums = [1,5,3,9,8], limit = 2</p><p>Output: [1,3,5,8,9]</p><p>Explanation: Apply the operation 2 times:</p><ul><li>Swap nums[1] with nums[2]. The array becomes [1,3,5,9,8]</li><li>Swap nums[3] with nums[4]. The array becomes [1,3,5,8,9]</li></ul><p>We cannot obtain a lexicographically smaller array by applying any more operations.</p><p>Note that it may be possible to get the same result by doing different operations.</p></blockquote><p><strong>Example 2:</strong></p><blockquote><p>Input: nums = [1,7,6,18,2,1], limit = 3</p><p>Output: [1,6,7,18,1,2]</p><p>Explanation: Apply the operation 3 times:</p><ul><li>Swap nums[1] with nums[2]. The array becomes [1,6,7,18,2,1]</li><li>Swap nums[0] with nums[4]. The array becomes [2,6,7,18,1,1]</li><li>Swap nums[0] with nums[5]. The array becomes [1,6,7,18,1,2]</li></ul><p>We cannot obtain a lexicographically smaller array by applying any more operations.</p></blockquote><p><strong>Example 3:</strong></p><blockquote><p>Input: nums = [1,7,28,19,10], limit = 3</p><p>Output: [1,7,28,19,10]</p><p>Explanation: [1,7,28,19,10] is the lexicographically smallest array we can obtain because we cannot apply the operation on any two indices.</p></blockquote><p><strong>Constraints:</strong></p><ul><li><code>1 &lt;= nums.length &lt;= 10^5</code></li><li><code>1 &lt;= nums[i] &lt;= 10^9</code></li><li><code>1 &lt;= limit &lt;= 10^9</code></li></ul><h2 id="题目大意" tabindex="-1"><a class="header-anchor" href="#题目大意" aria-hidden="true">#</a> 题目大意</h2><p>给你一个下标从 <strong>0</strong> 开始的 <strong>正整数</strong> 数组 <code>nums</code> 和一个 <strong>正整数</strong> <code>limit</code> 。</p><p>在一次操作中，你可以选择任意两个下标 <code>i</code> 和 <code>j</code>，<strong>如果</strong> 满足 <code>|nums[i] - nums[j]| &lt;= limit</code> ，则交换 <code>nums[i]</code> 和 <code>nums[j]</code> 。</p><p>返回执行任意次操作后能得到的 <strong>字典序最小的数组</strong> 。</p><p>如果在数组 <code>a</code> 和数组 <code>b</code> 第一个不同的位置上，数组 <code>a</code> 中的对应元素比数组 <code>b</code> 中的对应元素的字典序更小，则认为数组 <code>a</code> 就比数组 <code>b</code> 字典序更小。例如，数组 <code>[2,10,3]</code> 比数组 <code>[10,2,3]</code> 字典序更小，下标 <code>0</code> 处是两个数组第一个不同的位置，且 <code>2 &lt; 10</code> 。</p><p><strong>示例 1：</strong></p><blockquote><p><strong>输入：</strong> nums = [1,5,3,9,8], limit = 2</p><p><strong>输出：</strong>[1,3,5,8,9]</p><p><strong>解释：</strong> 执行 2 次操作：</p><ul><li>交换 nums[1] 和 nums[2] 。数组变为 [1,3,5,9,8] 。</li><li>交换 nums[3] 和 nums[4] 。数组变为 [1,3,5,8,9] 。</li></ul><p>即便执行更多次操作，也无法得到字典序更小的数组。</p><p>注意，执行不同的操作也可能会得到相同的结果。</p></blockquote><p><strong>示例 2：</strong></p><blockquote><p><strong>输入：</strong> nums = [1,7,6,18,2,1], limit = 3</p><p><strong>输出：</strong>[1,6,7,18,1,2]</p><p><strong>解释：</strong> 执行 3 次操作：</p><ul><li>交换 nums[1] 和 nums[2] 。数组变为 [1,6,7,18,2,1] 。</li><li>交换 nums[0] 和 nums[4] 。数组变为 [2,6,7,18,1,1] 。</li><li>交换 nums[0] 和 nums[5] 。数组变为 [1,6,7,18,1,2] 。</li></ul><p>即便执行更多次操作，也无法得到字典序更小的数组。</p></blockquote><p><strong>示例 3：</strong></p><blockquote><p><strong>输入：</strong> nums = [1,7,28,19,10], limit = 3</p><p><strong>输出：</strong>[1,7,28,19,10]</p><p><strong>解释：</strong>[1,7,28,19,10] 是字典序最小的数组，因为不管怎么选择下标都无法执行操作。</p></blockquote><p><strong>提示：</strong></p><ul><li><code>1 &lt;= nums.length &lt;= 10^5</code></li><li><code>1 &lt;= nums[i] &lt;= 10^9</code></li><li><code>1 &lt;= limit &lt;= 10^9</code></li></ul><h2 id="解题思路" tabindex="-1"><a class="header-anchor" href="#解题思路" aria-hidden="true">#</a> 解题思路</h2><ol><li><p><strong>对数组的值及索引进行处理：</strong></p><ul><li>用数组 <code>sorted</code> 存储每个数字及其原始索引。</li><li>按照值从小到大排序。</li></ul></li><li><p><strong>分组：</strong></p><ul><li>遍历排序后的数组，检查相邻数字是否满足差值不超过 <code>limit</code>。</li><li>如果差值满足条件，将其加入当前分组；否则，开启一个新的分组。</li></ul></li><li><p><strong>组内处理：</strong></p><ul><li>对每一组，按照原始索引对分组重新排序。</li><li>对分组内的值重新按字典序排序。</li><li>将排序后的值放回对应位置。</li></ul></li><li><p><strong>返回结果：</strong></p><ul><li>最终返回调整后的数组。</li></ul></li></ol><h4 id="复杂度分析" tabindex="-1"><a class="header-anchor" href="#复杂度分析" aria-hidden="true">#</a> 复杂度分析</h4><ul><li><strong>时间复杂度</strong>： <code>O(n log n)</code><ul><li>对 <code>nums</code> 排序的时间复杂度为 <code>O(n log n)</code>。</li><li>分组的复杂度为 <code>O(n)</code>。</li><li>每组排序的复杂度为 <code>O(k log k)</code>，<code>k</code> 是分组内元素的数量，总复杂度接近 <code>O(n log n)</code>。</li><li>总复杂度为 <code>O(n log n)</code></li></ul></li><li><strong>空间复杂度</strong>：<code>O(n)</code>，存储分组及结果。</li></ul><h2 id="代码" tabindex="-1"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span> <span class="token parameter">nums</span>
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">}</span></span> <span class="token parameter">limit</span>
 * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span>
 */</span>
<span class="token keyword">var</span> <span class="token function-variable function">lexicographicallySmallestArray</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">nums<span class="token punctuation">,</span> limit</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">const</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
	<span class="token comment">// 排序时保留原始索引</span>
	<span class="token keyword">const</span> sorted <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">num<span class="token punctuation">,</span> i</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span>num<span class="token punctuation">,</span> i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">-</span> b<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token comment">// 分组</span>
	<span class="token keyword">const</span> groups <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token keyword">let</span> cur <span class="token operator">=</span> <span class="token punctuation">[</span>sorted<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>sorted<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">-</span> sorted<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&lt;=</span> limit<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			cur<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>sorted<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
			groups<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">;</span>
			cur <span class="token operator">=</span> <span class="token punctuation">[</span>sorted<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	groups<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 添加最后一组</span>

	<span class="token comment">// 构建结果数组</span>
	<span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token comment">// 对每一组排序并放回原位</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> group <span class="token keyword">of</span> groups<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token comment">// 按照原始索引排序</span>
		group<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> b<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token comment">// 提取当前组的值并排序</span>
		<span class="token keyword">const</span> vals <span class="token operator">=</span> group<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">i</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> i<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> a <span class="token operator">-</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token comment">// 将排序后的值填回原位置</span>
		<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> group<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			res<span class="token punctuation">[</span>group<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> vals<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">return</span> res<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="相关题目" tabindex="-1"><a class="header-anchor" href="#相关题目" aria-hidden="true">#</a> 相关题目</h2>`,33),w=n("thead",null,[n("tr",null,[n("th",{style:{"text-align":"center"}},"题号"),n("th",{style:{"text-align":"left"}},"标题"),n("th",{style:{"text-align":"center"}},"题解"),n("th",{style:{"text-align":"left"}},"标签"),n("th",{style:{"text-align":"center"}},"难度"),n("th",{style:{"text-align":"center"}},"力扣")])],-1),q=n("td",{style:{"text-align":"center"}},"1202",-1),O=n("td",{style:{"text-align":"left"}},"交换字符串中的元素",-1),j=n("td",{style:{"text-align":"center"}},null,-1),E={style:{"text-align":"left"}},S=n("code",null,"深度优先搜索",-1),I=n("code",null,"广度优先搜索",-1),N=n("code",null,"并查集",-1),T=n("code",null,"4+",-1),A=n("td",{style:{"text-align":"center"}},"🟠",-1),C={style:{"text-align":"center"}},L={href:"https://leetcode.cn/problems/smallest-string-with-swaps",target:"_blank",rel:"noopener noreferrer"},V={href:"https://leetcode.com/problems/smallest-string-with-swaps",target:"_blank",rel:"noopener noreferrer"},B=n("td",{style:{"text-align":"center"}},"1722",-1),R=n("td",{style:{"text-align":"left"}},"执行交换操作后的最小汉明距离",-1),z=n("td",{style:{"text-align":"center"}},null,-1),W={style:{"text-align":"left"}},F=n("code",null,"深度优先搜索",-1),M=n("code",null,"并查集",-1),Y=n("code",null,"数组",-1),D=n("td",{style:{"text-align":"center"}},"🟠",-1),G={style:{"text-align":"center"}},H={href:"https://leetcode.cn/problems/minimize-hamming-distance-after-swap-operations",target:"_blank",rel:"noopener noreferrer"},J={href:"https://leetcode.com/problems/minimize-hamming-distance-after-swap-operations",target:"_blank",rel:"noopener noreferrer"};function K(P,Q){const c=p("font"),e=p("RouterLink"),o=p("ExternalLinkIcon");return i(),u("div",null,[m,n("p",null,[s("🟠 "),a(c,{color:"#ffb800"},{default:t(()=>[s("Medium")]),_:1}),s("  🔖  "),a(e,{to:"/tag/union-find.html"},{default:t(()=>[h]),_:1}),s(),a(e,{to:"/tag/array.html"},{default:t(()=>[g]),_:1}),s(),a(e,{to:"/tag/sorting.html"},{default:t(()=>[b]),_:1}),s("  🔗 "),n("a",_,[v,a(o)]),s(),n("a",y,[f,a(o)])]),x,r(" prettier-ignore "),n("table",null,[w,n("tbody",null,[n("tr",null,[q,O,j,n("td",E,[a(e,{to:"/tag/depth-first-search.html"},{default:t(()=>[S]),_:1}),s(),a(e,{to:"/tag/breadth-first-search.html"},{default:t(()=>[I]),_:1}),s(),a(e,{to:"/tag/union-find.html"},{default:t(()=>[N]),_:1}),s(),T]),A,n("td",C,[n("a",L,[s("🀄️"),a(o)]),s(),n("a",V,[s("🔗"),a(o)])])]),n("tr",null,[B,R,z,n("td",W,[a(e,{to:"/tag/depth-first-search.html"},{default:t(()=>[F]),_:1}),s(),a(e,{to:"/tag/union-find.html"},{default:t(()=>[M]),_:1}),s(),a(e,{to:"/tag/array.html"},{default:t(()=>[Y]),_:1})]),D,n("td",G,[n("a",H,[s("🀄️"),a(o)]),s(),n("a",J,[s("🔗"),a(o)])])])])])])}const X=l(k,[["render",K],["__file","2948.html.vue"]]);export{X as default};
