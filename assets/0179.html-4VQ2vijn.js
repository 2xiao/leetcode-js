import{_ as r,r as l,o as p,c as i,a as n,b as t,d as e,w as s,f as u,e as d}from"./app-fBVbqwGY.js";const h={},k=n("h1",{id:"_179-最大数",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_179-最大数","aria-hidden":"true"},"#"),t(" 179. 最大数")],-1),m=n("code",null,"贪心",-1),_=n("code",null,"数组",-1),g=n("code",null,"字符串",-1),b=n("code",null,"排序",-1),f={href:"https://leetcode.cn/problems/largest-number",target:"_blank",rel:"noopener noreferrer"},v=n("code",null,"力扣",-1),x={href:"https://leetcode.com/problems/largest-number",target:"_blank",rel:"noopener noreferrer"},y=n("code",null,"LeetCode",-1),q=d(`<h2 id="题目" tabindex="-1"><a class="header-anchor" href="#题目" aria-hidden="true">#</a> 题目</h2><p>Given a list of non-negative integers <code>nums</code>, arrange them such that they form the largest number and return it.</p><p>Since the result may be very large, so you need to return a string instead of an integer.</p><p><strong>Example 1:</strong></p><blockquote><p>Input: nums = [10,2]</p><p>Output: &quot;210&quot;</p></blockquote><p><strong>Example 2:</strong></p><blockquote><p>Input: nums = [3,30,34,5,9]</p><p>Output: &quot;9534330&quot;</p></blockquote><p><strong>Constraints:</strong></p><ul><li><code>1 &lt;= nums.length &lt;= 100</code></li><li><code>0 &lt;= nums[i] &lt;= 10^9</code></li></ul><h2 id="题目大意" tabindex="-1"><a class="header-anchor" href="#题目大意" aria-hidden="true">#</a> 题目大意</h2><p>给定一组非负整数 <code>nums</code>，重新排列每个数的顺序（每个数不可拆分）使之组成一个最大的整数。</p><p><strong>注意：</strong> 输出结果可能非常大，所以你需要返回一个字符串而不是整数。</p><p><strong>示例 1：</strong></p><blockquote><p>**输入：**nums = [10,2]</p><p><strong>输出：</strong>&quot;210&quot;</p></blockquote><p><strong>示例 2：</strong></p><blockquote><p>**输入：**nums = [3,30,34,5,9]</p><p><strong>输出：</strong>&quot;9534330&quot;</p></blockquote><p><strong>提示：</strong></p><ul><li><code>1 &lt;= nums.length &lt;= 100</code></li><li><code>0 &lt;= nums[i] &lt;= 10^9</code></li></ul><h2 id="解题思路" tabindex="-1"><a class="header-anchor" href="#解题思路" aria-hidden="true">#</a> 解题思路</h2><ol><li><p><strong>将数字转换为字符串</strong>：</p><ul><li>直接对数字排序无法满足题目要求，因为数字的连接顺序会影响结果。</li><li>需要将数组中的数字转换为字符串，以便按自定义规则排序。</li></ul></li><li><p><strong>定义排序规则</strong>：</p><ul><li>对于两个字符串 <code>a</code> 和 <code>b</code>： <ul><li>如果 <code>b + a</code> 的数值大于 <code>a + b</code>，说明 <code>b</code> 应排在 <code>a</code> 前面。</li><li>按此规则进行降序排序。</li></ul></li></ul></li><li><p><strong>处理特殊情况</strong>：</p><ul><li>如果排序后数组的第一个元素是 <code>&quot;0&quot;</code>，说明所有数字都是 <code>0</code>，直接返回 <code>&quot;0&quot;</code>。</li></ul></li><li><p><strong>拼接结果</strong>：</p><ul><li>排序完成后，将数组中的字符串连接成结果字符串。</li></ul></li></ol><h4 id="复杂度分析" tabindex="-1"><a class="header-anchor" href="#复杂度分析" aria-hidden="true">#</a> 复杂度分析</h4><ul><li><p><strong>时间复杂度</strong>：<code>O(k * n log n)</code></p><ul><li>排序复杂度为 <code>O(n log n)</code>，其中 <code>n</code> 是数组长度。</li><li>排序过程中比较两个字符串的复杂度与其长度有关，假设平均字符串长度为 <code>k</code>，每次比较需要 <code>O(k)</code> 时间。</li><li>总时间复杂度为 <code>O(k * n log n)</code>。</li></ul></li><li><p><strong>空间复杂度</strong>：<code>O(n * k)</code>，转换为字符串的数组占用 <code>O(n * k)</code> 空间，<code>k</code> 是字符串的平均长度。</p></li></ul><h2 id="代码" tabindex="-1"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span> <span class="token parameter">nums</span>
 * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>string<span class="token punctuation">}</span></span>
 */</span>
<span class="token keyword">var</span> <span class="token function-variable function">largestNumber</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">nums</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">// 将数字转换为字符串</span>
	<span class="token keyword">let</span> arr <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>String<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token comment">// 自定义排序规则</span>
	arr<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">Number</span><span class="token punctuation">(</span>b <span class="token operator">+</span> a<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token function">Number</span><span class="token punctuation">(</span>a <span class="token operator">+</span> b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token comment">// 如果最大的数字是 &quot;0&quot;，说明所有数字都是 &quot;0&quot;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">&#39;0&#39;</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token string">&#39;0&#39;</span><span class="token punctuation">;</span>

	<span class="token comment">// 拼接排序后的字符串</span>
	<span class="token keyword">return</span> arr<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="相关题目" tabindex="-1"><a class="header-anchor" href="#相关题目" aria-hidden="true">#</a> 相关题目</h2>`,25),w=n("thead",null,[n("tr",null,[n("th",{style:{"text-align":"center"}},"题号"),n("th",{style:{"text-align":"left"}},"标题"),n("th",{style:{"text-align":"center"}},"题解"),n("th",{style:{"text-align":"left"}},"标签"),n("th",{style:{"text-align":"center"}},"难度"),n("th",{style:{"text-align":"center"}},"力扣")])],-1),N=n("td",{style:{"text-align":"center"}},"2165",-1),O=n("td",{style:{"text-align":"left"}},"重排数字的最小值",-1),C=n("td",{style:{"text-align":"center"}},null,-1),E={style:{"text-align":"left"}},L=n("code",null,"数学",-1),V=n("code",null,"排序",-1),j=n("td",{style:{"text-align":"center"}},"🟠",-1),I={style:{"text-align":"center"}},B={href:"https://leetcode.cn/problems/smallest-value-of-the-rearranged-number",target:"_blank",rel:"noopener noreferrer"},S={href:"https://leetcode.com/problems/smallest-value-of-the-rearranged-number",target:"_blank",rel:"noopener noreferrer"},R=n("td",{style:{"text-align":"center"}},"3270",-1),G=n("td",{style:{"text-align":"left"}},"求出数字答案",-1),M=n("td",{style:{"text-align":"center"}},null,-1),T={style:{"text-align":"left"}},z=n("code",null,"数学",-1),A=n("td",{style:{"text-align":"center"}},"🟢",-1),D={style:{"text-align":"center"}},F={href:"https://leetcode.cn/problems/find-the-key-of-the-numbers",target:"_blank",rel:"noopener noreferrer"},H={href:"https://leetcode.com/problems/find-the-key-of-the-numbers",target:"_blank",rel:"noopener noreferrer"};function J(K,P){const c=l("font"),a=l("RouterLink"),o=l("ExternalLinkIcon");return p(),i("div",null,[k,n("p",null,[t("🟠 "),e(c,{color:"#ffb800"},{default:s(()=>[t("Medium")]),_:1}),t("  🔖  "),e(a,{to:"/tag/greedy.html"},{default:s(()=>[m]),_:1}),t(),e(a,{to:"/tag/array.html"},{default:s(()=>[_]),_:1}),t(),e(a,{to:"/tag/string.html"},{default:s(()=>[g]),_:1}),t(),e(a,{to:"/tag/sorting.html"},{default:s(()=>[b]),_:1}),t("  🔗 "),n("a",f,[v,e(o)]),t(),n("a",x,[y,e(o)])]),q,u(" prettier-ignore "),n("table",null,[w,n("tbody",null,[n("tr",null,[N,O,C,n("td",E,[e(a,{to:"/tag/math.html"},{default:s(()=>[L]),_:1}),t(),e(a,{to:"/tag/sorting.html"},{default:s(()=>[V]),_:1})]),j,n("td",I,[n("a",B,[t("🀄️"),e(o)]),t(),n("a",S,[t("🔗"),e(o)])])]),n("tr",null,[R,G,M,n("td",T,[e(a,{to:"/tag/math.html"},{default:s(()=>[z]),_:1})]),A,n("td",D,[n("a",F,[t("🀄️"),e(o)]),t(),n("a",H,[t("🔗"),e(o)])])])])])])}const U=r(h,[["render",J],["__file","0179.html.vue"]]);export{U as default};
