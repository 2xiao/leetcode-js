import{_ as c,r as e,o as r,c as i,a as n,b as s,d as o,w as a,e as u}from"./app-aQeLbVW9.js";const d={},k=n("h1",{id:"_2269-找到一个数字的-k-美丽值",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_2269-找到一个数字的-k-美丽值","aria-hidden":"true"},"#"),s(" 2269. 找到一个数字的 K 美丽值")],-1),m=n("code",null,"数学",-1),g=n("code",null,"字符串",-1),h=n("code",null,"滑动窗口",-1),b={href:"https://leetcode.cn/problems/find-the-k-beauty-of-a-number",target:"_blank",rel:"noopener noreferrer"},v=n("code",null,"力扣",-1),f={href:"https://leetcode.com/problems/find-the-k-beauty-of-a-number",target:"_blank",rel:"noopener noreferrer"},q=n("code",null,"LeetCode",-1),_=u(`<h2 id="题目" tabindex="-1"><a class="header-anchor" href="#题目" aria-hidden="true">#</a> 题目</h2><p>The <strong>k-beauty</strong> of an integer <code>num</code> is defined as the number of <strong>substrings</strong> of <code>num</code> when it is read as a string that meet the following conditions:</p><ul><li>It has a length of <code>k</code>.</li><li>It is a divisor of <code>num</code>.</li></ul><p>Given integers <code>num</code> and <code>k</code>, return <em>the k-beauty of</em><code>num</code>.</p><p>Note:</p><ul><li><strong>Leading zeros</strong> are allowed.</li><li><code>0</code> is not a divisor of any value.</li></ul><p>A <strong>substring</strong> is a contiguous sequence of characters in a string.</p><p><strong>Example 1:</strong></p><blockquote><p>Input: num = 240, k = 2</p><p>Output: 2</p><p>Explanation: The following are the substrings of num of length k:</p><ul><li>&quot;24&quot; from &quot;<strong><em>24</em></strong> 0&quot;: 24 is a divisor of 240.</li><li>&quot;40&quot; from &quot;2 <em><strong>40</strong></em> &quot;: 40 is a divisor of 240.</li></ul><p>Therefore, the k-beauty is 2.</p></blockquote><p><strong>Example 2:</strong></p><blockquote><p>Input: num = 430043, k = 2</p><p>Output: 2</p><p>Explanation: The following are the substrings of num of length k:</p><ul><li>&quot;43&quot; from &quot;<em><strong>43</strong></em> 0043&quot;: 43 is a divisor of 430043.</li><li>&quot;30&quot; from &quot;4 <em><strong>30</strong></em> 043&quot;: 30 is not a divisor of 430043.</li><li>&quot;00&quot; from &quot;43 <em><strong>00</strong></em> 43&quot;: 0 is not a divisor of 430043.</li><li>&quot;04&quot; from &quot;430 <em><strong>04</strong></em> 3&quot;: 4 is not a divisor of 430043.</li><li>&quot;43&quot; from &quot;4300 <em><strong>43</strong></em> &quot;: 43 is a divisor of 430043.</li></ul><p>Therefore, the k-beauty is 2.</p></blockquote><p><strong>Constraints:</strong></p><ul><li><code>1 &lt;= num &lt;= 10^9</code></li><li><code>1 &lt;= k &lt;= num.length</code> (taking <code>num</code> as a string)</li></ul><h2 id="题目大意" tabindex="-1"><a class="header-anchor" href="#题目大意" aria-hidden="true">#</a> 题目大意</h2><p>一个整数 <code>num</code> 的 <strong>k</strong> 美丽值定义为 <code>num</code> 中符合以下条件的 <strong>子字符串</strong> 数目：</p><ul><li>子字符串长度为 <code>k</code> 。</li><li>子字符串能整除 <code>num</code> 。</li></ul><p>给你整数 <code>num</code> 和 <code>k</code> ，请你返回 <code>num</code> 的 k 美丽值。</p><p>注意：</p><ul><li>允许有 <strong>前缀</strong> <strong>0</strong> 。</li><li><code>0</code> 不能整除任何值。</li></ul><p>一个 <strong>子字符串</strong> 是一个字符串里的连续一段字符序列。</p><p><strong>示例 1：</strong></p><blockquote><p><strong>输入：</strong> num = 240, k = 2</p><p><strong>输出：</strong> 2</p><p><strong>解释：</strong> 以下是 num 里长度为 k 的子字符串：</p><ul><li>&quot;<em><strong>24</strong></em> 0&quot; 中的 &quot;24&quot; ：24 能整除 240 。</li><li>&quot;2 <em><strong>40</strong></em> &quot; 中的 &quot;40&quot; ：40 能整除 240 。</li></ul><p>所以，k 美丽值为 2 。</p></blockquote><p><strong>示例 2：</strong></p><blockquote><p><strong>输入：</strong> num = 430043, k = 2</p><p><strong>输出：</strong> 2</p><p><strong>解释：</strong> 以下是 num 里长度为 k 的子字符串：</p><ul><li>&quot;<em><strong>43</strong></em> 0043&quot; 中的 &quot;43&quot; ：43 能整除 430043 。</li><li>&quot;4 <em><strong>30</strong></em> 043&quot; 中的 &quot;30&quot; ：30 不能整除 430043 。</li><li>&quot;43 <em><strong>00</strong></em> 43&quot; 中的 &quot;00&quot; ：0 不能整除 430043 。</li><li>&quot;430 <em><strong>04</strong></em> 3&quot; 中的 &quot;04&quot; ：4 不能整除 430043 。</li><li>&quot;4300 <em><strong>43</strong></em> &quot; 中的 &quot;43&quot; ：43 能整除 430043 。</li></ul><p>所以，k 美丽值为 2 。</p></blockquote><p><strong>提示：</strong></p><ul><li><code>1 &lt;= num &lt;= 10^9</code></li><li><code>1 &lt;= k &lt;= num.length</code> （将 <code>num</code> 视为字符串）</li></ul><h2 id="解题思路" tabindex="-1"><a class="header-anchor" href="#解题思路" aria-hidden="true">#</a> 解题思路</h2><ol><li><p><strong>从整数中提取子字符串</strong>：</p><ul><li>将 <code>num</code> 逐位处理，构造长度为 <code>k</code> 的子整数。</li><li>当子整数达到 <code>k</code> 位时，检查其是否能整除 <code>num</code>。</li></ul></li><li><p><strong>滑动窗口技术</strong>：</p><ul><li>使用一个变量 <code>cur</code> 保存当前窗口的值。</li><li>利用模运算和除法动态更新窗口值： <ul><li>添加低位的数字（通过模运算和乘法）。</li><li>移除高位的数字（通过除法）。</li></ul></li></ul></li><li><p><strong>跳过特殊情况</strong>：</p><ul><li>如果当前子整数为 <code>0</code>，直接跳过（避免除以 <code>0</code>）。</li></ul></li></ol><h4 id="复杂度分析" tabindex="-1"><a class="header-anchor" href="#复杂度分析" aria-hidden="true">#</a> 复杂度分析</h4><ul><li><strong>时间复杂度</strong>：<code>O(d)</code>，其中 <code>d</code> 是 <code>num</code> 的位数，遍历 <code>num</code> 的所有数字。</li><li><strong>空间复杂度</strong>：<code>O(1)</code>，使用常量空间。</li></ul><h2 id="代码" tabindex="-1"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">}</span></span> <span class="token parameter">num</span>
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">}</span></span> <span class="token parameter">k</span>
 * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">}</span></span>
 */</span>
<span class="token keyword">var</span> <span class="token function-variable function">divisorSubstrings</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">num<span class="token punctuation">,</span> k</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// 结果计数</span>
	<span class="token keyword">let</span> cur <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// 当前窗口值</span>
	<span class="token keyword">let</span> pow <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 用于维护 k 位整数的权重（10 的次方）</span>

	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> n <span class="token operator">=</span> num<span class="token punctuation">;</span> n <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">;</span> n <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>n <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token comment">// 添加低位数字</span>
		cur <span class="token operator">+=</span> <span class="token punctuation">(</span>n <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">*</span> pow<span class="token punctuation">;</span>

		<span class="token keyword">if</span> <span class="token punctuation">(</span>k<span class="token operator">--</span> <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			pow <span class="token operator">*=</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token comment">// 增加权重</span>
		<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
			<span class="token comment">// 检查当前窗口是否符合条件</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span>cur <span class="token operator">!==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> num <span class="token operator">%</span> cur <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
				res<span class="token operator">++</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span>
			cur <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>cur <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 移除高位数字</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> res<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,32);function w(y,x){const l=e("font"),t=e("RouterLink"),p=e("ExternalLinkIcon");return r(),i("div",null,[k,n("p",null,[s("🟢 "),o(l,{color:"#15bd66"},{default:a(()=>[s("Easy")]),_:1}),s("  🔖  "),o(t,{to:"/tag/math.html"},{default:a(()=>[m]),_:1}),s(),o(t,{to:"/tag/string.html"},{default:a(()=>[g]),_:1}),s(),o(t,{to:"/tag/sliding-window.html"},{default:a(()=>[h]),_:1}),s("  🔗 "),n("a",b,[v,o(p)]),s(),n("a",f,[q,o(p)])]),_])}const I=c(d,[["render",w],["__file","2269.html.vue"]]);export{I as default};
