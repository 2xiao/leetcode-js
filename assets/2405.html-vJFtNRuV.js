import{_ as r,r as l,o as i,c as d,a as t,b as e,d as n,w as s,f as p,e as u}from"./app-B5EG-zH0.js";const h={},_=t("h1",{id:"_2405-子字符串的最优划分",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#_2405-子字符串的最优划分","aria-hidden":"true"},"#"),e(" 2405. 子字符串的最优划分")],-1),g=t("code",null,"贪心",-1),m=t("code",null,"哈希表",-1),k=t("code",null,"字符串",-1),b={href:"https://leetcode.cn/problems/optimal-partition-of-string",target:"_blank",rel:"noopener noreferrer"},f=t("code",null,"力扣",-1),q={href:"https://leetcode.com/problems/optimal-partition-of-string",target:"_blank",rel:"noopener noreferrer"},y=t("code",null,"LeetCode",-1),x=u(`<h2 id="题目" tabindex="-1"><a class="header-anchor" href="#题目" aria-hidden="true">#</a> 题目</h2><p>Given a string <code>s</code>, partition the string into one or more <strong>substrings</strong> such that the characters in each substring are <strong>unique</strong>. That is, no letter appears in a single substring more than <strong>once</strong>.</p><p>Return <em>the<strong>minimum</strong> number of substrings in such a partition.</em></p><p>Note that each character should belong to exactly one substring in a partition.</p><p><strong>Example 1:</strong></p><blockquote><p>Input: s = &quot;abacaba&quot;</p><p>Output: 4</p><p>Explanation:</p><p>Two possible partitions are (&quot;a&quot;,&quot;ba&quot;,&quot;cab&quot;,&quot;a&quot;) and (&quot;ab&quot;,&quot;a&quot;,&quot;ca&quot;,&quot;ba&quot;).</p><p>It can be shown that 4 is the minimum number of substrings needed.</p></blockquote><p><strong>Example 2:</strong></p><blockquote><p>Input: s = &quot;ssssss&quot;</p><p>Output: 6</p><p>Explanation: The only valid partition is (&quot;s&quot;,&quot;s&quot;,&quot;s&quot;,&quot;s&quot;,&quot;s&quot;,&quot;s&quot;).</p></blockquote><p><strong>Constraints:</strong></p><ul><li><code>1 &lt;= s.length &lt;= 10^5</code></li><li><code>s</code> consists of only English lowercase letters.</li></ul><h2 id="题目大意" tabindex="-1"><a class="header-anchor" href="#题目大意" aria-hidden="true">#</a> 题目大意</h2><p>给你一个字符串 <code>s</code> ，请你将该字符串划分成一个或多个 <strong>子字符串</strong> ，并满足每个子字符串中的字符都是 <strong>唯一</strong> 的。也就是说，在单个子字符串中，字母的出现次数都不超过 <strong>一次</strong> 。</p><p>满足题目要求的情况下，返回 <strong>最少</strong> 需要划分多少个子字符串。</p><p>注意，划分后，原字符串中的每个字符都应该恰好属于一个子字符串。</p><p><strong>示例 1：</strong></p><blockquote><p><strong>输入：</strong> s = &quot;abacaba&quot;</p><p><strong>输出：</strong> 4</p><p><strong>解释：</strong></p><p>两种可行的划分方法分别是 (&quot;a&quot;,&quot;ba&quot;,&quot;cab&quot;,&quot;a&quot;) 和 (&quot;ab&quot;,&quot;a&quot;,&quot;ca&quot;,&quot;ba&quot;) 。</p><p>可以证明最少需要划分 4 个子字符串。</p></blockquote><p><strong>示例 2：</strong></p><blockquote><p><strong>输入：</strong> s = &quot;ssssss&quot;</p><p><strong>输出：</strong> 6</p><p><strong>解释：</strong> 只存在一种可行的划分方法 (&quot;s&quot;,&quot;s&quot;,&quot;s&quot;,&quot;s&quot;,&quot;s&quot;,&quot;s&quot;) 。</p></blockquote><p><strong>提示：</strong></p><ul><li><code>1 &lt;= s.length &lt;= 10^5</code></li><li><code>s</code> 仅由小写英文字母组成</li></ul><h2 id="解题思路" tabindex="-1"><a class="header-anchor" href="#解题思路" aria-hidden="true">#</a> 解题思路</h2><ol><li>使用集合 <code>charSet</code> 来存储当前子串中的字符。集合的查找时间复杂度为 <code>O(1)</code>，可以高效判断字符是否已存在。</li><li>遍历字符串中的每个字符 <code>char</code>： <ul><li>如果 <code>char</code> 不在集合中，将字符 <code>char</code> 添加到集合中。</li><li>如果 <code>char</code> 在集合中已经存在（即重复），则意味着当前子串无法继续扩展，增加子串计数 <code>count</code>，并重置集合，开始新的子串。</li></ul></li><li>遍历完成后，返回 <code>count</code>，即划分后的子串数量。</li></ol><h4 id="复杂度分析" tabindex="-1"><a class="header-anchor" href="#复杂度分析" aria-hidden="true">#</a> 复杂度分析</h4><ul><li><strong>时间复杂度</strong>：<code>O(n)</code>，其中 <code>n</code> 是字符串 <code>s</code> 的长度。遍历字符串一次，每次查找字符是否在集合中的操作为常数时间 <code>O(1)</code>，整体时间复杂度为 <code>O(n)</code>。</li><li><strong>空间复杂度</strong>：<code>O(k)</code>，其中 <code>k</code> 是当前子串的最大字符数。在最坏情况下，<code>k</code> 的大小可能为字符串 <code>s</code> 的长度，空间复杂度为 <code>O(n)</code>。</li></ul><h2 id="代码" tabindex="-1"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>string<span class="token punctuation">}</span></span> <span class="token parameter">s</span>
 * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">}</span></span>
 */</span>
<span class="token keyword">var</span> <span class="token function-variable function">partitionString</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">s</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">let</span> charSet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 用集合存储当前子串的字符</span>
	<span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 初始子串数为1</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> char <span class="token keyword">of</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>charSet<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>char<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			count<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment">// 当前子串结束，增加子串计数</span>
			charSet<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 重置集合</span>
		<span class="token punctuation">}</span>
		charSet<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>char<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 将字符添加到当前子串集合</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> count<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="相关题目" tabindex="-1"><a class="header-anchor" href="#相关题目" aria-hidden="true">#</a> 相关题目</h2>`,27),v=t("thead",null,[t("tr",null,[t("th",{style:{"text-align":"center"}},"题号"),t("th",{style:{"text-align":"left"}},"标题"),t("th",{style:{"text-align":"center"}},"题解"),t("th",{style:{"text-align":"left"}},"标签"),t("th",{style:{"text-align":"center"}},"难度"),t("th",{style:{"text-align":"center"}},"力扣")])],-1),w=t("td",{style:{"text-align":"center"}},"3",-1),E=t("td",{style:{"text-align":"left"}},"无重复字符的最长子串",-1),O={style:{"text-align":"center"}},S={style:{"text-align":"left"}},N=t("code",null,"哈希表",-1),j=t("code",null,"字符串",-1),C=t("code",null,"滑动窗口",-1),I=t("td",{style:{"text-align":"center"}},"🟠",-1),L={style:{"text-align":"center"}},V={href:"https://leetcode.cn/problems/longest-substring-without-repeating-characters",target:"_blank",rel:"noopener noreferrer"},T={href:"https://leetcode.com/problems/longest-substring-without-repeating-characters",target:"_blank",rel:"noopener noreferrer"},B=t("td",{style:{"text-align":"center"}},"395",-1),R=t("td",{style:{"text-align":"left"}},"至少有 K 个重复字符的最长子串",-1),K={style:{"text-align":"center"}},G={style:{"text-align":"left"}},M=t("code",null,"哈希表",-1),z=t("code",null,"字符串",-1),A=t("code",null,"分治",-1),D=t("code",null,"1+",-1),F=t("td",{style:{"text-align":"center"}},"🟠",-1),H={style:{"text-align":"center"}},J={href:"https://leetcode.cn/problems/longest-substring-with-at-least-k-repeating-characters",target:"_blank",rel:"noopener noreferrer"},P={href:"https://leetcode.com/problems/longest-substring-with-at-least-k-repeating-characters",target:"_blank",rel:"noopener noreferrer"},Q=t("td",{style:{"text-align":"center"}},"763",-1),U=t("td",{style:{"text-align":"left"}},"划分字母区间",-1),W={style:{"text-align":"center"}},X={style:{"text-align":"left"}},Y=t("code",null,"贪心",-1),Z=t("code",null,"哈希表",-1),$=t("code",null,"双指针",-1),tt=t("code",null,"1+",-1),et=t("td",{style:{"text-align":"center"}},"🟠",-1),nt={style:{"text-align":"center"}},st={href:"https://leetcode.cn/problems/partition-labels",target:"_blank",rel:"noopener noreferrer"},ot={href:"https://leetcode.com/problems/partition-labels",target:"_blank",rel:"noopener noreferrer"},at=t("td",{style:{"text-align":"center"}},"915",-1),lt=t("td",{style:{"text-align":"left"}},"分割数组",-1),ct=t("td",{style:{"text-align":"center"}},null,-1),rt={style:{"text-align":"left"}},it=t("code",null,"数组",-1),dt=t("td",{style:{"text-align":"center"}},"🟠",-1),pt={style:{"text-align":"center"}},ut={href:"https://leetcode.cn/problems/partition-array-into-disjoint-intervals",target:"_blank",rel:"noopener noreferrer"},ht={href:"https://leetcode.com/problems/partition-array-into-disjoint-intervals",target:"_blank",rel:"noopener noreferrer"},_t=t("td",{style:{"text-align":"center"}},"2461",-1),gt=t("td",{style:{"text-align":"left"}},"长度为 K 子数组中的最大和",-1),mt={style:{"text-align":"center"}},kt={style:{"text-align":"left"}},bt=t("code",null,"数组",-1),ft=t("code",null,"哈希表",-1),qt=t("code",null,"滑动窗口",-1),yt=t("td",{style:{"text-align":"center"}},"🟠",-1),xt={style:{"text-align":"center"}},vt={href:"https://leetcode.cn/problems/maximum-sum-of-distinct-subarrays-with-length-k",target:"_blank",rel:"noopener noreferrer"},wt={href:"https://leetcode.com/problems/maximum-sum-of-distinct-subarrays-with-length-k",target:"_blank",rel:"noopener noreferrer"};function Et(Ot,St){const c=l("font"),o=l("RouterLink"),a=l("ExternalLinkIcon");return i(),d("div",null,[_,t("p",null,[e("🟠 "),n(c,{color:"#ffb800"},{default:s(()=>[e("Medium")]),_:1}),e("  🔖  "),n(o,{to:"/tag/greedy.html"},{default:s(()=>[g]),_:1}),e(),n(o,{to:"/tag/hash-table.html"},{default:s(()=>[m]),_:1}),e(),n(o,{to:"/tag/string.html"},{default:s(()=>[k]),_:1}),e("  🔗 "),t("a",b,[f,n(a)]),e(),t("a",q,[y,n(a)])]),x,p(" prettier-ignore "),t("table",null,[v,t("tbody",null,[t("tr",null,[w,E,t("td",O,[n(o,{to:"/problem/0003.html"},{default:s(()=>[e("[✓]")]),_:1})]),t("td",S,[n(o,{to:"/tag/hash-table.html"},{default:s(()=>[N]),_:1}),e(),n(o,{to:"/tag/string.html"},{default:s(()=>[j]),_:1}),e(),n(o,{to:"/tag/sliding-window.html"},{default:s(()=>[C]),_:1})]),I,t("td",L,[t("a",V,[e("🀄️"),n(a)]),e(),t("a",T,[e("🔗"),n(a)])])]),t("tr",null,[B,R,t("td",K,[n(o,{to:"/problem/0395.html"},{default:s(()=>[e("[✓]")]),_:1})]),t("td",G,[n(o,{to:"/tag/hash-table.html"},{default:s(()=>[M]),_:1}),e(),n(o,{to:"/tag/string.html"},{default:s(()=>[z]),_:1}),e(),n(o,{to:"/tag/divide-and-conquer.html"},{default:s(()=>[A]),_:1}),e(),D]),F,t("td",H,[t("a",J,[e("🀄️"),n(a)]),e(),t("a",P,[e("🔗"),n(a)])])]),t("tr",null,[Q,U,t("td",W,[n(o,{to:"/problem/0763.html"},{default:s(()=>[e("[✓]")]),_:1})]),t("td",X,[n(o,{to:"/tag/greedy.html"},{default:s(()=>[Y]),_:1}),e(),n(o,{to:"/tag/hash-table.html"},{default:s(()=>[Z]),_:1}),e(),n(o,{to:"/tag/two-pointers.html"},{default:s(()=>[$]),_:1}),e(),tt]),et,t("td",nt,[t("a",st,[e("🀄️"),n(a)]),e(),t("a",ot,[e("🔗"),n(a)])])]),t("tr",null,[at,lt,ct,t("td",rt,[n(o,{to:"/tag/array.html"},{default:s(()=>[it]),_:1})]),dt,t("td",pt,[t("a",ut,[e("🀄️"),n(a)]),e(),t("a",ht,[e("🔗"),n(a)])])]),t("tr",null,[_t,gt,t("td",mt,[n(o,{to:"/problem/2461.html"},{default:s(()=>[e("[✓]")]),_:1})]),t("td",kt,[n(o,{to:"/tag/array.html"},{default:s(()=>[bt]),_:1}),e(),n(o,{to:"/tag/hash-table.html"},{default:s(()=>[ft]),_:1}),e(),n(o,{to:"/tag/sliding-window.html"},{default:s(()=>[qt]),_:1})]),yt,t("td",xt,[t("a",vt,[e("🀄️"),n(a)]),e(),t("a",wt,[e("🔗"),n(a)])])])])])])}const jt=r(h,[["render",Et],["__file","2405.html.vue"]]);export{jt as default};
