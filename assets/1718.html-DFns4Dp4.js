import{_ as l,r as c,o as i,c as d,a as n,b as s,d as e,w as a,f as r,e as u}from"./app-aQeLbVW9.js";const k={},m=n("h1",{id:"_1718-构建字典序最大的可行序列",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_1718-构建字典序最大的可行序列","aria-hidden":"true"},"#"),s(" 1718. 构建字典序最大的可行序列")],-1),h=n("code",null,"数组",-1),b=n("code",null,"回溯",-1),g={href:"https://leetcode.cn/problems/construct-the-lexicographically-largest-valid-sequence",target:"_blank",rel:"noopener noreferrer"},v=n("code",null,"力扣",-1),f={href:"https://leetcode.com/problems/construct-the-lexicographically-largest-valid-sequence",target:"_blank",rel:"noopener noreferrer"},_=n("code",null,"LeetCode",-1),x=u(`<h2 id="题目" tabindex="-1"><a class="header-anchor" href="#题目" aria-hidden="true">#</a> 题目</h2><p>Given an integer <code>n</code>, find a sequence that satisfies all of the following:</p><ul><li>The integer <code>1</code> occurs once in the sequence.</li><li>Each integer between <code>2</code> and <code>n</code> occurs twice in the sequence.</li><li>For every integer <code>i</code> between <code>2</code> and <code>n</code>, the <strong>distance</strong> between the two occurrences of <code>i</code> is exactly <code>i</code>.</li></ul><p>The <strong>distance</strong> between two numbers on the sequence, <code>a[i]</code> and <code>a[j]</code>, is the absolute difference of their indices, <code>|j - i|</code>.</p><p>Return <em>the<strong>lexicographically largest</strong> sequence</em> <em>. It is guaranteed that under the given constraints, there is always a solution.</em></p><p>A sequence <code>a</code> is lexicographically larger than a sequence <code>b</code> (of the same length) if in the first position where <code>a</code> and <code>b</code> differ, sequence <code>a</code> has a number greater than the corresponding number in <code>b</code>. For example, <code>[0,1,9,0]</code> is lexicographically larger than <code>[0,1,5,6]</code> because the first position they differ is at the third number, and <code>9</code> is greater than <code>5</code>.</p><p><strong>Example 1:</strong></p><blockquote><p>Input: n = 3</p><p>Output: [3,1,2,3,2]</p><p>Explanation: [2,3,2,1,3] is also a valid sequence, but [3,1,2,3,2] is the lexicographically largest valid sequence.</p></blockquote><p><strong>Example 2:</strong></p><blockquote><p>Input: n = 5</p><p>Output: [5,3,1,4,3,5,2,4,2]</p></blockquote><p><strong>Constraints:</strong></p><ul><li><code>1 &lt;= n &lt;= 20</code></li></ul><h2 id="题目大意" tabindex="-1"><a class="header-anchor" href="#题目大意" aria-hidden="true">#</a> 题目大意</h2><p>给你一个整数 <code>n</code> ，请你找到满足下面条件的一个序列：</p><ul><li>整数 <code>1</code> 在序列中只出现一次。</li><li><code>2</code> 到 <code>n</code> 之间每个整数都恰好出现两次。</li><li>对于每个 <code>2</code> 到 <code>n</code> 之间的整数 <code>i</code> ，两个 <code>i</code> 之间出现的距离恰好为 <code>i</code> 。</li></ul><p>序列里面两个数 <code>a[i]</code> 和 <code>a[j]</code> 之间的 <strong>距离</strong> ，我们定义为它们下标绝对值之差 <code>|j - i|</code> 。</p><p>请你返回满足上述条件中 <strong>字典序最大</strong> 的序列。题目保证在给定限制条件下，一定存在解。</p><p>一个序列 <code>a</code> 被认为比序列 <code>b</code> （两者长度相同）字典序更大的条件是： <code>a</code> 和 <code>b</code> 中第一个不一样的数字处，<code>a</code> 序列的数字比 <code>b</code> 序列的数字大。比方说，<code>[0,1,9,0]</code> 比 <code>[0,1,5,6]</code> 字典序更大，因为第一个不同的位置是第三个数字，且 <code>9</code> 比 <code>5</code> 大。</p><p><strong>示例 1：</strong></p><blockquote><p><strong>输入：</strong> n = 3</p><p><strong>输出：</strong>[3,1,2,3,2]</p><p><strong>解释：</strong>[2,3,2,1,3] 也是一个可行的序列，但是 [3,1,2,3,2] 是字典序最大的序列。</p></blockquote><p><strong>示例 2：</strong></p><blockquote><p><strong>输入：</strong> n = 5</p><p><strong>输出：</strong>[5,3,1,4,3,5,2,4,2]</p></blockquote><p><strong>提示：</strong></p><ul><li><code>1 &lt;= n &lt;= 20</code></li></ul><h2 id="解题思路" tabindex="-1"><a class="header-anchor" href="#解题思路" aria-hidden="true">#</a> 解题思路</h2><p>由于 <code>res</code> 的位置需要满足一定的间隔关系，因此可以采用<strong>回溯（Backtracking）+ 剪枝</strong>的策略来构造数组。</p><ol><li><strong>回溯框架</strong></li></ol><p>使用递归方法 <code>backtrack(idx)</code>，从索引 <code>idx = 0</code> 开始，尝试在 <code>res</code> 中填入 <code>n</code> 到 <code>1</code>，直到数组填满。</p><ol start="2"><li><strong>回溯细节</strong></li></ol><p>在 <code>idx</code> 位置尝试放置数字 <code>num</code>（从 <code>n</code> 递减到 <code>1</code>）：</p><ul><li><strong>跳过已填充的位置</strong>：如果 <code>res[idx]</code> 已有值，直接递归到下一个索引。</li><li><strong>检查 <code>num</code> 是否可以放置</strong>： <ul><li><code>num</code> 需要占据 <code>idx</code> 和 <code>idx + num</code> 两个位置。</li><li><code>idx + num</code> 不能超出 <code>res</code> 数组范围。</li><li><code>idx + num</code> 位置必须是空的。</li><li><strong>特殊情况</strong>：<code>num == 1</code> 只占据一个位置。</li></ul></li><li><strong>放置 <code>num</code>，然后递归继续</strong>： <ul><li>标记 <code>used[num] = true</code>，填充 <code>res[idx] = res[idx + num] = num</code>。</li><li>递归调用 <code>backtrack(idx + 1)</code>。</li><li>如果找到解，返回 <code>true</code>。</li><li><strong>回溯（撤销选择）</strong>：如果递归失败，则撤销填充，并继续尝试更小的 <code>num</code>。</li></ul></li></ul><ol start="3"><li><strong>剪枝优化</strong></li></ol><ul><li><p><strong>按 <code>n → 1</code> 递减放置</strong>：优先尝试较大的 <code>num</code>，保证字典序最大。</p></li><li><p><strong>跳过已填充的位置</strong>：<code>if (res[idx] !== 0) backtrack(idx + 1)</code> 避免重复计算。</p></li><li><p><strong>提前终止无效路径</strong>：</p><ul><li><code>if (used[num]) continue</code>：避免重复放置 <code>num</code>。</li><li><code>if (next &gt;= len || res[next] !== 0) continue</code>：避免超出范围或覆盖已填充位置。</li></ul></li></ul><h4 id="复杂度分析" tabindex="-1"><a class="header-anchor" href="#复杂度分析" aria-hidden="true">#</a> 复杂度分析</h4><ul><li><p><strong>时间复杂度</strong>：<code>O(n * n!)</code></p><ul><li>由于 <code>res</code> 长度为 <code>2n - 1</code>，理论上我们可能尝试 <code>O(n!)</code> 种排列方式。</li><li>但由于<strong>剪枝优化</strong>，实际情况远低于 <code>O(n!)</code>。</li><li>近似时间复杂度可以认为是 <code>O(n * n!)</code> 级别。</li></ul></li><li><p><strong>空间复杂度</strong>：<code>O(n)</code>。</p><ul><li>主要由 <code>res</code>（<code>O(2n-1) ≈ O(n)</code>）和 <code>used</code>（<code>O(n)</code>）数组组成，共 <code>O(n)</code> 额外空间。</li><li>递归调用栈最深 <code>O(n)</code></li><li>因此<strong>总空间复杂度为 <code>O(n)</code></strong>。</li></ul></li></ul><h2 id="代码" tabindex="-1"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">}</span></span> <span class="token parameter">n</span>
 * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span>
 */</span>
<span class="token keyword">var</span> <span class="token function-variable function">constructDistancedSequence</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">const</span> len <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>len<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">let</span> used <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">const</span> <span class="token function-variable function">backtrack</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">idx</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>idx <span class="token operator">==</span> len<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>res<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">!==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> <span class="token function">backtrack</span><span class="token punctuation">(</span>idx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>

		<span class="token comment">// 尝试在 res 中填入 n 到 1</span>
		<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> num <span class="token operator">=</span> n<span class="token punctuation">;</span> num <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">;</span> num<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token comment">// 剪枝</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span>used<span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
				<span class="token keyword">continue</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span>
			<span class="token keyword">const</span> next <span class="token operator">=</span> num <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">?</span> idx <span class="token operator">:</span> num <span class="token operator">+</span> idx<span class="token punctuation">;</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span>next <span class="token operator">&gt;=</span> len <span class="token operator">||</span> res<span class="token punctuation">[</span>next<span class="token punctuation">]</span> <span class="token operator">!==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
				<span class="token keyword">continue</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span>

			<span class="token comment">// 放置 num</span>
			res<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">=</span> res<span class="token punctuation">[</span>next<span class="token punctuation">]</span> <span class="token operator">=</span> num<span class="token punctuation">;</span>
			used<span class="token punctuation">[</span>num<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>

			<span class="token comment">// 递归</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">backtrack</span><span class="token punctuation">(</span>idx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
				<span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span>

			<span class="token comment">// 回溯</span>
			res<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">=</span> res<span class="token punctuation">[</span>next<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
			used<span class="token punctuation">[</span>num<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span><span class="token punctuation">;</span>
	<span class="token function">backtrack</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> res<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="相关题目" tabindex="-1"><a class="header-anchor" href="#相关题目" aria-hidden="true">#</a> 相关题目</h2>`,38),y=n("thead",null,[n("tr",null,[n("th",{style:{"text-align":"center"}},"题号"),n("th",{style:{"text-align":"left"}},"标题"),n("th",{style:{"text-align":"center"}},"题解"),n("th",{style:{"text-align":"left"}},"标签"),n("th",{style:{"text-align":"center"}},"难度"),n("th",{style:{"text-align":"center"}},"力扣")])],-1),w=n("td",{style:{"text-align":"center"}},"2597",-1),q=n("td",{style:{"text-align":"left"}},"美丽子集的数目",-1),O=n("td",{style:{"text-align":"center"}},null,-1),j={style:{"text-align":"left"}},E=n("code",null,"数组",-1),C=n("code",null,"哈希表",-1),I=n("code",null,"数学",-1),L=n("code",null,"4+",-1),N=n("td",{style:{"text-align":"center"}},"🟠",-1),V={style:{"text-align":"center"}},B={href:"https://leetcode.cn/problems/the-number-of-beautiful-subsets",target:"_blank",rel:"noopener noreferrer"},A={href:"https://leetcode.com/problems/the-number-of-beautiful-subsets",target:"_blank",rel:"noopener noreferrer"};function R(T,F){const p=c("font"),t=c("RouterLink"),o=c("ExternalLinkIcon");return i(),d("div",null,[m,n("p",null,[s("🟠 "),e(p,{color:"#ffb800"},{default:a(()=>[s("Medium")]),_:1}),s("  🔖  "),e(t,{to:"/tag/array.html"},{default:a(()=>[h]),_:1}),s(),e(t,{to:"/tag/backtracking.html"},{default:a(()=>[b]),_:1}),s("  🔗 "),n("a",g,[v,e(o)]),s(),n("a",f,[_,e(o)])]),x,r(" prettier-ignore "),n("table",null,[y,n("tbody",null,[n("tr",null,[w,q,O,n("td",j,[e(t,{to:"/tag/array.html"},{default:a(()=>[E]),_:1}),s(),e(t,{to:"/tag/hash-table.html"},{default:a(()=>[C]),_:1}),s(),e(t,{to:"/tag/math.html"},{default:a(()=>[I]),_:1}),s(),L]),N,n("td",V,[n("a",B,[s("🀄️"),e(o)]),s(),n("a",A,[s("🔗"),e(o)])])])])])])}const D=l(k,[["render",R],["__file","1718.html.vue"]]);export{D as default};
