import{_ as l,r as p,o as i,c as r,a as n,b as s,d as a,w as t,f as u,e as d}from"./app-aQeLbVW9.js";const k={},h=n("h1",{id:"_227-基本计算器-ii",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_227-基本计算器-ii","aria-hidden":"true"},"#"),s(" 227. 基本计算器 II")],-1),m=n("code",null,"栈",-1),_=n("code",null,"数学",-1),g=n("code",null,"字符串",-1),b={href:"https://leetcode.cn/problems/basic-calculator-ii",target:"_blank",rel:"noopener noreferrer"},v=n("code",null,"力扣",-1),f={href:"https://leetcode.com/problems/basic-calculator-ii",target:"_blank",rel:"noopener noreferrer"},x=n("code",null,"LeetCode",-1),y=d(`<h2 id="题目" tabindex="-1"><a class="header-anchor" href="#题目" aria-hidden="true">#</a> 题目</h2><p>Given a string <code>s</code> which represents an expression, <em>evaluate this expression and return its value</em>.</p><p>The integer division should truncate toward zero.</p><p>You may assume that the given expression is always valid. All intermediate results will be in the range of <code>[-2^31, 2^31 - 1]</code>.</p><p><strong>Note:</strong> You are not allowed to use any built-in function which evaluates strings as mathematical expressions, such as <code>eval()</code>.</p><p><strong>Example 1:</strong></p><blockquote><p>Input: s = &quot;3+2*2&quot;</p><p>Output: 7</p></blockquote><p><strong>Example 2:</strong></p><blockquote><p>Input: s = &quot; 3/2 &quot;</p><p>Output: 1</p></blockquote><p><strong>Example 3:</strong></p><blockquote><p>Input: s = &quot; 3+5 / 2 &quot;</p><p>Output: 5</p></blockquote><p><strong>Constraints:</strong></p><ul><li><code>1 &lt;= s.length &lt;= 3 * 10^5</code></li><li><code>s</code> consists of integers and operators <code>(&#39;+&#39;, &#39;-&#39;, &#39;*&#39;, &#39;/&#39;)</code> separated by some number of spaces.</li><li><code>s</code> represents <strong>a valid expression</strong>.</li><li>All the integers in the expression are non-negative integers in the range <code>[0, 2^31 - 1]</code>.</li><li>The answer is <strong>guaranteed</strong> to fit in a <strong>32-bit integer</strong>.</li></ul><h2 id="题目大意" tabindex="-1"><a class="header-anchor" href="#题目大意" aria-hidden="true">#</a> 题目大意</h2><p>给你一个字符串表达式 <code>s</code> ，请你实现一个基本计算器来计算并返回它的值。</p><p>整数除法仅保留整数部分。</p><p>你可以假设给定的表达式总是有效的。所有中间结果将在 <code>[-2^31, 2^31 - 1]</code> 的范围内。</p><p>**注意：**不允许使用任何将字符串作为数学表达式计算的内置函数，比如 <code>eval()</code> 。</p><h2 id="解题思路" tabindex="-1"><a class="header-anchor" href="#解题思路" aria-hidden="true">#</a> 解题思路</h2><ol><li><p><strong>使用栈</strong>：</p><ul><li>采用栈来存储计算过程中间的结果。</li><li>遇到乘法和除法时立即计算并将结果放入栈中；遇到加法和减法时，先将当前数字压入栈中，后续处理。</li></ul></li><li><p><strong>遍历字符串</strong>：</p><ul><li>遍历输入字符串，逐个字符处理： <ul><li>当遇到数字时，构建完整的数字（可能是多位数）。</li><li>当遇到操作符时，根据上一个操作符决定如何处理栈。</li><li>注意处理空格，确保只在遇到有效操作符时进行处理。</li></ul></li></ul></li><li><p><strong>处理操作符</strong>：</p><ul><li>使用一个变量来记录当前操作符。根据当前操作符的类型，决定是将当前数字推入栈中、还是执行乘法或除法。</li></ul></li><li><p><strong>最后计算结果</strong>：</p><ul><li>遍历完字符串后，栈中会存储所有的结果。最终只需将栈中的所有数字相加。</li></ul></li></ol><h4 id="复杂度分析" tabindex="-1"><a class="header-anchor" href="#复杂度分析" aria-hidden="true">#</a> 复杂度分析</h4><ul><li><strong>时间复杂度</strong>：<code>O(n)</code>，其中 <code>n</code> 是输入字符串的长度。需要遍历字符串一次。</li><li><strong>空间复杂度</strong>：<code>O(n)</code>，用于存储栈中间结果。</li></ul><h2 id="代码" tabindex="-1"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>string<span class="token punctuation">}</span></span> <span class="token parameter">s</span>
 * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">}</span></span>
 */</span>
<span class="token keyword">var</span> <span class="token function-variable function">calculate</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">s</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">const</span> <span class="token function-variable function">isDigit</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">char</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> char <span class="token operator">&gt;=</span> <span class="token string">&#39;0&#39;</span> <span class="token operator">&amp;&amp;</span> char <span class="token operator">&lt;=</span> <span class="token string">&#39;9&#39;</span><span class="token punctuation">;</span>
	<span class="token keyword">let</span> stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
		sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>
		operation <span class="token operator">=</span> <span class="token string">&#39;+&#39;</span><span class="token punctuation">;</span> <span class="token comment">// 初始操作符</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> s<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">let</span> char <span class="token operator">=</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>

		<span class="token comment">// 如果是数字，构建完整的数字</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isDigit</span><span class="token punctuation">(</span>char<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			sum <span class="token operator">=</span> sum <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token function">Number</span><span class="token punctuation">(</span>char<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>

		<span class="token comment">// 跳过空格</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>char <span class="token operator">==</span> <span class="token string">&#39; &#39;</span> <span class="token operator">&amp;&amp;</span> i <span class="token operator">&lt;</span> s<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">continue</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>

		<span class="token comment">// 如果是操作符或者到达字符串末尾</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;+&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;-&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;*&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;/&#39;</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>char<span class="token punctuation">)</span> <span class="token operator">||</span> i <span class="token operator">===</span> s<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span>operation <span class="token operator">==</span> <span class="token string">&#39;+&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
				stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>operation <span class="token operator">==</span> <span class="token string">&#39;-&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
				stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token operator">-</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>operation <span class="token operator">==</span> <span class="token string">&#39;*&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
				stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> sum<span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>operation <span class="token operator">==</span> <span class="token string">&#39;/&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
				stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> sum<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span>
			<span class="token comment">// 更新当前操作符</span>
			operation <span class="token operator">=</span> char<span class="token punctuation">;</span>
			sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> stack<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> a <span class="token operator">+</span> b<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="相关题目" tabindex="-1"><a class="header-anchor" href="#相关题目" aria-hidden="true">#</a> 相关题目</h2>`,25),w=n("thead",null,[n("tr",null,[n("th",{style:{"text-align":"center"}},"题号"),n("th",{style:{"text-align":"left"}},"标题"),n("th",{style:{"text-align":"center"}},"题解"),n("th",{style:{"text-align":"left"}},"标签"),n("th",{style:{"text-align":"center"}},"难度"),n("th",{style:{"text-align":"center"}},"力扣")])],-1),q=n("td",{style:{"text-align":"center"}},"224",-1),I=n("td",{style:{"text-align":"left"}},"基本计算器",-1),N={style:{"text-align":"center"}},E={style:{"text-align":"left"}},C=n("code",null,"栈",-1),L=n("code",null,"递归",-1),O=n("code",null,"数学",-1),V=n("code",null,"1+",-1),j=n("td",{style:{"text-align":"center"}},"🔴",-1),B={style:{"text-align":"center"}},T={href:"https://leetcode.cn/problems/basic-calculator",target:"_blank",rel:"noopener noreferrer"},A={href:"https://leetcode.com/problems/basic-calculator",target:"_blank",rel:"noopener noreferrer"},D=n("td",{style:{"text-align":"center"}},"282",-1),R=n("td",{style:{"text-align":"left"}},"给表达式添加运算符",-1),Y=n("td",{style:{"text-align":"center"}},null,-1),z={style:{"text-align":"left"}},G=n("code",null,"数学",-1),M=n("code",null,"字符串",-1),S=n("code",null,"回溯",-1),F=n("td",{style:{"text-align":"center"}},"🔴",-1),H={style:{"text-align":"center"}},J={href:"https://leetcode.cn/problems/expression-add-operators",target:"_blank",rel:"noopener noreferrer"},K={href:"https://leetcode.com/problems/expression-add-operators",target:"_blank",rel:"noopener noreferrer"},P=n("td",{style:{"text-align":"center"}},"772",-1),Q=n("td",{style:{"text-align":"left"}},"基本计算器 III 🔒",-1),U={style:{"text-align":"center"}},W={style:{"text-align":"left"}},X=n("code",null,"栈",-1),Z=n("code",null,"递归",-1),$=n("code",null,"数学",-1),nn=n("code",null,"1+",-1),sn=n("td",{style:{"text-align":"center"}},"🔴",-1),an={style:{"text-align":"center"}},tn={href:"https://leetcode.cn/problems/basic-calculator-iii",target:"_blank",rel:"noopener noreferrer"},en={href:"https://leetcode.com/problems/basic-calculator-iii",target:"_blank",rel:"noopener noreferrer"};function on(pn,cn){const c=p("font"),e=p("RouterLink"),o=p("ExternalLinkIcon");return i(),r("div",null,[h,n("p",null,[s("🟠 "),a(c,{color:"#ffb800"},{default:t(()=>[s("Medium")]),_:1}),s("  🔖  "),a(e,{to:"/tag/stack.html"},{default:t(()=>[m]),_:1}),s(),a(e,{to:"/tag/math.html"},{default:t(()=>[_]),_:1}),s(),a(e,{to:"/tag/string.html"},{default:t(()=>[g]),_:1}),s("  🔗 "),n("a",b,[v,a(o)]),s(),n("a",f,[x,a(o)])]),y,u(" prettier-ignore "),n("table",null,[w,n("tbody",null,[n("tr",null,[q,I,n("td",N,[a(e,{to:"/problem/0224.html"},{default:t(()=>[s("[✓]")]),_:1})]),n("td",E,[a(e,{to:"/tag/stack.html"},{default:t(()=>[C]),_:1}),s(),a(e,{to:"/tag/recursion.html"},{default:t(()=>[L]),_:1}),s(),a(e,{to:"/tag/math.html"},{default:t(()=>[O]),_:1}),s(),V]),j,n("td",B,[n("a",T,[s("🀄️"),a(o)]),s(),n("a",A,[s("🔗"),a(o)])])]),n("tr",null,[D,R,Y,n("td",z,[a(e,{to:"/tag/math.html"},{default:t(()=>[G]),_:1}),s(),a(e,{to:"/tag/string.html"},{default:t(()=>[M]),_:1}),s(),a(e,{to:"/tag/backtracking.html"},{default:t(()=>[S]),_:1})]),F,n("td",H,[n("a",J,[s("🀄️"),a(o)]),s(),n("a",K,[s("🔗"),a(o)])])]),n("tr",null,[P,Q,n("td",U,[a(e,{to:"/problem/0772.html"},{default:t(()=>[s("[✓]")]),_:1})]),n("td",W,[a(e,{to:"/tag/stack.html"},{default:t(()=>[X]),_:1}),s(),a(e,{to:"/tag/recursion.html"},{default:t(()=>[Z]),_:1}),s(),a(e,{to:"/tag/math.html"},{default:t(()=>[$]),_:1}),s(),nn]),sn,n("td",an,[n("a",tn,[s("🀄️"),a(o)]),s(),n("a",en,[s("🔗"),a(o)])])])])])])}const rn=l(k,[["render",on],["__file","0227.html.vue"]]);export{rn as default};
