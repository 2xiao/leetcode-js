import{_ as l,r as o,o as r,c as i,a as n,b as s,d as a,w as t,e as u}from"./app-fBVbqwGY.js";const d={},k=n("h1",{id:"_166-分数到小数",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_166-分数到小数","aria-hidden":"true"},"#"),s(" 166. 分数到小数")],-1),m=n("code",null,"哈希表",-1),v=n("code",null,"数学",-1),b=n("code",null,"字符串",-1),g={href:"https://leetcode.cn/problems/fraction-to-recurring-decimal",target:"_blank",rel:"noopener noreferrer"},h=n("code",null,"力扣",-1),f={href:"https://leetcode.com/problems/fraction-to-recurring-decimal",target:"_blank",rel:"noopener noreferrer"},_=n("code",null,"LeetCode",-1),w=u(`<h2 id="题目" tabindex="-1"><a class="header-anchor" href="#题目" aria-hidden="true">#</a> 题目</h2><p>Given two integers representing the <code>numerator</code> and <code>denominator</code> of a fraction, return <em>the fraction in string format</em>.</p><p>If the fractional part is repeating, enclose the repeating part in parentheses.</p><p>If multiple answers are possible, return <strong>any of them</strong>.</p><p>It is <strong>guaranteed</strong> that the length of the answer string is less than <code>10^4</code> for all the given inputs.</p><p><strong>Example 1:</strong></p><blockquote><p>Input: numerator = 1, denominator = 2</p><p>Output: &quot;0.5&quot;</p></blockquote><p><strong>Example 2:</strong></p><blockquote><p>Input: numerator = 2, denominator = 1</p><p>Output: &quot;2&quot;</p></blockquote><p><strong>Example 3:</strong></p><blockquote><p>Input: numerator = 4, denominator = 333</p><p>Output: &quot;0.(012)&quot;</p></blockquote><p><strong>Constraints:</strong></p><ul><li><code>-2^31 &lt;= numerator, denominator &lt;= 2^31 - 1</code></li><li><code>denominator != 0</code></li></ul><h2 id="题目大意" tabindex="-1"><a class="header-anchor" href="#题目大意" aria-hidden="true">#</a> 题目大意</h2><p>给定两个整数，分别表示分数的分子 <code>numerator</code> 和分母 <code>denominator</code>，以 <strong>字符串形式返回小数</strong> 。</p><p>如果小数部分为循环小数，则将循环的部分括在括号内。</p><p>如果存在多个答案，只需返回 <strong>任意一个</strong> 。</p><p>对于所有给定的输入，<strong>保证</strong> 答案字符串的长度小于 <code>10^4</code> 。</p><p><strong>示例 1：</strong></p><blockquote><p><strong>输入：</strong> numerator = 1, denominator = 2</p><p><strong>输出：</strong> &quot;0.5&quot;</p></blockquote><p><strong>示例 2：</strong></p><blockquote><p><strong>输入：</strong> numerator = 2, denominator = 1</p><p><strong>输出：</strong> &quot;2&quot;</p></blockquote><p><strong>示例 3：</strong></p><blockquote><p><strong>输入：</strong> numerator = 4, denominator = 333</p><p><strong>输出：</strong> &quot;0.(012)&quot;</p></blockquote><p><strong>提示：</strong></p><ul><li><code>-2^31 &lt;= numerator, denominator &lt;= 2^31 - 1</code></li><li><code>denominator != 0</code></li></ul><h2 id="解题思路" tabindex="-1"><a class="header-anchor" href="#解题思路" aria-hidden="true">#</a> 解题思路</h2><ol><li><p><strong>处理正负号</strong>：</p><ul><li>如果分子和分母的符号不同，结果应加上 <code>-</code> 号。</li><li>取分子和分母的绝对值，方便后续计算。</li></ul></li><li><p><strong>计算整数部分</strong>：</p><ul><li>使用 <code>Math.floor(numerator / denominator)</code> 得到整数部分。</li><li>将余数 <code>remainder</code> 初始化为 <code>numerator % denominator</code>。</li></ul></li><li><p><strong>处理小数部分</strong>：</p><ul><li>如果余数为 <code>0</code>，直接返回结果。</li><li>否则，在结果中添加小数点，并开始计算小数部分。</li></ul></li><li><p><strong>检测循环节</strong>：</p><ul><li>使用 <code>Map</code> 来存储每个余数对应的结果字符串的索引位置。</li><li>如果某个余数重复出现，说明开始进入循环节： <ul><li>取出第一次出现该余数的位置。</li><li>将循环节用括号括起来。</li></ul></li><li>如果余数变为 <code>0</code>，说明计算结束，没有循环。</li></ul></li><li><p><strong>拼接结果并返回</strong>：</p><ul><li>返回完整的结果字符串。</li></ul></li></ol><h4 id="复杂度分析" tabindex="-1"><a class="header-anchor" href="#复杂度分析" aria-hidden="true">#</a> 复杂度分析</h4><ul><li><strong>时间复杂度</strong>：<code>O(n)</code>，其中 <code>n</code> 是分母的值。每次循环中，我们将余数乘以 10 并计算新的商。每个余数只会出现一次，，因此循环最多进行 <code>O(n)</code> 次。</li><li><strong>空间复杂度</strong>：<code>O(n)</code>，使用 <code>Map</code> 来记录余数的位置，最坏情况下存储的键值对数量等于分母的值。</li></ul><h2 id="代码" tabindex="-1"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">}</span></span> <span class="token parameter">numerator</span>
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">}</span></span> <span class="token parameter">denominator</span>
 * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>string<span class="token punctuation">}</span></span>
 */</span>
<span class="token keyword">var</span> <span class="token function-variable function">fractionToDecimal</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">numerator<span class="token punctuation">,</span> denominator</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">;</span>
	<span class="token keyword">let</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token comment">// 处理正负号</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>
		<span class="token punctuation">(</span>numerator <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> denominator <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">||</span>
		<span class="token punctuation">(</span>numerator <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> denominator <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
	<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		res <span class="token operator">+=</span> <span class="token string">&#39;-&#39;</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token comment">// 取分子和分母的绝对值</span>
	<span class="token keyword">const</span> num <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>numerator<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">const</span> den <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>denominator<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token comment">// 整数部分</span>
	res <span class="token operator">+=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>num <span class="token operator">/</span> den<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token comment">// 余数部分</span>
	<span class="token keyword">let</span> remiander <span class="token operator">=</span> num <span class="token operator">%</span> den<span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>remiander <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> res<span class="token punctuation">;</span>

	<span class="token comment">// 处理小数部分</span>
	res <span class="token operator">+=</span> <span class="token string">&#39;.&#39;</span><span class="token punctuation">;</span>

	<span class="token keyword">while</span> <span class="token punctuation">(</span>remiander <span class="token operator">!==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token comment">// 进入循环节</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>remiander<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">const</span> index <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>remiander<span class="token punctuation">)</span><span class="token punctuation">;</span>
			res <span class="token operator">=</span> res<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> index<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&#39;(&#39;</span> <span class="token operator">+</span> res<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&#39;)&#39;</span><span class="token punctuation">;</span>
			<span class="token keyword">break</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>

		map<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>remiander<span class="token punctuation">,</span> res<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>

		remiander <span class="token operator">*=</span> <span class="token number">10</span><span class="token punctuation">;</span>
		res <span class="token operator">+=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>remiander <span class="token operator">/</span> den<span class="token punctuation">)</span><span class="token punctuation">;</span>
		remiander <span class="token operator">%=</span> den<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> res<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,32);function q(x,y){const c=o("font"),e=o("RouterLink"),p=o("ExternalLinkIcon");return r(),i("div",null,[k,n("p",null,[s("🟠 "),a(c,{color:"#ffb800"},{default:t(()=>[s("Medium")]),_:1}),s("  🔖  "),a(e,{to:"/tag/hash-table.html"},{default:t(()=>[m]),_:1}),s(),a(e,{to:"/tag/math.html"},{default:t(()=>[v]),_:1}),s(),a(e,{to:"/tag/string.html"},{default:t(()=>[b]),_:1}),s("  🔗 "),n("a",g,[h,a(p)]),s(),n("a",f,[_,a(p)])]),w])}const I=l(d,[["render",q],["__file","0166.html.vue"]]);export{I as default};
