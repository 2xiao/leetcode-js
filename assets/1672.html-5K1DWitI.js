import{_ as l,r as a,o as r,c as i,a as n,b as s,d as t,w as e,e as u}from"./app-aQeLbVW9.js";const d={},h=n("h1",{id:"_1672-最富有客户的资产总量",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_1672-最富有客户的资产总量","aria-hidden":"true"},"#"),s(" 1672. 最富有客户的资产总量")],-1),m=n("code",null,"数组",-1),k=n("code",null,"矩阵",-1),g={href:"https://leetcode.cn/problems/richest-customer-wealth",target:"_blank",rel:"noopener noreferrer"},b=n("code",null,"力扣",-1),_={href:"https://leetcode.com/problems/richest-customer-wealth",target:"_blank",rel:"noopener noreferrer"},v=n("code",null,"LeetCode",-1),f=u(`<h2 id="题目" tabindex="-1"><a class="header-anchor" href="#题目" aria-hidden="true">#</a> 题目</h2><p>You are given an <code>m x n</code> integer grid <code>accounts</code> where <code>accounts[i][j]</code> is the amount of money the <code>i​​​​​​​​​​​th​​​​</code> customer has in the <code>j​​​​​​​​​​​th</code>​​​​ bank. Return <em>the <strong>wealth</strong> that the richest customer has.</em></p><p>A customer&#39;s <strong>wealth</strong> is the amount of money they have in all their bank accounts. The richest customer is the customer that has the maximum <strong>wealth</strong>.</p><p><strong>Example 1:</strong></p><blockquote><p>Input: accounts = [[1,2,3],[3,2,1]]</p><p>Output: 6</p><p><strong>Explanation</strong>:</p><p>1st customer has wealth = 1 + 2 + 3 = 6</p><p>2nd customer has wealth = 3 + 2 + 1 = 6</p><p>Both customers are considered the richest with a wealth of 6 each, so return 6.</p></blockquote><p><strong>Example 2:</strong></p><blockquote><p>Input: accounts = [[1,5],[7,3],[3,5]]</p><p>Output: 10</p><p><strong>Explanation</strong> :</p><p>1st customer has wealth = 6</p><p>2nd customer has wealth = 10</p><p>3rd customer has wealth = 8</p><p>The 2nd customer is the richest with a wealth of 10.</p></blockquote><p><strong>Example 3:</strong></p><blockquote><p>Input: accounts = [[2,8,7],[7,1,3],[1,9,5]]</p><p>Output: 17</p></blockquote><p><strong>Constraints:</strong></p><ul><li><code>m == accounts.length</code></li><li><code>n == accounts[i].length</code></li><li><code>1 &lt;= m, n &lt;= 50</code></li><li><code>1 &lt;= accounts[i][j] &lt;= 100</code></li></ul><h2 id="题目大意" tabindex="-1"><a class="header-anchor" href="#题目大意" aria-hidden="true">#</a> 题目大意</h2><p>给你一个 <code>m x n</code> 的整数网格 <code>accounts</code> ，其中 <code>accounts[i][j]</code> 是第 <code>i​​​​​​​​​​​​</code> 位客户在第 <code>j</code> 家银行托管的资产数量。返回最富有客户所拥有的 <strong>资产总量</strong> 。</p><p>客户的 <strong>资产总量</strong> 就是他们在各家银行托管的资产数量之和。最富有客户就是 <strong>资产总量</strong> 最大的客户。</p><p><strong>示例 1：</strong></p><blockquote><p><strong>输入：</strong> accounts = [[1,2,3],[3,2,1]]</p><p><strong>输出：</strong> 6</p><p><strong>解释：</strong></p><p>第 1 位客户的资产总量 = 1 + 2 + 3 = 6</p><p>第 2 位客户的资产总量 = 3 + 2 + 1 = 6</p><p>两位客户都是最富有的，资产总量都是 6 ，所以返回 6 。</p></blockquote><p><strong>示例 2：</strong></p><blockquote><p><strong>输入：</strong> accounts = [[1,5],[7,3],[3,5]]</p><p><strong>输出：</strong> 10</p><p><strong>解释：</strong></p><p>第 1 位客户的资产总量 = 6</p><p>第 2 位客户的资产总量 = 10</p><p>第 3 位客户的资产总量 = 8</p><p>第 2 位客户是最富有的，资产总量是 10</p></blockquote><p><strong>示例 3：</strong></p><blockquote><p><strong>输入：</strong> accounts = [[2,8,7],[7,1,3],[1,9,5]]</p><p><strong>输出：</strong> 17</p></blockquote><p><strong>提示：</strong></p><ul><li><code>m == accounts.length</code></li><li><code>n == accounts[i].length</code></li><li><code>1 &lt;= m, n &lt;= 50</code></li><li><code>1 &lt;= accounts[i][j] &lt;= 100</code></li></ul><h2 id="解题思路" tabindex="-1"><a class="header-anchor" href="#解题思路" aria-hidden="true">#</a> 解题思路</h2><ol><li>遍历客户资产数组 <code>accounts</code>。</li><li>对每个客户资产 <code>row</code> 使用 <code>reduce</code> 方法计算总和。</li><li>使用 <code>Math.max</code> 来记录最大资产值。</li><li>最后返回最大资产值。</li></ol><h4 id="复杂度分析" tabindex="-1"><a class="header-anchor" href="#复杂度分析" aria-hidden="true">#</a> 复杂度分析</h4><ul><li><strong>时间复杂度</strong>：<code>O(m * n)</code><ul><li>外层遍历 <code>accounts</code> 的每一行，复杂度为 <code>O(m)</code>。</li><li>每行使用 <code>reduce</code> 求和，复杂度为 <code>O(n)</code>。</li><li>因此，总时间复杂度为 <code>O(m * n)</code>。</li></ul></li><li><strong>空间复杂度</strong>：<code>O(1)</code>，没有使用额外的数据结构。</li></ul><h2 id="代码" tabindex="-1"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span> <span class="token parameter">accounts</span>
 * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">}</span></span>
 */</span>
<span class="token keyword">var</span> <span class="token function-variable function">maximumWealth</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">accounts</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">let</span> maxWealth <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> row <span class="token keyword">of</span> accounts<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		maxWealth <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>
			maxWealth<span class="token punctuation">,</span>
			row<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">acc<span class="token punctuation">,</span> cur</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> acc <span class="token operator">+</span> cur<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
		<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> maxWealth<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,28);function x(w,y){const p=a("font"),o=a("RouterLink"),c=a("ExternalLinkIcon");return r(),i("div",null,[h,n("p",null,[s("🟢 "),t(p,{color:"#15bd66"},{default:e(()=>[s("Easy")]),_:1}),s("  🔖  "),t(o,{to:"/tag/array.html"},{default:e(()=>[m]),_:1}),s(),t(o,{to:"/tag/matrix.html"},{default:e(()=>[k]),_:1}),s("  🔗 "),n("a",g,[b,t(c)]),s(),n("a",_,[v,t(c)])]),f])}const j=l(d,[["render",x],["__file","1672.html.vue"]]);export{j as default};
