import{_ as i,r as c,o as d,c as k,a as n,b as s,d as e,w as t,f as m,e as h}from"./app-B5EG-zH0.js";const b={},g=n("h1",{id:"_873-最长的斐波那契子序列的长度",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_873-最长的斐波那契子序列的长度","aria-hidden":"true"},"#"),s(" 873. 最长的斐波那契子序列的长度")],-1),v=n("code",null,"数组",-1),_=n("code",null,"哈希表",-1),x=n("code",null,"动态规划",-1),f={href:"https://leetcode.cn/problems/length-of-longest-fibonacci-subsequence",target:"_blank",rel:"noopener noreferrer"},y=n("code",null,"力扣",-1),w={href:"https://leetcode.com/problems/length-of-longest-fibonacci-subsequence",target:"_blank",rel:"noopener noreferrer"},L=n("code",null,"LeetCode",-1),q=h('<h2 id="题目" tabindex="-1"><a class="header-anchor" href="#题目" aria-hidden="true">#</a> 题目</h2><p>A sequence <code>x1, x2, ..., xn</code> is <em>Fibonacci-like</em> if:</p><ul><li><code>n &gt;= 3</code></li><li><code>xi + xi+1 == xi+2</code> for all <code>i + 2 &lt;= n</code></li></ul><p>Given a <strong>strictly increasing</strong> array <code>arr</code> of positive integers forming a sequence, return <em>the <strong>length</strong> of the longest Fibonacci-like subsequence of</em><code>arr</code>. If one does not exist, return <code>0</code>.</p><p>A <strong>subsequence</strong> is derived from another sequence <code>arr</code> by deleting any number of elements (including none) from <code>arr</code>, without changing the order of the remaining elements. For example, <code>[3, 5, 8]</code> is a subsequence of <code>[3, 4, 5, 6, 7, 8]</code>.</p><p><strong>Example 1:</strong></p><blockquote><p>Input: arr = [1,2,3,4,5,6,7,8]</p><p>Output: 5</p><p>Explanation: The longest subsequence that is fibonacci-like: [1,2,3,5,8].</p></blockquote><p><strong>Example 2:</strong></p><blockquote><p>Input: arr = [1,3,7,11,12,14,18]</p><p>Output: 3</p><p><strong>Explanation</strong> : The longest subsequence that is fibonacci-like: [1,11,12], [3,11,14] or [7,11,18].</p></blockquote><p><strong>Constraints:</strong></p><ul><li><code>3 &lt;= arr.length &lt;= 1000</code></li><li><code>1 &lt;= arr[i] &lt; arr[i + 1] &lt;= 10^9</code></li></ul><h2 id="题目大意" tabindex="-1"><a class="header-anchor" href="#题目大意" aria-hidden="true">#</a> 题目大意</h2><p>如果序列 <code>X_1, X_2, ..., X_n</code> 满足下列条件，就说它是 <em>斐波那契式</em> 的：</p><ul><li><code>n &gt;= 3</code></li><li>对于所有 <code>i + 2 &lt;= n</code>，都有 <code>X_i + X_{i+1} = X_{i+2}</code></li></ul><p>给定一个<strong>严格递增</strong> 的正整数数组形成序列 arr ，找到 arr 中最长的斐波那契式的子序列的长度。如果一个不存在，返回 0 。</p><p><em>（回想一下，子序列是从原序列 arr 中派生出来的，它从 arr 中删掉任意数量的元素（也可以不删），而不改变其余元素的顺序。例如， <code>[3, 5, 8]</code> 是 <code>[3, 4, 5, 6, 7, 8]</code> 的一个子序列）</em></p><p><strong>示例 1：</strong></p><blockquote><p><strong>输入:</strong> arr =[1,2,3,4,5,6,7,8]</p><p><strong>输出:</strong> 5</p><p><strong>解释:</strong> 最长的斐波那契式子序列为 [1,2,3,5,8] 。</p></blockquote><p><strong>示例 2：</strong></p><blockquote><p><strong>输入:</strong> arr =[1,3,7,11,12,14,18]</p><p><strong>输出:</strong> 3</p><p><strong>解释</strong> : 最长的斐波那契式子序列有 [1,11,12]、[3,11,14] 以及 [7,11,18] 。</p></blockquote><p><strong>提示：</strong></p><ul><li><code>3 &lt;= arr.length &lt;= 1000</code></li><li><code>1 &lt;= arr[i] &lt; arr[i + 1] &lt;= 10^9</code></li></ul><h2 id="解题思路" tabindex="-1"><a class="header-anchor" href="#解题思路" aria-hidden="true">#</a> 解题思路</h2><h3 id="思路一-动态规划-双指针" tabindex="-1"><a class="header-anchor" href="#思路一-动态规划-双指针" aria-hidden="true">#</a> 思路一：动态规划 + 双指针</h3><ol><li><p>状态定义 我们用 <code>dp[cur][next]</code> 表示以 <code>arr[cur]</code> 和 <code>arr[next]</code> 作为最后两个元素的最长斐波那契式子序列的长度。</p></li><li><p>状态转移 我们遍历 <code>next</code> 作为子序列的最后一个元素，使用 <code>prev</code> 和 <code>cur</code> 作为前两个元素：</p></li></ol><ul><li><strong>如果 <code>arr[prev] + arr[cur] &gt; arr[next]</code></strong>，说明当前 <code>prev</code> 太大了，<code>cur--</code>（向前调整 <code>cur</code>）。</li><li><strong>如果 <code>arr[prev] + arr[cur] &lt; arr[next]</code></strong>，说明 <code>prev</code> 太小了，<code>prev++</code>（向后调整 <code>prev</code>）。</li><li><strong>如果 <code>arr[prev] + arr[cur] == arr[next]</code></strong>，说明 <code>arr[prev]</code>、<code>arr[cur]</code>、<code>arr[next]</code> 可以组成斐波那契式子序列： <ul><li><code>dp[cur][next] = dp[prev][cur] + 1</code></li><li>更新最长子序列的长度 <code>maxLen</code></li><li>继续向前寻找新的 <code>prev</code> 和 <code>cur</code> 组合。</li></ul></li></ul><ol start="3"><li>初始状态</li></ol><ul><li><code>dp[cur][next]</code> 初始值为 0，表示默认没有匹配的斐波那契式子序列。</li><li><code>maxLen</code> 记录最长的序列长度，初始化为 0。</li></ul><ol start="4"><li>终止条件</li></ol><ul><li>遍历完整个数组后，如果 <code>maxLen &gt; 0</code>，说明存在符合要求的序列，返回 <code>maxLen + 2</code>（因为 <code>dp[cur][next]</code> 记录的是额外的长度，需要加上 <code>prev</code> 和 <code>cur</code>）。</li><li>否则返回 <code>0</code>（表示不存在符合要求的斐波那契子序列）。</li></ul><h4 id="复杂度分析" tabindex="-1"><a class="header-anchor" href="#复杂度分析" aria-hidden="true">#</a> 复杂度分析</h4><ul><li><strong>时间复杂度</strong>：<code>O(n^2)</code>，遍历所有可能的 <code>(prev, cur, next)</code> 组合。</li><li><strong>空间复杂度</strong>：<code>O(n^2)</code>，使用 <code>dp</code> 数组存储状态。</li></ul><hr><h3 id="思路二-暴力遍历" tabindex="-1"><a class="header-anchor" href="#思路二-暴力遍历" aria-hidden="true">#</a> 思路二：暴力遍历</h3><ol><li><p>枚举所有起点 我们尝试所有 <code>arr[i]</code> 和 <code>arr[j]</code> 作为子序列的前两个元素 <code>(prev, cur)</code>，然后查找后续元素是否满足斐波那契关系。</p></li><li><p>查找后续元素</p></li></ol><ul><li>计算 <code>next = prev + cur</code>，判断 <code>next</code> 是否在 <code>arr</code> 中： <ul><li>如果 <code>next</code> 存在，则更新 <code>prev = cur</code>，<code>cur = next</code>，长度 <code>len++</code>，继续查找。</li><li>如果 <code>next</code> 不存在，则停止，记录 <code>maxLen</code>。</li></ul></li></ul><ol start="3"><li>终止条件</li></ol><ul><li>遍历完整个数组后，返回 <code>maxLen</code> 作为最长子序列的长度。</li></ul><h4 id="复杂度分析-1" tabindex="-1"><a class="header-anchor" href="#复杂度分析-1" aria-hidden="true">#</a> 复杂度分析</h4><ul><li><strong>时间复杂度</strong>：<code>O(n^2 logM)</code>，其中 <code>M</code> 为 <code>arr</code> 的最大元素，查找操作 <code>while(Set.has())</code> 近似 <code>O(logM)</code>。</li><li><strong>空间复杂度</strong>：<code>O(n)</code>，使用 <code>Set</code> 存储 <code>arr</code> 中的元素，加速查找。</li></ul><h2 id="代码" tabindex="-1"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h2>',41),j=n("div",{class:"language-javascript line-numbers-mode","data-ext":"js"},[n("pre",{class:"language-javascript"},[n("code",null,[n("span",{class:"token doc-comment comment"},[s(`/**
 * `),n("span",{class:"token keyword"},"@param"),s(),n("span",{class:"token class-name"},[n("span",{class:"token punctuation"},"{"),s("number"),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"}")]),s(),n("span",{class:"token parameter"},"arr"),s(`
 * `),n("span",{class:"token keyword"},"@return"),s(),n("span",{class:"token class-name"},[n("span",{class:"token punctuation"},"{"),s("number"),n("span",{class:"token punctuation"},"}")]),s(`
 */`)]),s(`
`),n("span",{class:"token keyword"},"var"),s(),n("span",{class:"token function-variable function"},"lenLongestFibSubseq"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"function"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"arr"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
	`),n("span",{class:"token keyword"},"const"),s(" n "),n("span",{class:"token operator"},"="),s(" arr"),n("span",{class:"token punctuation"},"."),s("length"),n("span",{class:"token punctuation"},";"),s(`
	`),n("span",{class:"token keyword"},"let"),s(" dp "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"Array"),n("span",{class:"token punctuation"},"("),s("n"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"fill"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"map"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"=>"),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"Array"),n("span",{class:"token punctuation"},"("),s("n"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"fill"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
	`),n("span",{class:"token keyword"},"let"),s(" maxLen "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},";"),s(`
	`),n("span",{class:"token keyword"},"for"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"let"),s(" next "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"2"),n("span",{class:"token punctuation"},";"),s(" next "),n("span",{class:"token operator"},"<"),s(" n"),n("span",{class:"token punctuation"},";"),s(" next"),n("span",{class:"token operator"},"++"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
		`),n("span",{class:"token keyword"},"let"),s(" prev "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},";"),s(`
		`),n("span",{class:"token keyword"},"let"),s(" cur "),n("span",{class:"token operator"},"="),s(" next "),n("span",{class:"token operator"},"-"),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},";"),s(`
		`),n("span",{class:"token keyword"},"while"),s(),n("span",{class:"token punctuation"},"("),s("prev "),n("span",{class:"token operator"},"<"),s(" cur"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
			`),n("span",{class:"token keyword"},"let"),s(" sum "),n("span",{class:"token operator"},"="),s(" arr"),n("span",{class:"token punctuation"},"["),s("prev"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token operator"},"+"),s(" arr"),n("span",{class:"token punctuation"},"["),s("cur"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),s(`
			`),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("sum "),n("span",{class:"token operator"},">"),s(" arr"),n("span",{class:"token punctuation"},"["),s("next"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
				cur`),n("span",{class:"token operator"},"--"),n("span",{class:"token punctuation"},";"),s(`
			`),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"else"),s(),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("sum "),n("span",{class:"token operator"},"<"),s(" arr"),n("span",{class:"token punctuation"},"["),s("next"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
				prev`),n("span",{class:"token operator"},"++"),n("span",{class:"token punctuation"},";"),s(`
			`),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"else"),s(),n("span",{class:"token punctuation"},"{"),s(`
				dp`),n("span",{class:"token punctuation"},"["),s("cur"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"["),s("next"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token operator"},"="),s(" dp"),n("span",{class:"token punctuation"},"["),s("prev"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"["),s("cur"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token operator"},"+"),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},";"),s(`
				maxLen `),n("span",{class:"token operator"},"="),s(" Math"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"max"),n("span",{class:"token punctuation"},"("),s("maxLen"),n("span",{class:"token punctuation"},","),s(" dp"),n("span",{class:"token punctuation"},"["),s("cur"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"["),s("next"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
				cur`),n("span",{class:"token operator"},"--"),n("span",{class:"token punctuation"},";"),s(`
				prev`),n("span",{class:"token operator"},"++"),n("span",{class:"token punctuation"},";"),s(`
			`),n("span",{class:"token punctuation"},"}"),s(`
		`),n("span",{class:"token punctuation"},"}"),s(`
	`),n("span",{class:"token punctuation"},"}"),s(`
	`),n("span",{class:"token keyword"},"return"),s(" maxLen "),n("span",{class:"token operator"},"=="),s(),n("span",{class:"token number"},"0"),s(),n("span",{class:"token operator"},"?"),s(),n("span",{class:"token number"},"0"),s(),n("span",{class:"token operator"},":"),s(" maxLen "),n("span",{class:"token operator"},"+"),s(),n("span",{class:"token number"},"2"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),A=n("div",{class:"language-javascript line-numbers-mode","data-ext":"js"},[n("pre",{class:"language-javascript"},[n("code",null,[n("span",{class:"token doc-comment comment"},[s(`/**
 * `),n("span",{class:"token keyword"},"@param"),s(),n("span",{class:"token class-name"},[n("span",{class:"token punctuation"},"{"),s("number"),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"}")]),s(),n("span",{class:"token parameter"},"arr"),s(`
 * `),n("span",{class:"token keyword"},"@return"),s(),n("span",{class:"token class-name"},[n("span",{class:"token punctuation"},"{"),s("number"),n("span",{class:"token punctuation"},"}")]),s(`
 */`)]),s(`
`),n("span",{class:"token keyword"},"var"),s(),n("span",{class:"token function-variable function"},"lenLongestFibSubseq"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"function"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"arr"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
	`),n("span",{class:"token keyword"},"const"),s(" n "),n("span",{class:"token operator"},"="),s(" arr"),n("span",{class:"token punctuation"},"."),s("length"),n("span",{class:"token punctuation"},";"),s(`
	`),n("span",{class:"token keyword"},"let"),s(" numSet "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"Set"),n("span",{class:"token punctuation"},"("),s("arr"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
	`),n("span",{class:"token keyword"},"let"),s(" maxLen "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},";"),s(`
	`),n("span",{class:"token keyword"},"for"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"let"),s(" i "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},";"),s(" i "),n("span",{class:"token operator"},"<"),s(" n"),n("span",{class:"token punctuation"},";"),s(" i"),n("span",{class:"token operator"},"++"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
		`),n("span",{class:"token keyword"},"for"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"let"),s(" j "),n("span",{class:"token operator"},"="),s(" i "),n("span",{class:"token operator"},"+"),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},";"),s(" j "),n("span",{class:"token operator"},"<"),s(" n"),n("span",{class:"token punctuation"},";"),s(" j"),n("span",{class:"token operator"},"++"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
			`),n("span",{class:"token keyword"},"let"),s(" prev "),n("span",{class:"token operator"},"="),s(" arr"),n("span",{class:"token punctuation"},"["),s("j"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),s(`
			`),n("span",{class:"token keyword"},"let"),s(" cur "),n("span",{class:"token operator"},"="),s(" arr"),n("span",{class:"token punctuation"},"["),s("i"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token operator"},"+"),s(" arr"),n("span",{class:"token punctuation"},"["),s("j"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),s(`
			`),n("span",{class:"token keyword"},"let"),s(" len "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"2"),n("span",{class:"token punctuation"},";"),s(`
			`),n("span",{class:"token keyword"},"while"),s(),n("span",{class:"token punctuation"},"("),s("numSet"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"has"),n("span",{class:"token punctuation"},"("),s("cur"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
				len`),n("span",{class:"token operator"},"++"),n("span",{class:"token punctuation"},";"),s(`
				`),n("span",{class:"token keyword"},"let"),s(" temp "),n("span",{class:"token operator"},"="),s(" cur"),n("span",{class:"token punctuation"},";"),s(`
				cur `),n("span",{class:"token operator"},"+="),s(" prev"),n("span",{class:"token punctuation"},";"),s(`
				prev `),n("span",{class:"token operator"},"="),s(" temp"),n("span",{class:"token punctuation"},";"),s(`
				maxLen `),n("span",{class:"token operator"},"="),s(" Math"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"max"),n("span",{class:"token punctuation"},"("),s("maxLen"),n("span",{class:"token punctuation"},","),s(" len"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
			`),n("span",{class:"token punctuation"},"}"),s(`
		`),n("span",{class:"token punctuation"},"}"),s(`
	`),n("span",{class:"token punctuation"},"}"),s(`
	`),n("span",{class:"token keyword"},"return"),s(" maxLen"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),S=n("h2",{id:"相关题目",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#相关题目","aria-hidden":"true"},"#"),s(" 相关题目")],-1),C=n("thead",null,[n("tr",null,[n("th",{style:{"text-align":"center"}},"题号"),n("th",{style:{"text-align":"left"}},"标题"),n("th",{style:{"text-align":"center"}},"题解"),n("th",{style:{"text-align":"left"}},"标签"),n("th",{style:{"text-align":"center"}},"难度"),n("th",{style:{"text-align":"center"}},"力扣")])],-1),E=n("td",{style:{"text-align":"center"}},"509",-1),O=n("td",{style:{"text-align":"left"}},"斐波那契数",-1),M={style:{"text-align":"center"}},X={style:{"text-align":"left"}},F=n("code",null,"递归",-1),I=n("code",null,"记忆化搜索",-1),N=n("code",null,"数学",-1),T=n("code",null,"1+",-1),V=n("td",{style:{"text-align":"center"}},"🟢",-1),B={style:{"text-align":"center"}},R={href:"https://leetcode.cn/problems/fibonacci-number",target:"_blank",rel:"noopener noreferrer"},z={href:"https://leetcode.com/problems/fibonacci-number",target:"_blank",rel:"noopener noreferrer"};function G(D,H){const p=c("font"),a=c("RouterLink"),o=c("ExternalLinkIcon"),u=c("CodeTabs");return d(),k("div",null,[g,n("p",null,[s("🟠 "),e(p,{color:"#ffb800"},{default:t(()=>[s("Medium")]),_:1}),s("  🔖  "),e(a,{to:"/tag/array.html"},{default:t(()=>[v]),_:1}),s(),e(a,{to:"/tag/hash-table.html"},{default:t(()=>[_]),_:1}),s(),e(a,{to:"/tag/dynamic-programming.html"},{default:t(()=>[x]),_:1}),s("  🔗 "),n("a",f,[y,e(o)]),s(),n("a",w,[L,e(o)])]),q,e(u,{id:"312",data:[{id:"动态规划 + 双指针"},{id:"暴力遍历"}]},{title0:t(({value:l,isActive:r})=>[s("动态规划 + 双指针")]),title1:t(({value:l,isActive:r})=>[s("暴力遍历")]),tab0:t(({value:l,isActive:r})=>[j]),tab1:t(({value:l,isActive:r})=>[A]),_:1}),S,m(" prettier-ignore "),n("table",null,[C,n("tbody",null,[n("tr",null,[E,O,n("td",M,[e(a,{to:"/problem/0509.html"},{default:t(()=>[s("[✓]")]),_:1})]),n("td",X,[e(a,{to:"/tag/recursion.html"},{default:t(()=>[F]),_:1}),s(),e(a,{to:"/tag/memoization.html"},{default:t(()=>[I]),_:1}),s(),e(a,{to:"/tag/math.html"},{default:t(()=>[N]),_:1}),s(),T]),V,n("td",B,[n("a",R,[s("🀄️"),e(o)]),s(),n("a",z,[s("🔗"),e(o)])])])])])])}const K=i(b,[["render",G],["__file","0873.html.vue"]]);export{K as default};
