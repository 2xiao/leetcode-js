import{_ as c,r as l,o as p,c as r,a as n,b as s,d as t,w as e,f as d,e as u}from"./app-aQeLbVW9.js";const m={},g=n("h1",{id:"_1760-袋子里最少数目的球",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_1760-袋子里最少数目的球","aria-hidden":"true"},"#"),s(" 1760. 袋子里最少数目的球")],-1),k=n("code",null,"数组",-1),h=n("code",null,"二分查找",-1),b={href:"https://leetcode.cn/problems/minimum-limit-of-balls-in-a-bag",target:"_blank",rel:"noopener noreferrer"},_=n("code",null,"力扣",-1),f={href:"https://leetcode.com/problems/minimum-limit-of-balls-in-a-bag",target:"_blank",rel:"noopener noreferrer"},v=n("code",null,"LeetCode",-1),x=u(`<h2 id="题目" tabindex="-1"><a class="header-anchor" href="#题目" aria-hidden="true">#</a> 题目</h2><p>You are given an integer array <code>nums</code> where the <code>ith</code> bag contains <code>nums[i]</code> balls. You are also given an integer <code>maxOperations</code>.</p><p>You can perform the following operation at most <code>maxOperations</code> times:</p><ul><li>Take any bag of balls and divide it into two new bags with a <strong>positive</strong> number of balls. <blockquote><ul><li>For example, a bag of <code>5</code> balls can become two new bags of <code>1</code> and <code>4</code> balls, or two new bags of <code>2</code> and <code>3</code> balls.</li></ul></blockquote></li></ul><p>Your penalty is the <strong>maximum</strong> number of balls in a bag. You want to <strong>minimize</strong> your penalty after the operations.</p><p>Return <em>the minimum possible penalty after performing the operations</em>.</p><p><strong>Example 1:</strong></p><blockquote><p>Input: nums = [9], maxOperations = 2</p><p>Output: 3</p><p>Explanation:</p><ul><li>Divide the bag with 9 balls into two bags of sizes 6 and 3. [<strong><em>9</em></strong>] -&gt; [6,3].</li><li>Divide the bag with 6 balls into two bags of sizes 3 and 3. [<strong><em>6</em></strong> ,3] -&gt; [3,3,3].</li></ul><p>The bag with the most number of balls has 3 balls, so your penalty is 3 and you should return 3.</p></blockquote><p><strong>Example 2:</strong></p><blockquote><p>Input: nums = [2,4,8,2], maxOperations = 4</p><p>Output: 2</p><p>Explanation:</p><ul><li>Divide the bag with 8 balls into two bags of sizes 4 and 4. [2,4,<strong><em>8</em></strong> ,2] -&gt; [2,4,4,4,2].</li><li>Divide the bag with 4 balls into two bags of sizes 2 and 2. [2,<strong><em>4</em></strong> ,4,4,2] -&gt; [2,2,2,4,4,2].</li><li>Divide the bag with 4 balls into two bags of sizes 2 and 2. [2,2,2,<strong><em>4</em></strong> ,4,2] -&gt; [2,2,2,2,2,4,2].</li><li>Divide the bag with 4 balls into two bags of sizes 2 and 2. [2,2,2,2,2,<strong><em>4</em></strong> ,2] -&gt; [2,2,2,2,2,2,2,2].</li></ul><p>The bag with the most number of balls has 2 balls, so your penalty is 2, and you should return 2.</p></blockquote><p><strong>Constraints:</strong></p><ul><li><code>1 &lt;= nums.length &lt;= 10^5</code></li><li><code>1 &lt;= maxOperations, nums[i] &lt;= 10^9</code></li></ul><h2 id="题目大意" tabindex="-1"><a class="header-anchor" href="#题目大意" aria-hidden="true">#</a> 题目大意</h2><p>给你一个整数数组 <code>nums</code> ，其中 <code>nums[i]</code> 表示第 <code>i</code> 个袋子里球的数目。同时给你一个整数 <code>maxOperations</code> 。</p><p>你可以进行如下操作至多 <code>maxOperations</code> 次：</p><ul><li>选择任意一个袋子，并将袋子里的球分到 2 个新的袋子中，每个袋子里都有 <strong>正整数</strong> 个球。 <blockquote><ul><li>比方说，一个袋子里有 <code>5</code> 个球，你可以把它们分到两个新袋子里，分别有 <code>1</code> 个和 <code>4</code> 个球，或者分别有 <code>2</code> 个和 <code>3</code> 个球。</li></ul></blockquote></li></ul><p>你的开销是单个袋子里球数目的 <strong>最大值</strong> ，你想要 <strong>最小化</strong> 开销。</p><p>请你返回进行上述操作后的最小开销。</p><p><strong>示例 1：</strong></p><blockquote><p><strong>输入：</strong> nums = [9], maxOperations = 2</p><p><strong>输出：</strong> 3</p><p><strong>解释：</strong></p><ul><li>将装有 9 个球的袋子分成装有 6 个和 3 个球的袋子。[<strong>9</strong>] -&gt; [6,3] 。</li><li>将装有 6 个球的袋子分成装有 3 个和 3 个球的袋子。[<strong>6</strong> ,3] -&gt; [3,3,3] 。</li></ul><p>装有最多球的袋子里装有 3 个球，所以开销为 3 并返回 3 。</p></blockquote><p><strong>示例 2：</strong></p><blockquote><p><strong>输入：</strong> nums = [2,4,8,2], maxOperations = 4</p><p><strong>输出：</strong> 2</p><p><strong>解释：</strong></p><ul><li>将装有 8 个球的袋子分成装有 4 个和 4 个球的袋子。[2,4,<strong>8</strong> ,2] -&gt; [2,4,4,4,2] 。</li><li>将装有 4 个球的袋子分成装有 2 个和 2 个球的袋子。[2,<strong>4</strong> ,4,4,2] -&gt; [2,2,2,4,4,2] 。</li><li>将装有 4 个球的袋子分成装有 2 个和 2 个球的袋子。[2,2,2,<strong>4</strong> ,4,2] -&gt; [2,2,2,2,2,4,2] 。</li><li>将装有 4 个球的袋子分成装有 2 个和 2 个球的袋子。[2,2,2,2,2,<strong>4</strong> ,2] -&gt; [2,2,2,2,2,2,2,2] 。</li></ul><p>装有最多球的袋子里装有 2 个球，所以开销为 2 并返回 2 。</p></blockquote><p><strong>示例 3：</strong></p><blockquote><p><strong>输入：</strong> nums = [7,17], maxOperations = 2</p><p><strong>输出：</strong> 7</p></blockquote><p><strong>提示：</strong></p><ul><li><code>1 &lt;= nums.length &lt;= 10^5</code></li><li><code>1 &lt;= maxOperations, nums[i] &lt;= 10^9</code></li></ul><h2 id="解题思路" tabindex="-1"><a class="header-anchor" href="#解题思路" aria-hidden="true">#</a> 解题思路</h2><p><strong>核心目标</strong>是通过最多 <code>maxOperations</code> 次拆分，找到一个最小的「袋中最大球数」<code>size</code>，可以通过二分查找来实现。</p><ol><li><p><strong>定义二分范围</strong>：</p><ul><li>最小值：<code>left = 1</code>（袋子里至少有 1 个球）。</li><li>最大值：<code>right = max(nums)</code>（初始时的最大球数可能是最终结果）。</li></ul></li><li><p><strong>二分查找</strong>：</p><ul><li>尝试将 <code>size</code> 定为二分中点 <code>mid</code>，判断这个 <code>size</code> 是否可行。</li><li>如果 <code>mid</code> 可行，尝试更小的 <code>size</code>（<code>right = mid - 1</code>）。</li><li>如果 <code>mid</code> 不可行，尝试更大的 <code>size</code>（<code>left = mid + 1</code>）。</li></ul></li><li><p><strong>可行性验证函数</strong>：</p><ul><li>假设每个袋子能容纳的最大球数是 <code>size</code>。</li><li>对于每个袋子的球数 <code>num</code>，我们可以通过将 <code>num</code> 分成 <code>ceil(num / size)</code> 个袋子来实现，需要的操作数为 <code>ceil(num / size) - 1</code>。</li><li>遍历所有袋子，计算为了使所有袋子的最大球数不超过 <code>size</code>，所需的最小操作数是否小于等于 <code>maxOperations</code>。</li><li>如果操作数总和小于等于 <code>maxOperations</code>，说明这个 <code>size</code> 是可行的。</li></ul></li><li><p><strong>结果</strong>：</p><ul><li>二分完成后，<code>left</code> 即为满足条件的最小 <code>size</code>。</li></ul></li></ol><h4 id="复杂度分析" tabindex="-1"><a class="header-anchor" href="#复杂度分析" aria-hidden="true">#</a> 复杂度分析</h4><ul><li><strong>时间复杂度</strong>：<code>O(n * log(max(nums)))</code>，二分查找需要 <code>O(log(max(nums)))</code> 次迭代，每次迭代中，对 <code>nums</code> 进行遍历，计算可行性，时间复杂度为 <code>O(n)</code>。</li><li><strong>空间复杂度</strong>：<code>O(1)</code>，仅使用了常数空间。</li></ul><h2 id="代码" tabindex="-1"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span> <span class="token parameter">nums</span>
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">}</span></span> <span class="token parameter">maxOperations</span>
 * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">}</span></span>
 */</span>
<span class="token keyword">var</span> <span class="token function-variable function">minimumSize</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">nums<span class="token punctuation">,</span> maxOperations</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">// 定义最大袋子数量（原始袋子数量 + 最大操作数）</span>
	<span class="token keyword">const</span> totalBags <span class="token operator">=</span> nums<span class="token punctuation">.</span>length <span class="token operator">+</span> maxOperations<span class="token punctuation">;</span>

	<span class="token comment">// 判断给定的 size 是否可行</span>
	<span class="token keyword">const</span> <span class="token function-variable function">isVaild</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">size</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
		<span class="token keyword">let</span> bagsCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// 袋子总数</span>
		<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> num <span class="token keyword">of</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			bagsCount <span class="token operator">+=</span> Math<span class="token punctuation">.</span><span class="token function">ceil</span><span class="token punctuation">(</span>num <span class="token operator">/</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 每个袋子里的球需要的袋子数量</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">return</span> bagsCount <span class="token operator">&lt;=</span> totalBags<span class="token punctuation">;</span>
	<span class="token punctuation">}</span><span class="token punctuation">;</span>

	<span class="token comment">// 二分范围</span>
	<span class="token keyword">let</span> left <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>
		right <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token operator">...</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token comment">// 二分查找最小可行的 size</span>
	<span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;=</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">const</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>left <span class="token operator">+</span> right<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// 中点</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isVaild</span><span class="token punctuation">(</span>mid<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			right <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 尝试更小的 size</span>
		<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
			left <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 尝试更大的 size</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> left<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="相关题目" tabindex="-1"><a class="header-anchor" href="#相关题目" aria-hidden="true">#</a> 相关题目</h2>`,34),y=n("thead",null,[n("tr",null,[n("th",{style:{"text-align":"center"}},"题号"),n("th",{style:{"text-align":"left"}},"标题"),n("th",{style:{"text-align":"center"}},"题解"),n("th",{style:{"text-align":"left"}},"标签"),n("th",{style:{"text-align":"center"}},"难度"),n("th",{style:{"text-align":"center"}},"力扣")])],-1),w=n("td",{style:{"text-align":"center"}},"2064",-1),z=n("td",{style:{"text-align":"left"}},"分配给商店的最多商品的最小值",-1),O={style:{"text-align":"center"}},q={style:{"text-align":"left"}},C=n("code",null,"数组",-1),E=n("code",null,"二分查找",-1),V=n("td",{style:{"text-align":"center"}},"🟠",-1),D={style:{"text-align":"center"}},B={href:"https://leetcode.cn/problems/minimized-maximum-of-products-distributed-to-any-store",target:"_blank",rel:"noopener noreferrer"},L={href:"https://leetcode.com/problems/minimized-maximum-of-products-distributed-to-any-store",target:"_blank",rel:"noopener noreferrer"},N=n("td",{style:{"text-align":"center"}},"2226",-1),Y=n("td",{style:{"text-align":"left"}},"每个小孩最多能分到多少糖果",-1),I={style:{"text-align":"center"}},T={style:{"text-align":"left"}},j=n("code",null,"数组",-1),M=n("code",null,"二分查找",-1),R=n("td",{style:{"text-align":"center"}},"🟠",-1),S={style:{"text-align":"center"}},F={href:"https://leetcode.cn/problems/maximum-candies-allocated-to-k-children",target:"_blank",rel:"noopener noreferrer"},A={href:"https://leetcode.com/problems/maximum-candies-allocated-to-k-children",target:"_blank",rel:"noopener noreferrer"};function G(H,J){const i=l("font"),a=l("RouterLink"),o=l("ExternalLinkIcon");return p(),r("div",null,[g,n("p",null,[s("🟠 "),t(i,{color:"#ffb800"},{default:e(()=>[s("Medium")]),_:1}),s("  🔖  "),t(a,{to:"/tag/array.html"},{default:e(()=>[k]),_:1}),s(),t(a,{to:"/tag/binary-search.html"},{default:e(()=>[h]),_:1}),s("  🔗 "),n("a",b,[_,t(o)]),s(),n("a",f,[v,t(o)])]),x,d(" prettier-ignore "),n("table",null,[y,n("tbody",null,[n("tr",null,[w,z,n("td",O,[t(a,{to:"/problem/2064.html"},{default:e(()=>[s("[✓]")]),_:1})]),n("td",q,[t(a,{to:"/tag/array.html"},{default:e(()=>[C]),_:1}),s(),t(a,{to:"/tag/binary-search.html"},{default:e(()=>[E]),_:1})]),V,n("td",D,[n("a",B,[s("🀄️"),t(o)]),s(),n("a",L,[s("🔗"),t(o)])])]),n("tr",null,[N,Y,n("td",I,[t(a,{to:"/problem/2226.html"},{default:e(()=>[s("[✓]")]),_:1})]),n("td",T,[t(a,{to:"/tag/array.html"},{default:e(()=>[j]),_:1}),s(),t(a,{to:"/tag/binary-search.html"},{default:e(()=>[M]),_:1})]),R,n("td",S,[n("a",F,[s("🀄️"),t(o)]),s(),n("a",A,[s("🔗"),t(o)])])])])])])}const P=c(m,[["render",G],["__file","1760.html.vue"]]);export{P as default};
