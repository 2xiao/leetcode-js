import{_ as r,r as e,o as l,c as i,a as n,b as s,d as a,w as t,e as d}from"./app-B5EG-zH0.js";const u={},m=n("h1",{id:"_3151-特殊数组-i",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_3151-特殊数组-i","aria-hidden":"true"},"#"),s(" 3151. 特殊数组 I")],-1),g=n("code",null,"数组",-1),k={href:"https://leetcode.cn/problems/special-array-i",target:"_blank",rel:"noopener noreferrer"},h=n("code",null,"力扣",-1),f={href:"https://leetcode.com/problems/special-array-i",target:"_blank",rel:"noopener noreferrer"},_=n("code",null,"LeetCode",-1),b=d(`<h2 id="题目" tabindex="-1"><a class="header-anchor" href="#题目" aria-hidden="true">#</a> 题目</h2><p>An array is considered <strong>special</strong> if every pair of its adjacent elements contains two numbers with different parity.</p><p>You are given an array of integers <code>nums</code>. Return <code>true</code> if <code>nums</code> is a <strong>special</strong> array, otherwise, return <code>false</code>.</p><p><strong>Example 1:</strong></p><p><strong>Input:</strong> nums = [1]</p><p><strong>Output:</strong> true</p><p><strong>Explanation:</strong></p><p>There is only one element. So the answer is <code>true</code>.</p><p><strong>Example 2:</strong></p><p><strong>Input:</strong> nums = [2,1,4]</p><p><strong>Output:</strong> true</p><p><strong>Explanation:</strong></p><p>There is only two pairs: <code>(2,1)</code> and <code>(1,4)</code>, and both of them contain numbers with different parity. So the answer is <code>true</code>.</p><p><strong>Example 3:</strong></p><p><strong>Input:</strong> nums = [4,3,1,6]</p><p><strong>Output:</strong> false</p><p><strong>Explanation:</strong></p><p><code>nums[1]</code> and <code>nums[2]</code> are both odd. So the answer is <code>false</code>.</p><p><strong>Constraints:</strong></p><ul><li><code>1 &lt;= nums.length &lt;= 100</code></li><li><code>1 &lt;= nums[i] &lt;= 100</code></li></ul><h2 id="题目大意" tabindex="-1"><a class="header-anchor" href="#题目大意" aria-hidden="true">#</a> 题目大意</h2><p>如果数组的每一对相邻元素都是两个奇偶性不同的数字，则该数组被认为是一个 <strong>特殊数组</strong> 。</p><p>你有一个整数数组 <code>nums</code>。如果 <code>nums</code> 是一个 <strong>特殊数组</strong> ，返回 <code>true</code>，否则返回 <code>false</code>。</p><p><strong>示例 1：</strong></p><p><strong>输入：</strong> nums = [1]</p><p><strong>输出：</strong> true</p><p><strong>解释：</strong></p><p>只有一个元素，所以答案为 <code>true</code>。</p><p><strong>示例 2：</strong></p><p><strong>输入：</strong> nums = [2,1,4]</p><p><strong>输出：</strong> true</p><p><strong>解释：</strong></p><p>只有两对相邻元素： <code>(2,1)</code> 和 <code>(1,4)</code>，它们都包含了奇偶性不同的数字，因此答案为 <code>true</code>。</p><p><strong>示例 3：</strong></p><p><strong>输入：</strong> nums = [4,3,1,6]</p><p><strong>输出：</strong> false</p><p><strong>解释：</strong></p><p><code>nums[1]</code> 和 <code>nums[2]</code> 都是奇数。因此答案为 <code>false</code>。</p><p><strong>提示：</strong></p><ul><li><code>1 &lt;= nums.length &lt;= 100</code></li><li><code>1 &lt;= nums[i] &lt;= 100</code></li></ul><h2 id="解题思路" tabindex="-1"><a class="header-anchor" href="#解题思路" aria-hidden="true">#</a> 解题思路</h2><ol><li><p><strong>按位与操作 <code>&amp;</code> 判断奇偶性</strong>：</p><ul><li><code>num &amp; 1 == 0</code> 代表 <code>num</code> 为偶数。</li><li><code>num &amp; 1 == 1</code> 代表 <code>num</code> 为奇数。</li></ul></li><li><p><strong>异或运算 <code>^</code> 检查奇偶交替性</strong>：</p><ul><li>对比 <code>(nums[i] &amp; 1)</code> 与 <code>(nums[i + 1] &amp; 1)</code>： <ul><li>若不相等，表示 <code>nums[i]</code> 和 <code>nums[i + 1]</code> 奇偶不同（符合交替条件）。</li><li>若相等，表示相邻数字的奇偶性相同，不符合要求，直接返回 <code>false</code>。</li></ul></li></ul></li></ol><h4 id="复杂度分析" tabindex="-1"><a class="header-anchor" href="#复杂度分析" aria-hidden="true">#</a> 复杂度分析</h4><ul><li><strong>时间复杂度</strong>：<code>O(n)</code>，需要遍历数组一次。</li><li><strong>空间复杂度</strong>：<code>O(1)</code>，只使用常数额外空间。</li></ul><h2 id="代码" tabindex="-1"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span> <span class="token parameter">nums</span>
 * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>boolean<span class="token punctuation">}</span></span>
 */</span>
<span class="token keyword">var</span> <span class="token function-variable function">isArraySpecial</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">nums</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,46);function v(y,x){const p=e("font"),c=e("RouterLink"),o=e("ExternalLinkIcon");return l(),i("div",null,[m,n("p",null,[s("🟢 "),a(p,{color:"#15bd66"},{default:t(()=>[s("Easy")]),_:1}),s("  🔖  "),a(c,{to:"/tag/array.html"},{default:t(()=>[g]),_:1}),s("  🔗 "),n("a",k,[h,a(o)]),s(),n("a",f,[_,a(o)])]),b])}const E=r(u,[["render",v],["__file","3151.html.vue"]]);export{E as default};
