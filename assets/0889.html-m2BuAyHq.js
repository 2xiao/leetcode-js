import{_ as c,r as o,o as l,c as d,a as n,b as s,d as a,w as e,e as i}from"./app-aQeLbVW9.js";const u={},k=n("h1",{id:"_889-根据前序和后序遍历构造二叉树",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_889-根据前序和后序遍历构造二叉树","aria-hidden":"true"},"#"),s(" 889. 根据前序和后序遍历构造二叉树")],-1),m=n("code",null,"树",-1),h=n("code",null,"数组",-1),v=n("code",null,"哈希表",-1),b=n("code",null,"分治",-1),g=n("code",null,"二叉树",-1),f={href:"https://leetcode.cn/problems/construct-binary-tree-from-preorder-and-postorder-traversal",target:"_blank",rel:"noopener noreferrer"},_=n("code",null,"力扣",-1),y={href:"https://leetcode.com/problems/construct-binary-tree-from-preorder-and-postorder-traversal",target:"_blank",rel:"noopener noreferrer"},x=n("code",null,"LeetCode",-1),w=i(`<h2 id="题目" tabindex="-1"><a class="header-anchor" href="#题目" aria-hidden="true">#</a> 题目</h2><p>Given two integer arrays, <code>preorder</code> and <code>postorder</code> where <code>preorder</code> is the preorder traversal of a binary tree of <strong>distinct</strong> values and <code>postorder</code> is the postorder traversal of the same tree, reconstruct and return <em>the binary tree</em>.</p><p>If there exist multiple answers, you can <strong>return any</strong> of them.</p><p><strong>Example 1:</strong></p><figure><img src="https://assets.leetcode.com/uploads/2021/07/24/lc-prepost.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><blockquote><p>Input: preorder = [1,2,4,5,3,6,7], postorder = [4,5,2,6,7,3,1]</p><p>Output: [1,2,3,4,5,6,7]</p></blockquote><p><strong>Example 2:</strong></p><blockquote><p>Input: preorder = [1], postorder = [1]</p><p>Output: [1]</p></blockquote><p><strong>Constraints:</strong></p><ul><li><code>1 &lt;= preorder.length &lt;= 30</code></li><li><code>1 &lt;= preorder[i] &lt;= preorder.length</code></li><li>All the values of <code>preorder</code> are <strong>unique</strong>.</li><li><code>postorder.length == preorder.length</code></li><li><code>1 &lt;= postorder[i] &lt;= postorder.length</code></li><li>All the values of <code>postorder</code> are <strong>unique</strong>.</li><li>It is guaranteed that <code>preorder</code> and <code>postorder</code> are the preorder traversal and postorder traversal of the same binary tree.</li></ul><h2 id="题目大意" tabindex="-1"><a class="header-anchor" href="#题目大意" aria-hidden="true">#</a> 题目大意</h2><ol><li><strong>前序遍历</strong> (<code>preorder</code>)：<code>[根, 左子树, 右子树]</code></li><li><strong>后序遍历</strong> (<code>postorder</code>)：<code>[左子树, 右子树, 根]</code></li><li>由于没有 <strong>中序遍历</strong>，无法直接区分左、右子树的边界，但可以利用 <code>preorder[1]</code>（前序的第二个元素）来确定左子树的根节点在 <code>postorder</code> 中的位置。</li></ol><ul><li>设 <code>preorder[0]</code> 是根节点 <code>root</code>，创建 <code>TreeNode(root)</code>.</li><li><code>preorder[1]</code> 是左子树的根，查找 <code>postorder</code> 中 <code>preorder[1]</code> 的位置 <code>idx</code>。</li><li><code>postorder[0] ~ postorder[idx]</code> 是左子树，<code>postorder[idx+1] ~ postorder[n-2]</code> 是右子树。</li><li>递归构造左右子树。</li></ul><h4 id="复杂度分析" tabindex="-1"><a class="header-anchor" href="#复杂度分析" aria-hidden="true">#</a> 复杂度分析</h4><ul><li><strong>时间复杂度</strong>：<code>O(n)</code>，每个节点只访问一次。</li><li><strong>空间复杂度</strong>：<code>O(n)</code>，递归栈深度最多 <code>O(n)</code>。</li></ul><h2 id="代码" tabindex="-1"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span> <span class="token parameter">preorder</span>
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span> <span class="token parameter">postorder</span>
 * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>TreeNode<span class="token punctuation">}</span></span>
 */</span>
<span class="token keyword">var</span> <span class="token function-variable function">constructFromPrePost</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">preorder<span class="token punctuation">,</span> postorder</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>preorder<span class="token punctuation">.</span>length <span class="token operator">||</span> <span class="token operator">!</span>postorder<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
	<span class="token keyword">let</span> preIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">let</span> postIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

	<span class="token keyword">const</span> <span class="token function-variable function">buildTree</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
		<span class="token keyword">let</span> root <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span>preorder<span class="token punctuation">[</span>preIndex<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token punctuation">.</span>val <span class="token operator">!==</span> postorder<span class="token punctuation">[</span>postIndex<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			root<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token function">buildTree</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>

		<span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token punctuation">.</span>val <span class="token operator">!==</span> postorder<span class="token punctuation">[</span>postIndex<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			root<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token function">buildTree</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>

		postIndex<span class="token operator">++</span><span class="token punctuation">;</span>
		<span class="token keyword">return</span> root<span class="token punctuation">;</span>
	<span class="token punctuation">}</span><span class="token punctuation">;</span>

	<span class="token keyword">return</span> <span class="token function">buildTree</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,17);function I(T,q){const r=o("font"),t=o("RouterLink"),p=o("ExternalLinkIcon");return l(),d("div",null,[k,n("p",null,[s("🟠 "),a(r,{color:"#ffb800"},{default:e(()=>[s("Medium")]),_:1}),s("  🔖  "),a(t,{to:"/tag/tree.html"},{default:e(()=>[m]),_:1}),s(),a(t,{to:"/tag/array.html"},{default:e(()=>[h]),_:1}),s(),a(t,{to:"/tag/hash-table.html"},{default:e(()=>[v]),_:1}),s(),a(t,{to:"/tag/divide-and-conquer.html"},{default:e(()=>[b]),_:1}),s(),a(t,{to:"/tag/binary-tree.html"},{default:e(()=>[g]),_:1}),s("  🔗 "),n("a",f,[_,a(p)]),s(),n("a",y,[x,a(p)])]),w])}const E=c(u,[["render",I],["__file","0889.html.vue"]]);export{E as default};
