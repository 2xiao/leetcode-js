import{_ as l,r as o,o as u,c as i,a as n,b as s,d as a,w as t,e as r}from"./app-B5EG-zH0.js";const d={},k=n("h1",{id:"_2032-至少在两个数组中出现的值",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_2032-至少在两个数组中出现的值","aria-hidden":"true"},"#"),s(" 2032. 至少在两个数组中出现的值")],-1),m=n("code",null,"位运算",-1),h=n("code",null,"数组",-1),g=n("code",null,"哈希表",-1),v={href:"https://leetcode.cn/problems/two-out-of-three",target:"_blank",rel:"noopener noreferrer"},b=n("code",null,"力扣",-1),f={href:"https://leetcode.com/problems/two-out-of-three",target:"_blank",rel:"noopener noreferrer"},_=n("code",null,"LeetCode",-1),w=r(`<h2 id="题目" tabindex="-1"><a class="header-anchor" href="#题目" aria-hidden="true">#</a> 题目</h2><p>Given three integer arrays <code>nums1</code>, <code>nums2</code>, and <code>nums3</code>, return <em>a <strong>distinct</strong> array containing all the values that are present in <strong>at least two</strong> out of the three arrays. You may return the values in <strong>any</strong> order</em>.</p><p><strong>Example 1:</strong></p><blockquote><p>Input: nums1 = [1,1,3,2], nums2 = [2,3], nums3 = [3]</p><p>Output: [3,2]</p><p>Explanation: The values that are present in at least two arrays are:</p><ul><li>3, in all three arrays.</li><li>2, in nums1 and nums2.</li></ul></blockquote><p><strong>Example 2:</strong></p><blockquote><p>Input: nums1 = [3,1], nums2 = [2,3], nums3 = [1,2]</p><p>Output: [2,3,1]</p><p>Explanation: The values that are present in at least two arrays are:</p><ul><li>2, in nums2 and nums3.</li><li>3, in nums1 and nums2.</li><li>1, in nums1 and nums3.</li></ul></blockquote><p><strong>Example 3:</strong></p><blockquote><p>Input: nums1 = [1,2,2], nums2 = [4,3,3], nums3 = [5]</p><p>Output: []</p><p>Explanation: No value is present in at least two arrays.</p></blockquote><p><strong>Constraints:</strong></p><ul><li><code>1 &lt;= nums1.length, nums2.length, nums3.length &lt;= 100</code></li><li><code>1 &lt;= nums1[i], nums2[j], nums3[k] &lt;= 100</code></li></ul><h2 id="题目大意" tabindex="-1"><a class="header-anchor" href="#题目大意" aria-hidden="true">#</a> 题目大意</h2><p>给你三个整数数组 <code>nums1</code>、<code>nums2</code> 和 <code>nums3</code> ，请你构造并返回一个 <strong>元素各不相同的</strong> 数组，且由 <strong>至少</strong> 在 <strong>两个</strong> 数组中出现的所有值组成。数组中的元素可以按 <strong>任意</strong> 顺序排列。</p><p><strong>示例 1：</strong></p><blockquote><p><strong>输入：</strong> nums1 = [1,1,3,2], nums2 = [2,3], nums3 = [3]</p><p><strong>输出：</strong>[3,2]</p><p><strong>解释：</strong> 至少在两个数组中出现的所有值为：</p><ul><li>3 ，在全部三个数组中都出现过。</li><li>2 ，在数组 nums1 和 nums2 中出现过。</li></ul></blockquote><p><strong>示例 2：</strong></p><blockquote><p><strong>输入：</strong> nums1 = [3,1], nums2 = [2,3], nums3 = [1,2]</p><p><strong>输出：</strong>[2,3,1]</p><p><strong>解释：</strong> 至少在两个数组中出现的所有值为：</p><ul><li>2 ，在数组 nums2 和 nums3 中出现过。</li><li>3 ，在数组 nums1 和 nums2 中出现过。</li><li>1 ，在数组 nums1 和 nums3 中出现过。</li></ul></blockquote><p><strong>示例 3：</strong></p><blockquote><p><strong>输入：</strong> nums1 = [1,2,2], nums2 = [4,3,3], nums3 = [5]</p><p><strong>输出：</strong>[]</p><p><strong>解释：</strong> 不存在至少在两个数组中出现的值。</p></blockquote><p><strong>提示：</strong></p><ul><li><code>1 &lt;= nums1.length, nums2.length, nums3.length &lt;= 100</code></li><li><code>1 &lt;= nums1[i], nums2[j], nums3[k] &lt;= 100</code></li></ul><h2 id="解题思路" tabindex="-1"><a class="header-anchor" href="#解题思路" aria-hidden="true">#</a> 解题思路</h2><ol><li>利用集合去重：将每个数组中的元素转换为集合 <code>set1</code>、<code>set2</code> 和 <code>set3</code>，消除重复值。</li><li>统计出现频次：创建一个 <code>Map</code>，用于记录每个元素出现在不同集合中的次数。</li><li>遍历集合：将三个集合的元素依次加入 <code>Map</code>，并更新每个元素的频次。</li><li>筛选结果：从 <code>Map</code> 中提取出现次数大于或等于 2 的元素，构造返回结果。</li></ol><h4 id="复杂度分析" tabindex="-1"><a class="header-anchor" href="#复杂度分析" aria-hidden="true">#</a> 复杂度分析</h4><ul><li><p><strong>时间复杂度</strong>：<code>O(n1 + n2 + n3 + u)</code></p><ul><li>构建集合的时间为 <code>O(n1 + n2 + n3)</code>，其中 <code>n1, n2, n3</code> 是三个数组的长度。</li><li>遍历集合统计频次的时间为 <code>O(u1 + u2 + u3)</code>，其中 <code>u1, u2, u3</code> 是三个集合的大小。</li><li>最后筛选结果的时间为 <code>O(u)</code>，其中 <code>u</code> 是所有元素的总数量。</li><li><strong>总复杂度为</strong> <code>O(n1 + n2 + n3 + u)</code>。</li></ul></li><li><p><strong>空间复杂度</strong>：<code>O(u)</code>，其中 <code>u</code> 是所有不同元素的总数量，使用了三个集合和一个 <code>Map</code>。</p></li></ul><h2 id="代码" tabindex="-1"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span> <span class="token parameter">nums1</span>
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span> <span class="token parameter">nums2</span>
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span> <span class="token parameter">nums3</span>
 * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span>
 */</span>
<span class="token keyword">var</span> <span class="token function-variable function">twoOutOfThree</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">nums1<span class="token punctuation">,</span> nums2<span class="token punctuation">,</span> nums3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">let</span> set1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span>nums1<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">let</span> set2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span>nums2<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">let</span> set3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span>nums3<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">let</span> freq <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token comment">// 统计频次</span>
	<span class="token keyword">const</span> <span class="token function-variable function">count</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token keyword">set</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
		<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> num <span class="token keyword">of</span> set<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			freq<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span> <span class="token punctuation">(</span>freq<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span><span class="token punctuation">;</span>

	<span class="token function">count</span><span class="token punctuation">(</span>set1<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">count</span><span class="token punctuation">(</span>set2<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">count</span><span class="token punctuation">(</span>set3<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token comment">// 筛选出现次数 &gt;= 2 的元素</span>
	<span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token operator">...</span>freq<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">i</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> freq<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">&gt;=</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,26);function y(x,q){const c=o("font"),e=o("RouterLink"),p=o("ExternalLinkIcon");return u(),i("div",null,[k,n("p",null,[s("🟢 "),a(c,{color:"#15bd66"},{default:t(()=>[s("Easy")]),_:1}),s("  🔖  "),a(e,{to:"/tag/bit-manipulation.html"},{default:t(()=>[m]),_:1}),s(),a(e,{to:"/tag/array.html"},{default:t(()=>[h]),_:1}),s(),a(e,{to:"/tag/hash-table.html"},{default:t(()=>[g]),_:1}),s("  🔗 "),n("a",v,[b,a(p)]),s(),n("a",f,[_,a(p)])]),w])}const E=l(d,[["render",y],["__file","2032.html.vue"]]);export{E as default};
