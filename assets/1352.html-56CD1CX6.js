import{_ as u,r as o,o as l,c as i,a as n,b as s,d as a,w as t,e as d}from"./app-B5EG-zH0.js";const r={},k=n("h1",{id:"_1352-最后-k-个数的乘积",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_1352-最后-k-个数的乘积","aria-hidden":"true"},"#"),s(" 1352. 最后 K 个数的乘积")],-1),m=n("code",null,"设计",-1),b=n("code",null,"队列",-1),v=n("code",null,"数组",-1),f=n("code",null,"数学",-1),h=n("code",null,"数据流",-1),g={href:"https://leetcode.cn/problems/product-of-the-last-k-numbers",target:"_blank",rel:"noopener noreferrer"},_=n("code",null,"力扣",-1),q={href:"https://leetcode.com/problems/product-of-the-last-k-numbers",target:"_blank",rel:"noopener noreferrer"},w=n("code",null,"LeetCode",-1),O=d(`<h2 id="题目" tabindex="-1"><a class="header-anchor" href="#题目" aria-hidden="true">#</a> 题目</h2><p>Design an algorithm that accepts a stream of integers and retrieves the product of the last <code>k</code> integers of the stream.</p><p>Implement the <code>ProductOfNumbers</code> class:</p><ul><li><code>ProductOfNumbers()</code> Initializes the object with an empty stream.</li><li><code>void add(int num)</code> Appends the integer <code>num</code> to the stream.</li><li><code>int getProduct(int k)</code> Returns the product of the last <code>k</code> numbers in the current list. You can assume that always the current list has at least <code>k</code> numbers.</li></ul><p>The test cases are generated so that, at any time, the product of any contiguous sequence of numbers will fit into a single 32-bit integer without overflowing.</p><p><strong>Example:</strong></p><blockquote><p><strong>Input</strong></p><p>[&quot;ProductOfNumbers&quot;,&quot;add&quot;,&quot;add&quot;,&quot;add&quot;,&quot;add&quot;,&quot;add&quot;,&quot;getProduct&quot;,&quot;getProduct&quot;,&quot;getProduct&quot;,&quot;add&quot;,&quot;getProduct&quot;]</p><p>[[],[3],[0],[2],[5],[4],[2],[3],[4],[8],[2]]</p><p><strong>Output</strong></p><p>[null,null,null,null,null,null,20,40,0,null,32]</p><p><strong>Explanation</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>ProductOfNumbers productOfNumbers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ProductOfNumbers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

productOfNumbers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [3]</span>

productOfNumbers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [3,0]</span>

productOfNumbers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [3,0,2]</span>

productOfNumbers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [3,0,2,5]</span>

productOfNumbers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [3,0,2,5,4]</span>

productOfNumbers<span class="token punctuation">.</span><span class="token function">getProduct</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// return 20. The product of the last 2 numbers is 5 \\* 4 = 20</span>

productOfNumbers<span class="token punctuation">.</span><span class="token function">getProduct</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// return 40. The product of the last 3 numbers is 2 \\* 5 \\* 4 = 40</span>

productOfNumbers<span class="token punctuation">.</span><span class="token function">getProduct</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// return 0. The product of the last 4 numbers is 0 \\* 2 \\* 5 \\* 4 = 0</span>

productOfNumbers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [3,0,2,5,4,8]</span>

productOfNumbers<span class="token punctuation">.</span><span class="token function">getProduct</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// return 32. The product of the last 2 numbers is 4 \\* 8 = 32</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><p><strong>Constraints:</strong></p><ul><li><code>0 &lt;= num &lt;= 100</code></li><li><code>1 &lt;= k &lt;= 4 * 10^4</code></li><li>At most <code>4 * 10^4</code> calls will be made to <code>add</code> and <code>getProduct</code>.</li><li>The product of the stream at any point in time will fit in a <strong>32-bit</strong> integer.</li></ul><h2 id="题目大意" tabindex="-1"><a class="header-anchor" href="#题目大意" aria-hidden="true">#</a> 题目大意</h2><p>请你实现一个「数字乘积类」<code>ProductOfNumbers</code>，要求支持下述两种方法：</p><ol><li><code>add(int num)</code></li></ol><ul><li>将数字 <code>num</code> 添加到当前数字列表的最后面。</li></ul><ol start="2"><li><code>getProduct(int k)</code></li></ol><ul><li>返回当前数字列表中，最后 <code>k</code> 个数字的乘积。</li><li>你可以假设当前列表中始终 <strong>至少</strong> 包含 <code>k</code> 个数字。</li></ul><p>题目数据保证：任何时候，任一连续数字序列的乘积都在 32-bit 整数范围内，不会溢出。</p><p><strong>示例：</strong></p><blockquote><p><strong>输入：</strong></p><p>[&quot;ProductOfNumbers&quot;,&quot;add&quot;,&quot;add&quot;,&quot;add&quot;,&quot;add&quot;,&quot;add&quot;,&quot;getProduct&quot;,&quot;getProduct&quot;,&quot;getProduct&quot;,&quot;add&quot;,&quot;getProduct&quot;]</p><p>[[],[3],[0],[2],[5],[4],[2],[3],[4],[8],[2]]</p><p><strong>输出：</strong></p><p>[null,null,null,null,null,null,20,40,0,null,32]</p><p><strong>解释：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>ProductOfNumbers productOfNumbers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ProductOfNumbers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

productOfNumbers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [3]</span>

productOfNumbers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [3,0]</span>

productOfNumbers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [3,0,2]</span>

productOfNumbers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [3,0,2,5]</span>

productOfNumbers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [3,0,2,5,4]</span>

productOfNumbers<span class="token punctuation">.</span><span class="token function">getProduct</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 返回 20 。最后 2 个数字的乘积是 5 \\* 4 = 20</span>

productOfNumbers<span class="token punctuation">.</span><span class="token function">getProduct</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 返回 40 。最后 3 个数字的乘积是 2 \\* 5 \\* 4 = 40</span>

productOfNumbers<span class="token punctuation">.</span><span class="token function">getProduct</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 返回 0 。最后 4 个数字的乘积是 0 \\* 2 \\* 5 \\* 4 = 0</span>

productOfNumbers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [3,0,2,5,4,8]</span>

productOfNumbers<span class="token punctuation">.</span><span class="token function">getProduct</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 返回 32 。最后 2 个数字的乘积是 4 \\* 8 = 32</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><p><strong>提示：</strong></p><ul><li><code>add</code> 和 <code>getProduct</code> 两种操作加起来总共不会超过 <code>40000</code> 次。</li><li><code>0 &lt;= num &lt;= 100</code></li><li><code>1 &lt;= k &lt;= 40000</code></li></ul><h2 id="解题思路" tabindex="-1"><a class="header-anchor" href="#解题思路" aria-hidden="true">#</a> 解题思路</h2><ol><li><p><strong>使用前缀乘积（Prefix Product）优化计算</strong>：</p><ul><li>维护一个 <code>arr</code> 数组，其中 <code>arr[i]</code> 存储的是前 <code>i</code> 个数字的累积乘积（prefix product）。</li><li>这样，在查询最后 <code>k</code> 个数的乘积时，可以直接用 <strong>除法</strong> 计算： <code>getProduct(k) = arr[size]/arr[size - k]</code> 这一技巧可以 <strong>O(1)</strong> 计算乘积，避免暴力遍历计算，提升查询效率。</li></ul></li><li><p><strong>处理 <code>0</code> 的情况</strong>：</p><ul><li>由于除法不适用于 0，需要特殊处理。当遇到 <code>num == 0</code> 时，数组 <code>arr</code> 需要重置为 <code>[1]</code>，并将 <code>size</code> 设为 <code>0</code>，相当于清空之前的记录。</li><li>这是因为 <code>0</code> 会破坏前缀乘积的连贯性（0 乘任何数都为 0），因此之前的所有计算结果都不再有效。</li></ul></li></ol><h4 id="复杂度分析" tabindex="-1"><a class="header-anchor" href="#复杂度分析" aria-hidden="true">#</a> 复杂度分析</h4><ul><li><p><strong><code>add(num)</code> 操作</strong>:</p><ul><li><strong>时间复杂度：</strong> <code>O(1)</code>，因为只需要在 <code>arr</code> 末尾追加一个元素。</li><li><strong>空间复杂度：</strong> <code>O(n)</code>，<code>n</code> 是调用 <code>add()</code> 的次数。</li></ul></li><li><p><strong><code>getProduct(k)</code> 操作</strong>:</p><ul><li><strong>时间复杂度：</strong> <code>O(1)</code>，因为计算乘积只需一次除法运算。</li><li><strong>空间复杂度：</strong> <code>O(1)</code>，因为不会使用额外的存储空间。</li></ul></li></ul><h2 id="代码" tabindex="-1"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> <span class="token function-variable function">ProductOfNumbers</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">this</span><span class="token punctuation">.</span>arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token keyword">this</span><span class="token punctuation">.</span>size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">}</span></span> <span class="token parameter">num</span>
 * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span><span class="token keyword">void</span><span class="token punctuation">}</span></span>
 */</span>
<span class="token class-name">ProductOfNumbers</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">add</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">num</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span>arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span>size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span>arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>arr<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>size<span class="token punctuation">]</span> <span class="token operator">*</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span>size<span class="token operator">++</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">}</span></span> <span class="token parameter">k</span>
 * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">}</span></span>
 */</span>
<span class="token class-name">ProductOfNumbers</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">getProduct</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">k</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>k <span class="token operator">&gt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>size<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>arr<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>size<span class="token punctuation">]</span> <span class="token operator">/</span> <span class="token keyword">this</span><span class="token punctuation">.</span>arr<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>size <span class="token operator">-</span> k<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,26);function N(y,P){const c=o("font"),e=o("RouterLink"),p=o("ExternalLinkIcon");return l(),i("div",null,[k,n("p",null,[s("🟠 "),a(c,{color:"#ffb800"},{default:t(()=>[s("Medium")]),_:1}),s("  🔖  "),a(e,{to:"/tag/design.html"},{default:t(()=>[m]),_:1}),s(),a(e,{to:"/tag/queue.html"},{default:t(()=>[b]),_:1}),s(),a(e,{to:"/tag/array.html"},{default:t(()=>[v]),_:1}),s(),a(e,{to:"/tag/math.html"},{default:t(()=>[f]),_:1}),s(),a(e,{to:"/tag/data-stream.html"},{default:t(()=>[h]),_:1}),s("  🔗 "),n("a",g,[_,a(p)]),s(),n("a",q,[w,a(p)])]),O])}const z=u(r,[["render",N],["__file","1352.html.vue"]]);export{z as default};
