import{_ as p,r as l,o as r,c as i,a as t,b as n,d as e,w as s,f as d,e as u}from"./app-aQeLbVW9.js";const _={},h=t("h1",{id:"_2364-统计坏数对的数目",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#_2364-统计坏数对的数目","aria-hidden":"true"},"#"),n(" 2364. 统计坏数对的数目")],-1),k=t("code",null,"数组",-1),m=t("code",null,"哈希表",-1),g=t("code",null,"数学",-1),f=t("code",null,"计数",-1),b={href:"https://leetcode.cn/problems/count-number-of-bad-pairs",target:"_blank",rel:"noopener noreferrer"},y=t("code",null,"力扣",-1),x={href:"https://leetcode.com/problems/count-number-of-bad-pairs",target:"_blank",rel:"noopener noreferrer"},v=t("code",null,"LeetCode",-1),w=u(`<h2 id="题目" tabindex="-1"><a class="header-anchor" href="#题目" aria-hidden="true">#</a> 题目</h2><p>You are given a <strong>0-indexed</strong> integer array <code>nums</code>. A pair of indices <code>(i, j)</code> is a <strong>bad pair</strong> if <code>i &lt; j</code> and <code>j - i != nums[j] - nums[i]</code>.</p><p>Return _the total number of<strong>bad pairs</strong> in _<code>nums</code>.</p><p><strong>Example 1:</strong></p><blockquote><p>Input: nums = [4,1,3,3]</p><p>Output: 5</p><p>Explanation: The pair (0, 1) is a bad pair since 1 - 0 != 1 - 4.</p><p>The pair (0, 2) is a bad pair since 2 - 0 != 3 - 4, 2 != -1.</p><p>The pair (0, 3) is a bad pair since 3 - 0 != 3 - 4, 3 != -1.</p><p>The pair (1, 2) is a bad pair since 2 - 1 != 3 - 1, 1 != 2.</p><p>The pair (2, 3) is a bad pair since 3 - 2 != 3 - 3, 1 != 0.</p><p>There are a total of 5 bad pairs, so we return 5.</p></blockquote><p><strong>Example 2:</strong></p><blockquote><p>Input: nums = [1,2,3,4,5]</p><p>Output: 0</p><p>Explanation: There are no bad pairs.</p></blockquote><p><strong>Constraints:</strong></p><ul><li><code>1 &lt;= nums.length &lt;= 10^5</code></li><li><code>1 &lt;= nums[i] &lt;= 10^9</code></li></ul><h2 id="题目大意" tabindex="-1"><a class="header-anchor" href="#题目大意" aria-hidden="true">#</a> 题目大意</h2><p>给你一个下标从** 0** 开始的整数数组 <code>nums</code> 。如果 <code>i &lt; j</code> 且 <code>j - i != nums[j] - nums[i]</code> ，那么我们称 <code>(i, j)</code> 是一个 <strong>坏</strong>数对。</p><p>请你返回 <code>nums</code> 中 <strong>坏数对</strong> 的总数目。</p><p><strong>示例 1：</strong></p><blockquote><p><strong>输入：</strong> nums = [4,1,3,3]</p><p><strong>输出：</strong> 5</p><p><strong>解释：</strong> 数对 (0, 1) 是坏数对，因为 1 - 0 != 1 - 4 。</p><p>数对 (0, 2) 是坏数对，因为 2 - 0 != 3 - 4, 2 != -1 。</p><p>数对 (0, 3) 是坏数对，因为 3 - 0 != 3 - 4, 3 != -1 。</p><p>数对 (1, 2) 是坏数对，因为 2 - 1 != 3 - 1, 1 != 2 。</p><p>数对 (2, 3) 是坏数对，因为 3 - 2 != 3 - 3, 1 != 0 。</p><p>总共有 5 个坏数对，所以我们返回 5 。</p></blockquote><p><strong>示例 2：</strong></p><blockquote><p><strong>输入：</strong> nums = [1,2,3,4,5]</p><p><strong>输出：</strong> 0</p><p><strong>解释：</strong> 没有坏数对。</p></blockquote><p><strong>提示：</strong></p><ul><li><code>1 &lt;= nums.length &lt;= 10^5</code></li><li><code>1 &lt;= nums[i] &lt;= 10^9</code></li></ul><h2 id="解题思路" tabindex="-1"><a class="header-anchor" href="#解题思路" aria-hidden="true">#</a> 解题思路</h2><ol><li><p><strong>总数对数量计算</strong></p><ul><li>数组长度为 <code>n</code>，总数对的数量为 <code>total = n * (n - 1) / 2</code>。</li></ul></li><li><p><strong>转换为差值问题</strong></p><ul><li>由于判断条件是 <code>nums[j] - nums[i] ≠ j - i</code>，可以等价转化为：<code>nums[j] - j ≠ nums[i] - i</code></li><li>定义 <code>diff[i] = nums[i] - i</code>，我们只需要统计差值相等的数对，即好数对。</li></ul></li><li><p><strong>哈希计数</strong></p><ul><li>使用 <code>Map</code> 记录 <code>diff</code> 的频次统计。</li><li>对每个相同的 <code>diff</code> 值 <code>value</code>，能形成的好数对数量为 <code>success = value * (value - 1) / 2</code>。</li></ul></li><li><p><strong>返回结果</strong></p><ul><li>坏数对的总数目即总数对减去好数对的值：<code>total - success</code></li></ul></li></ol><h4 id="复杂度分析" tabindex="-1"><a class="header-anchor" href="#复杂度分析" aria-hidden="true">#</a> 复杂度分析</h4><ul><li><strong>时间复杂度</strong>：<code>O(n)</code>，遍历数组并统计频次，哈希查找和更新为常数时间复杂度。</li><li><strong>空间复杂度</strong>：<code>O(n)</code>，需要额外的哈希表空间。</li></ul><h2 id="代码" tabindex="-1"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span> <span class="token parameter">nums</span>
 * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">}</span></span>
 */</span>
<span class="token keyword">var</span> <span class="token function-variable function">countBadPairs</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">nums</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">const</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
	<span class="token keyword">const</span> total <span class="token operator">=</span> <span class="token punctuation">(</span>n <span class="token operator">*</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>
	<span class="token keyword">let</span> success <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

	<span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">const</span> diff <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> i<span class="token punctuation">;</span>
		count<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>diff<span class="token punctuation">,</span> <span class="token punctuation">(</span>count<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>diff<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> value <span class="token keyword">of</span> count<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		success <span class="token operator">+=</span> <span class="token punctuation">(</span>value <span class="token operator">*</span> <span class="token punctuation">(</span>value <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> total <span class="token operator">-</span> success<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="相关题目" tabindex="-1"><a class="header-anchor" href="#相关题目" aria-hidden="true">#</a> 相关题目</h2>`,25),j=t("thead",null,[t("tr",null,[t("th",{style:{"text-align":"center"}},"题号"),t("th",{style:{"text-align":"left"}},"标题"),t("th",{style:{"text-align":"center"}},"题解"),t("th",{style:{"text-align":"left"}},"标签"),t("th",{style:{"text-align":"center"}},"难度"),t("th",{style:{"text-align":"center"}},"力扣")])],-1),q=t("td",{style:{"text-align":"center"}},"532",-1),T=t("td",{style:{"text-align":"left"}},"数组中的 k-diff 数对",-1),E=t("td",{style:{"text-align":"center"}},null,-1),C={style:{"text-align":"left"}},L=t("code",null,"数组",-1),N=t("code",null,"哈希表",-1),V=t("code",null,"双指针",-1),B=t("code",null,"2+",-1),I=t("td",{style:{"text-align":"center"}},"🟠",-1),O={style:{"text-align":"center"}},M={href:"https://leetcode.cn/problems/k-diff-pairs-in-an-array",target:"_blank",rel:"noopener noreferrer"},R={href:"https://leetcode.com/problems/k-diff-pairs-in-an-array",target:"_blank",rel:"noopener noreferrer"},K=t("td",{style:{"text-align":"center"}},"974",-1),A=t("td",{style:{"text-align":"left"}},"和可被 K 整除的子数组",-1),P=t("td",{style:{"text-align":"center"}},null,-1),S={style:{"text-align":"left"}},Y=t("code",null,"数组",-1),z=t("code",null,"哈希表",-1),D=t("code",null,"前缀和",-1),F=t("td",{style:{"text-align":"center"}},"🟠",-1),G={style:{"text-align":"center"}},H={href:"https://leetcode.cn/problems/subarray-sums-divisible-by-k",target:"_blank",rel:"noopener noreferrer"},J={href:"https://leetcode.com/problems/subarray-sums-divisible-by-k",target:"_blank",rel:"noopener noreferrer"},Q=t("td",{style:{"text-align":"center"}},"1814",-1),U=t("td",{style:{"text-align":"left"}},"统计一个数组中好对子的数目",-1),W=t("td",{style:{"text-align":"center"}},null,-1),X={style:{"text-align":"left"}},Z=t("code",null,"数组",-1),$=t("code",null,"哈希表",-1),tt=t("code",null,"数学",-1),nt=t("code",null,"1+",-1),et=t("td",{style:{"text-align":"center"}},"🟠",-1),st={style:{"text-align":"center"}},at={href:"https://leetcode.cn/problems/count-nice-pairs-in-an-array",target:"_blank",rel:"noopener noreferrer"},ot={href:"https://leetcode.com/problems/count-nice-pairs-in-an-array",target:"_blank",rel:"noopener noreferrer"},lt=t("td",{style:{"text-align":"center"}},"2006",-1),ct=t("td",{style:{"text-align":"left"}},"差的绝对值为 K 的数对数目",-1),pt={style:{"text-align":"center"}},rt={style:{"text-align":"left"}},it=t("code",null,"数组",-1),dt=t("code",null,"哈希表",-1),ut=t("code",null,"计数",-1),_t=t("td",{style:{"text-align":"center"}},"🟢",-1),ht={style:{"text-align":"center"}},kt={href:"https://leetcode.cn/problems/count-number-of-pairs-with-absolute-difference-k",target:"_blank",rel:"noopener noreferrer"},mt={href:"https://leetcode.com/problems/count-number-of-pairs-with-absolute-difference-k",target:"_blank",rel:"noopener noreferrer"},gt=t("td",{style:{"text-align":"center"}},"2176",-1),ft=t("td",{style:{"text-align":"left"}},"统计数组中相等且可以被整除的数对",-1),bt={style:{"text-align":"center"}},yt={style:{"text-align":"left"}},xt=t("code",null,"数组",-1),vt=t("td",{style:{"text-align":"center"}},"🟢",-1),wt={style:{"text-align":"center"}},jt={href:"https://leetcode.cn/problems/count-equal-and-divisible-pairs-in-an-array",target:"_blank",rel:"noopener noreferrer"},qt={href:"https://leetcode.com/problems/count-equal-and-divisible-pairs-in-an-array",target:"_blank",rel:"noopener noreferrer"},Tt=t("td",{style:{"text-align":"center"}},"2426",-1),Et=t("td",{style:{"text-align":"left"}},"满足不等式的数对数目",-1),Ct=t("td",{style:{"text-align":"center"}},null,-1),Lt={style:{"text-align":"left"}},Nt=t("code",null,"树状数组",-1),Vt=t("code",null,"线段树",-1),Bt=t("code",null,"数组",-1),It=t("code",null,"4+",-1),Ot=t("td",{style:{"text-align":"center"}},"🔴",-1),Mt={style:{"text-align":"center"}},Rt={href:"https://leetcode.cn/problems/number-of-pairs-satisfying-inequality",target:"_blank",rel:"noopener noreferrer"},Kt={href:"https://leetcode.com/problems/number-of-pairs-satisfying-inequality",target:"_blank",rel:"noopener noreferrer"};function At(Pt,St){const c=l("font"),a=l("RouterLink"),o=l("ExternalLinkIcon");return r(),i("div",null,[h,t("p",null,[n("🟠 "),e(c,{color:"#ffb800"},{default:s(()=>[n("Medium")]),_:1}),n("  🔖  "),e(a,{to:"/tag/array.html"},{default:s(()=>[k]),_:1}),n(),e(a,{to:"/tag/hash-table.html"},{default:s(()=>[m]),_:1}),n(),e(a,{to:"/tag/math.html"},{default:s(()=>[g]),_:1}),n(),e(a,{to:"/tag/counting.html"},{default:s(()=>[f]),_:1}),n("  🔗 "),t("a",b,[y,e(o)]),n(),t("a",x,[v,e(o)])]),w,d(" prettier-ignore "),t("table",null,[j,t("tbody",null,[t("tr",null,[q,T,E,t("td",C,[e(a,{to:"/tag/array.html"},{default:s(()=>[L]),_:1}),n(),e(a,{to:"/tag/hash-table.html"},{default:s(()=>[N]),_:1}),n(),e(a,{to:"/tag/two-pointers.html"},{default:s(()=>[V]),_:1}),n(),B]),I,t("td",O,[t("a",M,[n("🀄️"),e(o)]),n(),t("a",R,[n("🔗"),e(o)])])]),t("tr",null,[K,A,P,t("td",S,[e(a,{to:"/tag/array.html"},{default:s(()=>[Y]),_:1}),n(),e(a,{to:"/tag/hash-table.html"},{default:s(()=>[z]),_:1}),n(),e(a,{to:"/tag/prefix-sum.html"},{default:s(()=>[D]),_:1})]),F,t("td",G,[t("a",H,[n("🀄️"),e(o)]),n(),t("a",J,[n("🔗"),e(o)])])]),t("tr",null,[Q,U,W,t("td",X,[e(a,{to:"/tag/array.html"},{default:s(()=>[Z]),_:1}),n(),e(a,{to:"/tag/hash-table.html"},{default:s(()=>[$]),_:1}),n(),e(a,{to:"/tag/math.html"},{default:s(()=>[tt]),_:1}),n(),nt]),et,t("td",st,[t("a",at,[n("🀄️"),e(o)]),n(),t("a",ot,[n("🔗"),e(o)])])]),t("tr",null,[lt,ct,t("td",pt,[e(a,{to:"/problem/2006.html"},{default:s(()=>[n("[✓]")]),_:1})]),t("td",rt,[e(a,{to:"/tag/array.html"},{default:s(()=>[it]),_:1}),n(),e(a,{to:"/tag/hash-table.html"},{default:s(()=>[dt]),_:1}),n(),e(a,{to:"/tag/counting.html"},{default:s(()=>[ut]),_:1})]),_t,t("td",ht,[t("a",kt,[n("🀄️"),e(o)]),n(),t("a",mt,[n("🔗"),e(o)])])]),t("tr",null,[gt,ft,t("td",bt,[e(a,{to:"/problem/2176.html"},{default:s(()=>[n("[✓]")]),_:1})]),t("td",yt,[e(a,{to:"/tag/array.html"},{default:s(()=>[xt]),_:1})]),vt,t("td",wt,[t("a",jt,[n("🀄️"),e(o)]),n(),t("a",qt,[n("🔗"),e(o)])])]),t("tr",null,[Tt,Et,Ct,t("td",Lt,[e(a,{to:"/tag/binary-indexed-tree.html"},{default:s(()=>[Nt]),_:1}),n(),e(a,{to:"/tag/segment-tree.html"},{default:s(()=>[Vt]),_:1}),n(),e(a,{to:"/tag/array.html"},{default:s(()=>[Bt]),_:1}),n(),It]),Ot,t("td",Mt,[t("a",Rt,[n("🀄️"),e(o)]),n(),t("a",Kt,[n("🔗"),e(o)])])])])])])}const zt=p(_,[["render",At],["__file","2364.html.vue"]]);export{zt as default};
