import{_ as c,r as l,o as r,c as i,a as n,b as t,d as s,w as e,f as u,e as d}from"./app-fBVbqwGY.js";const h={},k=n("h1",{id:"_337-打家劫舍-iii",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_337-打家劫舍-iii","aria-hidden":"true"},"#"),t(" 337. 打家劫舍 III")],-1),g=n("code",null,"树",-1),m=n("code",null,"深度优先搜索",-1),b=n("code",null,"动态规划",-1),f=n("code",null,"二叉树",-1),_={href:"https://leetcode.cn/problems/house-robber-iii",target:"_blank",rel:"noopener noreferrer"},v=n("code",null,"力扣",-1),y={href:"https://leetcode.com/problems/house-robber-iii",target:"_blank",rel:"noopener noreferrer"},x=n("code",null,"LeetCode",-1),w=d(`<h2 id="题目" tabindex="-1"><a class="header-anchor" href="#题目" aria-hidden="true">#</a> 题目</h2><p>The thief has found himself a new place for his thievery again. There is only one entrance to this area, called <code>root</code>.</p><p>Besides the <code>root</code>, each house has one and only one parent house. After a tour, the smart thief realized that all houses in this place form a binary tree. It will automatically contact the police if <strong>two directly-linked houses were broken into on the same night</strong>.</p><p>Given the <code>root</code> of the binary tree, return <em>the maximum amount of money the thief can rob<strong>without alerting the police</strong></em>.</p><p><strong>Example 1:</strong></p><figure><img src="https://assets.leetcode.com/uploads/2021/03/10/rob1-tree.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><blockquote><p>Input: root = [3,2,3,null,3,null,1]</p><p>Output: 7</p><p>Explanation: Maximum amount of money the thief can rob = 3 + 3 + 1 = 7.</p></blockquote><p><strong>Example 2:</strong></p><figure><img src="https://assets.leetcode.com/uploads/2021/03/10/rob2-tree.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><blockquote><p>Input: root = [3,4,5,1,3,null,1]</p><p>Output: 9</p><p>Explanation: Maximum amount of money the thief can rob = 4 + 5 = 9.</p></blockquote><p><strong>Constraints:</strong></p><ul><li>The number of nodes in the tree is in the range <code>[1, 104]</code>.</li><li><code>0 &lt;= Node.val &lt;= 10^4</code></li></ul><h2 id="题目大意" tabindex="-1"><a class="header-anchor" href="#题目大意" aria-hidden="true">#</a> 题目大意</h2><p>小偷又发现了一个新的可行窃的地区。这个地区只有一个入口，我们称之为 <code>root</code> 。</p><p>除了 <code>root</code> 之外，每栋房子有且只有一个“父“房子与之相连。一番侦察之后，聪明的小偷意识到“这个地方的所有房屋的排列类似于一棵二叉树”。 如果 <strong>两个直接相连的房子在同一天晚上被打劫</strong> ，房屋将自动报警。</p><p>给定二叉树的 <code>root</code> 。返回 <em><strong>在不触动警报的情况下</strong> ，小偷能够盗取的最高金额</em> 。</p><p><strong>示例 1:</strong></p><figure><img src="https://assets.leetcode.com/uploads/2021/03/10/rob1-tree.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><blockquote><p><strong>输入:</strong> root = [3,2,3,null,3,null,1]</p><p><strong>输出:</strong> 7</p><p><strong>解释:</strong> 小偷一晚能够盗取的最高金额 3 + 3 + 1 = 7</p></blockquote><p><strong>示例 2:</strong></p><figure><img src="https://assets.leetcode.com/uploads/2021/03/10/rob2-tree.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><blockquote><p><strong>输入:</strong> root = [3,4,5,1,3,null,1]</p><p><strong>输出:</strong> 9</p><p><strong>解释:</strong> 小偷一晚能够盗取的最高金额 4 + 5 = 9</p></blockquote><p><strong>提示：</strong></p><ul><li>树的节点数在 <code>[1, 104]</code> 范围内</li><li><code>0 &lt;= Node.val &lt;= 10^4</code></li></ul><h2 id="解题思路" tabindex="-1"><a class="header-anchor" href="#解题思路" aria-hidden="true">#</a> 解题思路</h2><ol><li><p><strong>问题分解</strong></p><ul><li><p>对于每个节点，有两种选择：</p><ul><li><strong>偷取该节点</strong>：那么它的两个子节点就不能被偷取。</li><li><strong>不偷取该节点</strong>：可以选择偷取子节点。</li></ul></li><li><p>我们使用一个数组 <code>[notRob, rob]</code> 表示两种状态：</p><ul><li><code>notRob</code>: 不偷取当前节点的最大收益。</li><li><code>rob</code>: 偷取当前节点的最大收益。</li></ul></li></ul></li><li><p><strong>递归状态转移</strong></p><ul><li><strong>叶子节点的情况</strong>： <ul><li>如果当前节点为空，则 <code>[notRob, rob] = [0, 0]</code>。</li></ul></li><li><strong>状态转移方程</strong>： <ul><li><code>notRob = max(left[0], left[1]) + max(right[0], right[1])</code><ul><li>当前节点不偷取，可以从左右子节点任意状态中选择最大值。</li></ul></li><li><code>rob = root.val + left[0] + right[0]</code><ul><li>当前节点偷取，只能加上左右子节点不偷取时的收益。</li></ul></li></ul></li></ul></li><li><p><strong>最终结果</strong></p><ul><li>对整棵树的根节点，取 <code>max(notRob, rob)</code>。</li></ul></li></ol><h4 id="复杂度分析" tabindex="-1"><a class="header-anchor" href="#复杂度分析" aria-hidden="true">#</a> 复杂度分析</h4><ul><li><strong>时间复杂度</strong>：<code>O(n)</code>，其中 <code>n</code> 是树中节点的数量，每个节点访问一次。</li><li><strong>空间复杂度</strong>：<code>O(h)</code>，其中 <code>h</code> 是树的高度，递归调用栈的空间复杂度为 <code>O(h)</code>，最差情况下为 <code>O(n)</code>（完全不平衡树）。</li></ul><h2 id="代码" tabindex="-1"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>TreeNode<span class="token punctuation">}</span></span> <span class="token parameter">root</span>
 * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">}</span></span>
 */</span>
<span class="token keyword">var</span> <span class="token function-variable function">rob</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">root</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">const</span> <span class="token function-variable function">helper</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">root</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

		<span class="token keyword">const</span> left <span class="token operator">=</span> <span class="token function">helper</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">const</span> right <span class="token operator">=</span> <span class="token function">helper</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>

		<span class="token keyword">const</span> notRob <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>left<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> left<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>right<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> right<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">const</span> rob <span class="token operator">=</span> root<span class="token punctuation">.</span>val <span class="token operator">+</span> left<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> right<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

		<span class="token keyword">return</span> <span class="token punctuation">[</span>notRob<span class="token punctuation">,</span> rob<span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span><span class="token punctuation">;</span>

	<span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token operator">...</span><span class="token function">helper</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="相关题目" tabindex="-1"><a class="header-anchor" href="#相关题目" aria-hidden="true">#</a> 相关题目</h2>`,31),I=n("thead",null,[n("tr",null,[n("th",{style:{"text-align":"center"}},"题号"),n("th",{style:{"text-align":"left"}},"标题"),n("th",{style:{"text-align":"center"}},"题解"),n("th",{style:{"text-align":"left"}},"标签"),n("th",{style:{"text-align":"center"}},"难度"),n("th",{style:{"text-align":"center"}},"力扣")])],-1),R=n("td",{style:{"text-align":"center"}},"198",-1),q=n("td",{style:{"text-align":"left"}},"打家劫舍",-1),N={style:{"text-align":"center"}},j={style:{"text-align":"left"}},E=n("code",null,"数组",-1),M=n("code",null,"动态规划",-1),O=n("td",{style:{"text-align":"center"}},"🟠",-1),z={style:{"text-align":"center"}},C={href:"https://leetcode.cn/problems/house-robber",target:"_blank",rel:"noopener noreferrer"},L={href:"https://leetcode.com/problems/house-robber",target:"_blank",rel:"noopener noreferrer"},T=n("td",{style:{"text-align":"center"}},"213",-1),V=n("td",{style:{"text-align":"left"}},"打家劫舍 II",-1),B={style:{"text-align":"center"}},A={style:{"text-align":"left"}},G=n("code",null,"数组",-1),S=n("code",null,"动态规划",-1),D=n("td",{style:{"text-align":"center"}},"🟠",-1),F={style:{"text-align":"center"}},H={href:"https://leetcode.cn/problems/house-robber-ii",target:"_blank",rel:"noopener noreferrer"},J={href:"https://leetcode.com/problems/house-robber-ii",target:"_blank",rel:"noopener noreferrer"};function K(P,Q){const p=l("font"),a=l("RouterLink"),o=l("ExternalLinkIcon");return r(),i("div",null,[k,n("p",null,[t("🟠 "),s(p,{color:"#ffb800"},{default:e(()=>[t("Medium")]),_:1}),t("  🔖  "),s(a,{to:"/tag/tree.html"},{default:e(()=>[g]),_:1}),t(),s(a,{to:"/tag/depth-first-search.html"},{default:e(()=>[m]),_:1}),t(),s(a,{to:"/tag/dynamic-programming.html"},{default:e(()=>[b]),_:1}),t(),s(a,{to:"/tag/binary-tree.html"},{default:e(()=>[f]),_:1}),t("  🔗 "),n("a",_,[v,s(o)]),t(),n("a",y,[x,s(o)])]),w,u(" prettier-ignore "),n("table",null,[I,n("tbody",null,[n("tr",null,[R,q,n("td",N,[s(a,{to:"/problem/0198.html"},{default:e(()=>[t("[✓]")]),_:1})]),n("td",j,[s(a,{to:"/tag/array.html"},{default:e(()=>[E]),_:1}),t(),s(a,{to:"/tag/dynamic-programming.html"},{default:e(()=>[M]),_:1})]),O,n("td",z,[n("a",C,[t("🀄️"),s(o)]),t(),n("a",L,[t("🔗"),s(o)])])]),n("tr",null,[T,V,n("td",B,[s(a,{to:"/problem/0213.html"},{default:e(()=>[t("[✓]")]),_:1})]),n("td",A,[s(a,{to:"/tag/array.html"},{default:e(()=>[G]),_:1}),t(),s(a,{to:"/tag/dynamic-programming.html"},{default:e(()=>[S]),_:1})]),D,n("td",F,[n("a",H,[t("🀄️"),s(o)]),t(),n("a",J,[t("🔗"),s(o)])])])])])])}const W=c(h,[["render",K],["__file","0337.html.vue"]]);export{W as default};
