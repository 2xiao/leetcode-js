import{_ as p,r as l,o as r,c as i,a as t,b as n,d as e,w as s,f as d,e as u}from"./app-fBVbqwGY.js";const _={},h=t("h1",{id:"_264-丑数-ii",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#_264-丑数-ii","aria-hidden":"true"},"#"),n(" 264. 丑数 II")],-1),m=t("code",null,"哈希表",-1),k=t("code",null,"数学",-1),g=t("code",null,"动态规划",-1),b=t("code",null,"堆（优先队列）",-1),f={href:"https://leetcode.cn/problems/ugly-number-ii",target:"_blank",rel:"noopener noreferrer"},v=t("code",null,"力扣",-1),y={href:"https://leetcode.com/problems/ugly-number-ii",target:"_blank",rel:"noopener noreferrer"},x=t("code",null,"LeetCode",-1),w=u(`<h2 id="题目" tabindex="-1"><a class="header-anchor" href="#题目" aria-hidden="true">#</a> 题目</h2><p>An <strong>ugly number</strong> is a positive integer whose prime factors are limited to <code>2</code>, <code>3</code>, and <code>5</code>.</p><p>Given an integer <code>n</code>, return <em>the</em> <code>nth</code> <em><strong>ugly number</strong></em>.</p><p><strong>Example 1:</strong></p><blockquote><p>Input: n = 10</p><p>Output: 12</p><p>Explanation: [1, 2, 3, 4, 5, 6, 8, 9, 10, 12] is the sequence of the first 10 ugly numbers.</p></blockquote><p><strong>Example 2:</strong></p><blockquote><p>Input: n = 1</p><p>Output: 1</p><p>Explanation: 1 has no prime factors, therefore all of its prime factors are limited to 2, 3, and 5.</p></blockquote><p><strong>Constraints:</strong></p><ul><li><code>1 &lt;= n &lt;= 1690</code></li></ul><h2 id="题目大意" tabindex="-1"><a class="header-anchor" href="#题目大意" aria-hidden="true">#</a> 题目大意</h2><p>给你一个整数 <code>n</code> ，请你找出并返回第 <code>n</code> 个 <strong>丑数</strong> 。</p><p>说明：丑数是只包含质因数 <code>2</code>、<code>3</code> 和/或 <code>5</code> 的正整数；<code>1</code> 是丑数。</p><h2 id="解题思路" tabindex="-1"><a class="header-anchor" href="#解题思路" aria-hidden="true">#</a> 解题思路</h2><p>这道题很精妙，你看着它好像是道数学题，实际上它却是一个合并多个有序链表的问题，同时用到了筛选素数的思路。</p><p>类似 <strong>如何高效寻找素数</strong> 的思路：如果一个数 x 是丑数，那么 <code>x * 2</code>, <code>x * 3</code>, <code>x * 5</code> 都一定是丑数。</p><p>我们把所有丑数想象成一个从小到大排序的链表，就是这个样子：</p><p><code>1 -&gt; 2 -&gt; 3 -&gt; 4 -&gt; 5 -&gt; 6 -&gt; 8 -&gt; ...</code></p><p>然后，我们可以把丑数分为三类：<code>2</code> 的倍数、<code>3</code> 的倍数、<code>5</code> 的倍数（按照题目的意思，<code>1</code> 算作特殊的丑数，放在开头），这三类丑数就好像三条有序链表，如下：</p><ul><li>能被 <code>2</code> 整除的丑数：</li></ul><p><code>1 -&gt; 1*2 -&gt; 2*2 -&gt; 3*2 -&gt; 4*2 -&gt; 5*2 -&gt; 6*2 -&gt; 8*2 -&gt;...</code></p><ul><li>能被 <code>3</code> 整除的丑数：</li></ul><p><code>1 -&gt; 1*3 -&gt; 2*3 -&gt; 3*3 -&gt; 4*3 -&gt; 5*3 -&gt; 6*3 -&gt; 8*3 -&gt;...</code></p><ul><li>能被 <code>5</code> 整除的丑数：</li></ul><p><code>1 -&gt; 1*5 -&gt; 2*5 -&gt; 3*5 -&gt; 4*5 -&gt; 5*5 -&gt; 6*5 -&gt; 8*5 -&gt;...</code></p><p>我们其实就是想把这三条「有序链表」合并在一起并去重，合并的结果就是丑数的序列，然后求合并后的这条有序链表中第 <code>n</code> 个元素是什么。</p><h2 id="代码" tabindex="-1"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">}</span></span> <span class="token parameter">n</span>
 * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">}</span></span>
 */</span>
<span class="token keyword">var</span> <span class="token function-variable function">nthUglyNumber</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">let</span> index2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>
		index3 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>
		index5 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">let</span> val2 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>
		val3 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>
		val5 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token keyword">let</span> ugly <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">let</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">while</span> <span class="token punctuation">(</span>index <span class="token operator">&lt;</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">let</span> min <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>val2<span class="token punctuation">,</span> val3<span class="token punctuation">,</span> val5<span class="token punctuation">)</span><span class="token punctuation">;</span>
		ugly<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> min<span class="token punctuation">;</span>
		index<span class="token operator">++</span><span class="token punctuation">;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>min <span class="token operator">==</span> val2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			val2 <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> ugly<span class="token punctuation">[</span>index2<span class="token punctuation">]</span><span class="token punctuation">;</span>
			index2<span class="token operator">++</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>min <span class="token operator">==</span> val3<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			val3 <span class="token operator">=</span> <span class="token number">3</span> <span class="token operator">*</span> ugly<span class="token punctuation">[</span>index3<span class="token punctuation">]</span><span class="token punctuation">;</span>
			index3<span class="token operator">++</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>min <span class="token operator">==</span> val5<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			val5 <span class="token operator">=</span> <span class="token number">5</span> <span class="token operator">*</span> ugly<span class="token punctuation">[</span>index5<span class="token punctuation">]</span><span class="token punctuation">;</span>
			index5<span class="token operator">++</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> ugly<span class="token punctuation">[</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="相关题目" tabindex="-1"><a class="header-anchor" href="#相关题目" aria-hidden="true">#</a> 相关题目</h2>`,28),q=t("thead",null,[t("tr",null,[t("th",{style:{"text-align":"center"}},"题号"),t("th",{style:{"text-align":"left"}},"标题"),t("th",{style:{"text-align":"center"}},"题解"),t("th",{style:{"text-align":"left"}},"标签"),t("th",{style:{"text-align":"center"}},"难度"),t("th",{style:{"text-align":"center"}},"力扣")])],-1),I=t("td",{style:{"text-align":"center"}},"23",-1),E=t("td",{style:{"text-align":"left"}},"合并 K 个升序链表",-1),N={style:{"text-align":"center"}},C={style:{"text-align":"left"}},L=t("code",null,"链表",-1),V=t("code",null,"分治",-1),j=t("code",null,"堆（优先队列）",-1),B=t("code",null,"1+",-1),A=t("td",{style:{"text-align":"center"}},"🔴",-1),M={style:{"text-align":"center"}},O={href:"https://leetcode.cn/problems/merge-k-sorted-lists",target:"_blank",rel:"noopener noreferrer"},R={href:"https://leetcode.com/problems/merge-k-sorted-lists",target:"_blank",rel:"noopener noreferrer"},G=t("td",{style:{"text-align":"center"}},"204",-1),K=t("td",{style:{"text-align":"left"}},"计数质数",-1),S={style:{"text-align":"center"}},T={style:{"text-align":"left"}},U=t("code",null,"数组",-1),z=t("code",null,"数学",-1),D=t("code",null,"枚举",-1),F=t("code",null,"1+",-1),H=t("td",{style:{"text-align":"center"}},"🟠",-1),J={style:{"text-align":"center"}},P={href:"https://leetcode.cn/problems/count-primes",target:"_blank",rel:"noopener noreferrer"},Q={href:"https://leetcode.com/problems/count-primes",target:"_blank",rel:"noopener noreferrer"},W=t("td",{style:{"text-align":"center"}},"263",-1),X=t("td",{style:{"text-align":"left"}},"丑数",-1),Y={style:{"text-align":"center"}},Z={style:{"text-align":"left"}},$=t("code",null,"数学",-1),tt=t("td",{style:{"text-align":"center"}},"🟢",-1),nt={style:{"text-align":"center"}},et={href:"https://leetcode.cn/problems/ugly-number",target:"_blank",rel:"noopener noreferrer"},st={href:"https://leetcode.com/problems/ugly-number",target:"_blank",rel:"noopener noreferrer"},at=t("td",{style:{"text-align":"center"}},"279",-1),ot=t("td",{style:{"text-align":"left"}},"完全平方数",-1),lt={style:{"text-align":"center"}},ct={style:{"text-align":"left"}},pt=t("code",null,"广度优先搜索",-1),rt=t("code",null,"数学",-1),it=t("code",null,"动态规划",-1),dt=t("td",{style:{"text-align":"center"}},"🟠",-1),ut={style:{"text-align":"center"}},_t={href:"https://leetcode.cn/problems/perfect-squares",target:"_blank",rel:"noopener noreferrer"},ht={href:"https://leetcode.com/problems/perfect-squares",target:"_blank",rel:"noopener noreferrer"},mt=t("td",{style:{"text-align":"center"}},"313",-1),kt=t("td",{style:{"text-align":"left"}},"超级丑数",-1),gt={style:{"text-align":"center"}},bt={style:{"text-align":"left"}},ft=t("code",null,"数组",-1),vt=t("code",null,"数学",-1),yt=t("code",null,"动态规划",-1),xt=t("td",{style:{"text-align":"center"}},"🟠",-1),wt={style:{"text-align":"center"}},qt={href:"https://leetcode.cn/problems/super-ugly-number",target:"_blank",rel:"noopener noreferrer"},It={href:"https://leetcode.com/problems/super-ugly-number",target:"_blank",rel:"noopener noreferrer"},Et=t("td",{style:{"text-align":"center"}},"1201",-1),Nt=t("td",{style:{"text-align":"left"}},"丑数 III",-1),Ct=t("td",{style:{"text-align":"center"}},null,-1),Lt={style:{"text-align":"left"}},Vt=t("code",null,"数学",-1),jt=t("code",null,"二分查找",-1),Bt=t("code",null,"组合数学",-1),At=t("code",null,"1+",-1),Mt=t("td",{style:{"text-align":"center"}},"🟠",-1),Ot={style:{"text-align":"center"}},Rt={href:"https://leetcode.cn/problems/ugly-number-iii",target:"_blank",rel:"noopener noreferrer"},Gt={href:"https://leetcode.com/problems/ugly-number-iii",target:"_blank",rel:"noopener noreferrer"};function Kt(St,Tt){const c=l("font"),a=l("RouterLink"),o=l("ExternalLinkIcon");return r(),i("div",null,[h,t("p",null,[n("🟠 "),e(c,{color:"#ffb800"},{default:s(()=>[n("Medium")]),_:1}),n("  🔖  "),e(a,{to:"/tag/hash-table.html"},{default:s(()=>[m]),_:1}),n(),e(a,{to:"/tag/math.html"},{default:s(()=>[k]),_:1}),n(),e(a,{to:"/tag/dynamic-programming.html"},{default:s(()=>[g]),_:1}),n(),e(a,{to:"/tag/heap-priority-queue.html"},{default:s(()=>[b]),_:1}),n("  🔗 "),t("a",f,[v,e(o)]),n(),t("a",y,[x,e(o)])]),w,d(" prettier-ignore "),t("table",null,[q,t("tbody",null,[t("tr",null,[I,E,t("td",N,[e(a,{to:"/problem/0023.html"},{default:s(()=>[n("[✓]")]),_:1})]),t("td",C,[e(a,{to:"/tag/linked-list.html"},{default:s(()=>[L]),_:1}),n(),e(a,{to:"/tag/divide-and-conquer.html"},{default:s(()=>[V]),_:1}),n(),e(a,{to:"/tag/heap-priority-queue.html"},{default:s(()=>[j]),_:1}),n(),B]),A,t("td",M,[t("a",O,[n("🀄️"),e(o)]),n(),t("a",R,[n("🔗"),e(o)])])]),t("tr",null,[G,K,t("td",S,[e(a,{to:"/problem/0204.html"},{default:s(()=>[n("[✓]")]),_:1})]),t("td",T,[e(a,{to:"/tag/array.html"},{default:s(()=>[U]),_:1}),n(),e(a,{to:"/tag/math.html"},{default:s(()=>[z]),_:1}),n(),e(a,{to:"/tag/enumeration.html"},{default:s(()=>[D]),_:1}),n(),F]),H,t("td",J,[t("a",P,[n("🀄️"),e(o)]),n(),t("a",Q,[n("🔗"),e(o)])])]),t("tr",null,[W,X,t("td",Y,[e(a,{to:"/problem/0263.html"},{default:s(()=>[n("[✓]")]),_:1})]),t("td",Z,[e(a,{to:"/tag/math.html"},{default:s(()=>[$]),_:1})]),tt,t("td",nt,[t("a",et,[n("🀄️"),e(o)]),n(),t("a",st,[n("🔗"),e(o)])])]),t("tr",null,[at,ot,t("td",lt,[e(a,{to:"/problem/0279.html"},{default:s(()=>[n("[✓]")]),_:1})]),t("td",ct,[e(a,{to:"/tag/breadth-first-search.html"},{default:s(()=>[pt]),_:1}),n(),e(a,{to:"/tag/math.html"},{default:s(()=>[rt]),_:1}),n(),e(a,{to:"/tag/dynamic-programming.html"},{default:s(()=>[it]),_:1})]),dt,t("td",ut,[t("a",_t,[n("🀄️"),e(o)]),n(),t("a",ht,[n("🔗"),e(o)])])]),t("tr",null,[mt,kt,t("td",gt,[e(a,{to:"/problem/0313.html"},{default:s(()=>[n("[✓]")]),_:1})]),t("td",bt,[e(a,{to:"/tag/array.html"},{default:s(()=>[ft]),_:1}),n(),e(a,{to:"/tag/math.html"},{default:s(()=>[vt]),_:1}),n(),e(a,{to:"/tag/dynamic-programming.html"},{default:s(()=>[yt]),_:1})]),xt,t("td",wt,[t("a",qt,[n("🀄️"),e(o)]),n(),t("a",It,[n("🔗"),e(o)])])]),t("tr",null,[Et,Nt,Ct,t("td",Lt,[e(a,{to:"/tag/math.html"},{default:s(()=>[Vt]),_:1}),n(),e(a,{to:"/tag/binary-search.html"},{default:s(()=>[jt]),_:1}),n(),e(a,{to:"/tag/combinatorics.html"},{default:s(()=>[Bt]),_:1}),n(),At]),Mt,t("td",Ot,[t("a",Rt,[n("🀄️"),e(o)]),n(),t("a",Gt,[n("🔗"),e(o)])])])])])])}const zt=p(_,[["render",Kt],["__file","0264.html.vue"]]);export{zt as default};
