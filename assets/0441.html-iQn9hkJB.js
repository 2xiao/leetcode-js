import{_ as l,r as e,o as i,c as r,a as n,b as s,d as a,w as t,e as d}from"./app-B5EG-zH0.js";const u={},k=n("h1",{id:"_441-排列硬币",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_441-排列硬币","aria-hidden":"true"},"#"),s(" 441. 排列硬币")],-1),m=n("code",null,"数学",-1),g=n("code",null,"二分查找",-1),h={href:"https://leetcode.cn/problems/arranging-coins",target:"_blank",rel:"noopener noreferrer"},b=n("code",null,"力扣",-1),f={href:"https://leetcode.com/problems/arranging-coins",target:"_blank",rel:"noopener noreferrer"},v=n("code",null,"LeetCode",-1),_=d(`<h2 id="题目" tabindex="-1"><a class="header-anchor" href="#题目" aria-hidden="true">#</a> 题目</h2><p>You have <code>n</code> coins and you want to build a staircase with these coins. The staircase consists of <code>k</code> rows where the <code>ith</code> row has exactly <code>i</code> coins. The last row of the staircase <strong>may be</strong> incomplete.</p><p>Given the integer <code>n</code>, return <em>the number of<strong>complete rows</strong> of the staircase you will build</em>.</p><p><strong>Example 1:</strong></p><figure><img src="https://assets.leetcode.com/uploads/2021/04/09/arrangecoins1-grid.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><blockquote><p>Input: n = 5</p><p>Output: 2</p><p>Explanation: Because the 3rd row is incomplete, we return 2.</p></blockquote><p><strong>Example 2:</strong></p><figure><img src="https://assets.leetcode.com/uploads/2021/04/09/arrangecoins2-grid.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><blockquote><p>Input: n = 8</p><p>Output: 3</p><p>Explanation: Because the 4th row is incomplete, we return 3.</p></blockquote><p><strong>Constraints:</strong></p><ul><li><code>1 &lt;= n &lt;= 2^31 - 1</code></li></ul><h2 id="题目大意" tabindex="-1"><a class="header-anchor" href="#题目大意" aria-hidden="true">#</a> 题目大意</h2><p>你总共有 <code>n</code> 枚硬币，并计划将它们按阶梯状排列。对于一个由 <code>k</code> 行组成的阶梯，其第 <code>i</code> ** 行必须正好有 <code>i</code> ** 枚硬币。阶梯的最后一行 <strong>可能</strong> 是不完整的。</p><p>给你一个数字 <code>n</code> ，计算并返回可形成 <strong>完整阶梯行</strong> 的总行数。</p><p><strong>示例 1：</strong></p><figure><img src="https://assets.leetcode.com/uploads/2021/04/09/arrangecoins1-grid.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><blockquote><p><strong>输入：</strong> n = 5</p><p><strong>输出：</strong> 2</p><p><strong>解释：</strong> 因为第三行不完整，所以返回 2 。</p></blockquote><p><strong>示例 2：</strong></p><figure><img src="https://assets.leetcode.com/uploads/2021/04/09/arrangecoins2-grid.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><blockquote><p><strong>输入：</strong> n = 8</p><p><strong>输出：</strong> 3</p><p><strong>解释：</strong> 因为第四行不完整，所以返回 3 。</p></blockquote><p><strong>提示：</strong></p><ul><li><code>1 &lt;= n &lt;= 2^31 - 1</code></li></ul><h2 id="解题思路" tabindex="-1"><a class="header-anchor" href="#解题思路" aria-hidden="true">#</a> 解题思路</h2><p>这道题的本质是寻找一个最大的整数 <code>k</code>，满足阶梯总硬币数公式：<code>(k * (k + 1)) / 2 &lt;= n</code>，即找到 <code>k</code> 使得从第 1 行到第 <code>k</code> 行的硬币总数小于等于 <code>n</code>。</p><p>因为阶梯行数 <code>k</code> 和硬币总数 <code>n</code> 的关系是单调递增的，使用 <strong>二分查找</strong> 是一个高效的解决方法。</p><ol><li>初始化 <code>left = 1</code> 和 <code>right = n</code>，定义搜索范围。</li><li>在二分查找的过程中，计算中点 <code>mid</code>，检查是否满足公式 <code>(mid * (mid + 1)) / 2 &lt;= n</code>。</li><li>根据公式的结果调整搜索范围： <ul><li>如果超出硬币总数，减小搜索范围，调整 <code>right = mid - 1</code>。</li><li>如果可以满足，则记录结果，并尝试扩大范围 <code>left = mid + 1</code>。</li></ul></li><li>当循环结束时，<code>res</code> 保存的就是可以构成完整阶梯行的最大行数，返回记录的最大行数 <code>res</code>。</li></ol><h4 id="复杂度分析" tabindex="-1"><a class="header-anchor" href="#复杂度分析" aria-hidden="true">#</a> 复杂度分析</h4><ul><li><strong>时间复杂度</strong>：<code>O(log n)</code>，每次二分查找将范围缩小一半，总共进行 <code>O(log n)</code> 次计算。</li><li><strong>空间复杂度</strong>：<code>O(1)</code>，只使用了常数个变量。</li></ul><h2 id="代码" tabindex="-1"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">}</span></span> <span class="token parameter">n</span>
 * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">}</span></span>
 */</span>
<span class="token keyword">var</span> <span class="token function-variable function">arrangeCoins</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">let</span> left <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>
		right <span class="token operator">=</span> n<span class="token punctuation">,</span>
		res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// 初始化搜索范围和结果</span>
	<span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;=</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">const</span> mid <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token punctuation">(</span>left <span class="token operator">+</span> right<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 计算中间值</span>
		<span class="token keyword">const</span> total <span class="token operator">=</span> <span class="token punctuation">(</span>mid <span class="token operator">*</span> <span class="token punctuation">(</span>mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment">// 计算当前阶梯的硬币总数</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>total <span class="token operator">&gt;</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			right <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 超出硬币总数，缩小范围</span>
		<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
			res <span class="token operator">=</span> mid<span class="token punctuation">;</span> <span class="token comment">// 记录当前结果</span>
			left <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 尝试检查更大的阶梯行数</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> res<span class="token punctuation">;</span> <span class="token comment">// 返回最终结果</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,30);function w(x,y){const p=e("font"),o=e("RouterLink"),c=e("ExternalLinkIcon");return i(),r("div",null,[k,n("p",null,[s("🟢 "),a(p,{color:"#15bd66"},{default:t(()=>[s("Easy")]),_:1}),s("  🔖  "),a(o,{to:"/tag/math.html"},{default:t(()=>[m]),_:1}),s(),a(o,{to:"/tag/binary-search.html"},{default:t(()=>[g]),_:1}),s("  🔗 "),n("a",h,[b,a(c)]),s(),n("a",f,[v,a(c)])]),_])}const E=l(u,[["render",w],["__file","0441.html.vue"]]);export{E as default};
