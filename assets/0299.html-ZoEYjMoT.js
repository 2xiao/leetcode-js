import{_ as u,r as c,o as i,c as r,a as n,b as s,d as t,w as e,f as d,e as l}from"./app-B5EG-zH0.js";const k={},h=n("h1",{id:"_299-猜数字游戏",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_299-猜数字游戏","aria-hidden":"true"},"#"),s(" 299. 猜数字游戏")],-1),g=n("code",null,"哈希表",-1),m=n("code",null,"字符串",-1),b=n("code",null,"计数",-1),_={href:"https://leetcode.cn/problems/bulls-and-cows",target:"_blank",rel:"noopener noreferrer"},f=n("code",null,"力扣",-1),q={href:"https://leetcode.com/problems/bulls-and-cows",target:"_blank",rel:"noopener noreferrer"},v=n("code",null,"LeetCode",-1),w=n("h2",{id:"题目",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#题目","aria-hidden":"true"},"#"),s(" 题目")],-1),y={href:"https://en.wikipedia.org/wiki/Bulls_and_Cows",target:"_blank",rel:"noopener noreferrer"},x=l('<p>You write down a secret number and ask your friend to guess what the number is. When your friend makes a guess, you provide a hint with the following info:</p><ul><li>The number of &quot;bulls&quot;, which are digits in the guess that are in the correct position.</li><li>The number of &quot;cows&quot;, which are digits in the guess that are in your secret number but are located in the wrong position. Specifically, the non-bull digits in the guess that could be rearranged such that they become bulls.</li></ul><p>Given the secret number <code>secret</code> and your friend&#39;s guess <code>guess</code>, return <em>the hint for your friend &#39;s guess</em>.</p><p>The hint should be formatted as <code>&quot;xAyB&quot;</code>, where <code>x</code> is the number of bulls and <code>y</code> is the number of cows. Note that both <code>secret</code> and <code>guess</code> may contain duplicate digits.</p><p><strong>Example 1:</strong></p><blockquote><p>Input: secret = &quot;1807&quot;, guess = &quot;7810&quot;</p><p>Output: &quot;1A3B&quot;</p><p>Explanation: Bulls are connected with a &#39;|&#39; and cows are underlined:</p><p>&quot;1807&quot; -&gt; &quot;<em>7</em> 8 <em>10</em> &quot;</p></blockquote><p><strong>Example 2:</strong></p><blockquote><p>Input: secret = &quot;1123&quot;, guess = &quot;0111&quot;</p><p>Output: &quot;1A1B&quot;</p><p>Explanation: Bulls are connected with a &#39;|&#39; and cows are underlined:</p><p>&quot;1123&quot; -&gt; &quot;01 <em>1</em> 1&quot; or &quot;1123&quot; -&gt; &quot;011 <em>1</em>&quot;</p><p>Note that only one of the two unmatched 1s is counted as a cow since the non-bull digits can only be rearranged to allow one 1 to be a bull.</p></blockquote><p><strong>Constraints:</strong></p><ul><li><code>1 &lt;= secret.length, guess.length &lt;= 1000</code></li><li><code>secret.length == guess.length</code></li><li><code>secret</code> and <code>guess</code> consist of digits only.</li></ul><h2 id="题目大意" tabindex="-1"><a class="header-anchor" href="#题目大意" aria-hidden="true">#</a> 题目大意</h2>',11),B={href:"https://baike.baidu.com/item/%E7%8C%9C%E6%95%B0%E5%AD%97/83200?fromtitle=Bulls+and+Cows&fromid=12003488&fr=aladdin",target:"_blank",rel:"noopener noreferrer"},C=l(`<p>写出一个秘密数字，并请朋友猜这个数字是多少。朋友每猜测一次，你就会给他一个包含下述信息的提示：</p><ul><li>猜测数字中有多少位属于数字和确切位置都猜对了（称为 &quot;Bulls&quot;，公牛），</li><li>有多少位属于数字猜对了但是位置不对（称为 &quot;Cows&quot;，奶牛）。也就是说，这次猜测中有多少位非公牛数字可以通过重新排列转换成公牛数字。</li></ul><p>给你一个秘密数字 <code>secret</code> 和朋友猜测的数字 <code>guess</code> ，请你返回对朋友这次猜测的提示。</p><p>提示的格式为 <code>&quot;xAyB&quot;</code> ，<code>x</code> 是公牛个数， <code>y</code> 是奶牛个数，<code>A</code> 表示公牛，<code>B</code> 表示奶牛。</p><p>请注意秘密数字和朋友猜测的数字都可能含有重复数字。</p><p><strong>示例 1：</strong></p><blockquote><p><strong>输入：</strong> secret = &quot;1807&quot;, guess = &quot;7810&quot;</p><p><strong>输出：</strong> &quot;1A3B&quot;</p><p><strong>解释：</strong> 数字猜对位置不对（奶牛）的采用斜体加粗标识。</p><p>&quot;1807&quot; -&gt; &quot;<em><strong>7</strong></em> 8 <em><strong>10</strong></em> &quot;</p></blockquote><p><strong>示例 2：</strong></p><blockquote><p><strong>输入：</strong> secret = &quot;1123&quot;, guess = &quot;0111&quot;</p><p><strong>输出：</strong> &quot;1A1B&quot;</p><p><strong>解释：</strong> 数字猜对位置不对（奶牛）的采用斜体加粗标识。</p><p>&quot;1123&quot; -&gt; &quot;01 <em><strong>1</strong></em> 1&quot; or &quot;1123&quot; -&gt; &quot;011 <em><strong>1</strong></em> &quot;</p><p>注意，两个不匹配的 1 中，只有一个会算作奶牛（数字猜对位置不对）。通过重新排列非公牛数字，其中仅有一个 1 可以成为公牛数字。</p></blockquote><p><strong>提示：</strong></p><ul><li><code>1 &lt;= secret.length, guess.length &lt;= 1000</code></li><li><code>secret.length == guess.length</code></li><li><code>secret</code> 和 <code>guess</code> 仅由数字组成</li></ul><h2 id="解题思路" tabindex="-1"><a class="header-anchor" href="#解题思路" aria-hidden="true">#</a> 解题思路</h2><ol><li><p><strong>初始化</strong></p><ul><li>创建一个长度为 <code>10</code> 的数组 <code>count</code>，每个位置表示数字 <code>0</code> 到 <code>9</code> 的计数，初始化为 <code>0</code>。</li><li>变量 <code>bulls</code> 用于统计完全匹配的个数。</li></ul></li><li><p><strong>遍历字符串</strong></p><ul><li>如果 <code>secret[i] === guess[i]</code>，说明这个位置是 <code>bulls</code>，计数器加 1。</li><li>更新 <code>count</code> 数组： <ul><li>对 <code>secret[i]</code> 的计数加 1，因为它可能贡献了一个 <code>cow</code>。</li><li>对 <code>guess[i]</code> 的计数减 1，因为它可能减少一个 <code>cow</code>。</li></ul></li></ul></li><li><p><strong>计算<code>cows</code></strong></p><ul><li>遍历 <code>count</code> 数组中所有正值的和，表示这些数字没有完全匹配的部分。</li><li>总的未匹配部分为 <code>n - bulls</code>，用它减去上述正值和，即为 <code>cows</code>。</li></ul></li><li><p><strong>返回结果</strong></p><ul><li>拼接结果为 <code>&quot;{bulls}A{cows}B&quot;</code>。</li></ul></li></ol><h4 id="复杂度分析" tabindex="-1"><a class="header-anchor" href="#复杂度分析" aria-hidden="true">#</a> 复杂度分析</h4><ul><li><strong>时间复杂度</strong>：<code>O(n)</code>，遍历字符串一次。</li><li><strong>空间复杂度</strong>：<code>O(1)</code>，使用一个固定大小的数组 <code>count</code>。</li></ul><h2 id="代码" tabindex="-1"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>string<span class="token punctuation">}</span></span> <span class="token parameter">secret</span>
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>string<span class="token punctuation">}</span></span> <span class="token parameter">guess</span>
 * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>string<span class="token punctuation">}</span></span>
 */</span>
<span class="token keyword">var</span> <span class="token function-variable function">getHint</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">secret<span class="token punctuation">,</span> guess</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">const</span> n <span class="token operator">=</span> secret<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
	<span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">let</span> bulls <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>secret<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">===</span> guess<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			bulls<span class="token operator">++</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		count<span class="token punctuation">[</span><span class="token function">Number</span><span class="token punctuation">(</span>secret<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>
		count<span class="token punctuation">[</span><span class="token function">Number</span><span class="token punctuation">(</span>guess<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">--</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">const</span> cows <span class="token operator">=</span> n <span class="token operator">-</span> bulls <span class="token operator">-</span> count<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> a <span class="token operator">+</span> <span class="token punctuation">(</span>b <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">?</span> b <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>bulls<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">A</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>cows<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">B</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="相关题目" tabindex="-1"><a class="header-anchor" href="#相关题目" aria-hidden="true">#</a> 相关题目</h2>`,18),A=n("thead",null,[n("tr",null,[n("th",{style:{"text-align":"center"}},"题号"),n("th",{style:{"text-align":"left"}},"标题"),n("th",{style:{"text-align":"center"}},"题解"),n("th",{style:{"text-align":"left"}},"标签"),n("th",{style:{"text-align":"center"}},"难度"),n("th",{style:{"text-align":"center"}},"力扣")])],-1),E=n("td",{style:{"text-align":"center"}},"2531",-1),N=n("td",{style:{"text-align":"left"}},"使字符串中不同字符的数目相等",-1),L=n("td",{style:{"text-align":"center"}},null,-1),V={style:{"text-align":"left"}},I=n("code",null,"哈希表",-1),O=n("code",null,"字符串",-1),T=n("code",null,"计数",-1),j=n("td",{style:{"text-align":"center"}},"🟠",-1),R={style:{"text-align":"center"}},S={href:"https://leetcode.cn/problems/make-number-of-distinct-characters-equal",target:"_blank",rel:"noopener noreferrer"},Y={href:"https://leetcode.com/problems/make-number-of-distinct-characters-equal",target:"_blank",rel:"noopener noreferrer"};function $(D,G){const p=c("font"),a=c("RouterLink"),o=c("ExternalLinkIcon");return i(),r("div",null,[h,n("p",null,[s("🟠 "),t(p,{color:"#ffb800"},{default:e(()=>[s("Medium")]),_:1}),s("  🔖  "),t(a,{to:"/tag/hash-table.html"},{default:e(()=>[g]),_:1}),s(),t(a,{to:"/tag/string.html"},{default:e(()=>[m]),_:1}),s(),t(a,{to:"/tag/counting.html"},{default:e(()=>[b]),_:1}),s("  🔗 "),n("a",_,[f,t(o)]),s(),n("a",q,[v,t(o)])]),w,n("p",null,[s("You are playing the "),n("strong",null,[n("a",y,[s("Bulls and Cows"),t(o)])]),s(" game with your friend.")]),x,n("p",null,[s("你在和朋友一起玩 "),n("a",B,[s("猜数字（Bulls and Cows）"),t(o)]),s("游戏，该游戏规则如下：")]),C,d(" prettier-ignore "),n("table",null,[A,n("tbody",null,[n("tr",null,[E,N,L,n("td",V,[t(a,{to:"/tag/hash-table.html"},{default:e(()=>[I]),_:1}),s(),t(a,{to:"/tag/string.html"},{default:e(()=>[O]),_:1}),s(),t(a,{to:"/tag/counting.html"},{default:e(()=>[T]),_:1})]),j,n("td",R,[n("a",S,[s("🀄️"),t(o)]),s(),n("a",Y,[s("🔗"),t(o)])])])])])])}const M=u(k,[["render",$],["__file","0299.html.vue"]]);export{M as default};
