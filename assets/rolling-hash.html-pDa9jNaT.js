import{_,r as d,o as i,c as r,a as t,d as o,w as l,b as e,f as c}from"./app-fBVbqwGY.js";const a={},h=t("h1",{id:"滚动哈希",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#滚动哈希","aria-hidden":"true"},"#"),e(" 滚动哈希")],-1),u=t("summary",null,"全部标签",-1),g=t("p",null,[t("strong",null,"数据结构")],-1),f=t("code",null,"数组",-1),m=t("code",null,"矩阵",-1),p=t("code",null,"链表",-1),y=t("code",null,"双向链表",-1),x=t("code",null,"栈",-1),b=t("code",null,"单调栈",-1),k=t("code",null,"队列",-1),w=t("code",null,"单调队列",-1),v=t("code",null,"堆（优先队列）",-1),I=t("code",null,"哈希表",-1),q=t("code",null,"字符串",-1),N=t("code",null,"字符串匹配",-1),z=t("code",null,"树",-1),L=t("code",null,"二叉树",-1),V=t("code",null,"二叉搜索树",-1),B=t("code",null,"最小生成树",-1),C=t("code",null,"图",-1),E=t("code",null,"有序集合",-1),K=t("code",null,"拓扑排序",-1),R=t("code",null,"最短路",-1),j=t("code",null,"强连通分量",-1),A=t("code",null,"欧拉回路",-1),D=t("code",null,"双连通分量",-1),H=t("code",null,"并查集",-1),T=t("code",null,"字典树",-1),F=t("code",null,"线段树",-1),G=t("code",null,"树状数组",-1),J=t("code",null,"后缀数组",-1),M=t("p",null,[t("strong",null,"算法")],-1),O=t("code",null,"枚举",-1),P=t("code",null,"递归",-1),Q=t("code",null,"分治",-1),S=t("code",null,"回溯",-1),U=t("code",null,"贪心",-1),W=t("code",null,"动态规划",-1),X=t("code",null,"排序",-1),Y=t("code",null,"桶排序",-1),Z=t("code",null,"计数排序",-1),$=t("code",null,"基数排序",-1),tt=t("code",null,"归并排序",-1),et=t("code",null,"快速选择",-1),ot=t("code",null,"二分查找",-1),nt=t("code",null,"记忆化搜索",-1),lt=t("code",null,"深度优先搜索",-1),st=t("code",null,"广度优先搜索",-1),dt=t("code",null,"双指针",-1),_t=t("code",null,"位运算",-1),it=t("code",null,"前缀和",-1),rt=t("code",null,"计数",-1),ct=t("code",null,"滑动窗口",-1),at=t("code",null,"状态压缩",-1),ht=t("code",null,"哈希函数",-1),ut=t("span",{class:"blue"},"滚动哈希",-1),gt=t("code",null,"扫描线",-1),ft=t("p",null,[t("strong",null,"其他")],-1),mt=t("code",null,"数学",-1),pt=t("code",null,"数论",-1),yt=t("code",null,"几何",-1),xt=t("code",null,"博弈",-1),bt=t("code",null,"模拟",-1),kt=t("code",null,"组合数学",-1),wt=t("code",null,"随机化",-1),vt=t("code",null,"概率与统计",-1),It=t("code",null,"水塘抽样",-1),qt=t("code",null,"拒绝采样",-1),Nt=t("code",null,"数据库",-1),zt=t("code",null,"设计",-1),Lt=t("code",null,"数据流",-1),Vt=t("code",null,"脑筋急转弯",-1),Bt=t("code",null,"交互",-1),Ct=t("code",null,"迭代器",-1),Et=t("code",null,"多线程",-1),Kt=t("hr",null,null,-1),Rt=t("thead",null,[t("tr",null,[t("th",{style:{"text-align":"center"}},"题号"),t("th",{style:{"text-align":"left"}},"标题"),t("th",{style:{"text-align":"center"}},"题解"),t("th",{style:{"text-align":"left"}},"标签"),t("th",{style:{"text-align":"center"}},"难度"),t("th",{style:{"text-align":"center"}},"力扣")])],-1),jt=t("td",{style:{"text-align":"center"}},"187",-1),At=t("td",{style:{"text-align":"left"}},"重复的DNA序列",-1),Dt={style:{"text-align":"center"}},Ht={style:{"text-align":"left"}},Tt=t("code",null,"位运算",-1),Ft=t("code",null,"哈希表",-1),Gt=t("code",null,"字符串",-1),Jt=t("code",null,"3+",-1),Mt=t("td",{style:{"text-align":"center"}},"🟠",-1),Ot={style:{"text-align":"center"}},Pt={href:"https://leetcode.cn/problems/repeated-dna-sequences",target:"_blank",rel:"noopener noreferrer"},Qt={href:"https://leetcode.com/problems/repeated-dna-sequences",target:"_blank",rel:"noopener noreferrer"},St=t("td",{style:{"text-align":"center"}},"214",-1),Ut=t("td",{style:{"text-align":"left"}},"最短回文串",-1),Wt=t("td",{style:{"text-align":"center"}},null,-1),Xt={style:{"text-align":"left"}},Yt=t("code",null,"字符串",-1),Zt=t("code",null,"字符串匹配",-1),$t=t("code",null,"哈希函数",-1),te=t("code",null,"1+",-1),ee=t("td",{style:{"text-align":"center"}},"🔴",-1),oe={style:{"text-align":"center"}},ne={href:"https://leetcode.cn/problems/shortest-palindrome",target:"_blank",rel:"noopener noreferrer"},le={href:"https://leetcode.com/problems/shortest-palindrome",target:"_blank",rel:"noopener noreferrer"},se=t("td",{style:{"text-align":"center"}},"718",-1),de=t("td",{style:{"text-align":"left"}},"最长重复子数组",-1),_e=t("td",{style:{"text-align":"center"}},null,-1),ie={style:{"text-align":"left"}},re=t("code",null,"数组",-1),ce=t("code",null,"二分查找",-1),ae=t("code",null,"动态规划",-1),he=t("code",null,"3+",-1),ue=t("td",{style:{"text-align":"center"}},"🟠",-1),ge={style:{"text-align":"center"}},fe={href:"https://leetcode.cn/problems/maximum-length-of-repeated-subarray",target:"_blank",rel:"noopener noreferrer"},me={href:"https://leetcode.com/problems/maximum-length-of-repeated-subarray",target:"_blank",rel:"noopener noreferrer"},pe=t("td",{style:{"text-align":"center"}},"1044",-1),ye=t("td",{style:{"text-align":"left"}},"最长重复子串",-1),xe=t("td",{style:{"text-align":"center"}},null,-1),be={style:{"text-align":"left"}},ke=t("code",null,"字符串",-1),we=t("code",null,"二分查找",-1),ve=t("code",null,"后缀数组",-1),Ie=t("code",null,"3+",-1),qe=t("td",{style:{"text-align":"center"}},"🔴",-1),Ne={style:{"text-align":"center"}},ze={href:"https://leetcode.cn/problems/longest-duplicate-substring",target:"_blank",rel:"noopener noreferrer"},Le={href:"https://leetcode.com/problems/longest-duplicate-substring",target:"_blank",rel:"noopener noreferrer"},Ve=t("td",{style:{"text-align":"center"}},"1062",-1),Be=t("td",{style:{"text-align":"left"}},"最长重复子串 🔒",-1),Ce=t("td",{style:{"text-align":"center"}},null,-1),Ee={style:{"text-align":"left"}},Ke=t("code",null,"字符串",-1),Re=t("code",null,"二分查找",-1),je=t("code",null,"动态规划",-1),Ae=t("code",null,"3+",-1),De=t("td",{style:{"text-align":"center"}},"🟠",-1),He={style:{"text-align":"center"}},Te={href:"https://leetcode.cn/problems/longest-repeating-substring",target:"_blank",rel:"noopener noreferrer"},Fe={href:"https://leetcode.com/problems/longest-repeating-substring",target:"_blank",rel:"noopener noreferrer"},Ge=t("td",{style:{"text-align":"center"}},"1147",-1),Je=t("td",{style:{"text-align":"left"}},"段式回文",-1),Me=t("td",{style:{"text-align":"center"}},null,-1),Oe={style:{"text-align":"left"}},Pe=t("code",null,"贪心",-1),Qe=t("code",null,"双指针",-1),Se=t("code",null,"字符串",-1),Ue=t("code",null,"3+",-1),We=t("td",{style:{"text-align":"center"}},"🔴",-1),Xe={style:{"text-align":"center"}},Ye={href:"https://leetcode.cn/problems/longest-chunked-palindrome-decomposition",target:"_blank",rel:"noopener noreferrer"},Ze={href:"https://leetcode.com/problems/longest-chunked-palindrome-decomposition",target:"_blank",rel:"noopener noreferrer"},$e=t("td",{style:{"text-align":"center"}},"1316",-1),to=t("td",{style:{"text-align":"left"}},"不同的循环子字符串",-1),eo=t("td",{style:{"text-align":"center"}},null,-1),oo={style:{"text-align":"left"}},no=t("code",null,"字典树",-1),lo=t("code",null,"字符串",-1),so=t("code",null,"哈希函数",-1),_o=t("code",null,"1+",-1),io=t("td",{style:{"text-align":"center"}},"🔴",-1),ro={style:{"text-align":"center"}},co={href:"https://leetcode.cn/problems/distinct-echo-substrings",target:"_blank",rel:"noopener noreferrer"},ao={href:"https://leetcode.com/problems/distinct-echo-substrings",target:"_blank",rel:"noopener noreferrer"},ho=t("td",{style:{"text-align":"center"}},"1392",-1),uo=t("td",{style:{"text-align":"left"}},"最长快乐前缀",-1),go=t("td",{style:{"text-align":"center"}},null,-1),fo={style:{"text-align":"left"}},mo=t("code",null,"字符串",-1),po=t("code",null,"字符串匹配",-1),yo=t("code",null,"哈希函数",-1),xo=t("code",null,"1+",-1),bo=t("td",{style:{"text-align":"center"}},"🔴",-1),ko={style:{"text-align":"center"}},wo={href:"https://leetcode.cn/problems/longest-happy-prefix",target:"_blank",rel:"noopener noreferrer"},vo={href:"https://leetcode.com/problems/longest-happy-prefix",target:"_blank",rel:"noopener noreferrer"},Io=t("td",{style:{"text-align":"center"}},"1461",-1),qo=t("td",{style:{"text-align":"left"}},"检查一个字符串是否包含所有长度为 K 的二进制子串",-1),No=t("td",{style:{"text-align":"center"}},null,-1),zo={style:{"text-align":"left"}},Lo=t("code",null,"位运算",-1),Vo=t("code",null,"哈希表",-1),Bo=t("code",null,"字符串",-1),Co=t("code",null,"2+",-1),Eo=t("td",{style:{"text-align":"center"}},"🟠",-1),Ko={style:{"text-align":"center"}},Ro={href:"https://leetcode.cn/problems/check-if-a-string-contains-all-binary-codes-of-size-k",target:"_blank",rel:"noopener noreferrer"},jo={href:"https://leetcode.com/problems/check-if-a-string-contains-all-binary-codes-of-size-k",target:"_blank",rel:"noopener noreferrer"},Ao=t("td",{style:{"text-align":"center"}},"1554",-1),Do=t("td",{style:{"text-align":"left"}},"只有一个不同字符的字符串 🔒",-1),Ho=t("td",{style:{"text-align":"center"}},null,-1),To={style:{"text-align":"left"}},Fo=t("code",null,"哈希表",-1),Go=t("code",null,"字符串",-1),Jo=t("code",null,"哈希函数",-1),Mo=t("code",null,"1+",-1),Oo=t("td",{style:{"text-align":"center"}},"🟠",-1),Po={style:{"text-align":"center"}},Qo={href:"https://leetcode.cn/problems/strings-differ-by-one-character",target:"_blank",rel:"noopener noreferrer"},So={href:"https://leetcode.com/problems/strings-differ-by-one-character",target:"_blank",rel:"noopener noreferrer"},Uo=t("td",{style:{"text-align":"center"}},"1698",-1),Wo=t("td",{style:{"text-align":"left"}},"字符串的不同子字符串个数 🔒",-1),Xo=t("td",{style:{"text-align":"center"}},null,-1),Yo={style:{"text-align":"left"}},Zo=t("code",null,"字典树",-1),$o=t("code",null,"字符串",-1),tn=t("code",null,"后缀数组",-1),en=t("code",null,"2+",-1),on=t("td",{style:{"text-align":"center"}},"🟠",-1),nn={style:{"text-align":"center"}},ln={href:"https://leetcode.cn/problems/number-of-distinct-substrings-in-a-string",target:"_blank",rel:"noopener noreferrer"},sn={href:"https://leetcode.com/problems/number-of-distinct-substrings-in-a-string",target:"_blank",rel:"noopener noreferrer"},dn=t("td",{style:{"text-align":"center"}},"1923",-1),_n=t("td",{style:{"text-align":"left"}},"最长公共子路径",-1),rn=t("td",{style:{"text-align":"center"}},null,-1),cn={style:{"text-align":"left"}},an=t("code",null,"数组",-1),hn=t("code",null,"二分查找",-1),un=t("code",null,"后缀数组",-1),gn=t("code",null,"2+",-1),fn=t("td",{style:{"text-align":"center"}},"🔴",-1),mn={style:{"text-align":"center"}},pn={href:"https://leetcode.cn/problems/longest-common-subpath",target:"_blank",rel:"noopener noreferrer"},yn={href:"https://leetcode.com/problems/longest-common-subpath",target:"_blank",rel:"noopener noreferrer"},xn=t("td",{style:{"text-align":"center"}},"1960",-1),bn=t("td",{style:{"text-align":"left"}},"两个回文子字符串长度的最大乘积",-1),kn=t("td",{style:{"text-align":"center"}},null,-1),wn={style:{"text-align":"left"}},vn=t("code",null,"字符串",-1),In=t("code",null,"哈希函数",-1),qn=t("code",null,"滚动哈希",-1),Nn=t("td",{style:{"text-align":"center"}},"🔴",-1),zn={style:{"text-align":"center"}},Ln={href:"https://leetcode.cn/problems/maximum-product-of-the-length-of-two-palindromic-substrings",target:"_blank",rel:"noopener noreferrer"},Vn={href:"https://leetcode.com/problems/maximum-product-of-the-length-of-two-palindromic-substrings",target:"_blank",rel:"noopener noreferrer"},Bn=t("td",{style:{"text-align":"center"}},"2156",-1),Cn=t("td",{style:{"text-align":"left"}},"查找给定哈希值的子串",-1),En=t("td",{style:{"text-align":"center"}},null,-1),Kn={style:{"text-align":"left"}},Rn=t("code",null,"字符串",-1),jn=t("code",null,"滑动窗口",-1),An=t("code",null,"哈希函数",-1),Dn=t("code",null,"1+",-1),Hn=t("td",{style:{"text-align":"center"}},"🔴",-1),Tn={style:{"text-align":"center"}},Fn={href:"https://leetcode.cn/problems/find-substring-with-given-hash-value",target:"_blank",rel:"noopener noreferrer"},Gn={href:"https://leetcode.com/problems/find-substring-with-given-hash-value",target:"_blank",rel:"noopener noreferrer"},Jn=t("td",{style:{"text-align":"center"}},"2168",-1),Mn=t("td",{style:{"text-align":"left"}},"每个数字的频率都相同的独特子字符串的数量 🔒",-1),On=t("td",{style:{"text-align":"center"}},null,-1),Pn={style:{"text-align":"left"}},Qn=t("code",null,"哈希表",-1),Sn=t("code",null,"字符串",-1),Un=t("code",null,"计数",-1),Wn=t("code",null,"2+",-1),Xn=t("td",{style:{"text-align":"center"}},"🟠",-1),Yn={style:{"text-align":"center"}},Zn={href:"https://leetcode.cn/problems/unique-substrings-with-equal-digit-frequency",target:"_blank",rel:"noopener noreferrer"},$n={href:"https://leetcode.com/problems/unique-substrings-with-equal-digit-frequency",target:"_blank",rel:"noopener noreferrer"},tl=t("td",{style:{"text-align":"center"}},"2223",-1),el=t("td",{style:{"text-align":"left"}},"构造字符串的总得分和",-1),ol=t("td",{style:{"text-align":"center"}},null,-1),nl={style:{"text-align":"left"}},ll=t("code",null,"字符串",-1),sl=t("code",null,"二分查找",-1),dl=t("code",null,"字符串匹配",-1),_l=t("code",null,"3+",-1),il=t("td",{style:{"text-align":"center"}},"🔴",-1),rl={style:{"text-align":"center"}},cl={href:"https://leetcode.cn/problems/sum-of-scores-of-built-strings",target:"_blank",rel:"noopener noreferrer"},al={href:"https://leetcode.com/problems/sum-of-scores-of-built-strings",target:"_blank",rel:"noopener noreferrer"},hl=t("td",{style:{"text-align":"center"}},"2261",-1),ul=t("td",{style:{"text-align":"left"}},"含最多 K 个可整除元素的子数组",-1),gl={style:{"text-align":"center"}},fl={style:{"text-align":"left"}},ml=t("code",null,"字典树",-1),pl=t("code",null,"数组",-1),yl=t("code",null,"哈希表",-1),xl=t("code",null,"3+",-1),bl=t("td",{style:{"text-align":"center"}},"🟠",-1),kl={style:{"text-align":"center"}},wl={href:"https://leetcode.cn/problems/k-divisible-elements-subarrays",target:"_blank",rel:"noopener noreferrer"},vl={href:"https://leetcode.com/problems/k-divisible-elements-subarrays",target:"_blank",rel:"noopener noreferrer"},Il=t("td",{style:{"text-align":"center"}},"2430",-1),ql=t("td",{style:{"text-align":"left"}},"对字母串可执行的最大删除数",-1),Nl=t("td",{style:{"text-align":"center"}},null,-1),zl={style:{"text-align":"left"}},Ll=t("code",null,"字符串",-1),Vl=t("code",null,"动态规划",-1),Bl=t("code",null,"字符串匹配",-1),Cl=t("code",null,"2+",-1),El=t("td",{style:{"text-align":"center"}},"🔴",-1),Kl={style:{"text-align":"center"}},Rl={href:"https://leetcode.cn/problems/maximum-deletions-on-a-string",target:"_blank",rel:"noopener noreferrer"},jl={href:"https://leetcode.com/problems/maximum-deletions-on-a-string",target:"_blank",rel:"noopener noreferrer"},Al=t("td",{style:{"text-align":"center"}},"3006",-1),Dl=t("td",{style:{"text-align":"left"}},"找出数组中的美丽下标 I",-1),Hl=t("td",{style:{"text-align":"center"}},null,-1),Tl={style:{"text-align":"left"}},Fl=t("code",null,"双指针",-1),Gl=t("code",null,"字符串",-1),Jl=t("code",null,"二分查找",-1),Ml=t("code",null,"3+",-1),Ol=t("td",{style:{"text-align":"center"}},"🟠",-1),Pl={style:{"text-align":"center"}},Ql={href:"https://leetcode.cn/problems/find-beautiful-indices-in-the-given-array-i",target:"_blank",rel:"noopener noreferrer"},Sl={href:"https://leetcode.com/problems/find-beautiful-indices-in-the-given-array-i",target:"_blank",rel:"noopener noreferrer"},Ul=t("td",{style:{"text-align":"center"}},"3008",-1),Wl=t("td",{style:{"text-align":"left"}},"找出数组中的美丽下标 II",-1),Xl=t("td",{style:{"text-align":"center"}},null,-1),Yl={style:{"text-align":"left"}},Zl=t("code",null,"双指针",-1),$l=t("code",null,"字符串",-1),ts=t("code",null,"二分查找",-1),es=t("code",null,"3+",-1),os=t("td",{style:{"text-align":"center"}},"🔴",-1),ns={style:{"text-align":"center"}},ls={href:"https://leetcode.cn/problems/find-beautiful-indices-in-the-given-array-ii",target:"_blank",rel:"noopener noreferrer"},ss={href:"https://leetcode.com/problems/find-beautiful-indices-in-the-given-array-ii",target:"_blank",rel:"noopener noreferrer"},ds=t("td",{style:{"text-align":"center"}},"3023",-1),_s=t("td",{style:{"text-align":"left"}},"在无限流中寻找模式 I 🔒",-1),is=t("td",{style:{"text-align":"center"}},null,-1),rs={style:{"text-align":"left"}},cs=t("code",null,"数组",-1),as=t("code",null,"字符串匹配",-1),hs=t("code",null,"滑动窗口",-1),us=t("code",null,"2+",-1),gs=t("td",{style:{"text-align":"center"}},"🟠",-1),fs={style:{"text-align":"center"}},ms={href:"https://leetcode.cn/problems/find-pattern-in-infinite-stream-i",target:"_blank",rel:"noopener noreferrer"},ps={href:"https://leetcode.com/problems/find-pattern-in-infinite-stream-i",target:"_blank",rel:"noopener noreferrer"},ys=t("td",{style:{"text-align":"center"}},"3029",-1),xs=t("td",{style:{"text-align":"left"}},"将单词恢复初始状态所需的最短时间 I",-1),bs=t("td",{style:{"text-align":"center"}},null,-1),ks={style:{"text-align":"left"}},ws=t("code",null,"字符串",-1),vs=t("code",null,"字符串匹配",-1),Is=t("code",null,"哈希函数",-1),qs=t("code",null,"1+",-1),Ns=t("td",{style:{"text-align":"center"}},"🟠",-1),zs={style:{"text-align":"center"}},Ls={href:"https://leetcode.cn/problems/minimum-time-to-revert-word-to-initial-state-i",target:"_blank",rel:"noopener noreferrer"},Vs={href:"https://leetcode.com/problems/minimum-time-to-revert-word-to-initial-state-i",target:"_blank",rel:"noopener noreferrer"},Bs=t("td",{style:{"text-align":"center"}},"3031",-1),Cs=t("td",{style:{"text-align":"left"}},"将单词恢复初始状态所需的最短时间 II",-1),Es=t("td",{style:{"text-align":"center"}},null,-1),Ks={style:{"text-align":"left"}},Rs=t("code",null,"字符串",-1),js=t("code",null,"字符串匹配",-1),As=t("code",null,"哈希函数",-1),Ds=t("code",null,"1+",-1),Hs=t("td",{style:{"text-align":"center"}},"🔴",-1),Ts={style:{"text-align":"center"}},Fs={href:"https://leetcode.cn/problems/minimum-time-to-revert-word-to-initial-state-ii",target:"_blank",rel:"noopener noreferrer"},Gs={href:"https://leetcode.com/problems/minimum-time-to-revert-word-to-initial-state-ii",target:"_blank",rel:"noopener noreferrer"},Js=t("td",{style:{"text-align":"center"}},"3034",-1),Ms=t("td",{style:{"text-align":"left"}},"匹配模式数组的子数组数目 I",-1),Os=t("td",{style:{"text-align":"center"}},null,-1),Ps={style:{"text-align":"left"}},Qs=t("code",null,"数组",-1),Ss=t("code",null,"字符串匹配",-1),Us=t("code",null,"哈希函数",-1),Ws=t("code",null,"1+",-1),Xs=t("td",{style:{"text-align":"center"}},"🟠",-1),Ys={style:{"text-align":"center"}},Zs={href:"https://leetcode.cn/problems/number-of-subarrays-that-match-a-pattern-i",target:"_blank",rel:"noopener noreferrer"},$s={href:"https://leetcode.com/problems/number-of-subarrays-that-match-a-pattern-i",target:"_blank",rel:"noopener noreferrer"},td=t("td",{style:{"text-align":"center"}},"3036",-1),ed=t("td",{style:{"text-align":"left"}},"匹配模式数组的子数组数目 II",-1),od=t("td",{style:{"text-align":"center"}},null,-1),nd={style:{"text-align":"left"}},ld=t("code",null,"数组",-1),sd=t("code",null,"字符串匹配",-1),dd=t("code",null,"哈希函数",-1),_d=t("code",null,"1+",-1),id=t("td",{style:{"text-align":"center"}},"🔴",-1),rd={style:{"text-align":"center"}},cd={href:"https://leetcode.cn/problems/number-of-subarrays-that-match-a-pattern-ii",target:"_blank",rel:"noopener noreferrer"},ad={href:"https://leetcode.com/problems/number-of-subarrays-that-match-a-pattern-ii",target:"_blank",rel:"noopener noreferrer"},hd=t("td",{style:{"text-align":"center"}},"3037",-1),ud=t("td",{style:{"text-align":"left"}},"在无限流中寻找模式 II 🔒",-1),gd=t("td",{style:{"text-align":"center"}},null,-1),fd={style:{"text-align":"left"}},md=t("code",null,"数组",-1),pd=t("code",null,"字符串匹配",-1),yd=t("code",null,"滑动窗口",-1),xd=t("code",null,"2+",-1),bd=t("td",{style:{"text-align":"center"}},"🔴",-1),kd={style:{"text-align":"center"}},wd={href:"https://leetcode.cn/problems/find-pattern-in-infinite-stream-ii",target:"_blank",rel:"noopener noreferrer"},vd={href:"https://leetcode.com/problems/find-pattern-in-infinite-stream-ii",target:"_blank",rel:"noopener noreferrer"},Id=t("td",{style:{"text-align":"center"}},"3042",-1),qd=t("td",{style:{"text-align":"left"}},"统计前后缀下标对 I",-1),Nd={style:{"text-align":"center"}},zd={style:{"text-align":"left"}},Ld=t("code",null,"字典树",-1),Vd=t("code",null,"数组",-1),Bd=t("code",null,"字符串",-1),Cd=t("code",null,"3+",-1),Ed=t("td",{style:{"text-align":"center"}},"🟢",-1),Kd={style:{"text-align":"center"}},Rd={href:"https://leetcode.cn/problems/count-prefix-and-suffix-pairs-i",target:"_blank",rel:"noopener noreferrer"},jd={href:"https://leetcode.com/problems/count-prefix-and-suffix-pairs-i",target:"_blank",rel:"noopener noreferrer"},Ad=t("td",{style:{"text-align":"center"}},"3045",-1),Dd=t("td",{style:{"text-align":"left"}},"统计前后缀下标对 II",-1),Hd=t("td",{style:{"text-align":"center"}},null,-1),Td={style:{"text-align":"left"}},Fd=t("code",null,"字典树",-1),Gd=t("code",null,"数组",-1),Jd=t("code",null,"字符串",-1),Md=t("code",null,"3+",-1),Od=t("td",{style:{"text-align":"center"}},"🔴",-1),Pd={style:{"text-align":"center"}},Qd={href:"https://leetcode.cn/problems/count-prefix-and-suffix-pairs-ii",target:"_blank",rel:"noopener noreferrer"},Sd={href:"https://leetcode.com/problems/count-prefix-and-suffix-pairs-ii",target:"_blank",rel:"noopener noreferrer"},Ud=t("td",{style:{"text-align":"center"}},"3291",-1),Wd=t("td",{style:{"text-align":"left"}},"形成目标字符串需要的最少字符串数 I",-1),Xd=t("td",{style:{"text-align":"center"}},null,-1),Yd={style:{"text-align":"left"}},Zd=t("code",null,"字典树",-1),$d=t("code",null,"线段树",-1),t_=t("code",null,"数组",-1),e_=t("code",null,"6+",-1),o_=t("td",{style:{"text-align":"center"}},"🟠",-1),n_={style:{"text-align":"center"}},l_={href:"https://leetcode.cn/problems/minimum-number-of-valid-strings-to-form-target-i",target:"_blank",rel:"noopener noreferrer"},s_={href:"https://leetcode.com/problems/minimum-number-of-valid-strings-to-form-target-i",target:"_blank",rel:"noopener noreferrer"},d_=t("td",{style:{"text-align":"center"}},"3292",-1),__=t("td",{style:{"text-align":"left"}},"形成目标字符串需要的最少字符串数 II",-1),i_=t("td",{style:{"text-align":"center"}},null,-1),r_={style:{"text-align":"left"}},c_=t("code",null,"线段树",-1),a_=t("code",null,"数组",-1),h_=t("code",null,"字符串",-1),u_=t("code",null,"5+",-1),g_=t("td",{style:{"text-align":"center"}},"🔴",-1),f_={style:{"text-align":"center"}},m_={href:"https://leetcode.cn/problems/minimum-number-of-valid-strings-to-form-target-ii",target:"_blank",rel:"noopener noreferrer"},p_={href:"https://leetcode.com/problems/minimum-number-of-valid-strings-to-form-target-ii",target:"_blank",rel:"noopener noreferrer"},y_=t("td",{style:{"text-align":"center"}},"面试题 17.13",-1),x_=t("td",{style:{"text-align":"left"}},"恢复空格",-1),b_=t("td",{style:{"text-align":"center"}},null,-1),k_={style:{"text-align":"left"}},w_=t("code",null,"字典树",-1),v_=t("code",null,"数组",-1),I_=t("code",null,"哈希表",-1),q_=t("code",null,"4+",-1),N_=t("td",{style:{"text-align":"center"}},"🟠",-1),z_={style:{"text-align":"center"}},L_={href:"https://leetcode.cn/problems/re-space-lcci",target:"_blank",rel:"noopener noreferrer"};function V_(B_,C_){const n=d("RouterLink"),s=d("ExternalLinkIcon");return i(),r("div",null,[h,t("details",null,[u,g,t("p",null,[o(n,{to:"/tag/array.html"},{default:l(()=>[f]),_:1}),e(),o(n,{to:"/tag/matrix.html"},{default:l(()=>[m]),_:1}),e(),o(n,{to:"/tag/linked-list.html"},{default:l(()=>[p]),_:1}),e(),o(n,{to:"/tag/doubly-linked-list.html"},{default:l(()=>[y]),_:1}),e(),o(n,{to:"/tag/stack.html"},{default:l(()=>[x]),_:1}),e(),o(n,{to:"/tag/monotonic-stack.html"},{default:l(()=>[b]),_:1}),e(),o(n,{to:"/tag/queue.html"},{default:l(()=>[k]),_:1}),e(),o(n,{to:"/tag/monotonic-queue.html"},{default:l(()=>[w]),_:1}),e(),o(n,{to:"/tag/heap-priority-queue.html"},{default:l(()=>[v]),_:1}),e(),o(n,{to:"/tag/hash-table.html"},{default:l(()=>[I]),_:1}),e(),o(n,{to:"/tag/string.html"},{default:l(()=>[q]),_:1}),e(),o(n,{to:"/tag/string-matching.html"},{default:l(()=>[N]),_:1}),e(),o(n,{to:"/tag/tree.html"},{default:l(()=>[z]),_:1}),e(),o(n,{to:"/tag/binary-tree.html"},{default:l(()=>[L]),_:1}),e(),o(n,{to:"/tag/binary-search-tree.html"},{default:l(()=>[V]),_:1}),e(),o(n,{to:"/tag/minimum-spanning-tree.html"},{default:l(()=>[B]),_:1}),e(),o(n,{to:"/tag/graph.html"},{default:l(()=>[C]),_:1}),e(),o(n,{to:"/tag/ordered-set.html"},{default:l(()=>[E]),_:1}),e(),o(n,{to:"/tag/topological-sort.html"},{default:l(()=>[K]),_:1}),e(),o(n,{to:"/tag/shortest-path.html"},{default:l(()=>[R]),_:1}),e(),o(n,{to:"/tag/strongly-connected-component.html"},{default:l(()=>[j]),_:1}),e(),o(n,{to:"/tag/eulerian-circuit.html"},{default:l(()=>[A]),_:1}),e(),o(n,{to:"/tag/biconnected-component.html"},{default:l(()=>[D]),_:1}),e(),o(n,{to:"/tag/union-find.html"},{default:l(()=>[H]),_:1}),e(),o(n,{to:"/tag/trie.html"},{default:l(()=>[T]),_:1}),e(),o(n,{to:"/tag/segment-tree.html"},{default:l(()=>[F]),_:1}),e(),o(n,{to:"/tag/binary-indexed-tree.html"},{default:l(()=>[G]),_:1}),e(),o(n,{to:"/tag/suffix-array.html"},{default:l(()=>[J]),_:1})]),M,t("p",null,[o(n,{to:"/tag/enumeration.html"},{default:l(()=>[O]),_:1}),e(),o(n,{to:"/tag/recursion.html"},{default:l(()=>[P]),_:1}),e(),o(n,{to:"/tag/divide-and-conquer.html"},{default:l(()=>[Q]),_:1}),e(),o(n,{to:"/tag/backtracking.html"},{default:l(()=>[S]),_:1}),e(),o(n,{to:"/tag/greedy.html"},{default:l(()=>[U]),_:1}),e(),o(n,{to:"/tag/dynamic-programming.html"},{default:l(()=>[W]),_:1}),e(),o(n,{to:"/tag/sorting.html"},{default:l(()=>[X]),_:1}),e(),o(n,{to:"/tag/bucket-sort.html"},{default:l(()=>[Y]),_:1}),e(),o(n,{to:"/tag/counting-sort.html"},{default:l(()=>[Z]),_:1}),e(),o(n,{to:"/tag/radix-sort.html"},{default:l(()=>[$]),_:1}),e(),o(n,{to:"/tag/merge-sort.html"},{default:l(()=>[tt]),_:1}),e(),o(n,{to:"/tag/quickselect.html"},{default:l(()=>[et]),_:1}),e(),o(n,{to:"/tag/binary-search.html"},{default:l(()=>[ot]),_:1}),e(),o(n,{to:"/tag/memoization.html"},{default:l(()=>[nt]),_:1}),e(),o(n,{to:"/tag/depth-first-search.html"},{default:l(()=>[lt]),_:1}),e(),o(n,{to:"/tag/breadth-first-search.html"},{default:l(()=>[st]),_:1}),e(),o(n,{to:"/tag/two-pointers.html"},{default:l(()=>[dt]),_:1}),e(),o(n,{to:"/tag/bit-manipulation.html"},{default:l(()=>[_t]),_:1}),e(),o(n,{to:"/tag/prefix-sum.html"},{default:l(()=>[it]),_:1}),e(),o(n,{to:"/tag/counting.html"},{default:l(()=>[rt]),_:1}),e(),o(n,{to:"/tag/sliding-window.html"},{default:l(()=>[ct]),_:1}),e(),o(n,{to:"/tag/bitmask.html"},{default:l(()=>[at]),_:1}),e(),o(n,{to:"/tag/hash-function.html"},{default:l(()=>[ht]),_:1}),e(),ut,e(),o(n,{to:"/tag/line-sweep.html"},{default:l(()=>[gt]),_:1})]),ft,t("p",null,[o(n,{to:"/tag/math.html"},{default:l(()=>[mt]),_:1}),e(),o(n,{to:"/tag/number-theory.html"},{default:l(()=>[pt]),_:1}),e(),o(n,{to:"/tag/geometry.html"},{default:l(()=>[yt]),_:1}),e(),o(n,{to:"/tag/game-theory.html"},{default:l(()=>[xt]),_:1}),e(),o(n,{to:"/tag/simulation.html"},{default:l(()=>[bt]),_:1}),e(),o(n,{to:"/tag/combinatorics.html"},{default:l(()=>[kt]),_:1}),e(),o(n,{to:"/tag/randomized.html"},{default:l(()=>[wt]),_:1}),e(),o(n,{to:"/tag/probability-and-statistics.html"},{default:l(()=>[vt]),_:1}),e(),o(n,{to:"/tag/reservoir-sampling.html"},{default:l(()=>[It]),_:1}),e(),o(n,{to:"/tag/rejection-sampling.html"},{default:l(()=>[qt]),_:1}),e(),o(n,{to:"/tag/database.html"},{default:l(()=>[Nt]),_:1}),e(),o(n,{to:"/tag/design.html"},{default:l(()=>[zt]),_:1}),e(),o(n,{to:"/tag/data-stream.html"},{default:l(()=>[Lt]),_:1}),e(),o(n,{to:"/tag/brainteaser.html"},{default:l(()=>[Vt]),_:1}),e(),o(n,{to:"/tag/interactive.html"},{default:l(()=>[Bt]),_:1}),e(),o(n,{to:"/tag/iterator.html"},{default:l(()=>[Ct]),_:1}),e(),o(n,{to:"/tag/concurrency.html"},{default:l(()=>[Et]),_:1})])]),Kt,c(" prettier-ignore "),t("table",null,[Rt,t("tbody",null,[t("tr",null,[jt,At,t("td",Dt,[o(n,{to:"/problem/0187.html"},{default:l(()=>[e("[✓]")]),_:1})]),t("td",Ht,[o(n,{to:"/tag/bit-manipulation.html"},{default:l(()=>[Tt]),_:1}),e(),o(n,{to:"/tag/hash-table.html"},{default:l(()=>[Ft]),_:1}),e(),o(n,{to:"/tag/string.html"},{default:l(()=>[Gt]),_:1}),e(),Jt]),Mt,t("td",Ot,[t("a",Pt,[e("🀄️"),o(s)]),e(),t("a",Qt,[e("🔗"),o(s)])])]),t("tr",null,[St,Ut,Wt,t("td",Xt,[o(n,{to:"/tag/string.html"},{default:l(()=>[Yt]),_:1}),e(),o(n,{to:"/tag/string-matching.html"},{default:l(()=>[Zt]),_:1}),e(),o(n,{to:"/tag/hash-function.html"},{default:l(()=>[$t]),_:1}),e(),te]),ee,t("td",oe,[t("a",ne,[e("🀄️"),o(s)]),e(),t("a",le,[e("🔗"),o(s)])])]),t("tr",null,[se,de,_e,t("td",ie,[o(n,{to:"/tag/array.html"},{default:l(()=>[re]),_:1}),e(),o(n,{to:"/tag/binary-search.html"},{default:l(()=>[ce]),_:1}),e(),o(n,{to:"/tag/dynamic-programming.html"},{default:l(()=>[ae]),_:1}),e(),he]),ue,t("td",ge,[t("a",fe,[e("🀄️"),o(s)]),e(),t("a",me,[e("🔗"),o(s)])])]),t("tr",null,[pe,ye,xe,t("td",be,[o(n,{to:"/tag/string.html"},{default:l(()=>[ke]),_:1}),e(),o(n,{to:"/tag/binary-search.html"},{default:l(()=>[we]),_:1}),e(),o(n,{to:"/tag/suffix-array.html"},{default:l(()=>[ve]),_:1}),e(),Ie]),qe,t("td",Ne,[t("a",ze,[e("🀄️"),o(s)]),e(),t("a",Le,[e("🔗"),o(s)])])]),t("tr",null,[Ve,Be,Ce,t("td",Ee,[o(n,{to:"/tag/string.html"},{default:l(()=>[Ke]),_:1}),e(),o(n,{to:"/tag/binary-search.html"},{default:l(()=>[Re]),_:1}),e(),o(n,{to:"/tag/dynamic-programming.html"},{default:l(()=>[je]),_:1}),e(),Ae]),De,t("td",He,[t("a",Te,[e("🀄️"),o(s)]),e(),t("a",Fe,[e("🔗"),o(s)])])]),t("tr",null,[Ge,Je,Me,t("td",Oe,[o(n,{to:"/tag/greedy.html"},{default:l(()=>[Pe]),_:1}),e(),o(n,{to:"/tag/two-pointers.html"},{default:l(()=>[Qe]),_:1}),e(),o(n,{to:"/tag/string.html"},{default:l(()=>[Se]),_:1}),e(),Ue]),We,t("td",Xe,[t("a",Ye,[e("🀄️"),o(s)]),e(),t("a",Ze,[e("🔗"),o(s)])])]),t("tr",null,[$e,to,eo,t("td",oo,[o(n,{to:"/tag/trie.html"},{default:l(()=>[no]),_:1}),e(),o(n,{to:"/tag/string.html"},{default:l(()=>[lo]),_:1}),e(),o(n,{to:"/tag/hash-function.html"},{default:l(()=>[so]),_:1}),e(),_o]),io,t("td",ro,[t("a",co,[e("🀄️"),o(s)]),e(),t("a",ao,[e("🔗"),o(s)])])]),t("tr",null,[ho,uo,go,t("td",fo,[o(n,{to:"/tag/string.html"},{default:l(()=>[mo]),_:1}),e(),o(n,{to:"/tag/string-matching.html"},{default:l(()=>[po]),_:1}),e(),o(n,{to:"/tag/hash-function.html"},{default:l(()=>[yo]),_:1}),e(),xo]),bo,t("td",ko,[t("a",wo,[e("🀄️"),o(s)]),e(),t("a",vo,[e("🔗"),o(s)])])]),t("tr",null,[Io,qo,No,t("td",zo,[o(n,{to:"/tag/bit-manipulation.html"},{default:l(()=>[Lo]),_:1}),e(),o(n,{to:"/tag/hash-table.html"},{default:l(()=>[Vo]),_:1}),e(),o(n,{to:"/tag/string.html"},{default:l(()=>[Bo]),_:1}),e(),Co]),Eo,t("td",Ko,[t("a",Ro,[e("🀄️"),o(s)]),e(),t("a",jo,[e("🔗"),o(s)])])]),t("tr",null,[Ao,Do,Ho,t("td",To,[o(n,{to:"/tag/hash-table.html"},{default:l(()=>[Fo]),_:1}),e(),o(n,{to:"/tag/string.html"},{default:l(()=>[Go]),_:1}),e(),o(n,{to:"/tag/hash-function.html"},{default:l(()=>[Jo]),_:1}),e(),Mo]),Oo,t("td",Po,[t("a",Qo,[e("🀄️"),o(s)]),e(),t("a",So,[e("🔗"),o(s)])])]),t("tr",null,[Uo,Wo,Xo,t("td",Yo,[o(n,{to:"/tag/trie.html"},{default:l(()=>[Zo]),_:1}),e(),o(n,{to:"/tag/string.html"},{default:l(()=>[$o]),_:1}),e(),o(n,{to:"/tag/suffix-array.html"},{default:l(()=>[tn]),_:1}),e(),en]),on,t("td",nn,[t("a",ln,[e("🀄️"),o(s)]),e(),t("a",sn,[e("🔗"),o(s)])])]),t("tr",null,[dn,_n,rn,t("td",cn,[o(n,{to:"/tag/array.html"},{default:l(()=>[an]),_:1}),e(),o(n,{to:"/tag/binary-search.html"},{default:l(()=>[hn]),_:1}),e(),o(n,{to:"/tag/suffix-array.html"},{default:l(()=>[un]),_:1}),e(),gn]),fn,t("td",mn,[t("a",pn,[e("🀄️"),o(s)]),e(),t("a",yn,[e("🔗"),o(s)])])]),t("tr",null,[xn,bn,kn,t("td",wn,[o(n,{to:"/tag/string.html"},{default:l(()=>[vn]),_:1}),e(),o(n,{to:"/tag/hash-function.html"},{default:l(()=>[In]),_:1}),e(),o(n,{to:"/tag/rolling-hash.html"},{default:l(()=>[qn]),_:1})]),Nn,t("td",zn,[t("a",Ln,[e("🀄️"),o(s)]),e(),t("a",Vn,[e("🔗"),o(s)])])]),t("tr",null,[Bn,Cn,En,t("td",Kn,[o(n,{to:"/tag/string.html"},{default:l(()=>[Rn]),_:1}),e(),o(n,{to:"/tag/sliding-window.html"},{default:l(()=>[jn]),_:1}),e(),o(n,{to:"/tag/hash-function.html"},{default:l(()=>[An]),_:1}),e(),Dn]),Hn,t("td",Tn,[t("a",Fn,[e("🀄️"),o(s)]),e(),t("a",Gn,[e("🔗"),o(s)])])]),t("tr",null,[Jn,Mn,On,t("td",Pn,[o(n,{to:"/tag/hash-table.html"},{default:l(()=>[Qn]),_:1}),e(),o(n,{to:"/tag/string.html"},{default:l(()=>[Sn]),_:1}),e(),o(n,{to:"/tag/counting.html"},{default:l(()=>[Un]),_:1}),e(),Wn]),Xn,t("td",Yn,[t("a",Zn,[e("🀄️"),o(s)]),e(),t("a",$n,[e("🔗"),o(s)])])]),t("tr",null,[tl,el,ol,t("td",nl,[o(n,{to:"/tag/string.html"},{default:l(()=>[ll]),_:1}),e(),o(n,{to:"/tag/binary-search.html"},{default:l(()=>[sl]),_:1}),e(),o(n,{to:"/tag/string-matching.html"},{default:l(()=>[dl]),_:1}),e(),_l]),il,t("td",rl,[t("a",cl,[e("🀄️"),o(s)]),e(),t("a",al,[e("🔗"),o(s)])])]),t("tr",null,[hl,ul,t("td",gl,[o(n,{to:"/problem/2261.html"},{default:l(()=>[e("[✓]")]),_:1})]),t("td",fl,[o(n,{to:"/tag/trie.html"},{default:l(()=>[ml]),_:1}),e(),o(n,{to:"/tag/array.html"},{default:l(()=>[pl]),_:1}),e(),o(n,{to:"/tag/hash-table.html"},{default:l(()=>[yl]),_:1}),e(),xl]),bl,t("td",kl,[t("a",wl,[e("🀄️"),o(s)]),e(),t("a",vl,[e("🔗"),o(s)])])]),t("tr",null,[Il,ql,Nl,t("td",zl,[o(n,{to:"/tag/string.html"},{default:l(()=>[Ll]),_:1}),e(),o(n,{to:"/tag/dynamic-programming.html"},{default:l(()=>[Vl]),_:1}),e(),o(n,{to:"/tag/string-matching.html"},{default:l(()=>[Bl]),_:1}),e(),Cl]),El,t("td",Kl,[t("a",Rl,[e("🀄️"),o(s)]),e(),t("a",jl,[e("🔗"),o(s)])])]),t("tr",null,[Al,Dl,Hl,t("td",Tl,[o(n,{to:"/tag/two-pointers.html"},{default:l(()=>[Fl]),_:1}),e(),o(n,{to:"/tag/string.html"},{default:l(()=>[Gl]),_:1}),e(),o(n,{to:"/tag/binary-search.html"},{default:l(()=>[Jl]),_:1}),e(),Ml]),Ol,t("td",Pl,[t("a",Ql,[e("🀄️"),o(s)]),e(),t("a",Sl,[e("🔗"),o(s)])])]),t("tr",null,[Ul,Wl,Xl,t("td",Yl,[o(n,{to:"/tag/two-pointers.html"},{default:l(()=>[Zl]),_:1}),e(),o(n,{to:"/tag/string.html"},{default:l(()=>[$l]),_:1}),e(),o(n,{to:"/tag/binary-search.html"},{default:l(()=>[ts]),_:1}),e(),es]),os,t("td",ns,[t("a",ls,[e("🀄️"),o(s)]),e(),t("a",ss,[e("🔗"),o(s)])])]),t("tr",null,[ds,_s,is,t("td",rs,[o(n,{to:"/tag/array.html"},{default:l(()=>[cs]),_:1}),e(),o(n,{to:"/tag/string-matching.html"},{default:l(()=>[as]),_:1}),e(),o(n,{to:"/tag/sliding-window.html"},{default:l(()=>[hs]),_:1}),e(),us]),gs,t("td",fs,[t("a",ms,[e("🀄️"),o(s)]),e(),t("a",ps,[e("🔗"),o(s)])])]),t("tr",null,[ys,xs,bs,t("td",ks,[o(n,{to:"/tag/string.html"},{default:l(()=>[ws]),_:1}),e(),o(n,{to:"/tag/string-matching.html"},{default:l(()=>[vs]),_:1}),e(),o(n,{to:"/tag/hash-function.html"},{default:l(()=>[Is]),_:1}),e(),qs]),Ns,t("td",zs,[t("a",Ls,[e("🀄️"),o(s)]),e(),t("a",Vs,[e("🔗"),o(s)])])]),t("tr",null,[Bs,Cs,Es,t("td",Ks,[o(n,{to:"/tag/string.html"},{default:l(()=>[Rs]),_:1}),e(),o(n,{to:"/tag/string-matching.html"},{default:l(()=>[js]),_:1}),e(),o(n,{to:"/tag/hash-function.html"},{default:l(()=>[As]),_:1}),e(),Ds]),Hs,t("td",Ts,[t("a",Fs,[e("🀄️"),o(s)]),e(),t("a",Gs,[e("🔗"),o(s)])])]),t("tr",null,[Js,Ms,Os,t("td",Ps,[o(n,{to:"/tag/array.html"},{default:l(()=>[Qs]),_:1}),e(),o(n,{to:"/tag/string-matching.html"},{default:l(()=>[Ss]),_:1}),e(),o(n,{to:"/tag/hash-function.html"},{default:l(()=>[Us]),_:1}),e(),Ws]),Xs,t("td",Ys,[t("a",Zs,[e("🀄️"),o(s)]),e(),t("a",$s,[e("🔗"),o(s)])])]),t("tr",null,[td,ed,od,t("td",nd,[o(n,{to:"/tag/array.html"},{default:l(()=>[ld]),_:1}),e(),o(n,{to:"/tag/string-matching.html"},{default:l(()=>[sd]),_:1}),e(),o(n,{to:"/tag/hash-function.html"},{default:l(()=>[dd]),_:1}),e(),_d]),id,t("td",rd,[t("a",cd,[e("🀄️"),o(s)]),e(),t("a",ad,[e("🔗"),o(s)])])]),t("tr",null,[hd,ud,gd,t("td",fd,[o(n,{to:"/tag/array.html"},{default:l(()=>[md]),_:1}),e(),o(n,{to:"/tag/string-matching.html"},{default:l(()=>[pd]),_:1}),e(),o(n,{to:"/tag/sliding-window.html"},{default:l(()=>[yd]),_:1}),e(),xd]),bd,t("td",kd,[t("a",wd,[e("🀄️"),o(s)]),e(),t("a",vd,[e("🔗"),o(s)])])]),t("tr",null,[Id,qd,t("td",Nd,[o(n,{to:"/problem/3042.html"},{default:l(()=>[e("[✓]")]),_:1})]),t("td",zd,[o(n,{to:"/tag/trie.html"},{default:l(()=>[Ld]),_:1}),e(),o(n,{to:"/tag/array.html"},{default:l(()=>[Vd]),_:1}),e(),o(n,{to:"/tag/string.html"},{default:l(()=>[Bd]),_:1}),e(),Cd]),Ed,t("td",Kd,[t("a",Rd,[e("🀄️"),o(s)]),e(),t("a",jd,[e("🔗"),o(s)])])]),t("tr",null,[Ad,Dd,Hd,t("td",Td,[o(n,{to:"/tag/trie.html"},{default:l(()=>[Fd]),_:1}),e(),o(n,{to:"/tag/array.html"},{default:l(()=>[Gd]),_:1}),e(),o(n,{to:"/tag/string.html"},{default:l(()=>[Jd]),_:1}),e(),Md]),Od,t("td",Pd,[t("a",Qd,[e("🀄️"),o(s)]),e(),t("a",Sd,[e("🔗"),o(s)])])]),t("tr",null,[Ud,Wd,Xd,t("td",Yd,[o(n,{to:"/tag/trie.html"},{default:l(()=>[Zd]),_:1}),e(),o(n,{to:"/tag/segment-tree.html"},{default:l(()=>[$d]),_:1}),e(),o(n,{to:"/tag/array.html"},{default:l(()=>[t_]),_:1}),e(),e_]),o_,t("td",n_,[t("a",l_,[e("🀄️"),o(s)]),e(),t("a",s_,[e("🔗"),o(s)])])]),t("tr",null,[d_,__,i_,t("td",r_,[o(n,{to:"/tag/segment-tree.html"},{default:l(()=>[c_]),_:1}),e(),o(n,{to:"/tag/array.html"},{default:l(()=>[a_]),_:1}),e(),o(n,{to:"/tag/string.html"},{default:l(()=>[h_]),_:1}),e(),u_]),g_,t("td",f_,[t("a",m_,[e("🀄️"),o(s)]),e(),t("a",p_,[e("🔗"),o(s)])])]),t("tr",null,[y_,x_,b_,t("td",k_,[o(n,{to:"/tag/trie.html"},{default:l(()=>[w_]),_:1}),e(),o(n,{to:"/tag/array.html"},{default:l(()=>[v_]),_:1}),e(),o(n,{to:"/tag/hash-table.html"},{default:l(()=>[I_]),_:1}),e(),q_]),N_,t("td",z_,[t("a",L_,[e("🀄️"),o(s)])])])])])])}const K_=_(a,[["render",V_],["__file","rolling-hash.html.vue"]]);export{K_ as default};
