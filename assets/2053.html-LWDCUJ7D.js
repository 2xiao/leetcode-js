import{_ as c,r,o as l,c as u,a as t,b as n,d as s,w as a,f as i,e as d}from"./app-B5EG-zH0.js";const k={},g=t("h1",{id:"_2053-数组中第-k-个独一无二的字符串",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#_2053-数组中第-k-个独一无二的字符串","aria-hidden":"true"},"#"),n(" 2053. 数组中第 K 个独一无二的字符串")],-1),h=t("code",null,"数组",-1),q=t("code",null,"哈希表",-1),_=t("code",null,"字符串",-1),m=t("code",null,"计数",-1),b={href:"https://leetcode.cn/problems/kth-distinct-string-in-an-array",target:"_blank",rel:"noopener noreferrer"},f=t("code",null,"力扣",-1),v={href:"https://leetcode.com/problems/kth-distinct-string-in-an-array",target:"_blank",rel:"noopener noreferrer"},y=t("code",null,"LeetCode",-1),x=d(`<h2 id="题目" tabindex="-1"><a class="header-anchor" href="#题目" aria-hidden="true">#</a> 题目</h2><p>A <strong>distinct string</strong> is a string that is present only <strong>once</strong> in an array.</p><p>Given an array of strings <code>arr</code>, and an integer <code>k</code>, return <em>the</em><code>kth</code> _<strong>distinct string</strong> present in _<code>arr</code>. If there are <strong>fewer</strong> than <code>k</code> distinct strings, return <em>an<strong>empty string</strong></em><code>&quot;&quot;</code>.</p><p>Note that the strings are considered in the <strong>order in which they appear</strong> in the array.</p><p><strong>Example 1:</strong></p><blockquote><p>Input: arr = [&quot;d&quot;,&quot;b&quot;,&quot;c&quot;,&quot;b&quot;,&quot;c&quot;,&quot;a&quot;], k = 2</p><p>Output: &quot;a&quot;</p><p>Explanation:</p><p>The only distinct strings in arr are &quot;d&quot; and &quot;a&quot;.</p><p>&quot;d&quot; appears 1st, so it is the 1st distinct string.</p><p>&quot;a&quot; appears 2nd, so it is the 2nd distinct string.</p><p>Since k == 2, &quot;a&quot; is returned.</p></blockquote><p><strong>Example 2:</strong></p><blockquote><p>Input: arr = [&quot;aaa&quot;,&quot;aa&quot;,&quot;a&quot;], k = 1</p><p>Output: &quot;aaa&quot;</p><p>Explanation:</p><p>All strings in arr are distinct, so the 1st string &quot;aaa&quot; is returned.</p></blockquote><p><strong>Example 3:</strong></p><blockquote><p>Input: arr = [&quot;a&quot;,&quot;b&quot;,&quot;a&quot;], k = 3</p><p>Output: &quot;&quot;</p><p>Explanation:</p><p>The only distinct string is &quot;b&quot;. Since there are fewer than 3 distinct strings, we return an empty string &quot;&quot;.</p></blockquote><p><strong>Constraints:</strong></p><ul><li><code>1 &lt;= k &lt;= arr.length &lt;= 1000</code></li><li><code>1 &lt;= arr[i].length &lt;= 5</code></li><li><code>arr[i]</code> consists of lowercase English letters.</li></ul><h2 id="题目大意" tabindex="-1"><a class="header-anchor" href="#题目大意" aria-hidden="true">#</a> 题目大意</h2><p><strong>独一无二的字符串</strong> 指的是在一个数组中只出现过 <strong>一次</strong> 的字符串。</p><p>给你一个字符串数组 <code>arr</code> 和一个整数 <code>k</code> ，请你返回 <code>arr</code> 中第 <code>k</code> 个 <strong>独一无二的字符串</strong> 。如果 <strong>少于</strong> <code>k</code> 个独一无二的字符串，那么返回 <strong>空字符串</strong> <code>&quot;&quot;</code> 。</p><p>注意，按照字符串在原数组中的 <strong>顺序</strong> 找到第 <code>k</code> 个独一无二字符串。</p><p><strong>示例 1:</strong></p><blockquote><p><strong>输入：</strong> arr = [&quot;d&quot;,&quot;b&quot;,&quot;c&quot;,&quot;b&quot;,&quot;c&quot;,&quot;a&quot;], k = 2</p><p><strong>输出：</strong> &quot;a&quot;</p><p><strong>解释：</strong></p><p>arr 中独一无二字符串包括 &quot;d&quot; 和 &quot;a&quot; 。</p><p>&quot;d&quot; 首先出现，所以它是第 1 个独一无二字符串。</p><p>&quot;a&quot; 第二个出现，所以它是 2 个独一无二字符串。</p><p>由于 k == 2 ，返回 &quot;a&quot; 。</p></blockquote><p><strong>示例 2:</strong></p><blockquote><p><strong>输入：</strong> arr = [&quot;aaa&quot;,&quot;aa&quot;,&quot;a&quot;], k = 1</p><p><strong>输出：</strong> &quot;aaa&quot;</p><p><strong>解释：</strong></p><p>arr 中所有字符串都是独一无二的，所以返回第 1 个字符串 &quot;aaa&quot; 。</p></blockquote><p><strong>示例 3：</strong></p><blockquote><p><strong>输入：</strong> arr = [&quot;a&quot;,&quot;b&quot;,&quot;a&quot;], k = 3</p><p><strong>输出：</strong> &quot;&quot;</p><p><strong>解释：</strong></p><p>唯一一个独一无二字符串是 &quot;b&quot; 。由于少于 3 个独一无二字符串，我们返回空字符串 &quot;&quot; 。</p></blockquote><p><strong>提示：</strong></p><ul><li><code>1 &lt;= k &lt;= arr.length &lt;= 1000</code></li><li><code>1 &lt;= arr[i].length &lt;= 5</code></li><li><code>arr[i]</code> 只包含小写英文字母。</li></ul><h2 id="解题思路" tabindex="-1"><a class="header-anchor" href="#解题思路" aria-hidden="true">#</a> 解题思路</h2><ol><li><p><strong>统计字符串出现的频率</strong>：</p><ul><li>使用 <code>Map</code> 数据结构存储每个字符串的出现次数。</li><li>遍历数组，将每个字符串的出现次数存入 <code>Map</code> 中。</li></ul></li><li><p><strong>查找第 <code>k</code> 个独特字符串</strong>：</p><ul><li>再次遍历数组，检查当前字符串是否只出现了一次。</li><li>如果是，则将 <code>k</code> 减一。当 <code>k</code> 减到零时，返回该字符串。</li></ul></li><li><p><strong>边界情况</strong>：</p><ul><li>如果遍历完数组，仍未找到第 <code>k</code> 个独特字符串，则返回空字符串 <code>&quot;&quot;</code>。</li></ul></li></ol><h4 id="复杂度分析" tabindex="-1"><a class="header-anchor" href="#复杂度分析" aria-hidden="true">#</a> 复杂度分析</h4><ul><li><strong>时间复杂度</strong>：<code>O(n)</code>，其中 <code>n</code> 为数组的长度，需要遍历数组统计频率。</li><li><strong>空间复杂度</strong>：<code>O(u)</code>，其中 <code>u</code> 为数组中不同字符串的数量，使用了一个 <code>Map</code> 存储字符串频率。</li></ul><h2 id="代码" tabindex="-1"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>string<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span> <span class="token parameter">arr</span>
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">}</span></span> <span class="token parameter">k</span>
 * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>string<span class="token punctuation">}</span></span>
 */</span>
<span class="token keyword">var</span> <span class="token function-variable function">kthDistinct</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">arr<span class="token punctuation">,</span> k</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> str <span class="token keyword">of</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		count<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> <span class="token punctuation">(</span>count<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> str <span class="token keyword">of</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>count<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">--</span>k <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> str<span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="相关题目" tabindex="-1"><a class="header-anchor" href="#相关题目" aria-hidden="true">#</a> 相关题目</h2>`,31),w=t("thead",null,[t("tr",null,[t("th",{style:{"text-align":"center"}},"题号"),t("th",{style:{"text-align":"left"}},"标题"),t("th",{style:{"text-align":"center"}},"题解"),t("th",{style:{"text-align":"left"}},"标签"),t("th",{style:{"text-align":"center"}},"难度"),t("th",{style:{"text-align":"center"}},"力扣")])],-1),E=t("td",{style:{"text-align":"center"}},"2085",-1),I=t("td",{style:{"text-align":"left"}},"统计出现过一次的公共字符串",-1),N={style:{"text-align":"center"}},C={style:{"text-align":"left"}},L=t("code",null,"数组",-1),O=t("code",null,"哈希表",-1),V=t("code",null,"字符串",-1),M=t("code",null,"1+",-1),j=t("td",{style:{"text-align":"center"}},"🟢",-1),B={style:{"text-align":"center"}},S={href:"https://leetcode.cn/problems/count-common-words-with-one-occurrence",target:"_blank",rel:"noopener noreferrer"},T={href:"https://leetcode.com/problems/count-common-words-with-one-occurrence",target:"_blank",rel:"noopener noreferrer"};function A(R,D){const p=r("font"),o=r("RouterLink"),e=r("ExternalLinkIcon");return l(),u("div",null,[g,t("p",null,[n("🟢 "),s(p,{color:"#15bd66"},{default:a(()=>[n("Easy")]),_:1}),n("  🔖  "),s(o,{to:"/tag/array.html"},{default:a(()=>[h]),_:1}),n(),s(o,{to:"/tag/hash-table.html"},{default:a(()=>[q]),_:1}),n(),s(o,{to:"/tag/string.html"},{default:a(()=>[_]),_:1}),n(),s(o,{to:"/tag/counting.html"},{default:a(()=>[m]),_:1}),n("  🔗 "),t("a",b,[f,s(e)]),n(),t("a",v,[y,s(e)])]),x,i(" prettier-ignore "),t("table",null,[w,t("tbody",null,[t("tr",null,[E,I,t("td",N,[s(o,{to:"/problem/2085.html"},{default:a(()=>[n("[✓]")]),_:1})]),t("td",C,[s(o,{to:"/tag/array.html"},{default:a(()=>[L]),_:1}),n(),s(o,{to:"/tag/hash-table.html"},{default:a(()=>[O]),_:1}),n(),s(o,{to:"/tag/string.html"},{default:a(()=>[V]),_:1}),n(),M]),j,t("td",B,[t("a",S,[n("🀄️"),s(e)]),n(),t("a",T,[n("🔗"),s(e)])])])])])])}const K=c(k,[["render",A],["__file","2053.html.vue"]]);export{K as default};
