import{_ as p,r as c,o as i,c as d,a as n,b as t,d as s,w as e,f as r,e as u}from"./app-B5EG-zH0.js";const k={},h=n("h1",{id:"_219-存在重复元素-ii",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_219-存在重复元素-ii","aria-hidden":"true"},"#"),t(" 219. 存在重复元素 II")],-1),_=n("code",null,"数组",-1),m=n("code",null,"哈希表",-1),b=n("code",null,"滑动窗口",-1),f={href:"https://leetcode.cn/problems/contains-duplicate-ii",target:"_blank",rel:"noopener noreferrer"},g=n("code",null,"力扣",-1),v={href:"https://leetcode.com/problems/contains-duplicate-ii",target:"_blank",rel:"noopener noreferrer"},y=n("code",null,"LeetCode",-1),x=u(`<h2 id="题目" tabindex="-1"><a class="header-anchor" href="#题目" aria-hidden="true">#</a> 题目</h2><p>Given an integer array <code>nums</code> and an integer <code>k</code>, return <code>true</code> _if there are two <strong>distinct indices</strong> _<code>i</code> <em>and</em><code>j</code> <em>in the array such that</em><code>nums[i] == nums[j]</code> <em>and</em> <code>abs(i - j) &lt;= k</code>.</p><p><strong>Example 1:</strong></p><blockquote><p>Input: nums = [1,2,3,1], k = 3</p><p>Output: true</p></blockquote><p><strong>Example 2:</strong></p><blockquote><p>Input: nums = [1,0,1,1], k = 1</p><p>Output: true</p></blockquote><p><strong>Example 3:</strong></p><blockquote><p>Input: nums = [1,2,3,1,2,3], k = 2</p><p>Output: false</p></blockquote><p><strong>Constraints:</strong></p><ul><li><code>1 &lt;= nums.length &lt;= 10^5</code></li><li><code>-10^9 &lt;= nums[i] &lt;= 10^9</code></li><li><code>0 &lt;= k &lt;= 10^5</code></li></ul><h2 id="题目大意" tabindex="-1"><a class="header-anchor" href="#题目大意" aria-hidden="true">#</a> 题目大意</h2><p>给你一个整数数组 <code>nums</code> 和一个整数 <code>k</code> ，判断数组中是否存在两个 <strong>不同的索引</strong> <code>i</code> 和 <code>j</code> ，满足 <code>nums[i] == nums[j]</code> 且 <code>abs(i - j) &lt;= k</code> 。如果存在，返回 <code>true</code> ；否则，返回 <code>false</code> 。</p><h2 id="解题思路" tabindex="-1"><a class="header-anchor" href="#解题思路" aria-hidden="true">#</a> 解题思路</h2><p>可以使用滑动窗口来解决这道题，维护一个只有 <code>K</code> 个元素的 <code>map</code>，<code>map</code> 的长度如果超过了 <code>K</code> 以后就删除掉第 <code>i-k</code> 的那个元素，这样一直维护 <code>map</code> 里面只有 <code>K</code> 个元素。</p><p>每次只需要判断这个 <code>map</code> 里面是否存在当前元素，如果存在就代表重复数字的下标差值在 <code>K</code> 以内。</p><h2 id="代码" tabindex="-1"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span> <span class="token parameter">nums</span>
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">}</span></span> <span class="token parameter">k</span>
 * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>boolean<span class="token punctuation">}</span></span>
 */</span>
<span class="token keyword">var</span> <span class="token function-variable function">containsNearbyDuplicate</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">nums<span class="token punctuation">,</span> k</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">const</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
		map<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>map<span class="token punctuation">.</span>size <span class="token operator">&gt;</span> k<span class="token punctuation">)</span> map<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i <span class="token operator">-</span> k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="相关题目" tabindex="-1"><a class="header-anchor" href="#相关题目" aria-hidden="true">#</a> 相关题目</h2>`,18),w=n("thead",null,[n("tr",null,[n("th",{style:{"text-align":"center"}},"题号"),n("th",{style:{"text-align":"left"}},"标题"),n("th",{style:{"text-align":"center"}},"题解"),n("th",{style:{"text-align":"left"}},"标签"),n("th",{style:{"text-align":"center"}},"难度"),n("th",{style:{"text-align":"center"}},"力扣")])],-1),I=n("td",{style:{"text-align":"center"}},"217",-1),j=n("td",{style:{"text-align":"left"}},"存在重复元素",-1),E={style:{"text-align":"center"}},q={style:{"text-align":"left"}},N=n("code",null,"数组",-1),C=n("code",null,"哈希表",-1),L=n("code",null,"排序",-1),V=n("td",{style:{"text-align":"center"}},"🟢",-1),K={style:{"text-align":"center"}},B={href:"https://leetcode.cn/problems/contains-duplicate",target:"_blank",rel:"noopener noreferrer"},O={href:"https://leetcode.com/problems/contains-duplicate",target:"_blank",rel:"noopener noreferrer"},R=n("td",{style:{"text-align":"center"}},"220",-1),z=n("td",{style:{"text-align":"left"}},"存在重复元素 III",-1),D=n("td",{style:{"text-align":"center"}},null,-1),G={style:{"text-align":"left"}},M=n("code",null,"数组",-1),S=n("code",null,"桶排序",-1),T=n("code",null,"有序集合",-1),A=n("code",null,"2+",-1),F=n("td",{style:{"text-align":"center"}},"🔴",-1),H={style:{"text-align":"center"}},J={href:"https://leetcode.cn/problems/contains-duplicate-iii",target:"_blank",rel:"noopener noreferrer"},P={href:"https://leetcode.com/problems/contains-duplicate-iii",target:"_blank",rel:"noopener noreferrer"};function Q(U,W){const l=c("font"),a=c("RouterLink"),o=c("ExternalLinkIcon");return i(),d("div",null,[h,n("p",null,[t("🟢 "),s(l,{color:"#15bd66"},{default:e(()=>[t("Easy")]),_:1}),t("  🔖  "),s(a,{to:"/tag/array.html"},{default:e(()=>[_]),_:1}),t(),s(a,{to:"/tag/hash-table.html"},{default:e(()=>[m]),_:1}),t(),s(a,{to:"/tag/sliding-window.html"},{default:e(()=>[b]),_:1}),t("  🔗 "),n("a",f,[g,s(o)]),t(),n("a",v,[y,s(o)])]),x,r(" prettier-ignore "),n("table",null,[w,n("tbody",null,[n("tr",null,[I,j,n("td",E,[s(a,{to:"/problem/0217.html"},{default:e(()=>[t("[✓]")]),_:1})]),n("td",q,[s(a,{to:"/tag/array.html"},{default:e(()=>[N]),_:1}),t(),s(a,{to:"/tag/hash-table.html"},{default:e(()=>[C]),_:1}),t(),s(a,{to:"/tag/sorting.html"},{default:e(()=>[L]),_:1})]),V,n("td",K,[n("a",B,[t("🀄️"),s(o)]),t(),n("a",O,[t("🔗"),s(o)])])]),n("tr",null,[R,z,D,n("td",G,[s(a,{to:"/tag/array.html"},{default:e(()=>[M]),_:1}),t(),s(a,{to:"/tag/bucket-sort.html"},{default:e(()=>[S]),_:1}),t(),s(a,{to:"/tag/ordered-set.html"},{default:e(()=>[T]),_:1}),t(),A]),F,n("td",H,[n("a",J,[t("🀄️"),s(o)]),t(),n("a",P,[t("🔗"),s(o)])])])])])])}const Y=p(k,[["render",Q],["__file","0219.html.vue"]]);export{Y as default};
