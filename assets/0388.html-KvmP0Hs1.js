import{_ as i,r as o,o as l,c as d,a as n,b as s,d as t,w as e,e as r}from"./app-fBVbqwGY.js";const u={},g=n("h1",{id:"_388-文件的最长绝对路径",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_388-文件的最长绝对路径","aria-hidden":"true"},"#"),s(" 388. 文件的最长绝对路径")],-1),h=n("code",null,"栈",-1),k=n("code",null,"深度优先搜索",-1),b=n("code",null,"字符串",-1),f={href:"https://leetcode.cn/problems/longest-absolute-file-path",target:"_blank",rel:"noopener noreferrer"},m=n("code",null,"力扣",-1),x={href:"https://leetcode.com/problems/longest-absolute-file-path",target:"_blank",rel:"noopener noreferrer"},v=n("code",null,"LeetCode",-1),q=r(`<h2 id="题目" tabindex="-1"><a class="header-anchor" href="#题目" aria-hidden="true">#</a> 题目</h2><p>Suppose we have a file system that stores both files and directories. An example of one system is represented in the following picture:</p><figure><img src="https://assets.leetcode.com/uploads/2020/08/28/mdir.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>Here, we have <code>dir</code> as the only directory in the root. <code>dir</code> contains two subdirectories, <code>subdir1</code> and <code>subdir2</code>. <code>subdir1</code> contains a file <code>file1.ext</code> and subdirectory <code>subsubdir1</code>. <code>subdir2</code> contains a subdirectory <code>subsubdir2</code>, which contains a file <code>file2.ext</code>.</p><p>In text form, it looks like this (with ⟶ representing the tab character):</p><blockquote><p>dir</p><p>⟶ subdir1</p><p>⟶ ⟶ file1.ext</p><p>⟶ ⟶ subsubdir1</p><p>⟶ subdir2</p><p>⟶ ⟶ subsubdir2</p><p>⟶ ⟶ ⟶ file2.ext</p></blockquote><p>If we were to write this representation in code, it will look like this: <code>&quot;dir\\n\\tsubdir1\\n\\t\\tfile1.ext\\n\\t\\tsubsubdir1\\n\\tsubdir2\\n\\t\\tsubsubdir2\\n\\t\\t\\tfile2.ext&quot;</code>. Note that the <code>&#39;\\n&#39;</code> and <code>&#39;\\t&#39;</code> are the new-line and tab characters.</p><p>Every file and directory has a unique <strong>absolute path</strong> in the file system, which is the order of directories that must be opened to reach the file/directory itself, all concatenated by <code>&#39;/&#39;s</code>. Using the above example, the <strong>absolute path</strong> to <code>file2.ext</code> is <code>&quot;dir/subdir2/subsubdir2/file2.ext&quot;</code>. Each directory name consists of letters, digits, and/or spaces. Each file name is of the form <code>name.extension</code>, where <code>name</code> and <code>extension</code> consist of letters, digits, and/or spaces.</p><p>Given a string <code>input</code> representing the file system in the explained format, return <em>the length of the<strong>longest absolute path</strong> to a <strong>file</strong> in the abstracted file system</em>. If there is no file in the system, return <code>0</code>.</p><p><strong>Note</strong> that the testcases are generated such that the file system is valid and no file or directory name has length 0.</p><p><strong>Example 1:</strong></p><figure><img src="https://assets.leetcode.com/uploads/2020/08/28/dir1.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><blockquote><p>Input: input = &quot;dir\\n\\tsubdir1\\n\\tsubdir2\\n\\t\\tfile.ext&quot;</p><p>Output: 20</p><p>Explanation: We have only one file, and the absolute path is &quot;dir/subdir2/file.ext&quot; of length 20.</p></blockquote><p><strong>Example 2:</strong></p><figure><img src="https://assets.leetcode.com/uploads/2020/08/28/dir2.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><blockquote><p>Input: input = &quot;dir\\n\\tsubdir1\\n\\t\\tfile1.ext\\n\\t\\tsubsubdir1\\n\\tsubdir2\\n\\t\\tsubsubdir2\\n\\t\\t\\tfile2.ext&quot;</p><p>Output: 32</p><p>Explanation: We have two files:</p><p>&quot;dir/subdir1/file1.ext&quot; of length 21</p><p>&quot;dir/subdir2/subsubdir2/file2.ext&quot; of length 32.</p><p>We return 32 since it is the longest absolute path to a file.</p></blockquote><p><strong>Example 3:</strong></p><blockquote><p>Input: input = &quot;a&quot;</p><p>Output: 0</p><p>Explanation: We do not have any files, just a single directory named &quot;a&quot;.</p></blockquote><p><strong>Constraints:</strong></p><ul><li><code>1 &lt;= input.length &lt;= 10^4</code></li><li><code>input</code> may contain lowercase or uppercase English letters, a new line character <code>&#39;\\n&#39;</code>, a tab character <code>&#39;\\t&#39;</code>, a dot <code>&#39;.&#39;</code>, a space <code>&#39; &#39;</code>, and digits.</li><li>All file and directory names have <strong>positive</strong> length.</li></ul><h2 id="题目大意" tabindex="-1"><a class="header-anchor" href="#题目大意" aria-hidden="true">#</a> 题目大意</h2><p>假设有一个同时存储文件和目录的文件系统。下图展示了文件系统的一个示例：</p><figure><img src="https://assets.leetcode.com/uploads/2020/08/28/mdir.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>这里将 <code>dir</code> 作为根目录中的唯一目录。<code>dir</code> 包含两个子目录 <code>subdir1</code> 和 <code>subdir2</code> 。<code>subdir1</code> 包含文件 <code>file1.ext</code> 和子目录 <code>subsubdir1</code>；<code>subdir2</code> 包含子目录 <code>subsubdir2</code>，该子目录下包含文件 <code>file2.ext</code> 。</p><p>在文本格式中，如下所示(⟶ 表示制表符)：</p><blockquote><p>dir</p><p>⟶ subdir1</p><p>⟶ ⟶ file1.ext</p><p>⟶ ⟶ subsubdir1</p><p>⟶ subdir2</p><p>⟶ ⟶ subsubdir2</p><p>⟶ ⟶ ⟶ file2.ext</p></blockquote><p>如果是代码表示，上面的文件系统可以写为 <code>&quot;dir\\n\\tsubdir1\\n\\t\\tfile1.ext\\n\\t\\tsubsubdir1\\n\\tsubdir2\\n\\t\\tsubsubdir2\\n\\t\\t\\tfile2.ext&quot;</code> 。<code>&#39;\\n&#39;</code> 和 <code>&#39;\\t&#39;</code> 分别是换行符和制表符。</p><p>文件系统中的每个文件和文件夹都有一个唯一的 <strong>绝对路径</strong> ，即必须打开才能到达文件/目录所在位置的目录顺序，所有路径用 <code>&#39;/&#39;</code> 连接。上面例子中，指向 <code>file2.ext</code> 的 <strong>绝对路径</strong> 是 <code>&quot;dir/subdir2/subsubdir2/file2.ext&quot;</code> 。每个目录名由字母、数字和/或空格组成，每个文件名遵循 <code>name.extension</code> 的格式，其中 <code>name</code> 和 <code>extension</code>由字母、数字和/或空格组成。</p><p>给定一个以上述格式表示文件系统的字符串 <code>input</code> ，返回文件系统中 <em>指向 <strong>文件</strong> 的 <strong>最长绝对路径</strong> 的长度</em> 。 如果系统中没有文件，返回 <code>0</code>。</p><p><strong>示例 1：</strong></p><figure><img src="https://assets.leetcode.com/uploads/2020/08/28/dir1.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><blockquote><p><strong>输入：</strong> input = &quot;dir\\n\\tsubdir1\\n\\tsubdir2\\n\\t\\tfile.ext&quot;</p><p><strong>输出：</strong> 20</p><p><strong>解释：</strong> 只有一个文件，绝对路径为 &quot;dir/subdir2/file.ext&quot; ，路径长度 20</p></blockquote><p><strong>示例 2：</strong></p><figure><img src="https://assets.leetcode.com/uploads/2020/08/28/dir2.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><blockquote><p><strong>输入：</strong> input = &quot;dir\\n\\tsubdir1\\n\\t\\tfile1.ext\\n\\t\\tsubsubdir1\\n\\tsubdir2\\n\\t\\tsubsubdir2\\n\\t\\t\\tfile2.ext&quot;</p><p><strong>输出：</strong> 32</p><p><strong>解释：</strong> 存在两个文件：</p><p>&quot;dir/subdir1/file1.ext&quot; ，路径长度 21</p><p>&quot;dir/subdir2/subsubdir2/file2.ext&quot; ，路径长度 32</p><p>返回 32 ，因为这是最长的路径</p></blockquote><p><strong>示例 3：</strong></p><blockquote><p><strong>输入：</strong> input = &quot;a&quot;</p><p><strong>输出：</strong> 0</p><p><strong>解释：</strong> 不存在任何文件</p></blockquote><p><strong>示例 4：</strong></p><blockquote><p><strong>输入：</strong> input = &quot;file1.txt\\nfile2.txt\\nlongfile.txt&quot;</p><p><strong>输出：</strong> 12</p><p><strong>解释：</strong> 根目录下有 3 个文件。</p><p>因为根目录中任何东西的绝对路径只是名称本身，所以答案是 &quot;longfile.txt&quot; ，路径长度为 12</p></blockquote><p><strong>提示：</strong></p><ul><li><code>1 &lt;= input.length &lt;= 10^4</code></li><li><code>input</code> 可能包含小写或大写的英文字母，一个换行符 <code>&#39;\\n&#39;</code>，一个制表符 <code>&#39;\\t&#39;</code>，一个点 <code>&#39;.&#39;</code>，一个空格 <code>&#39; &#39;</code>，和数字。</li></ul><h2 id="解题思路" tabindex="-1"><a class="header-anchor" href="#解题思路" aria-hidden="true">#</a> 解题思路</h2><ol><li><p><strong>解析路径</strong>：<br> 将输入字符串通过 <code>\\n</code> 拆分成路径片段，存储到数组 <code>arr</code> 中。</p></li><li><p><strong>缓存路径长度</strong>：<br> 用 <code>cache</code> 来存储每一层的当前路径长度，初始值为 <code>cache.set(0, 0)</code>，表示根层路径长度为 0。</p></li><li><p><strong>遍历路径片段</strong>：</p><ul><li>去除 <code>\\t</code> 得到实际文件名或目录名 <code>name</code>，计算其层级 <code>depth = str.length - name.length</code>。</li><li>判断是否为文件 (<code>name.includes(&#39;.&#39;)</code>)： <ul><li>如果是文件，计算完整路径长度并更新 <code>res</code>。</li></ul></li><li>如果是目录，将其长度缓存 <code>cache.set(depth + 1, cache.get(depth) + name.length + 1)</code>（+1 是因为需要加上 <code>/</code> 分隔符）。</li></ul></li></ol><h4 id="复杂度分析" tabindex="-1"><a class="header-anchor" href="#复杂度分析" aria-hidden="true">#</a> 复杂度分析</h4><ul><li><strong>时间复杂度</strong>：<code>O(n)</code>，其中 <code>n</code> 是字符串的长度，每个字符只处理一次。</li><li><strong>空间复杂度</strong>：<code>O(d)</code>，其中 <code>d</code> 是目录深度，需要存储每层路径长度。</li></ul><h2 id="代码" tabindex="-1"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>string<span class="token punctuation">}</span></span> <span class="token parameter">input</span>
 * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">}</span></span>
 */</span>
<span class="token keyword">var</span> <span class="token function-variable function">lengthLongestPath</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">input</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">const</span> paths <span class="token operator">=</span> input<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;\\n&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">let</span> maxLen <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">const</span> cache <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	cache<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> path <span class="token keyword">of</span> paths<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">const</span> name <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\t</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">const</span> depth <span class="token operator">=</span> path<span class="token punctuation">.</span>length <span class="token operator">-</span> name<span class="token punctuation">.</span>length<span class="token punctuation">;</span>

		<span class="token keyword">if</span> <span class="token punctuation">(</span>name<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">&#39;.&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			maxLen <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>maxLen<span class="token punctuation">,</span> cache<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>depth<span class="token punctuation">)</span> <span class="token operator">+</span> name<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
			cache<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>depth <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> cache<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>depth<span class="token punctuation">)</span> <span class="token operator">+</span> name<span class="token punctuation">.</span>length <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">return</span> maxLen<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,47);function _(y,w){const c=o("font"),a=o("RouterLink"),p=o("ExternalLinkIcon");return l(),d("div",null,[g,n("p",null,[s("🟠 "),t(c,{color:"#ffb800"},{default:e(()=>[s("Medium")]),_:1}),s("  🔖  "),t(a,{to:"/tag/stack.html"},{default:e(()=>[h]),_:1}),s(),t(a,{to:"/tag/depth-first-search.html"},{default:e(()=>[k]),_:1}),s(),t(a,{to:"/tag/string.html"},{default:e(()=>[b]),_:1}),s("  🔗 "),n("a",f,[m,t(p)]),s(),n("a",x,[v,t(p)])]),q])}const j=i(u,[["render",_],["__file","0388.html.vue"]]);export{j as default};
