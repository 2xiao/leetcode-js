import{_ as p,r as c,o as d,c as k,a as n,b as t,d as s,w as e,f as h,e as m}from"./app-aQeLbVW9.js";const g={},_=n("h1",{id:"_1980-找出不同的二进制字符串",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_1980-找出不同的二进制字符串","aria-hidden":"true"},"#"),t(" 1980. 找出不同的二进制字符串")],-1),b=n("code",null,"数组",-1),f=n("code",null,"哈希表",-1),q=n("code",null,"字符串",-1),y=n("code",null,"回溯",-1),v={href:"https://leetcode.cn/problems/find-unique-binary-string",target:"_blank",rel:"noopener noreferrer"},x=n("code",null,"力扣",-1),w={href:"https://leetcode.com/problems/find-unique-binary-string",target:"_blank",rel:"noopener noreferrer"},E=n("code",null,"LeetCode",-1),j=m('<h2 id="题目" tabindex="-1"><a class="header-anchor" href="#题目" aria-hidden="true">#</a> 题目</h2><p>Given an array of strings <code>nums</code> containing <code>n</code> <strong>unique</strong> binary strings each of length <code>n</code>, return <em>a binary string of length</em><code>n</code> _that<strong>does not appear</strong> in _<code>nums</code> <em>. If there are multiple answers, you may return<strong>any</strong> of them</em>.</p><p><strong>Example 1:</strong></p><blockquote><p>Input: nums = [&quot;01&quot;,&quot;10&quot;]</p><p>Output: &quot;11&quot;</p><p>Explanation: &quot;11&quot; does not appear in nums. &quot;00&quot; would also be correct.</p></blockquote><p><strong>Example 2:</strong></p><blockquote><p>Input: nums = [&quot;00&quot;,&quot;01&quot;]</p><p>Output: &quot;11&quot;</p><p>Explanation: &quot;11&quot; does not appear in nums. &quot;10&quot; would also be correct.</p></blockquote><p><strong>Example 3:</strong></p><blockquote><p>Input: nums = [&quot;111&quot;,&quot;011&quot;,&quot;001&quot;]</p><p>Output: &quot;101&quot;</p><p>Explanation: &quot;101&quot; does not appear in nums. &quot;000&quot;, &quot;010&quot;, &quot;100&quot;, and &quot;110&quot; would also be correct.</p></blockquote><p><strong>Constraints:</strong></p><ul><li><code>n == nums.length</code></li><li><code>1 &lt;= n &lt;= 16</code></li><li><code>nums[i].length == n</code></li><li><code>nums[i] </code>is either <code>&#39;0&#39;</code> or <code>&#39;1&#39;</code>.</li><li>All the strings of <code>nums</code> are <strong>unique</strong>.</li></ul><h2 id="题目大意" tabindex="-1"><a class="header-anchor" href="#题目大意" aria-hidden="true">#</a> 题目大意</h2><p>给你一个字符串数组 <code>nums</code> ，该数组由 <code>n</code> 个 <strong>互不相同</strong> 的二进制字符串组成，且每个字符串长度都是 <code>n</code> 。请你找出并返回一个长度为 <code>n</code> 且 <strong>没有出现</strong> 在 <code>nums</code> 中的二进制字符串 <em>。</em> 如果存在多种答案，只需返回 <strong>任意一个</strong> 即可。</p><p><strong>示例 1：</strong></p><blockquote><p><strong>输入：</strong> nums = [&quot;01&quot;,&quot;10&quot;]</p><p><strong>输出：</strong> &quot;11&quot;</p><p><strong>解释：</strong> &quot;11&quot; 没有出现在 nums 中。&quot;00&quot; 也是正确答案。</p></blockquote><p><strong>示例 2：</strong></p><blockquote><p><strong>输入：</strong> nums = [&quot;00&quot;,&quot;01&quot;]</p><p><strong>输出：</strong> &quot;11&quot;</p><p><strong>解释：</strong> &quot;11&quot; 没有出现在 nums 中。&quot;10&quot; 也是正确答案。</p></blockquote><p><strong>示例 3：</strong></p><blockquote><p><strong>输入：</strong> nums = [&quot;111&quot;,&quot;011&quot;,&quot;001&quot;]</p><p><strong>输出：</strong> &quot;101&quot;</p><p><strong>解释：</strong> &quot;101&quot; 没有出现在 nums 中。&quot;000&quot;、&quot;010&quot;、&quot;100&quot;、&quot;110&quot; 也是正确答案。</p></blockquote><p><strong>提示：</strong></p><ul><li><code>n == nums.length</code></li><li><code>1 &lt;= n &lt;= 16</code></li><li><code>nums[i].length == n</code></li><li><code>nums[i] </code>为 <code>&#39;0&#39;</code> 或 <code>&#39;1&#39;</code></li><li><code>nums</code> 中的所有字符串 <strong>互不相同</strong></li></ul><h2 id="解题思路" tabindex="-1"><a class="header-anchor" href="#解题思路" aria-hidden="true">#</a> 解题思路</h2><h3 id="思路一-回溯" tabindex="-1"><a class="header-anchor" href="#思路一-回溯" aria-hidden="true">#</a> 思路一：回溯</h3><p>回溯法用于枚举所有可能的 <code>n</code> 位二进制字符串，并找到一个不在 <code>nums</code> 中的字符串。</p><ol><li><p><strong>使用 Set 记录已存在的二进制字符串</strong></p><ul><li>由于 <code>nums</code> 中的二进制字符串都是唯一的，可以用 <code>Set</code> 进行快速查找。</li></ul></li><li><p><strong>使用递归构造所有可能的 <code>n</code> 位二进制字符串</strong></p><ul><li>递归构造每一位，可以选择 <code>0</code> 或 <code>1</code>，形成一个树形递归结构。</li><li>当构造出一个长度为 <code>n</code> 的字符串时，检查它是否在 <code>Set</code> 中，如果不在，则记录为结果并返回。</li></ul></li><li><p><strong>终止条件</strong></p><ul><li>当找到一个不在 <code>nums</code> 中的字符串时，立即终止回溯，返回该字符串。</li></ul></li></ol><h4 id="复杂度分析" tabindex="-1"><a class="header-anchor" href="#复杂度分析" aria-hidden="true">#</a> 复杂度分析</h4><ul><li><strong>时间复杂度</strong>：<code>O(2^n)</code>，最坏情况下需要遍历所有 <code>n</code> 位二进制字符串。</li><li><strong>空间复杂度</strong>：<code>O(n)</code>，递归调用栈的最大深度为 <code>n</code>。</li></ul><hr><h3 id="思路二-对角线法" tabindex="-1"><a class="header-anchor" href="#思路二-对角线法" aria-hidden="true">#</a> 思路二：对角线法</h3><p>对角线法是一种巧妙的构造方法，能够在 <code>O(n)</code> 时间复杂度内找到一个不在 <code>nums</code> 中的字符串。</p><ol><li><strong>利用对角线特性生成唯一字符串</strong></li><li>依次遍历 <code>nums</code> 的第 <code>i</code> 个字符串，取它的第 <code>i</code> 位并翻转（即 <code>0</code> 变 <code>1</code>，<code>1</code> 变 <code>0</code>）。</li><li>这样形成的新字符串一定与 <code>nums</code> 中的所有字符串至少有一位不同，因此不会出现在 <code>nums</code> 里。</li></ol><h4 id="复杂度分析-1" tabindex="-1"><a class="header-anchor" href="#复杂度分析-1" aria-hidden="true">#</a> 复杂度分析</h4><ul><li><strong>时间复杂度</strong>：<code>O(n)</code>，只需遍历 <code>nums</code> 一次即可构造出一个新的字符串。</li><li><strong>空间复杂度</strong>：<code>O(n)</code>，用于存储最终生成的字符串。</li></ul><hr><h2 id="代码" tabindex="-1"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h2>',34),O=n("div",{class:"language-javascript line-numbers-mode","data-ext":"js"},[n("pre",{class:"language-javascript"},[n("code",null,[n("span",{class:"token doc-comment comment"},[t(`/**
 * `),n("span",{class:"token keyword"},"@param"),t(),n("span",{class:"token class-name"},[n("span",{class:"token punctuation"},"{"),t("string"),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"}")]),t(),n("span",{class:"token parameter"},"nums"),t(`
 * `),n("span",{class:"token keyword"},"@return"),t(),n("span",{class:"token class-name"},[n("span",{class:"token punctuation"},"{"),t("string"),n("span",{class:"token punctuation"},"}")]),t(`
 */`)]),t(`
`),n("span",{class:"token keyword"},"var"),t(),n("span",{class:"token function-variable function"},"findDifferentBinaryString"),t(),n("span",{class:"token operator"},"="),t(),n("span",{class:"token keyword"},"function"),t(),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"nums"),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token punctuation"},"{"),t(`
	`),n("span",{class:"token keyword"},"const"),t(" n "),n("span",{class:"token operator"},"="),t(" nums"),n("span",{class:"token punctuation"},"."),t("length"),n("span",{class:"token punctuation"},";"),t(`
	`),n("span",{class:"token keyword"},"const"),t(" exists "),n("span",{class:"token operator"},"="),t(),n("span",{class:"token keyword"},"new"),t(),n("span",{class:"token class-name"},"Set"),n("span",{class:"token punctuation"},"("),t("nums"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),t(`
	`),n("span",{class:"token keyword"},"let"),t(" result "),n("span",{class:"token operator"},"="),t(),n("span",{class:"token keyword"},"null"),n("span",{class:"token punctuation"},";"),t(`
	`),n("span",{class:"token keyword"},"const"),t(),n("span",{class:"token function-variable function"},"backtrack"),t(),n("span",{class:"token operator"},"="),t(),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"track"),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token operator"},"=>"),t(),n("span",{class:"token punctuation"},"{"),t(`
		`),n("span",{class:"token keyword"},"if"),t(),n("span",{class:"token punctuation"},"("),t("result "),n("span",{class:"token operator"},"!=="),t(),n("span",{class:"token keyword"},"null"),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token punctuation"},"{"),t(`
			`),n("span",{class:"token keyword"},"return"),t(" result"),n("span",{class:"token punctuation"},";"),t(`
		`),n("span",{class:"token punctuation"},"}"),t(`
		`),n("span",{class:"token keyword"},"if"),t(),n("span",{class:"token punctuation"},"("),t("track"),n("span",{class:"token punctuation"},"."),t("length "),n("span",{class:"token operator"},"=="),t(" n"),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token punctuation"},"{"),t(`
			`),n("span",{class:"token keyword"},"if"),t(),n("span",{class:"token punctuation"},"("),n("span",{class:"token operator"},"!"),t("exists"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"has"),n("span",{class:"token punctuation"},"("),t("track"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"join"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"''"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token punctuation"},"{"),t(`
				result `),n("span",{class:"token operator"},"="),t(" track"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"join"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"''"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),t(`
			`),n("span",{class:"token punctuation"},"}"),t(`
			`),n("span",{class:"token keyword"},"return"),n("span",{class:"token punctuation"},";"),t(`
		`),n("span",{class:"token punctuation"},"}"),t(`
		`),n("span",{class:"token keyword"},"for"),t(),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"let"),t(" char "),n("span",{class:"token keyword"},"of"),t(),n("span",{class:"token punctuation"},"["),n("span",{class:"token string"},"'0'"),n("span",{class:"token punctuation"},","),t(),n("span",{class:"token string"},"'1'"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token punctuation"},"{"),t(`
			track`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"push"),n("span",{class:"token punctuation"},"("),t("char"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),t(`
			`),n("span",{class:"token function"},"backtrack"),n("span",{class:"token punctuation"},"("),t("track"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),t(`
			track`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"pop"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),t(`
		`),n("span",{class:"token punctuation"},"}"),t(`
	`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";"),t(`
	`),n("span",{class:"token function"},"backtrack"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),t(`
	`),n("span",{class:"token keyword"},"return"),t(" result"),n("span",{class:"token punctuation"},";"),t(`
`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";"),t(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),C=n("div",{class:"language-javascript line-numbers-mode","data-ext":"js"},[n("pre",{class:"language-javascript"},[n("code",null,[n("span",{class:"token doc-comment comment"},[t(`/**
 * `),n("span",{class:"token keyword"},"@param"),t(),n("span",{class:"token class-name"},[n("span",{class:"token punctuation"},"{"),t("string"),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"}")]),t(),n("span",{class:"token parameter"},"nums"),t(`
 * `),n("span",{class:"token keyword"},"@return"),t(),n("span",{class:"token class-name"},[n("span",{class:"token punctuation"},"{"),t("string"),n("span",{class:"token punctuation"},"}")]),t(`
 */`)]),t(`
`),n("span",{class:"token keyword"},"var"),t(),n("span",{class:"token function-variable function"},"findDifferentBinaryString"),t(),n("span",{class:"token operator"},"="),t(),n("span",{class:"token keyword"},"function"),t(),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"nums"),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token punctuation"},"{"),t(`
	`),n("span",{class:"token keyword"},"let"),t(" n "),n("span",{class:"token operator"},"="),t(" nums"),n("span",{class:"token punctuation"},"."),t("length"),n("span",{class:"token punctuation"},";"),t(`
	`),n("span",{class:"token keyword"},"let"),t(" result "),n("span",{class:"token operator"},"="),t(),n("span",{class:"token string"},"''"),n("span",{class:"token punctuation"},";"),t(`
	`),n("span",{class:"token keyword"},"for"),t(),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"let"),t(" i "),n("span",{class:"token operator"},"="),t(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},";"),t(" i "),n("span",{class:"token operator"},"<"),t(" n"),n("span",{class:"token punctuation"},";"),t(" i"),n("span",{class:"token operator"},"++"),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token punctuation"},"{"),t(`
		result `),n("span",{class:"token operator"},"+="),t(" nums"),n("span",{class:"token punctuation"},"["),t("i"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"["),t("i"),n("span",{class:"token punctuation"},"]"),t(),n("span",{class:"token operator"},"==="),t(),n("span",{class:"token string"},"'0'"),t(),n("span",{class:"token operator"},"?"),t(),n("span",{class:"token string"},"'1'"),t(),n("span",{class:"token operator"},":"),t(),n("span",{class:"token string"},"'0'"),n("span",{class:"token punctuation"},";"),t(`
	`),n("span",{class:"token punctuation"},"}"),t(`
	`),n("span",{class:"token keyword"},"return"),t(" result"),n("span",{class:"token punctuation"},";"),t(`
`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";"),t(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),S=n("h2",{id:"相关题目",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#相关题目","aria-hidden":"true"},"#"),t(" 相关题目")],-1),I=n("thead",null,[n("tr",null,[n("th",{style:{"text-align":"center"}},"题号"),n("th",{style:{"text-align":"left"}},"标题"),n("th",{style:{"text-align":"center"}},"题解"),n("th",{style:{"text-align":"left"}},"标签"),n("th",{style:{"text-align":"center"}},"难度"),n("th",{style:{"text-align":"center"}},"力扣")])],-1),A=n("td",{style:{"text-align":"center"}},"268",-1),B=n("td",{style:{"text-align":"left"}},"丢失的数字",-1),L={style:{"text-align":"center"}},N={style:{"text-align":"left"}},V=n("code",null,"位运算",-1),T=n("code",null,"数组",-1),D=n("code",null,"哈希表",-1),R=n("code",null,"3+",-1),G=n("td",{style:{"text-align":"center"}},"🟢",-1),M={style:{"text-align":"center"}},z={href:"https://leetcode.cn/problems/missing-number",target:"_blank",rel:"noopener noreferrer"},F={href:"https://leetcode.com/problems/missing-number",target:"_blank",rel:"noopener noreferrer"},H=n("td",{style:{"text-align":"center"}},"448",-1),J=n("td",{style:{"text-align":"left"}},"找到所有数组中消失的数字",-1),K={style:{"text-align":"center"}},P={style:{"text-align":"left"}},Q=n("code",null,"数组",-1),U=n("code",null,"哈希表",-1),W=n("td",{style:{"text-align":"center"}},"🟢",-1),X={style:{"text-align":"center"}},Y={href:"https://leetcode.cn/problems/find-all-numbers-disappeared-in-an-array",target:"_blank",rel:"noopener noreferrer"},Z={href:"https://leetcode.com/problems/find-all-numbers-disappeared-in-an-array",target:"_blank",rel:"noopener noreferrer"},$=n("td",{style:{"text-align":"center"}},"710",-1),nn=n("td",{style:{"text-align":"left"}},"黑名单中的随机数",-1),tn=n("td",{style:{"text-align":"center"}},null,-1),sn={style:{"text-align":"left"}},en=n("code",null,"数组",-1),on=n("code",null,"哈希表",-1),an=n("code",null,"数学",-1),cn=n("code",null,"3+",-1),ln=n("td",{style:{"text-align":"center"}},"🔴",-1),un={style:{"text-align":"center"}},rn={href:"https://leetcode.cn/problems/random-pick-with-blacklist",target:"_blank",rel:"noopener noreferrer"},pn={href:"https://leetcode.com/problems/random-pick-with-blacklist",target:"_blank",rel:"noopener noreferrer"};function dn(kn,hn){const i=c("font"),o=c("RouterLink"),a=c("ExternalLinkIcon"),r=c("CodeTabs");return d(),k("div",null,[_,n("p",null,[t("🟠 "),s(i,{color:"#ffb800"},{default:e(()=>[t("Medium")]),_:1}),t("  🔖  "),s(o,{to:"/tag/array.html"},{default:e(()=>[b]),_:1}),t(),s(o,{to:"/tag/hash-table.html"},{default:e(()=>[f]),_:1}),t(),s(o,{to:"/tag/string.html"},{default:e(()=>[q]),_:1}),t(),s(o,{to:"/tag/backtracking.html"},{default:e(()=>[y]),_:1}),t("  🔗 "),n("a",v,[x,s(a)]),t(),n("a",w,[E,s(a)])]),j,s(r,{id:"272",data:[{id:"回溯"},{id:"对角线法"}]},{title0:e(({value:l,isActive:u})=>[t("回溯")]),title1:e(({value:l,isActive:u})=>[t("对角线法")]),tab0:e(({value:l,isActive:u})=>[O]),tab1:e(({value:l,isActive:u})=>[C]),_:1}),S,h(" prettier-ignore "),n("table",null,[I,n("tbody",null,[n("tr",null,[A,B,n("td",L,[s(o,{to:"/problem/0268.html"},{default:e(()=>[t("[✓]")]),_:1})]),n("td",N,[s(o,{to:"/tag/bit-manipulation.html"},{default:e(()=>[V]),_:1}),t(),s(o,{to:"/tag/array.html"},{default:e(()=>[T]),_:1}),t(),s(o,{to:"/tag/hash-table.html"},{default:e(()=>[D]),_:1}),t(),R]),G,n("td",M,[n("a",z,[t("🀄️"),s(a)]),t(),n("a",F,[t("🔗"),s(a)])])]),n("tr",null,[H,J,n("td",K,[s(o,{to:"/problem/0448.html"},{default:e(()=>[t("[✓]")]),_:1})]),n("td",P,[s(o,{to:"/tag/array.html"},{default:e(()=>[Q]),_:1}),t(),s(o,{to:"/tag/hash-table.html"},{default:e(()=>[U]),_:1})]),W,n("td",X,[n("a",Y,[t("🀄️"),s(a)]),t(),n("a",Z,[t("🔗"),s(a)])])]),n("tr",null,[$,nn,tn,n("td",sn,[s(o,{to:"/tag/array.html"},{default:e(()=>[en]),_:1}),t(),s(o,{to:"/tag/hash-table.html"},{default:e(()=>[on]),_:1}),t(),s(o,{to:"/tag/math.html"},{default:e(()=>[an]),_:1}),t(),cn]),ln,n("td",un,[n("a",rn,[t("🀄️"),s(a)]),t(),n("a",pn,[t("🔗"),s(a)])])])])])])}const gn=p(g,[["render",dn],["__file","1980.html.vue"]]);export{gn as default};
