import{_ as p,r as a,o as i,c as r,a as n,b as e,d as o,w as s,e as c}from"./app-fBVbqwGY.js";const u={},m=n("h1",{id:"_476-数字的补数",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_476-数字的补数","aria-hidden":"true"},"#"),e(" 476. 数字的补数")],-1),k=n("code",null,"位运算",-1),h={href:"https://leetcode.cn/problems/number-complement",target:"_blank",rel:"noopener noreferrer"},g=n("code",null,"力扣",-1),b={href:"https://leetcode.com/problems/number-complement",target:"_blank",rel:"noopener noreferrer"},_=n("code",null,"LeetCode",-1),v=c('<h2 id="题目" tabindex="-1"><a class="header-anchor" href="#题目" aria-hidden="true">#</a> 题目</h2><p>The <strong>complement</strong> of an integer is the integer you get when you flip all the <code>0</code>&#39;s to <code>1</code>&#39;s and all the <code>1</code>&#39;s to <code>0</code>&#39;s in its binary representation.</p><ul><li>For example, The integer <code>5</code> is <code>&quot;101&quot;</code> in binary and its <strong>complement</strong> is <code>&quot;010&quot;</code> which is the integer <code>2</code>.</li></ul><p>Given an integer <code>num</code>, return <em>its complement</em>.</p><p><strong>Example 1:</strong></p><blockquote><p>Input: num = 5</p><p>Output: 2</p><p>Explanation: The binary representation of 5 is 101 (no leading zero bits), and its complement is 010. So you need to output 2.</p></blockquote><p><strong>Example 2:</strong></p><blockquote><p>Input: num = 1</p><p>Output: 0</p><p>Explanation: The binary representation of 1 is 1 (no leading zero bits), and its complement is 0. So you need to output 0.</p></blockquote><p><strong>Constraints:</strong></p><ul><li><code>1 &lt;= num &lt; 231</code></li></ul>',10),f=n("strong",null,"Note:",-1),x=c('<h2 id="题目大意" tabindex="-1"><a class="header-anchor" href="#题目大意" aria-hidden="true">#</a> 题目大意</h2><p>对整数的二进制表示取反（<code>0</code> 变 <code>1</code> ，<code>1</code> 变 <code>0</code>）后，再转换为十进制表示，可以得到这个整数的补数。</p><ul><li>例如，整数 <code>5</code> 的二进制表示是 <code>&quot;101&quot;</code> ，取反后得到 <code>&quot;010&quot;</code> ，再转回十进制表示得到补数 <code>2</code> 。</li></ul><p>给你一个整数 <code>num</code> ，输出它的补数。</p><p><strong>示例 1：</strong></p><blockquote><p><strong>输入：</strong> num = 5</p><p><strong>输出：</strong> 2</p><p><strong>解释：</strong> 5 的二进制表示为 101（没有前导零位），其补数为 010。所以你需要输出 2 。</p></blockquote><p><strong>示例 2：</strong></p><blockquote><p><strong>输入：</strong> num = 1</p><p><strong>输出：</strong> 0</p><p><strong>解释：</strong> 1 的二进制表示为 1（没有前导零位），其补数为 0。所以你需要输出 0 。</p></blockquote><p><strong>提示：</strong></p><ul><li><code>1 &lt;= num &lt; 231</code></li></ul>',10),y=n("strong",null,"注意：",-1),q=c(`<h2 id="解题思路" tabindex="-1"><a class="header-anchor" href="#解题思路" aria-hidden="true">#</a> 解题思路</h2><ol><li><p><strong>理解补数操作</strong>：</p><ul><li>补数的概念是在二进制表示中，将所有的 <code>0</code> 替换为 <code>1</code>，所有的 <code>1</code> 替换为 <code>0</code>。</li><li>例如：<code>num = 5</code>，它的二进制表示为 <code>101</code>，其补数为 <code>010</code>，对应十进制 <code>2</code>。</li></ul></li><li><p><strong>掩码 (Mask) 的作用</strong>：</p><ul><li>为了将 <code>num</code> 中的所有位取反，我们需要使用一个掩码（mask），它的长度与 <code>num</code> 的二进制表示的位数相同，并且所有位都为 <code>1</code>。</li><li>如果二进制长度为 <code>n</code>，对应的掩码就是 <code>111...111</code>（长度为 <code>n</code>）。</li><li>例如：<code>101</code> 的掩码是 <code>111</code>。</li></ul></li><li><p><strong>异或操作实现取反</strong>：</p><ul><li>将 <code>num</code> 和掩码进行异或操作，就能将 <code>num</code> 的所有 <code>1</code> 变成 <code>0</code>，所有 <code>0</code> 变成 <code>1</code>，得到其补码。</li><li>异或规则：<code>1 ^ 1 = 0</code>, <code>0 ^ 1 = 1</code>。</li><li>例如：<code>101 ^ 111 = 010</code>。</li></ul></li><li><p><strong>如何构建掩码</strong>：</p><ul><li>先计算 <code>num</code> 的二进制位数：<code>bitLength = num.toString(2).length</code>。</li><li>然后用位运算 <code>1 &lt;&lt; bitLength</code> 得到一个只有第 <code>bitLength+1</code> 位为 <code>1</code> 的数： <ul><li>示例：<code>1 &lt;&lt; 3</code> = <code>1000</code>。</li></ul></li><li>再减去 <code>1</code>，得到所有位为 <code>1</code> 的掩码： <ul><li>示例：<code>(1 &lt;&lt; 3) - 1</code> = <code>1000 - 1</code> = <code>111</code>。</li></ul></li></ul></li><li><p><strong>特殊情况</strong>：</p><ul><li>如果 <code>num == 0</code>，补数应为 <code>1</code>，需要单独处理。</li></ul></li></ol><h4 id="复杂度分析" tabindex="-1"><a class="header-anchor" href="#复杂度分析" aria-hidden="true">#</a> 复杂度分析</h4><ul><li><strong>时间复杂度</strong>：<code>O(1)</code>，计算二进制位数和掩码都是常数时间操作。</li><li><strong>空间复杂度</strong>：<code>O(1)</code>，仅使用了常数级别的额外变量。</li></ul><h2 id="代码" tabindex="-1"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">}</span></span> <span class="token parameter">num</span>
 * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">}</span></span>
 */</span>
<span class="token keyword">var</span> <span class="token function-variable function">findComplement</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">num</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 处理特殊情况：输入为 0</span>

	<span class="token comment">// 计算二进制的位数</span>
	<span class="token keyword">const</span> bitLength <span class="token operator">=</span> num<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>

	<span class="token comment">// 构建掩码：所有位都是 1</span>
	<span class="token keyword">const</span> mask <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> bitLength<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>

	<span class="token comment">// 通过异或操作计算补数</span>
	<span class="token keyword">return</span> num <span class="token operator">^</span> mask<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,6);function w(L,E){const d=a("font"),t=a("RouterLink"),l=a("ExternalLinkIcon");return i(),r("div",null,[m,n("p",null,[e("🟢 "),o(d,{color:"#15bd66"},{default:s(()=>[e("Easy")]),_:1}),e("  🔖  "),o(t,{to:"/tag/bit-manipulation.html"},{default:s(()=>[k]),_:1}),e("  🔗 "),n("a",h,[g,o(l)]),e(),n("a",b,[_,o(l)])]),v,n("p",null,[f,e(" This question is the same as "),o(t,{to:"/problem/1009.html"},{default:s(()=>[e("1009. Complement of Base 10 Integer")]),_:1})]),x,n("p",null,[y,e(" 本题与 "),o(t,{to:"/problem/1009.html"},{default:s(()=>[e("1009. 十进制整数的反码")]),_:1}),e(" 相同")]),q])}const T=p(u,[["render",w],["__file","0476.html.vue"]]);export{T as default};
