import{_ as l,r as p,o as d,c as i,a as n,b as s,d as a,w as e,f as r,e as u}from"./app-aQeLbVW9.js";const k={},h=n("h1",{id:"_731-我的日程安排表-ii",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_731-我的日程安排表-ii","aria-hidden":"true"},"#"),s(" 731. 我的日程安排表 II")],-1),m=n("code",null,"设计",-1),b=n("code",null,"线段树",-1),_=n("code",null,"数组",-1),v=n("code",null,"二分查找",-1),y=n("code",null,"有序集合",-1),g=n("code",null,"前缀和",-1),f={href:"https://leetcode.cn/problems/my-calendar-ii",target:"_blank",rel:"noopener noreferrer"},w=n("code",null,"力扣",-1),x={href:"https://leetcode.com/problems/my-calendar-ii",target:"_blank",rel:"noopener noreferrer"},T=n("code",null,"LeetCode",-1),C=u(`<h2 id="题目" tabindex="-1"><a class="header-anchor" href="#题目" aria-hidden="true">#</a> 题目</h2><p>You are implementing a program to use as your calendar. We can add a new event if adding the event will not cause a <strong>triple booking</strong>.</p><p>A <strong>triple booking</strong> happens when three events have some non-empty intersection (i.e., some moment is common to all the three events.).</p><p>The event can be represented as a pair of integers <code>start</code> and <code>end</code> that represents a booking on the half-open interval <code>[start, end)</code>, the range of real numbers <code>x</code> such that <code>start &lt;= x &lt; end</code>.</p><p>Implement the <code>MyCalendarTwo</code> class:</p><ul><li><code>MyCalendarTwo()</code> Initializes the calendar object.</li><li><code>boolean book(int start, int end)</code> Returns <code>true</code> if the event can be added to the calendar successfully without causing a <strong>triple booking</strong>. Otherwise, return <code>false</code> and do not add the event to the calendar.</li></ul><p><strong>Example 1:</strong></p><blockquote><p><strong>Input</strong></p><p>[&quot;MyCalendarTwo&quot;, &quot;book&quot;, &quot;book&quot;, &quot;book&quot;, &quot;book&quot;, &quot;book&quot;, &quot;book&quot;]</p><p>[[], [10, 20], [50, 60], [10, 40], [5, 15], [5, 10], [25, 55]]</p><p><strong>Output</strong></p><p>[null, true, true, true, false, true, true]</p><p><strong>Explanation</strong></p><p>MyCalendarTwo myCalendarTwo = new MyCalendarTwo();</p><p>myCalendarTwo.book(10, 20); // return True, The event can be booked.</p><p>myCalendarTwo.book(50, 60); // return True, The event can be booked.</p><p>myCalendarTwo.book(10, 40); // return True, The event can be double booked.</p><p>myCalendarTwo.book(5, 15); // return False, The event cannot be booked, because it would result in a triple booking.</p><p>myCalendarTwo.book(5, 10); // return True, The event can be booked, as it does not use time 10 which is already double booked.</p><p>myCalendarTwo.book(25, 55); // return True, The event can be booked, as the time in [25, 40) will be double booked with the third event, the time [40, 50) will be single booked, and the time [50, 55) will be double booked with the second event.</p></blockquote><p><strong>Constraints:</strong></p><ul><li><code>0 &lt;= start &lt; end &lt;= 10^9</code></li><li>At most <code>1000</code> calls will be made to <code>book</code>.</li></ul><h2 id="题目大意" tabindex="-1"><a class="header-anchor" href="#题目大意" aria-hidden="true">#</a> 题目大意</h2><p>实现一个 <code>MyCalendar</code> 类来存放你的日程安排。如果要添加的时间内不会导致三重预订时，则可以存储这个新的日程安排。</p><p><code>MyCalendar</code> 有一个 <code>book(int start, int end)</code>方法。它意味着在 <code>start</code> 到 <code>end</code> 时间内增加一个日程安排，注意，这里的时间是半开区间，即 <code>[start, end)</code>, 实数 <code>x</code> 的范围为， <code>start &lt;= x &lt; end</code>。</p><p>当三个日程安排有一些时间上的交叉时（例如三个日程安排都在同一时间内），就会产生三重预订。</p><p>每次调用 <code>MyCalendar.book</code> 方法时，如果可以将日程安排成功添加到日历中而不会导致三重预订，返回 <code>true</code>。否则，返回 <code>false</code> 并且不要将该日程安排添加到日历中。</p><p>请按照以下步骤调用 <code>MyCalendar</code> 类:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code>MyCalendar cal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyCalendar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
MyCalendar<span class="token punctuation">.</span><span class="token function">book</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> end<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="解题思路" tabindex="-1"><a class="header-anchor" href="#解题思路" aria-hidden="true">#</a> 解题思路</h2><ol><li>初始化一个空的 <code>deltas</code> 对象，用于记录时间点的变化。</li><li><strong><code>book</code> 方法</strong>： <ul><li>对于新事件 <code>[start, end)</code>，更新 <code>deltas</code> 对象，将 <code>deltas[start]</code> 加一， <code>deltas[start]</code> 减一。 - 按照时间点顺序遍历 <code>deltas</code>，计算当前重叠事件的数量。</li><li>遍历所有事件，累加计算重叠数量，如果发现重叠数量达到 <code>3</code>，表示会导致三重预订，此时撤销之前对 <code>deltas</code> 的修改并返回 <code>false</code>。</li><li>如果没有冲突，表示成功添加事件，返回 <code>true</code>。</li></ul></li></ol><h4 id="复杂度分析" tabindex="-1"><a class="header-anchor" href="#复杂度分析" aria-hidden="true">#</a> 复杂度分析</h4><ul><li><strong>时间复杂度</strong>：<code>O(n log n)</code>，主要是因为我们需要对 <code>deltas</code> 的键进行排序。</li><li><strong>空间复杂度</strong>：<code>O(n)</code>，用于存储 <code>deltas</code> 对象。</li></ul><h2 id="代码" tabindex="-1"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> <span class="token function-variable function">MyCalendarTwo</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">this</span><span class="token punctuation">.</span>deltas <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">}</span></span> <span class="token parameter">start</span>
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">}</span></span> <span class="token parameter">end</span>
 * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>boolean<span class="token punctuation">}</span></span>
 */</span>
<span class="token class-name">MyCalendarTwo</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">book</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">start<span class="token punctuation">,</span> end</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">// 更新重叠事件计数</span>
	<span class="token keyword">this</span><span class="token punctuation">.</span>deltas<span class="token punctuation">[</span>start<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>deltas<span class="token punctuation">[</span>start<span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 新事件开始</span>
	<span class="token keyword">this</span><span class="token punctuation">.</span>deltas<span class="token punctuation">[</span>end<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>deltas<span class="token punctuation">[</span>end<span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 新事件结束</span>

	<span class="token comment">// 检查重叠数量</span>
	<span class="token keyword">let</span> overlap <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> time <span class="token keyword">of</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>deltas<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> a <span class="token operator">-</span> b<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		overlap <span class="token operator">+=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>deltas<span class="token punctuation">[</span>time<span class="token punctuation">]</span><span class="token punctuation">;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>overlap <span class="token operator">&gt;=</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token comment">// 如果重叠事件达到3，撤销之前的修改</span>
			<span class="token keyword">this</span><span class="token punctuation">.</span>deltas<span class="token punctuation">[</span>start<span class="token punctuation">]</span> <span class="token operator">-=</span> <span class="token number">1</span><span class="token punctuation">;</span>
			<span class="token keyword">this</span><span class="token punctuation">.</span>deltas<span class="token punctuation">[</span>end<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>deltas<span class="token punctuation">[</span>start<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">delete</span> <span class="token keyword">this</span><span class="token punctuation">.</span>deltas<span class="token punctuation">[</span>start<span class="token punctuation">]</span><span class="token punctuation">;</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>deltas<span class="token punctuation">[</span>end<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">delete</span> <span class="token keyword">this</span><span class="token punctuation">.</span>deltas<span class="token punctuation">[</span>end<span class="token punctuation">]</span><span class="token punctuation">;</span>
			<span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment">// 返回 false，表示添加失败</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment">// 成功添加事件，返回 true</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * Your MyCalendarTwo object will be instantiated and called as such:
 * var obj = new MyCalendarTwo()
 * var param_1 = obj.book(start,end)
 */</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="相关题目" tabindex="-1"><a class="header-anchor" href="#相关题目" aria-hidden="true">#</a> 相关题目</h2>`,24),M=n("thead",null,[n("tr",null,[n("th",{style:{"text-align":"center"}},"题号"),n("th",{style:{"text-align":"left"}},"标题"),n("th",{style:{"text-align":"center"}},"题解"),n("th",{style:{"text-align":"left"}},"标签"),n("th",{style:{"text-align":"center"}},"难度"),n("th",{style:{"text-align":"center"}},"力扣")])],-1),q=n("td",{style:{"text-align":"center"}},"729",-1),I=n("td",{style:{"text-align":"left"}},"我的日程安排表 I",-1),j={style:{"text-align":"center"}},E={style:{"text-align":"left"}},L=n("code",null,"设计",-1),N=n("code",null,"线段树",-1),O=n("code",null,"数组",-1),V=n("code",null,"2+",-1),B=n("td",{style:{"text-align":"center"}},"🟠",-1),R={style:{"text-align":"center"}},A={href:"https://leetcode.cn/problems/my-calendar-i",target:"_blank",rel:"noopener noreferrer"},Y={href:"https://leetcode.com/problems/my-calendar-i",target:"_blank",rel:"noopener noreferrer"},z=n("td",{style:{"text-align":"center"}},"732",-1),F=n("td",{style:{"text-align":"left"}},"我的日程安排表 III",-1),S=n("td",{style:{"text-align":"center"}},null,-1),W={style:{"text-align":"left"}},D=n("code",null,"设计",-1),G=n("code",null,"线段树",-1),H=n("code",null,"二分查找",-1),J=n("code",null,"2+",-1),K=n("td",{style:{"text-align":"center"}},"🔴",-1),P={style:{"text-align":"center"}},Q={href:"https://leetcode.cn/problems/my-calendar-iii",target:"_blank",rel:"noopener noreferrer"},U={href:"https://leetcode.com/problems/my-calendar-iii",target:"_blank",rel:"noopener noreferrer"};function X(Z,$){const c=p("font"),t=p("RouterLink"),o=p("ExternalLinkIcon");return d(),i("div",null,[h,n("p",null,[s("🟠 "),a(c,{color:"#ffb800"},{default:e(()=>[s("Medium")]),_:1}),s("  🔖  "),a(t,{to:"/tag/design.html"},{default:e(()=>[m]),_:1}),s(),a(t,{to:"/tag/segment-tree.html"},{default:e(()=>[b]),_:1}),s(),a(t,{to:"/tag/array.html"},{default:e(()=>[_]),_:1}),s(),a(t,{to:"/tag/binary-search.html"},{default:e(()=>[v]),_:1}),s(),a(t,{to:"/tag/ordered-set.html"},{default:e(()=>[y]),_:1}),s(),a(t,{to:"/tag/prefix-sum.html"},{default:e(()=>[g]),_:1}),s("  🔗 "),n("a",f,[w,a(o)]),s(),n("a",x,[T,a(o)])]),C,r(" prettier-ignore "),n("table",null,[M,n("tbody",null,[n("tr",null,[q,I,n("td",j,[a(t,{to:"/problem/0729.html"},{default:e(()=>[s("[✓]")]),_:1})]),n("td",E,[a(t,{to:"/tag/design.html"},{default:e(()=>[L]),_:1}),s(),a(t,{to:"/tag/segment-tree.html"},{default:e(()=>[N]),_:1}),s(),a(t,{to:"/tag/array.html"},{default:e(()=>[O]),_:1}),s(),V]),B,n("td",R,[n("a",A,[s("🀄️"),a(o)]),s(),n("a",Y,[s("🔗"),a(o)])])]),n("tr",null,[z,F,S,n("td",W,[a(t,{to:"/tag/design.html"},{default:e(()=>[D]),_:1}),s(),a(t,{to:"/tag/segment-tree.html"},{default:e(()=>[G]),_:1}),s(),a(t,{to:"/tag/binary-search.html"},{default:e(()=>[H]),_:1}),s(),J]),K,n("td",P,[n("a",Q,[s("🀄️"),a(o)]),s(),n("a",U,[s("🔗"),a(o)])])])])])])}const sn=l(k,[["render",X],["__file","0731.html.vue"]]);export{sn as default};
