import{_ as i,r as p,o as u,c as l,a as n,b as t,d as s,w as e,f as r,e as d}from"./app-B5EG-zH0.js";const k={},q=n("h1",{id:"_2115-从给定原材料中找到所有可以做出的菜",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_2115-从给定原材料中找到所有可以做出的菜","aria-hidden":"true"},"#"),t(" 2115. 从给定原材料中找到所有可以做出的菜")],-1),g=n("code",null,"图",-1),h=n("code",null,"拓扑排序",-1),m=n("code",null,"数组",-1),b=n("code",null,"哈希表",-1),v=n("code",null,"字符串",-1),f={href:"https://leetcode.cn/problems/find-all-possible-recipes-from-given-supplies",target:"_blank",rel:"noopener noreferrer"},_=n("code",null,"力扣",-1),y={href:"https://leetcode.com/problems/find-all-possible-recipes-from-given-supplies",target:"_blank",rel:"noopener noreferrer"},w=n("code",null,"LeetCode",-1),x=d(`<h2 id="题目" tabindex="-1"><a class="header-anchor" href="#题目" aria-hidden="true">#</a> 题目</h2><p>You have information about <code>n</code> different recipes. You are given a string array <code>recipes</code> and a 2D string array <code>ingredients</code>. The <code>ith</code> recipe has the name <code>recipes[i]</code>, and you can <strong>create</strong> it if you have <strong>all</strong> the needed ingredients from <code>ingredients[i]</code>. Ingredients to a recipe may need to be created from <strong>other</strong> recipes, i.e., <code>ingredients[i]</code> may contain a string that is in <code>recipes</code>.</p><p>You are also given a string array <code>supplies</code> containing all the ingredients that you initially have, and you have an infinite supply of all of them.</p><p>Return <em>a list of all the recipes that you can create.</em> You may return the answer in <strong>any order</strong>.</p><p>Note that two recipes may contain each other in their ingredients.</p><p><strong>Example 1:</strong></p><blockquote><p>Input: recipes = [&quot;bread&quot;], ingredients = [[&quot;yeast&quot;,&quot;flour&quot;]], supplies = [&quot;yeast&quot;,&quot;flour&quot;,&quot;corn&quot;]</p><p>Output: [&quot;bread&quot;]</p><p>Explanation:</p><p>We can create &quot;bread&quot; since we have the ingredients &quot;yeast&quot; and &quot;flour&quot;.</p></blockquote><p><strong>Example 2:</strong></p><blockquote><p>Input: recipes = [&quot;bread&quot;,&quot;sandwich&quot;], ingredients = [[&quot;yeast&quot;,&quot;flour&quot;],[&quot;bread&quot;,&quot;meat&quot;]], supplies = [&quot;yeast&quot;,&quot;flour&quot;,&quot;meat&quot;]</p><p>Output: [&quot;bread&quot;,&quot;sandwich&quot;]</p><p>Explanation:</p><p>We can create &quot;bread&quot; since we have the ingredients &quot;yeast&quot; and &quot;flour&quot;.</p><p>We can create &quot;sandwich&quot; since we have the ingredient &quot;meat&quot; and can create the ingredient &quot;bread&quot;.</p></blockquote><p><strong>Example 3:</strong></p><blockquote><p>Input: recipes = [&quot;bread&quot;,&quot;sandwich&quot;,&quot;burger&quot;], ingredients = [[&quot;yeast&quot;,&quot;flour&quot;],[&quot;bread&quot;,&quot;meat&quot;],[&quot;sandwich&quot;,&quot;meat&quot;,&quot;bread&quot;]], supplies = [&quot;yeast&quot;,&quot;flour&quot;,&quot;meat&quot;]</p><p>Output: [&quot;bread&quot;,&quot;sandwich&quot;,&quot;burger&quot;]</p><p>Explanation:</p><p>We can create &quot;bread&quot; since we have the ingredients &quot;yeast&quot; and &quot;flour&quot;.</p><p>We can create &quot;sandwich&quot; since we have the ingredient &quot;meat&quot; and can create the ingredient &quot;bread&quot;.</p><p>We can create &quot;burger&quot; since we have the ingredient &quot;meat&quot; and can create the ingredients &quot;bread&quot; and &quot;sandwich&quot;.</p></blockquote><p><strong>Constraints:</strong></p><ul><li><code>n == recipes.length == ingredients.length</code></li><li><code>1 &lt;= n &lt;= 100</code></li><li><code>1 &lt;= ingredients[i].length, supplies.length &lt;= 100</code></li><li><code>1 &lt;= recipes[i].length, ingredients[i][j].length, supplies[k].length &lt;= 10</code></li><li><code>recipes[i], ingredients[i][j]</code>, and <code>supplies[k]</code> consist only of lowercase English letters.</li><li>All the values of <code>recipes</code> and <code>supplies</code> combined are unique.</li><li>Each <code>ingredients[i]</code> does not contain any duplicate values.</li></ul><h2 id="题目大意" tabindex="-1"><a class="header-anchor" href="#题目大意" aria-hidden="true">#</a> 题目大意</h2><p>你有 <code>n</code> 道不同菜的信息。给你一个字符串数组 <code>recipes</code> 和一个二维字符串数组 <code>ingredients</code> 。第 <code>i</code> 道菜的名字为 <code>recipes[i]</code> ，如果你有它 <strong>所有</strong> 的原材料 <code>ingredients[i]</code> ，那么你可以 <strong>做出</strong> 这道菜。一道菜的原材料可能是 <strong>另一道</strong> 菜，也就是说 <code>ingredients[i]</code> 可能包含 <code>recipes</code> 中另一个字符串。</p><p>同时给你一个字符串数组 <code>supplies</code> ，它包含你初始时拥有的所有原材料，每一种原材料你都有无限多。</p><p>请你返回你可以做出的所有菜。你可以以 <strong>任意顺序</strong> 返回它们。</p><p>注意两道菜在它们的原材料中可能互相包含。</p><p><strong>示例 1：</strong></p><blockquote><p><strong>输入：</strong> recipes = [&quot;bread&quot;], ingredients = [[&quot;yeast&quot;,&quot;flour&quot;]], supplies = [&quot;yeast&quot;,&quot;flour&quot;,&quot;corn&quot;]</p><p><strong>输出：</strong>[&quot;bread&quot;]</p><p><strong>解释：</strong></p><p>我们可以做出 &quot;bread&quot; ，因为我们有原材料 &quot;yeast&quot; 和 &quot;flour&quot; 。</p></blockquote><p><strong>示例 2：</strong></p><blockquote><p><strong>输入：</strong> recipes = [&quot;bread&quot;,&quot;sandwich&quot;], ingredients = [[&quot;yeast&quot;,&quot;flour&quot;],[&quot;bread&quot;,&quot;meat&quot;]], supplies = [&quot;yeast&quot;,&quot;flour&quot;,&quot;meat&quot;]</p><p><strong>输出：</strong>[&quot;bread&quot;,&quot;sandwich&quot;]</p><p><strong>解释：</strong></p><p>我们可以做出 &quot;bread&quot; ，因为我们有原材料 &quot;yeast&quot; 和 &quot;flour&quot; 。</p><p>我们可以做出 &quot;sandwich&quot; ，因为我们有原材料 &quot;meat&quot; 且可以做出原材料 &quot;bread&quot; 。</p></blockquote><p><strong>示例 3：</strong></p><blockquote><p><strong>输入：</strong> recipes = [&quot;bread&quot;,&quot;sandwich&quot;,&quot;burger&quot;], ingredients = [[&quot;yeast&quot;,&quot;flour&quot;],[&quot;bread&quot;,&quot;meat&quot;],[&quot;sandwich&quot;,&quot;meat&quot;,&quot;bread&quot;]], supplies = [&quot;yeast&quot;,&quot;flour&quot;,&quot;meat&quot;]</p><p><strong>输出：</strong>[&quot;bread&quot;,&quot;sandwich&quot;,&quot;burger&quot;]</p><p><strong>解释：</strong></p><p>我们可以做出 &quot;bread&quot; ，因为我们有原材料 &quot;yeast&quot; 和 &quot;flour&quot; 。</p><p>我们可以做出 &quot;sandwich&quot; ，因为我们有原材料 &quot;meat&quot; 且可以做出原材料 &quot;bread&quot; 。</p><p>我们可以做出 &quot;burger&quot; ，因为我们有原材料 &quot;meat&quot; 且可以做出原材料 &quot;bread&quot; 和 &quot;sandwich&quot; 。</p></blockquote><p><strong>示例 4：</strong></p><blockquote><p><strong>输入：</strong> recipes = [&quot;bread&quot;], ingredients = [[&quot;yeast&quot;,&quot;flour&quot;]], supplies = [&quot;yeast&quot;]</p><p><strong>输出：</strong>[]</p><p><strong>解释：</strong></p><p>我们没法做出任何菜，因为我们只有原材料 &quot;yeast&quot; 。</p></blockquote><p><strong>提示：</strong></p><ul><li><code>n == recipes.length == ingredients.length</code></li><li><code>1 &lt;= n &lt;= 100</code></li><li><code>1 &lt;= ingredients[i].length, supplies.length &lt;= 100</code></li><li><code>1 &lt;= recipes[i].length, ingredients[i][j].length, supplies[k].length &lt;= 10</code></li><li><code>recipes[i], ingredients[i][j]</code> 和 <code>supplies[k]</code> 只包含小写英文字母。</li><li>所有 <code>recipes</code> 和 <code>supplies</code> 中的值互不相同。</li><li><code>ingredients[i]</code> 中的字符串互不相同。</li></ul><h2 id="解题思路" tabindex="-1"><a class="header-anchor" href="#解题思路" aria-hidden="true">#</a> 解题思路</h2><p>本题本质上是一个 <strong>有向图的可达性问题</strong>，其中：</p><ul><li><strong>节点</strong>：所有 <code>recipes</code> 和 <code>supplies</code>。</li><li><strong>有向边</strong>：一个 <code>recipe</code> 指向它的 <code>ingredients</code>。</li></ul><p>可以用 <strong>DFS + 记忆化搜索</strong> 解决：</p><ol><li><p><strong>建图</strong>：</p><ul><li>维护一个 <code>Set(supplies)</code> 记录当前可用食材。</li><li>维护一个 <code>Map(recipeIndex)</code> 记录 <code>recipes</code> 的索引，用于查找 <code>ingredients</code>。</li></ul></li><li><p><strong>DFS 搜索：检查某个食谱是否可制作</strong></p><ul><li><strong>终止条件</strong>： <ul><li>若 <code>recipe</code> 直接在 <code>suppliesSet</code> 中，说明已经是可用食材。</li><li>若 <code>recipe</code> 不在 <code>recipes</code> 里，说明它无法制作，返回 <code>false</code>。</li></ul></li><li><strong>访问标记</strong>： <ul><li>用 <code>visited</code> 记录当前递归路径，避免循环依赖。</li></ul></li><li><strong>递归检查</strong>： <ul><li>对 <code>recipe</code> 的 <code>ingredients</code> 进行递归 <code>canMake</code> 判断。</li></ul></li><li><strong>记忆化</strong>： <ul><li>若 <code>recipe</code> 可制作，则加入 <code>suppliesSet</code> 以避免重复计算。</li></ul></li></ul></li><li><p><strong>遍历所有食谱，调用 <code>canMake</code> 判断哪些可以制作。</strong></p></li></ol><h4 id="复杂度分析" tabindex="-1"><a class="header-anchor" href="#复杂度分析" aria-hidden="true">#</a> 复杂度分析</h4><ul><li><strong>时间复杂度</strong>：<code>O(n + m)</code>，每个 <code>recipe</code> 和 <code>ingredient</code> 只遍历一次。</li><li><strong>空间复杂度</strong>：<code>O(n + m)</code>，用于 <code>Set</code> 和 <code>Map</code> 存储依赖关系。</li></ul><h2 id="代码" tabindex="-1"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>string<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span> <span class="token parameter">recipes</span>
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>string<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span> <span class="token parameter">ingredients</span>
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>string<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span> <span class="token parameter">supplies</span>
 * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>string<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span>
 */</span>
<span class="token keyword">var</span> <span class="token function-variable function">findAllRecipes</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">recipes<span class="token punctuation">,</span> ingredients<span class="token punctuation">,</span> supplies</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">const</span> n <span class="token operator">=</span> recipes<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
	<span class="token keyword">const</span> suppliesSet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span>supplies<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">const</span> recipeIndex <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">const</span> visited <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

	<span class="token comment">// 记录 recipe 的索引</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		recipeIndex<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>recipes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token comment">// 判断是否能制作某个食谱</span>
	<span class="token keyword">const</span> <span class="token function-variable function">canMake</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">recipe</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>suppliesSet<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>recipe<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment">// 已经是原材料</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>recipeIndex<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>recipe<span class="token punctuation">)</span> <span class="token operator">||</span> visited<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>recipe<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment">// 不是食谱 或者 检测过无法制作</span>

		visited<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>recipe<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 标记为正在访问，防止循环依赖</span>
		<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> item <span class="token keyword">of</span> ingredients<span class="token punctuation">[</span>recipeIndex<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>recipe<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">canMake</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		visited<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>recipe<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 解除访问标记</span>

		suppliesSet<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>recipe<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 现在可以制作了，加入 suppliesSet</span>
		result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>recipe<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span><span class="token punctuation">;</span>

	<span class="token comment">// 遍历所有食谱，检查能否制作</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> recipe <span class="token keyword">of</span> recipes<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token function">canMake</span><span class="token punctuation">(</span>recipe<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="相关题目" tabindex="-1"><a class="header-anchor" href="#相关题目" aria-hidden="true">#</a> 相关题目</h2>`,38),I=n("thead",null,[n("tr",null,[n("th",{style:{"text-align":"center"}},"题号"),n("th",{style:{"text-align":"left"}},"标题"),n("th",{style:{"text-align":"center"}},"题解"),n("th",{style:{"text-align":"left"}},"标签"),n("th",{style:{"text-align":"center"}},"难度"),n("th",{style:{"text-align":"center"}},"力扣")])],-1),S=n("td",{style:{"text-align":"center"}},"210",-1),E=n("td",{style:{"text-align":"left"}},"课程表 II",-1),M={style:{"text-align":"center"}},j={style:{"text-align":"left"}},N=n("code",null,"深度优先搜索",-1),W=n("code",null,"广度优先搜索",-1),C=n("code",null,"图",-1),L=n("code",null,"1+",-1),O=n("td",{style:{"text-align":"center"}},"🟠",-1),V={style:{"text-align":"center"}},R={href:"https://leetcode.cn/problems/course-schedule-ii",target:"_blank",rel:"noopener noreferrer"},Y={href:"https://leetcode.com/problems/course-schedule-ii",target:"_blank",rel:"noopener noreferrer"},B=n("td",{style:{"text-align":"center"}},"1711",-1),D=n("td",{style:{"text-align":"left"}},"大餐计数",-1),A=n("td",{style:{"text-align":"center"}},null,-1),F={style:{"text-align":"left"}},T=n("code",null,"数组",-1),z=n("code",null,"哈希表",-1),G=n("td",{style:{"text-align":"center"}},"🟠",-1),H={style:{"text-align":"center"}},J={href:"https://leetcode.cn/problems/count-good-meals",target:"_blank",rel:"noopener noreferrer"},K={href:"https://leetcode.com/problems/count-good-meals",target:"_blank",rel:"noopener noreferrer"};function P(Q,U){const c=p("font"),a=p("RouterLink"),o=p("ExternalLinkIcon");return u(),l("div",null,[q,n("p",null,[t("🟠 "),s(c,{color:"#ffb800"},{default:e(()=>[t("Medium")]),_:1}),t("  🔖  "),s(a,{to:"/tag/graph.html"},{default:e(()=>[g]),_:1}),t(),s(a,{to:"/tag/topological-sort.html"},{default:e(()=>[h]),_:1}),t(),s(a,{to:"/tag/array.html"},{default:e(()=>[m]),_:1}),t(),s(a,{to:"/tag/hash-table.html"},{default:e(()=>[b]),_:1}),t(),s(a,{to:"/tag/string.html"},{default:e(()=>[v]),_:1}),t("  🔗 "),n("a",f,[_,s(o)]),t(),n("a",y,[w,s(o)])]),x,r(" prettier-ignore "),n("table",null,[I,n("tbody",null,[n("tr",null,[S,E,n("td",M,[s(a,{to:"/problem/0210.html"},{default:e(()=>[t("[✓]")]),_:1})]),n("td",j,[s(a,{to:"/tag/depth-first-search.html"},{default:e(()=>[N]),_:1}),t(),s(a,{to:"/tag/breadth-first-search.html"},{default:e(()=>[W]),_:1}),t(),s(a,{to:"/tag/graph.html"},{default:e(()=>[C]),_:1}),t(),L]),O,n("td",V,[n("a",R,[t("🀄️"),s(o)]),t(),n("a",Y,[t("🔗"),s(o)])])]),n("tr",null,[B,D,A,n("td",F,[s(a,{to:"/tag/array.html"},{default:e(()=>[T]),_:1}),t(),s(a,{to:"/tag/hash-table.html"},{default:e(()=>[z]),_:1})]),G,n("td",H,[n("a",J,[t("🀄️"),s(o)]),t(),n("a",K,[t("🔗"),s(o)])])])])])])}const Z=i(k,[["render",P],["__file","2115.html.vue"]]);export{Z as default};
