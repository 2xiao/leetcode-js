import{_ as l,r as p,o as i,c as r,a as n,b as e,d as s,w as a,f as d,e as u}from"./app-B5EG-zH0.js";const k={},m=n("h1",{id:"_925-长按键入",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_925-长按键入","aria-hidden":"true"},"#"),e(" 925. 长按键入")],-1),h=n("code",null,"双指针",-1),g=n("code",null,"字符串",-1),b={href:"https://leetcode.cn/problems/long-pressed-name",target:"_blank",rel:"noopener noreferrer"},_=n("code",null,"力扣",-1),v={href:"https://leetcode.com/problems/long-pressed-name",target:"_blank",rel:"noopener noreferrer"},y=n("code",null,"LeetCode",-1),f=u(`<h2 id="题目" tabindex="-1"><a class="header-anchor" href="#题目" aria-hidden="true">#</a> 题目</h2><p>Your friend is typing his <code>name</code> into a keyboard. Sometimes, when typing a character <code>c</code>, the key might get <em>long pressed</em> , and the character will be typed 1 or more times.</p><p>You examine the <code>typed</code> characters of the keyboard. Return <code>True</code> if it is possible that it was your friends name, with some characters (possibly none) being long pressed.</p><p><strong>Example 1:</strong></p><blockquote><p>Input: name = &quot;alex&quot;, typed = &quot;aaleex&quot;</p><p>Output: true</p><p>Explanation: &#39;a&#39; and &#39;e&#39; in &#39;alex&#39; were long pressed.</p></blockquote><p><strong>Example 2:</strong></p><blockquote><p>Input: name = &quot;saeed&quot;, typed = &quot;ssaaedd&quot;</p><p>Output: false</p><p>Explanation: &#39;e&#39; must have been pressed twice, but it was not in the typed output.</p></blockquote><p><strong>Constraints:</strong></p><ul><li><code>1 &lt;= name.length, typed.length &lt;= 1000</code></li><li><code>name</code> and <code>typed</code> consist of only lowercase English letters.</li></ul><h2 id="题目大意" tabindex="-1"><a class="header-anchor" href="#题目大意" aria-hidden="true">#</a> 题目大意</h2><p>你的朋友正在使用键盘输入他的名字 <code>name</code>。偶尔，在键入字符 <code>c</code> 时，按键可能会被 <em>长按</em> ，而字符可能被输入 1 次或多次。</p><p>你将会检查键盘输入的字符 <code>typed</code>。如果它对应的可能是你的朋友的名字（其中一些字符可能被长按），那么就返回 <code>True</code>。</p><p><strong>示例 1：</strong></p><blockquote><p><strong>输入：</strong> name = &quot;alex&quot;, typed = &quot;aaleex&quot;</p><p><strong>输出：</strong> true</p><p><strong>解释：</strong> &#39;alex&#39; 中的 &#39;a&#39; 和 &#39;e&#39; 被长按。</p></blockquote><p><strong>示例 2：</strong></p><blockquote><p><strong>输入：</strong> name = &quot;saeed&quot;, typed = &quot;ssaaedd&quot;</p><p><strong>输出：</strong> false</p><p><strong>解释：</strong> &#39;e&#39; 一定需要被键入两次，但在 typed 的输出中不是这样。</p></blockquote><p><strong>提示：</strong></p><ul><li><code>1 &lt;= name.length, typed.length &lt;= 1000</code></li><li><code>name</code> 和 <code>typed</code> 的字符都是小写字母</li></ul><h2 id="解题思路" tabindex="-1"><a class="header-anchor" href="#解题思路" aria-hidden="true">#</a> 解题思路</h2><p>可以通过双指针法来解决问题。</p><ol><li><p><strong>定义双指针</strong></p><ul><li>用指针 <code>i</code> 遍历字符串 <code>name</code>，用指针 <code>j</code> 遍历字符串 <code>typed</code>。</li></ul></li><li><p><strong>匹配字符</strong></p><ul><li>当 <code>name[i] == typed[j]</code> 时，表示当前字符匹配，<code>i</code> 和 <code>j</code> 同时向右移动。</li><li>如果字符不匹配，检查 <code>typed[j] == typed[j - 1]</code> 是否成立。如果成立，则表示当前字符是长按输入，继续移动 <code>j</code>。</li><li>如果都不满足，直接返回 <code>false</code>。</li></ul></li><li><p><strong>验证剩余字符</strong></p><ul><li>遍历结束后，可能会有多余的长按字符未处理，需要检查 <code>typed</code> 中剩余的字符是否和最后一个字符相同。</li></ul></li><li><p><strong>验证是否匹配</strong></p><ul><li>只有当 <code>i == name.length</code> 且 <code>j == typed.length</code> 时，返回 <code>true</code>，否则返回 <code>false</code>。</li></ul></li></ol><h4 id="复杂度分析" tabindex="-1"><a class="header-anchor" href="#复杂度分析" aria-hidden="true">#</a> 复杂度分析</h4><ul><li><strong>时间复杂度</strong>：<code>O(m + n)</code>，其中 <code>n, m</code> 分别是 <code>name</code> 和 <code>typed</code> 的长度，两个指针分别遍历 <code>name</code> 和 <code>typed</code>。</li><li><strong>空间复杂度</strong>：<code>O(1)</code>，使用了常量级别的额外空间。</li></ul><h3 id="代码" tabindex="-1"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>string<span class="token punctuation">}</span></span> <span class="token parameter">name</span>
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>string<span class="token punctuation">}</span></span> <span class="token parameter">typed</span>
 * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>boolean<span class="token punctuation">}</span></span>
 */</span>
<span class="token keyword">var</span> <span class="token function-variable function">isLongPressedName</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> typed</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">const</span> m <span class="token operator">=</span> name<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
	<span class="token keyword">const</span> n <span class="token operator">=</span> typed<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
	<span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>
		j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

	<span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> m <span class="token operator">&amp;&amp;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>name<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">===</span> typed<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			i<span class="token operator">++</span><span class="token punctuation">;</span>
			j<span class="token operator">++</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> typed<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">===</span> typed<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			j<span class="token operator">++</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>

	<span class="token comment">// 检查剩余的长按字符</span>
	<span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;</span> n <span class="token operator">&amp;&amp;</span> typed<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">===</span> typed<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		j<span class="token operator">++</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token comment">// 判断两个字符串是否都遍历完</span>
	<span class="token keyword">return</span> i <span class="token operator">===</span> m <span class="token operator">&amp;&amp;</span> j <span class="token operator">===</span> n<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="相关题目" tabindex="-1"><a class="header-anchor" href="#相关题目" aria-hidden="true">#</a> 相关题目</h2>`,26),x=n("thead",null,[n("tr",null,[n("th",{style:{"text-align":"center"}},"题号"),n("th",{style:{"text-align":"left"}},"标题"),n("th",{style:{"text-align":"center"}},"题解"),n("th",{style:{"text-align":"left"}},"标签"),n("th",{style:{"text-align":"center"}},"难度"),n("th",{style:{"text-align":"center"}},"力扣")])],-1),w=n("td",{style:{"text-align":"center"}},"2410",-1),q=n("td",{style:{"text-align":"left"}},"运动员和训练师的最大匹配数",-1),j={style:{"text-align":"center"}},E={style:{"text-align":"left"}},L=n("code",null,"贪心",-1),N=n("code",null,"数组",-1),C=n("code",null,"双指针",-1),V=n("code",null,"1+",-1),I=n("td",{style:{"text-align":"center"}},"🟠",-1),O={style:{"text-align":"center"}},B={href:"https://leetcode.cn/problems/maximum-matching-of-players-with-trainers",target:"_blank",rel:"noopener noreferrer"},R={href:"https://leetcode.com/problems/maximum-matching-of-players-with-trainers",target:"_blank",rel:"noopener noreferrer"};function T(S,Y){const c=p("font"),t=p("RouterLink"),o=p("ExternalLinkIcon");return i(),r("div",null,[m,n("p",null,[e("🟢 "),s(c,{color:"#15bd66"},{default:a(()=>[e("Easy")]),_:1}),e("  🔖  "),s(t,{to:"/tag/two-pointers.html"},{default:a(()=>[h]),_:1}),e(),s(t,{to:"/tag/string.html"},{default:a(()=>[g]),_:1}),e("  🔗 "),n("a",b,[_,s(o)]),e(),n("a",v,[y,s(o)])]),f,d(" prettier-ignore "),n("table",null,[x,n("tbody",null,[n("tr",null,[w,q,n("td",j,[s(t,{to:"/problem/2410.html"},{default:a(()=>[e("[✓]")]),_:1})]),n("td",E,[s(t,{to:"/tag/greedy.html"},{default:a(()=>[L]),_:1}),e(),s(t,{to:"/tag/array.html"},{default:a(()=>[N]),_:1}),e(),s(t,{to:"/tag/two-pointers.html"},{default:a(()=>[C]),_:1}),e(),V]),I,n("td",O,[n("a",B,[e("🀄️"),s(o)]),e(),n("a",R,[e("🔗"),s(o)])])])])])])}const z=l(k,[["render",T],["__file","0925.html.vue"]]);export{z as default};
