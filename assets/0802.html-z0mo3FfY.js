import{_ as l,r as p,o as i,c as r,a as n,b as s,d as a,w as t,f as d,e as u}from"./app-fBVbqwGY.js";const k={},h=n("h1",{id:"_802-找到最终的安全状态",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_802-找到最终的安全状态","aria-hidden":"true"},"#"),s(" 802. 找到最终的安全状态")],-1),g=n("code",null,"深度优先搜索",-1),m=n("code",null,"广度优先搜索",-1),v=n("code",null,"图",-1),f=n("code",null,"拓扑排序",-1),b={href:"https://leetcode.cn/problems/find-eventual-safe-states",target:"_blank",rel:"noopener noreferrer"},_=n("code",null,"力扣",-1),y={href:"https://leetcode.com/problems/find-eventual-safe-states",target:"_blank",rel:"noopener noreferrer"},w=n("code",null,"LeetCode",-1),x=u(`<h2 id="题目" tabindex="-1"><a class="header-anchor" href="#题目" aria-hidden="true">#</a> 题目</h2><p>There is a directed graph of <code>n</code> nodes with each node labeled from <code>0</code> to <code>n - 1</code>. The graph is represented by a <strong>0-indexed</strong> 2D integer array <code>graph</code> where <code>graph[i]</code> is an integer array of nodes adjacent to node <code>i</code>, meaning there is an edge from node <code>i</code> to each node in <code>graph[i]</code>.</p><p>A node is a <strong>terminal node</strong> if there are no outgoing edges. A node is a <strong>safe node</strong> if every possible path starting from that node leads to a <strong>terminal node</strong> (or another safe node).</p><p>Return <em>an array containing all the<strong>safe nodes</strong> of the graph</em>. The answer should be sorted in <strong>ascending</strong> order.</p><p><strong>Example 1:</strong></p><figure><img src="https://s3-lc-upload.s3.amazonaws.com/uploads/2018/03/17/picture1.png" alt="Illustration of graph" tabindex="0" loading="lazy"><figcaption>Illustration of graph</figcaption></figure><blockquote><p>Input: graph = [[1,2],[2,3],[5],[0],[5],[],[]]</p><p>Output: [2,4,5,6]</p><p>Explanation: The given graph is shown above.</p><p>Nodes 5 and 6 are terminal nodes as there are no outgoing edges from either of them.</p><p>Every path starting at nodes 2, 4, 5, and 6 all lead to either node 5 or 6.</p></blockquote><p><strong>Example 2:</strong></p><blockquote><p>Input: graph = [[1,2,3,4],[1,2],[3,4],[0,4],[]]</p><p>Output: [4]</p><p>Explanation:</p><p>Only node 4 is a terminal node, and every path starting at node 4 leads to node 4.</p></blockquote><p><strong>Constraints:</strong></p><ul><li><code>n == graph.length</code></li><li><code>1 &lt;= n &lt;= 10^4</code></li><li><code>0 &lt;= graph[i].length &lt;= n</code></li><li><code>0 &lt;= graph[i][j] &lt;= n - 1</code></li><li><code>graph[i]</code> is sorted in a strictly increasing order.</li><li>The graph may contain self-loops.</li><li>The number of edges in the graph will be in the range <code>[1, 4 * 104]</code>.</li></ul><h2 id="题目大意" tabindex="-1"><a class="header-anchor" href="#题目大意" aria-hidden="true">#</a> 题目大意</h2><p>有一个有 <code>n</code> 个节点的有向图，节点按 <code>0</code> 到 <code>n - 1</code> 编号。图由一个 <strong>索引从 0 开始</strong> 的 2D 整数数组 <code>graph</code>表示， <code>graph[i]</code>是与节点 <code>i</code> 相邻的节点的整数数组，这意味着从节点 <code>i</code> 到 <code>graph[i]</code>中的每个节点都有一条边。</p><p>如果一个节点没有连出的有向边，则该节点是 <strong>终端节点</strong> 。如果从该节点开始的所有可能路径都通向 <strong>终端节点</strong> ，则该节点为 <strong>安全节点</strong> 。</p><p>返回一个由图中所有 <strong>安全节点</strong> 组成的数组作为答案。答案数组中的元素应当按 <strong>升序</strong> 排列。</p><p><strong>示例 1：</strong></p><p>![Illustration of graph](https://s3-lc- upload.s3.amazonaws.com/uploads/2018/03/17/picture1.png)</p><blockquote><p><strong>输入：</strong> graph = [[1,2],[2,3],[5],[0],[5],[],[]]</p><p><strong>输出：</strong>[2,4,5,6]</p><p><strong>解释：</strong> 示意图如上。</p><p>节点 5 和节点 6 是终端节点，因为它们都没有出边。</p><p>从节点 2、4、5 和 6 开始的所有路径都指向节点 5 或 6 。</p></blockquote><p><strong>示例 2：</strong></p><blockquote><p><strong>输入：</strong> graph = [[1,2,3,4],[1,2],[3,4],[0,4],[]]</p><p><strong>输出：</strong>[4]</p><p><strong>解释:</strong></p><p>只有节点 4 是终端节点，从节点 4 开始的所有路径都通向节点 4 。</p></blockquote><p><strong>提示：</strong></p><ul><li><code>n == graph.length</code></li><li><code>1 &lt;= n &lt;= 10^4</code></li><li><code>0 &lt;= graph[i].length &lt;= n</code></li><li><code>0 &lt;= graph[i][j] &lt;= n - 1</code></li><li><code>graph[i]</code> 按严格递增顺序排列。</li><li>图中可能包含自环。</li><li>图中边的数目在范围 <code>[1, 4 * 104]</code> 内。</li></ul><h2 id="解题思路" tabindex="-1"><a class="header-anchor" href="#解题思路" aria-hidden="true">#</a> 解题思路</h2><p>题目要求找出所有 <strong>最终安全的节点</strong>。如果从某节点出发，不会进入任何环，则该节点为最终安全节点。因此，任务可以归结为图中 <strong>判断哪些节点不在环内</strong>。</p><p>可以采用 <strong>深度优先搜索（DFS）</strong> 来检测环：</p><ol><li><strong>辅助数组：</strong><ul><li><code>visited[i]</code>: 标记节点 <code>i</code> 是否已被访问过。</li><li><code>inStack[i]</code>: 标记节点 <code>i</code> 是否在当前递归栈中。</li></ul></li><li><strong>DFS 检测环：</strong><ul><li>遍历图中所有节点，调用 <code>hasCycle</code> 检测是否有环。</li><li>如果当前节点已在递归栈中（<code>inStack[node] == true</code>），说明存在环，返回 <code>true</code>。</li><li>如果当前节点已经访问过（<code>visited[node] == true</code>），直接返回 <code>false</code>，说明该节点无环。</li><li>对当前节点的邻居递归检查，若任何邻居存在环，则当前节点也在环内。</li><li>如果当前节点没有形成环，从递归栈中移除（<code>inStack[node] = false</code>）。</li></ul></li><li><strong>找出安全节点：</strong><ul><li>遍历 <code>inStack</code> 数组，找到所有不在环中的节点。</li><li>安全节点是那些最终 <code>inStack[node] == false</code> 的节点。</li></ul></li><li><strong>返回结果：</strong><ul><li>输出所有安全节点的索引。</li></ul></li></ol><h4 id="复杂度分析" tabindex="-1"><a class="header-anchor" href="#复杂度分析" aria-hidden="true">#</a> 复杂度分析</h4><ul><li><strong>时间复杂度：</strong> <code>O(V + E)</code>，其中 <code>V</code> 是节点数，<code>E</code> 是边数，每个节点和边最多访问一次。</li><li><strong>空间复杂度：</strong> <code>O(V)</code>，主要是辅助数组 <code>visited</code> 和 <code>inStack</code> 以及递归栈的开销。</li></ul><h2 id="代码" tabindex="-1"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span> <span class="token parameter">graph</span>
 * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span>
 */</span>
<span class="token keyword">var</span> <span class="token function-variable function">eventualSafeNodes</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">graph</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">const</span> n <span class="token operator">=</span> graph<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
	<span class="token keyword">const</span> visited <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 标记节点是否访问过</span>
	<span class="token keyword">const</span> inStack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 标记节点是否在递归栈中</span>

	<span class="token comment">// 检测是否存在环</span>
	<span class="token keyword">const</span> <span class="token function-variable function">hasCycle</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">node</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>inStack<span class="token punctuation">[</span>node<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment">// 当前节点在递归栈中，说明形成环</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>visited<span class="token punctuation">[</span>node<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment">// 已访问且无环</span>
		visited<span class="token punctuation">[</span>node<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment">// 标记已访问</span>
		inStack<span class="token punctuation">[</span>node<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment">// 将当前节点加入递归栈</span>
		<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> neighbor <span class="token keyword">of</span> graph<span class="token punctuation">[</span>node<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">hasCycle</span><span class="token punctuation">(</span>neighbor<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
				<span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment">// 发现环</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
		inStack<span class="token punctuation">[</span>node<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment">// 当前节点出栈</span>
		<span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment">// 无环</span>
	<span class="token punctuation">}</span><span class="token punctuation">;</span>

	<span class="token comment">// 遍历所有节点，检查环</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token function">hasCycle</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token comment">// 找出最终安全的节点</span>
	<span class="token keyword">const</span> safeNodes <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>inStack<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			safeNodes<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 不在环中的节点是安全节点</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">return</span> safeNodes<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="相关题目" tabindex="-1"><a class="header-anchor" href="#相关题目" aria-hidden="true">#</a> 相关题目</h2>`,31),S=n("thead",null,[n("tr",null,[n("th",{style:{"text-align":"center"}},"题号"),n("th",{style:{"text-align":"left"}},"标题"),n("th",{style:{"text-align":"center"}},"题解"),n("th",{style:{"text-align":"left"}},"标签"),n("th",{style:{"text-align":"center"}},"难度"),n("th",{style:{"text-align":"center"}},"力扣")])],-1),E=n("td",{style:{"text-align":"center"}},"2392",-1),N=n("td",{style:{"text-align":"left"}},"给定条件下构造矩阵",-1),C=n("td",{style:{"text-align":"center"}},null,-1),q={style:{"text-align":"left"}},V=n("code",null,"图",-1),I=n("code",null,"拓扑排序",-1),T=n("code",null,"数组",-1),j=n("code",null,"1+",-1),L=n("td",{style:{"text-align":"center"}},"🔴",-1),O={style:{"text-align":"center"}},A={href:"https://leetcode.cn/problems/build-a-matrix-with-conditions",target:"_blank",rel:"noopener noreferrer"},D={href:"https://leetcode.com/problems/build-a-matrix-with-conditions",target:"_blank",rel:"noopener noreferrer"};function z(B,R){const c=p("font"),e=p("RouterLink"),o=p("ExternalLinkIcon");return i(),r("div",null,[h,n("p",null,[s("🟠 "),a(c,{color:"#ffb800"},{default:t(()=>[s("Medium")]),_:1}),s("  🔖  "),a(e,{to:"/tag/depth-first-search.html"},{default:t(()=>[g]),_:1}),s(),a(e,{to:"/tag/breadth-first-search.html"},{default:t(()=>[m]),_:1}),s(),a(e,{to:"/tag/graph.html"},{default:t(()=>[v]),_:1}),s(),a(e,{to:"/tag/topological-sort.html"},{default:t(()=>[f]),_:1}),s("  🔗 "),n("a",b,[_,a(o)]),s(),n("a",y,[w,a(o)])]),x,d(" prettier-ignore "),n("table",null,[S,n("tbody",null,[n("tr",null,[E,N,C,n("td",q,[a(e,{to:"/tag/graph.html"},{default:t(()=>[V]),_:1}),s(),a(e,{to:"/tag/topological-sort.html"},{default:t(()=>[I]),_:1}),s(),a(e,{to:"/tag/array.html"},{default:t(()=>[T]),_:1}),s(),j]),L,n("td",O,[n("a",A,[s("🀄️"),a(o)]),s(),n("a",D,[s("🔗"),a(o)])])])])])])}const M=l(k,[["render",z],["__file","0802.html.vue"]]);export{M as default};
