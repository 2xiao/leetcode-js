import{_ as l,r as p,o as u,c as i,a as n,b as s,d as a,w as t,f as d,e as r}from"./app-B5EG-zH0.js";const m={},k=n("h1",{id:"_454-四数相加-ii",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_454-四数相加-ii","aria-hidden":"true"},"#"),s(" 454. 四数相加 II")],-1),h=n("code",null,"数组",-1),g=n("code",null,"哈希表",-1),b={href:"https://leetcode.cn/problems/4sum-ii",target:"_blank",rel:"noopener noreferrer"},v=n("code",null,"力扣",-1),_={href:"https://leetcode.com/problems/4sum-ii",target:"_blank",rel:"noopener noreferrer"},f=n("code",null,"LeetCode",-1),y=r(`<h2 id="题目" tabindex="-1"><a class="header-anchor" href="#题目" aria-hidden="true">#</a> 题目</h2><p>Given four integer arrays <code>nums1</code>, <code>nums2</code>, <code>nums3</code>, and <code>nums4</code> all of length <code>n</code>, return the number of tuples <code>(i, j, k, l)</code> such that:</p><ul><li><code>0 &lt;= i, j, k, l &lt; n</code></li><li><code>nums1[i] + nums2[j] + nums3[k] + nums4[l] == 0</code></li></ul><p><strong>Example 1:</strong></p><blockquote><p>Input: nums1 = [1,2], nums2 = [-2,-1], nums3 = [-1,2], nums4 = [0,2]</p><p>Output: 2</p><p>Explanation:</p><p>The two tuples are:</p><ol><li><p>(0, 0, 0, 1) -&gt; nums1[0] + nums2[0] + nums3[0] + nums4[1] = 1 + (-2) + (-1) + 2 = 0</p></li><li><p>(1, 1, 0, 0) -&gt; nums1[1] + nums2[1] + nums3[0] + nums4[0] = 2 + (-1) + (-1) + 0 = 0</p></li></ol></blockquote><p><strong>Example 2:</strong></p><blockquote><p>Input: nums1 = [0], nums2 = [0], nums3 = [0], nums4 = [0]</p><p>Output: 1</p></blockquote><p><strong>Constraints:</strong></p><ul><li><code>n == nums1.length</code></li><li><code>n == nums2.length</code></li><li><code>n == nums3.length</code></li><li><code>n == nums4.length</code></li><li><code>1 &lt;= n &lt;= 200</code></li><li><code>-2^28 &lt;= nums1[i], nums2[i], nums3[i], nums4[i] &lt;= 2^28</code></li></ul><h2 id="题目大意" tabindex="-1"><a class="header-anchor" href="#题目大意" aria-hidden="true">#</a> 题目大意</h2><p>给你四个整数数组 <code>nums1</code>、<code>nums2</code>、<code>nums3</code> 和 <code>nums4</code> ，数组长度都是 <code>n</code> ，请你计算有多少个元组 <code>(i, j, k, l)</code> 能满足：</p><ul><li><code>0 &lt;= i, j, k, l &lt; n</code></li><li><code>nums1[i] + nums2[j] + nums3[k] + nums4[l] == 0</code></li></ul><p><strong>示例 1：</strong></p><blockquote><p><strong>输入：</strong> nums1 = [1,2], nums2 = [-2,-1], nums3 = [-1,2], nums4 = [0,2]</p><p><strong>输出：</strong> 2</p><p><strong>解释：</strong></p><p>两个元组如下：</p><ol><li><p>(0, 0, 0, 1) -&gt; nums1[0] + nums2[0] + nums3[0] + nums4[1] = 1 + (-2) + (-1) + 2 = 0</p></li><li><p>(1, 1, 0, 0) -&gt; nums1[1] + nums2[1] + nums3[0] + nums4[0] = 2 + (-1) + (-1) + 0 = 0</p></li></ol></blockquote><p><strong>示例 2：</strong></p><blockquote><p><strong>输入：</strong> nums1 = [0], nums2 = [0], nums3 = [0], nums4 = [0]</p><p><strong>输出：</strong> 1</p></blockquote><p><strong>提示：</strong></p><ul><li><code>n == nums1.length</code></li><li><code>n == nums2.length</code></li><li><code>n == nums3.length</code></li><li><code>n == nums4.length</code></li><li><code>1 &lt;= n &lt;= 200</code></li><li><code>-2^28 &lt;= nums1[i], nums2[i], nums3[i], nums4[i] &lt;= 2^28</code></li></ul><h2 id="解题思路" tabindex="-1"><a class="header-anchor" href="#解题思路" aria-hidden="true">#</a> 解题思路</h2><p>本题如果直接使用四重循环，遍历所有可能的四元组会导致 <strong>O(n^4)</strong> 的时间复杂度，效率极低。</p><p>为了解决这个问题，可以使用 <strong>哈希表 + 两两分组</strong> 进行优化，将时间复杂度降为 <strong>O(n²)</strong>。</p><ol><li><p><strong>两两分组，减少计算量</strong></p><ul><li>先计算 <code>nums1 + nums2</code> 的所有 <strong>两数之和</strong>，并使用 <strong>哈希表 <code>map</code> 记录每个和的出现次数</strong>。</li><li>这样，我们就把 <strong>原本的四个数组变成了两个数组的计算问题</strong>，从 <code>O(n^4)</code> 降到 <code>O(n^2)</code>。</li></ul></li><li><p><strong>查找匹配的和</strong></p><ul><li>计算 <code>nums3 + nums4</code> 的所有两数之和，并 <strong>查找 <code>map</code> 是否存在与之相加为 0 的数</strong>。</li><li>也就是说，我们在遍历 <code>nums3</code> 和 <code>nums4</code> 时，计算 <code>-(nums3[k] + nums4[l])</code>，然后看 <code>map</code> 里是否有这个值： <ul><li><strong>如果 <code>map</code> 里有该值</strong>，说明 <code>nums1 + nums2</code> 里有这么多种方式可以与 <code>nums3 + nums4</code> 配对，使总和为 <code>0</code>。</li></ul></li></ul></li><li><p><strong>更新组合计数</strong></p><ul><li>累加 <code>map</code> 中的次数到满足条件的组合计数中。</li><li>循环结束后，返回组合计数。</li></ul></li></ol><h4 id="复杂度分析" tabindex="-1"><a class="header-anchor" href="#复杂度分析" aria-hidden="true">#</a> 复杂度分析</h4><ul><li><p><strong>时间复杂度：</strong> <code>O(n^2)</code></p><ul><li>计算 <code>nums1 + nums2</code> 所有组合：<code>O(n^2)</code></li><li>计算 <code>nums3 + nums4</code> 并查找 <code>map</code>：<code>O(n^2)</code></li><li>总体 <code>O(n^2 + n^2) = O(n^2)</code></li></ul></li><li><p><strong>空间复杂度：</strong> <code>O(n^2)</code>，<code>map</code> 最多存储 <code>n^2</code> 个不同的和。</p></li></ul><h2 id="代码" tabindex="-1"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span> <span class="token parameter">nums1</span>
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span> <span class="token parameter">nums2</span>
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span> <span class="token parameter">nums3</span>
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span> <span class="token parameter">nums4</span>
 * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">}</span></span>
 */</span>
<span class="token keyword">var</span> <span class="token function-variable function">fourSumCount</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">nums1<span class="token punctuation">,</span> nums2<span class="token punctuation">,</span> nums3<span class="token punctuation">,</span> nums4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">const</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

	<span class="token comment">// 计算 nums1 + nums2 的所有和，存入哈希表</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> a <span class="token keyword">of</span> nums1<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> b <span class="token keyword">of</span> nums2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">const</span> sum <span class="token operator">=</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>
			map<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>sum<span class="token punctuation">,</span> <span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>

	<span class="token comment">// 计算 nums3 + nums4 的所有和，查找 \`map\` 中的 \`-sum\`</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> c <span class="token keyword">of</span> nums3<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> d <span class="token keyword">of</span> nums4<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">const</span> sum <span class="token operator">=</span> <span class="token operator">-</span><span class="token punctuation">(</span>c <span class="token operator">+</span> d<span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
				res <span class="token operator">+=</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 累加匹配的个数</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">return</span> res<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="相关题目" tabindex="-1"><a class="header-anchor" href="#相关题目" aria-hidden="true">#</a> 相关题目</h2>`,27),w=n("thead",null,[n("tr",null,[n("th",{style:{"text-align":"center"}},"题号"),n("th",{style:{"text-align":"left"}},"标题"),n("th",{style:{"text-align":"center"}},"题解"),n("th",{style:{"text-align":"left"}},"标签"),n("th",{style:{"text-align":"center"}},"难度"),n("th",{style:{"text-align":"center"}},"力扣")])],-1),x=n("td",{style:{"text-align":"center"}},"18",-1),O=n("td",{style:{"text-align":"left"}},"四数之和",-1),j={style:{"text-align":"center"}},q={style:{"text-align":"left"}},C=n("code",null,"数组",-1),E=n("code",null,"双指针",-1),I=n("code",null,"排序",-1),L=n("td",{style:{"text-align":"center"}},"🟠",-1),N={style:{"text-align":"center"}},V={href:"https://leetcode.cn/problems/4sum",target:"_blank",rel:"noopener noreferrer"},B={href:"https://leetcode.com/problems/4sum",target:"_blank",rel:"noopener noreferrer"};function M(R,S){const c=p("font"),e=p("RouterLink"),o=p("ExternalLinkIcon");return u(),i("div",null,[k,n("p",null,[s("🟠 "),a(c,{color:"#ffb800"},{default:t(()=>[s("Medium")]),_:1}),s("  🔖  "),a(e,{to:"/tag/array.html"},{default:t(()=>[h]),_:1}),s(),a(e,{to:"/tag/hash-table.html"},{default:t(()=>[g]),_:1}),s("  🔗 "),n("a",b,[v,a(o)]),s(),n("a",_,[f,a(o)])]),y,d(" prettier-ignore "),n("table",null,[w,n("tbody",null,[n("tr",null,[x,O,n("td",j,[a(e,{to:"/problem/0018.html"},{default:t(()=>[s("[✓]")]),_:1})]),n("td",q,[a(e,{to:"/tag/array.html"},{default:t(()=>[C]),_:1}),s(),a(e,{to:"/tag/two-pointers.html"},{default:t(()=>[E]),_:1}),s(),a(e,{to:"/tag/sorting.html"},{default:t(()=>[I]),_:1})]),L,n("td",N,[n("a",V,[s("🀄️"),a(o)]),s(),n("a",B,[s("🔗"),a(o)])])])])])])}const G=l(m,[["render",M],["__file","0454.html.vue"]]);export{G as default};
