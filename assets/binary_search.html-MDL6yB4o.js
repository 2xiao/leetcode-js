import{_ as r,r as c,o as p,c as i,f as l,a as t,d as e,w as a,b as n,e as d}from"./app-fBVbqwGY.js";const u={},_=d(`<h1 id="_3-9-二分查找" tabindex="-1"><a class="header-anchor" href="#_3-9-二分查找" aria-hidden="true">#</a> 3.9 二分查找</h1><p>二分查找（Binary Search）算法，也叫折半查找算法。二分查找针对的是一个有序的数据集合，查找思想有点类似分治思想。每次都通过跟区间的中间元素对比，将待查找的区间缩小为之前的一半，直到找到要查找的元素，或者区间被缩小为 0。</p><p>二分查找是一种非常高效的查找算法，时间复杂度是 <code>O(log n)</code>。</p><h2 id="循环实现" tabindex="-1"><a class="header-anchor" href="#循环实现" aria-hidden="true">#</a> 循环实现</h2><p>最简单的情况就是<strong>有序数组</strong>中<strong>不存在重复元素</strong>，我们在其中用二分查找值等于给定值的数据。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 二分查找的循环实现</span>
<span class="token keyword">function</span> <span class="token function">bsearch</span><span class="token punctuation">(</span><span class="token parameter">arr<span class="token punctuation">,</span> value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">let</span> low <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">let</span> high <span class="token operator">=</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>

	<span class="token keyword">while</span> <span class="token punctuation">(</span>low <span class="token operator">&lt;=</span> high<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">let</span> mid <span class="token operator">=</span> low <span class="token operator">+</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token punctuation">(</span>high <span class="token operator">-</span> low<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">==</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> mid<span class="token punctuation">;</span>
		<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&lt;</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			low <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
			high <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里有三个<strong>注意事项</strong>：</p><p><strong>1. 循环退出条件</strong></p><p>注意是<code>low &lt;= high</code>，而不是<code>low &lt; high</code>。</p><p><strong>2. mid 的取值</strong></p><p>实际上，<code>mid=(low+high)/2</code>这种写法是有问题的。因为如果<code>low</code>和<code>high</code>比较大的话，两者之和就有可能会溢出。改进的方法是将<code>mid</code>的计算方式写成<code>low+(high-low)/2</code>。更进一步，如果要将性能优化到极致的话，我们可以将这里的除以 2 操作转化成位运算<code>low+((high-low)&gt;&gt;1)</code>。因为相比除法运算来说，计算机处理位运算要快得多。</p><p><strong>3. low 和 high 的更新</strong></p><p><code>low=mid+1</code>，<code>high=mid-1</code>。注意这里的<code>+1</code>和<code>-1</code>，如果直接写成<code>low=mid</code>或者<code>high=mid</code>，就可能会发生死循环。比如，当<code>high=3，low=3</code>时，如果<code>a[3]</code>不等于<code>value</code>，就会导致一直循环不退出。</p><h2 id="递归实现" tabindex="-1"><a class="header-anchor" href="#递归实现" aria-hidden="true">#</a> 递归实现</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 二分查找的递归实现</span>
<span class="token keyword">function</span> <span class="token function">bsearch</span><span class="token punctuation">(</span><span class="token parameter">arr<span class="token punctuation">,</span> value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> <span class="token function">bsearchInternally</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">bsearchInternally</span><span class="token punctuation">(</span><span class="token parameter">arr<span class="token punctuation">,</span> low<span class="token punctuation">,</span> high<span class="token punctuation">,</span> value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>low <span class="token operator">&gt;</span> high<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>

	<span class="token keyword">let</span> mid <span class="token operator">=</span> low <span class="token operator">+</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token punctuation">(</span>high <span class="token operator">-</span> low<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">==</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> mid<span class="token punctuation">;</span>
	<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&lt;</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token function">bsearchInternally</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> high<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token function">bsearchInternally</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> low<span class="token punctuation">,</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="应用场景的局限性" tabindex="-1"><a class="header-anchor" href="#应用场景的局限性" aria-hidden="true">#</a> 应用场景的局限性</h2><p>二分查找的时间复杂度是 <code>O(log n)</code>，查找数据的效率非常高。不过，并不是什么情况下都可以用二分查找，它的应用场景是有很大局限性的。</p><h3 id="依赖顺序表结构-数组" tabindex="-1"><a class="header-anchor" href="#依赖顺序表结构-数组" aria-hidden="true">#</a> 依赖顺序表结构（数组）</h3><p>二分查找只能用在数据是通过顺序表来存储的数据结构上。如果数据是通过其他数据结构存储的，则无法应用二分查找。</p><p>主要原因是二分查找算法需要按照下标随机访问元素。数组按照下标随机访问数据的时间复杂度是 O(1)，而链表随机访问的时间复杂度是 O(n)。所以，如果数据使用链表存储，二分查找的时间复杂就会变得很高。</p><h3 id="数据必须有序" tabindex="-1"><a class="header-anchor" href="#数据必须有序" aria-hidden="true">#</a> 数据必须有序</h3><p>二分查找要求数据必须是有序的。如果数据没有序需要先排序。排序的时间复杂度最低是 O(nlogn)。所以，如果针对的是一组静态的数据，没有频繁地插入、删除，我们可以进行一次排序，多次二分查找。这样排序的成本可被均摊，二分查找的边际成本就会比较低。</p><p>但是，如果数据集合有频繁的插入和删除操作，要想用二分查找，要么每次插入、删除操作之后保证数据仍然有序，要么在每次二分查找之前都先进行排序。针对这种动态数据集合，无论哪种方法，维护有序的成本都是很高的。</p><p>所以，二分查找只能用在插入、删除操作不频繁，一次排序多次查找的场景中。针对动态变化的数据集合，二分查找将不再适用。那针对动态数据集合，如何在其中快速查找某个数据呢？别急，等到二叉树那一节我会详细讲。</p><h3 id="数据量太小不适合" tabindex="-1"><a class="header-anchor" href="#数据量太小不适合" aria-hidden="true">#</a> 数据量太小不适合</h3><p>如果要处理的数据量很小，完全没有必要用二分查找，顺序遍历就足够了。比如在一个大小为 10 的数组中查找一个元素，不管用二分查找还是顺序遍历，查找速度都差不多。只有数据量比较大的时候，二分查找的优势才会比较明显。</p><p>不过，这里有一个例外。如果数据之间的比较操作非常耗时，不管数据量大小，都推荐使用二分查找。比如，数组中存储的都是长度超过 300 的字符串，如此长的两个字符串之间比对大小，就会非常耗时。需要尽可能地减少比较次数，而比较次数的减少会大大提高性能，这个时候二分查找就比顺序遍历更有优势。</p><h3 id="数据量太大也不适合" tabindex="-1"><a class="header-anchor" href="#数据量太大也不适合" aria-hidden="true">#</a> 数据量太大也不适合</h3><p>二分查找的底层需要依赖数组这种数据结构，而数组为了支持随机访问的特性，要求内存空间连续，对内存的要求比较苛刻。比如，有 1GB 大小的数据，如果希望用数组来存储，那就需要 1GB 的连续内存空间。</p><p>注意这里的“连续”二字，也就是说，即便有 2GB 的内存空间剩余，但是如果这剩余的 2GB 内存空间都是零散的，没有连续的 1GB 大小的内存空间，那照样无法申请一个 1GB 大小的数组。而二分查找是作用在数组这种数据结构之上的，所以太大的数据用数组存储就比较吃力了，也就不能用二分查找了。</p><h2 id="二分查找的变种写法" tabindex="-1"><a class="header-anchor" href="#二分查找的变种写法" aria-hidden="true">#</a> 二分查找的变种写法</h2><h3 id="变种一-查找第一个值等于给定值的元素" tabindex="-1"><a class="header-anchor" href="#变种一-查找第一个值等于给定值的元素" aria-hidden="true">#</a> 变种一：查找第一个值等于给定值的元素</h3><p>如果<code>mid</code>等于 0，那这个元素已经是数组的第一个元素，那它肯定是我们要找的；如果<code>mid</code>不等于 0，但<code>arr[mid]</code>的前一个元素<code>arr[mid-1]</code>不等于<code>value</code>，那也说明<code>arr[mid]</code>就是我们要找的第一个值等于给定值的元素。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">bsearch</span><span class="token punctuation">(</span><span class="token parameter">arr<span class="token punctuation">,</span> value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">let</span> low <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">let</span> high <span class="token operator">=</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token keyword">while</span> <span class="token punctuation">(</span>low <span class="token operator">&lt;=</span> high<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">let</span> mid <span class="token operator">=</span> low <span class="token operator">+</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token punctuation">(</span>high <span class="token operator">-</span> low<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&gt;</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			low <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&lt;</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			high <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span>mid <span class="token operator">===</span> <span class="token number">0</span> <span class="token operator">||</span> arr<span class="token punctuation">[</span>mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">!=</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
				<span class="token keyword">return</span> mid<span class="token punctuation">;</span>
			<span class="token punctuation">}</span>
			high <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="变种二-查找最后一个值等于给定值的元素" tabindex="-1"><a class="header-anchor" href="#变种二-查找最后一个值等于给定值的元素" aria-hidden="true">#</a> 变种二：查找最后一个值等于给定值的元素</h3><p>如果<code>arr[mid]</code>这个元素已经是数组中的最后一个元素了，那它肯定是我们要找的；如果<code>arr[mid]</code>的后一个元素<code>a[mid+1]</code>不等于<code>value</code>，那也说明<code>arr[mid]</code>就是我们要找的最后一个值等于给定值的元素。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">bsearch</span><span class="token punctuation">(</span><span class="token parameter">arr<span class="token punctuation">,</span> value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">let</span> low <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">let</span> high <span class="token operator">=</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token keyword">while</span> <span class="token punctuation">(</span>low <span class="token operator">&lt;=</span> high<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">let</span> mid <span class="token operator">=</span> low <span class="token operator">+</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token punctuation">(</span>high <span class="token operator">-</span> low<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&gt;</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			low <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&lt;</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			high <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span>mid <span class="token operator">===</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">||</span> arr<span class="token punctuation">[</span>mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">!=</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
				<span class="token keyword">return</span> mid<span class="token punctuation">;</span>
			<span class="token punctuation">}</span>
			low <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="变种三-查找第一个大于等于给定值的元素" tabindex="-1"><a class="header-anchor" href="#变种三-查找第一个大于等于给定值的元素" aria-hidden="true">#</a> 变种三：查找第一个大于等于给定值的元素</h3><p>如果<code>arr[mid]</code>小于要查找的值<code>value</code>，那要查找的值肯定在<code>[mid+1, high]</code>之间，所以，我们更新<code>low=mid+1</code>。</p><p>对于<code>arr[mid]</code>大于等于给定值<code>value</code>的情况，我们要先看下这个<code>arr[mid]</code>是不是我们要找的第一个值大于等于给定值的元素。如果<code>arr[mid]</code>前面已经没有元素，或者前面一个元素小于要查找的值<code>value</code>，那<code>arr[mid]</code>就是我们要找的元素。</p><p>如果<code>arr[mid - 1]</code>也大于等于要查找的值<code>value</code>，那说明要查找的元素在<code>[low, mid-1]</code>之间，所以，我们将<code>high</code>更新为<code>mid-1</code>。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">bsearch</span><span class="token punctuation">(</span><span class="token parameter">arr<span class="token punctuation">,</span> value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">let</span> low <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">let</span> high <span class="token operator">=</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token keyword">while</span> <span class="token punctuation">(</span>low <span class="token operator">&lt;=</span> high<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">let</span> mid <span class="token operator">=</span> low <span class="token operator">+</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token punctuation">(</span>high <span class="token operator">-</span> low<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&lt;</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			low <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span>mid <span class="token operator">===</span> <span class="token number">0</span> <span class="token operator">||</span> arr<span class="token punctuation">[</span>mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
				<span class="token keyword">return</span> mid<span class="token punctuation">;</span>
			<span class="token punctuation">}</span>
			high <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="变种四-查找最后一个小于等于给定值的元素" tabindex="-1"><a class="header-anchor" href="#变种四-查找最后一个小于等于给定值的元素" aria-hidden="true">#</a> 变种四：查找最后一个小于等于给定值的元素</h3><p>对于<code>arr[mid]</code>小于等于给定值<code>value</code>的情况，我们要先看下这个<code>arr[mid]</code>是不是我们要找的最后一个值小于等于给定值的元素。</p><p>如果<code>arr[mid]</code>后面已经没有元素，或者后面一个元素大于要查找的值<code>value</code>，那<code>arr[mid]</code>就是我们要找的元素。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">bsearch</span><span class="token punctuation">(</span><span class="token parameter">arr<span class="token punctuation">,</span> value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">let</span> low <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">let</span> high <span class="token operator">=</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token keyword">while</span> <span class="token punctuation">(</span>low <span class="token operator">&lt;=</span> high<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">let</span> mid <span class="token operator">=</span> low <span class="token operator">+</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token punctuation">(</span>high <span class="token operator">-</span> low<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&gt;</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			high <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span>mid <span class="token operator">===</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">||</span> arr<span class="token punctuation">[</span>mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&gt;</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
				<span class="token keyword">return</span> mid<span class="token punctuation">;</span>
			<span class="token punctuation">}</span>
			low <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,46),h=t("h2",{id:"相关题目",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#相关题目","aria-hidden":"true"},"#"),n(" 相关题目")],-1),k=t("h4",{id:"二分下标",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#二分下标","aria-hidden":"true"},"#"),n(" 二分下标")],-1),m=t("thead",null,[t("tr",null,[t("th",{style:{"text-align":"center"}},"题号"),t("th",{style:{"text-align":"left"}},"标题"),t("th",{style:{"text-align":"center"}},"题解"),t("th",{style:{"text-align":"left"}},"标签"),t("th",{style:{"text-align":"center"}},"难度"),t("th",{style:{"text-align":"center"}},"力扣")])],-1),g=t("td",{style:{"text-align":"center"}},"704",-1),f=t("td",{style:{"text-align":"left"}},"二分查找",-1),b={style:{"text-align":"center"}},y={style:{"text-align":"left"}},v=t("code",null,"数组",-1),x=t("code",null,"二分查找",-1),w=t("td",{style:{"text-align":"center"}},"🟢",-1),I={style:{"text-align":"center"}},j={href:"https://leetcode.cn/problems/binary-search",target:"_blank",rel:"noopener noreferrer"},B={href:"https://leetcode.com/problems/binary-search",target:"_blank",rel:"noopener noreferrer"},T=t("td",{style:{"text-align":"center"}},"374",-1),N=t("td",{style:{"text-align":"left"}},"猜数字大小",-1),E={style:{"text-align":"center"}},q={style:{"text-align":"left"}},O=t("code",null,"二分查找",-1),G=t("code",null,"交互",-1),M=t("td",{style:{"text-align":"center"}},"🟢",-1),S={style:{"text-align":"center"}},D={href:"https://leetcode.cn/problems/guess-number-higher-or-lower",target:"_blank",rel:"noopener noreferrer"},L={href:"https://leetcode.com/problems/guess-number-higher-or-lower",target:"_blank",rel:"noopener noreferrer"},R=t("td",{style:{"text-align":"center"}},"35",-1),V=t("td",{style:{"text-align":"left"}},"搜索插入位置",-1),z={style:{"text-align":"center"}},A={style:{"text-align":"left"}},C=t("code",null,"数组",-1),P=t("code",null,"二分查找",-1),K=t("td",{style:{"text-align":"center"}},"🟢",-1),U={style:{"text-align":"center"}},H={href:"https://leetcode.cn/problems/search-insert-position",target:"_blank",rel:"noopener noreferrer"},F={href:"https://leetcode.com/problems/search-insert-position",target:"_blank",rel:"noopener noreferrer"},J=t("td",{style:{"text-align":"center"}},"34",-1),Q=t("td",{style:{"text-align":"left"}},"在排序数组中查找元素的第一个和最后一个位置",-1),W={style:{"text-align":"center"}},X={style:{"text-align":"left"}},Y=t("code",null,"数组",-1),Z=t("code",null,"二分查找",-1),$=t("td",{style:{"text-align":"center"}},"🟠",-1),tt={style:{"text-align":"center"}},nt={href:"https://leetcode.cn/problems/find-first-and-last-position-of-element-in-sorted-array",target:"_blank",rel:"noopener noreferrer"},et={href:"https://leetcode.com/problems/find-first-and-last-position-of-element-in-sorted-array",target:"_blank",rel:"noopener noreferrer"},st=t("td",{style:{"text-align":"center"}},"167",-1),at=t("td",{style:{"text-align":"left"}},"两数之和 II - 输入有序数组",-1),ot={style:{"text-align":"center"}},lt={style:{"text-align":"left"}},ct=t("code",null,"数组",-1),rt=t("code",null,"双指针",-1),pt=t("code",null,"二分查找",-1),it=t("td",{style:{"text-align":"center"}},"🟠",-1),dt={style:{"text-align":"center"}},ut={href:"https://leetcode.cn/problems/two-sum-ii-input-array-is-sorted",target:"_blank",rel:"noopener noreferrer"},_t={href:"https://leetcode.com/problems/two-sum-ii-input-array-is-sorted",target:"_blank",rel:"noopener noreferrer"},ht=t("td",{style:{"text-align":"center"}},"153",-1),kt=t("td",{style:{"text-align":"left"}},"寻找旋转排序数组中的最小值",-1),mt={style:{"text-align":"center"}},gt={style:{"text-align":"left"}},ft=t("code",null,"数组",-1),bt=t("code",null,"二分查找",-1),yt=t("td",{style:{"text-align":"center"}},"🟠",-1),vt={style:{"text-align":"center"}},xt={href:"https://leetcode.cn/problems/find-minimum-in-rotated-sorted-array",target:"_blank",rel:"noopener noreferrer"},wt={href:"https://leetcode.com/problems/find-minimum-in-rotated-sorted-array",target:"_blank",rel:"noopener noreferrer"},It=t("td",{style:{"text-align":"center"}},"154",-1),jt=t("td",{style:{"text-align":"left"}},"寻找旋转排序数组中的最小值 II",-1),Bt={style:{"text-align":"center"}},Tt={style:{"text-align":"left"}},Nt=t("code",null,"数组",-1),Et=t("code",null,"二分查找",-1),qt=t("td",{style:{"text-align":"center"}},"🔴",-1),Ot={style:{"text-align":"center"}},Gt={href:"https://leetcode.cn/problems/find-minimum-in-rotated-sorted-array-ii",target:"_blank",rel:"noopener noreferrer"},Mt={href:"https://leetcode.com/problems/find-minimum-in-rotated-sorted-array-ii",target:"_blank",rel:"noopener noreferrer"},St=t("td",{style:{"text-align":"center"}},"33",-1),Dt=t("td",{style:{"text-align":"left"}},"搜索旋转排序数组",-1),Lt={style:{"text-align":"center"}},Rt={style:{"text-align":"left"}},Vt=t("code",null,"数组",-1),zt=t("code",null,"二分查找",-1),At=t("td",{style:{"text-align":"center"}},"🟠",-1),Ct={style:{"text-align":"center"}},Pt={href:"https://leetcode.cn/problems/search-in-rotated-sorted-array",target:"_blank",rel:"noopener noreferrer"},Kt={href:"https://leetcode.com/problems/search-in-rotated-sorted-array",target:"_blank",rel:"noopener noreferrer"},Ut=t("td",{style:{"text-align":"center"}},"81",-1),Ht=t("td",{style:{"text-align":"left"}},"搜索旋转排序数组 II",-1),Ft={style:{"text-align":"center"}},Jt={style:{"text-align":"left"}},Qt=t("code",null,"数组",-1),Wt=t("code",null,"二分查找",-1),Xt=t("td",{style:{"text-align":"center"}},"🟠",-1),Yt={style:{"text-align":"center"}},Zt={href:"https://leetcode.cn/problems/search-in-rotated-sorted-array-ii",target:"_blank",rel:"noopener noreferrer"},$t={href:"https://leetcode.com/problems/search-in-rotated-sorted-array-ii",target:"_blank",rel:"noopener noreferrer"},tn=t("td",{style:{"text-align":"center"}},"278",-1),nn=t("td",{style:{"text-align":"left"}},"第一个错误的版本",-1),en={style:{"text-align":"center"}},sn={style:{"text-align":"left"}},an=t("code",null,"二分查找",-1),on=t("code",null,"交互",-1),ln=t("td",{style:{"text-align":"center"}},"🟢",-1),cn={style:{"text-align":"center"}},rn={href:"https://leetcode.cn/problems/first-bad-version",target:"_blank",rel:"noopener noreferrer"},pn={href:"https://leetcode.com/problems/first-bad-version",target:"_blank",rel:"noopener noreferrer"},dn=t("td",{style:{"text-align":"center"}},"162",-1),un=t("td",{style:{"text-align":"left"}},"寻找峰值",-1),_n={style:{"text-align":"center"}},hn={style:{"text-align":"left"}},kn=t("code",null,"数组",-1),mn=t("code",null,"二分查找",-1),gn=t("td",{style:{"text-align":"center"}},"🟠",-1),fn={style:{"text-align":"center"}},bn={href:"https://leetcode.cn/problems/find-peak-element",target:"_blank",rel:"noopener noreferrer"},yn={href:"https://leetcode.com/problems/find-peak-element",target:"_blank",rel:"noopener noreferrer"},vn=t("td",{style:{"text-align":"center"}},"852",-1),xn=t("td",{style:{"text-align":"left"}},"山脉数组的峰顶索引",-1),wn={style:{"text-align":"center"}},In={style:{"text-align":"left"}},jn=t("code",null,"数组",-1),Bn=t("code",null,"二分查找",-1),Tn=t("td",{style:{"text-align":"center"}},"🟠",-1),Nn={style:{"text-align":"center"}},En={href:"https://leetcode.cn/problems/peak-index-in-a-mountain-array",target:"_blank",rel:"noopener noreferrer"},qn={href:"https://leetcode.com/problems/peak-index-in-a-mountain-array",target:"_blank",rel:"noopener noreferrer"},On=t("td",{style:{"text-align":"center"}},"1095",-1),Gn=t("td",{style:{"text-align":"left"}},"山脉数组中查找目标值",-1),Mn=t("td",{style:{"text-align":"center"}},null,-1),Sn={style:{"text-align":"left"}},Dn=t("code",null,"数组",-1),Ln=t("code",null,"二分查找",-1),Rn=t("code",null,"交互",-1),Vn=t("td",{style:{"text-align":"center"}},"🔴",-1),zn={style:{"text-align":"center"}},An={href:"https://leetcode.cn/problems/find-in-mountain-array",target:"_blank",rel:"noopener noreferrer"},Cn={href:"https://leetcode.com/problems/find-in-mountain-array",target:"_blank",rel:"noopener noreferrer"},Pn=t("td",{style:{"text-align":"center"}},"744",-1),Kn=t("td",{style:{"text-align":"left"}},"寻找比目标字母大的最小字母",-1),Un={style:{"text-align":"center"}},Hn={style:{"text-align":"left"}},Fn=t("code",null,"数组",-1),Jn=t("code",null,"二分查找",-1),Qn=t("td",{style:{"text-align":"center"}},"🟢",-1),Wn={style:{"text-align":"center"}},Xn={href:"https://leetcode.cn/problems/find-smallest-letter-greater-than-target",target:"_blank",rel:"noopener noreferrer"},Yn={href:"https://leetcode.com/problems/find-smallest-letter-greater-than-target",target:"_blank",rel:"noopener noreferrer"},Zn=t("td",{style:{"text-align":"center"}},"4",-1),$n=t("td",{style:{"text-align":"left"}},"寻找两个正序数组的中位数",-1),te={style:{"text-align":"center"}},ne={style:{"text-align":"left"}},ee=t("code",null,"数组",-1),se=t("code",null,"二分查找",-1),ae=t("code",null,"分治",-1),oe=t("td",{style:{"text-align":"center"}},"🔴",-1),le={style:{"text-align":"center"}},ce={href:"https://leetcode.cn/problems/median-of-two-sorted-arrays",target:"_blank",rel:"noopener noreferrer"},re={href:"https://leetcode.com/problems/median-of-two-sorted-arrays",target:"_blank",rel:"noopener noreferrer"},pe=t("td",{style:{"text-align":"center"}},"74",-1),ie=t("td",{style:{"text-align":"left"}},"搜索二维矩阵",-1),de={style:{"text-align":"center"}},ue={style:{"text-align":"left"}},_e=t("code",null,"数组",-1),he=t("code",null,"二分查找",-1),ke=t("code",null,"矩阵",-1),me=t("td",{style:{"text-align":"center"}},"🟠",-1),ge={style:{"text-align":"center"}},fe={href:"https://leetcode.cn/problems/search-a-2d-matrix",target:"_blank",rel:"noopener noreferrer"},be={href:"https://leetcode.com/problems/search-a-2d-matrix",target:"_blank",rel:"noopener noreferrer"},ye=t("td",{style:{"text-align":"center"}},"240",-1),ve=t("td",{style:{"text-align":"left"}},"搜索二维矩阵 II",-1),xe={style:{"text-align":"center"}},we={style:{"text-align":"left"}},Ie=t("code",null,"数组",-1),je=t("code",null,"二分查找",-1),Be=t("code",null,"分治",-1),Te=t("code",null,"1+",-1),Ne=t("td",{style:{"text-align":"center"}},"🟠",-1),Ee={style:{"text-align":"center"}},qe={href:"https://leetcode.cn/problems/search-a-2d-matrix-ii",target:"_blank",rel:"noopener noreferrer"},Oe={href:"https://leetcode.com/problems/search-a-2d-matrix-ii",target:"_blank",rel:"noopener noreferrer"},Ge=t("h4",{id:"二分答案",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#二分答案","aria-hidden":"true"},"#"),n(" 二分答案")],-1),Me=t("thead",null,[t("tr",null,[t("th",{style:{"text-align":"center"}},"题号"),t("th",{style:{"text-align":"left"}},"标题"),t("th",{style:{"text-align":"center"}},"题解"),t("th",{style:{"text-align":"left"}},"标签"),t("th",{style:{"text-align":"center"}},"难度"),t("th",{style:{"text-align":"center"}},"力扣")])],-1),Se=t("td",{style:{"text-align":"center"}},"69",-1),De=t("td",{style:{"text-align":"left"}},"x 的平方根",-1),Le={style:{"text-align":"center"}},Re={style:{"text-align":"left"}},Ve=t("code",null,"数学",-1),ze=t("code",null,"二分查找",-1),Ae=t("td",{style:{"text-align":"center"}},"🟢",-1),Ce={style:{"text-align":"center"}},Pe={href:"https://leetcode.cn/problems/sqrtx",target:"_blank",rel:"noopener noreferrer"},Ke={href:"https://leetcode.com/problems/sqrtx",target:"_blank",rel:"noopener noreferrer"},Ue=t("td",{style:{"text-align":"center"}},"287",-1),He=t("td",{style:{"text-align":"left"}},"寻找重复数",-1),Fe={style:{"text-align":"center"}},Je={style:{"text-align":"left"}},Qe=t("code",null,"位运算",-1),We=t("code",null,"数组",-1),Xe=t("code",null,"双指针",-1),Ye=t("code",null,"1+",-1),Ze=t("td",{style:{"text-align":"center"}},"🟠",-1),$e={style:{"text-align":"center"}},ts={href:"https://leetcode.cn/problems/find-the-duplicate-number",target:"_blank",rel:"noopener noreferrer"},ns={href:"https://leetcode.com/problems/find-the-duplicate-number",target:"_blank",rel:"noopener noreferrer"},es=t("td",{style:{"text-align":"center"}},"50",-1),ss=t("td",{style:{"text-align":"left"}},"Pow(x, n)",-1),as={style:{"text-align":"center"}},os={style:{"text-align":"left"}},ls=t("code",null,"递归",-1),cs=t("code",null,"数学",-1),rs=t("td",{style:{"text-align":"center"}},"🟠",-1),ps={style:{"text-align":"center"}},is={href:"https://leetcode.cn/problems/powx-n",target:"_blank",rel:"noopener noreferrer"},ds={href:"https://leetcode.com/problems/powx-n",target:"_blank",rel:"noopener noreferrer"},us=t("td",{style:{"text-align":"center"}},"367",-1),_s=t("td",{style:{"text-align":"left"}},"有效的完全平方数",-1),hs={style:{"text-align":"center"}},ks={style:{"text-align":"left"}},ms=t("code",null,"数学",-1),gs=t("code",null,"二分查找",-1),fs=t("td",{style:{"text-align":"center"}},"🟢",-1),bs={style:{"text-align":"center"}},ys={href:"https://leetcode.cn/problems/valid-perfect-square",target:"_blank",rel:"noopener noreferrer"},vs={href:"https://leetcode.com/problems/valid-perfect-square",target:"_blank",rel:"noopener noreferrer"},xs=t("td",{style:{"text-align":"center"}},"1300",-1),ws=t("td",{style:{"text-align":"left"}},"转变数组后最接近目标值的数组和",-1),Is=t("td",{style:{"text-align":"center"}},null,-1),js={style:{"text-align":"left"}},Bs=t("code",null,"数组",-1),Ts=t("code",null,"二分查找",-1),Ns=t("code",null,"排序",-1),Es=t("td",{style:{"text-align":"center"}},"🟠",-1),qs={style:{"text-align":"center"}},Os={href:"https://leetcode.cn/problems/sum-of-mutated-array-closest-to-target",target:"_blank",rel:"noopener noreferrer"},Gs={href:"https://leetcode.com/problems/sum-of-mutated-array-closest-to-target",target:"_blank",rel:"noopener noreferrer"},Ms=t("td",{style:{"text-align":"center"}},"400",-1),Ss=t("td",{style:{"text-align":"left"}},"第 N 位数字",-1),Ds={style:{"text-align":"center"}},Ls={style:{"text-align":"left"}},Rs=t("code",null,"数学",-1),Vs=t("code",null,"二分查找",-1),zs=t("td",{style:{"text-align":"center"}},"🟠",-1),As={style:{"text-align":"center"}},Cs={href:"https://leetcode.cn/problems/nth-digit",target:"_blank",rel:"noopener noreferrer"},Ps={href:"https://leetcode.com/problems/nth-digit",target:"_blank",rel:"noopener noreferrer"},Ks=t("h4",{id:"复杂的二分查找问题",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#复杂的二分查找问题","aria-hidden":"true"},"#"),n(" 复杂的二分查找问题")],-1),Us=t("thead",null,[t("tr",null,[t("th",{style:{"text-align":"center"}},"题号"),t("th",{style:{"text-align":"left"}},"标题"),t("th",{style:{"text-align":"center"}},"题解"),t("th",{style:{"text-align":"left"}},"标签"),t("th",{style:{"text-align":"center"}},"难度"),t("th",{style:{"text-align":"center"}},"力扣")])],-1),Hs=t("td",{style:{"text-align":"center"}},"875",-1),Fs=t("td",{style:{"text-align":"left"}},"爱吃香蕉的珂珂",-1),Js={style:{"text-align":"center"}},Qs={style:{"text-align":"left"}},Ws=t("code",null,"数组",-1),Xs=t("code",null,"二分查找",-1),Ys=t("td",{style:{"text-align":"center"}},"🟠",-1),Zs={style:{"text-align":"center"}},$s={href:"https://leetcode.cn/problems/koko-eating-bananas",target:"_blank",rel:"noopener noreferrer"},ta={href:"https://leetcode.com/problems/koko-eating-bananas",target:"_blank",rel:"noopener noreferrer"},na=t("td",{style:{"text-align":"center"}},"410",-1),ea=t("td",{style:{"text-align":"left"}},"分割数组的最大值",-1),sa=t("td",{style:{"text-align":"center"}},null,-1),aa={style:{"text-align":"left"}},oa=t("code",null,"贪心",-1),la=t("code",null,"数组",-1),ca=t("code",null,"二分查找",-1),ra=t("code",null,"2+",-1),pa=t("td",{style:{"text-align":"center"}},"🔴",-1),ia={style:{"text-align":"center"}},da={href:"https://leetcode.cn/problems/split-array-largest-sum",target:"_blank",rel:"noopener noreferrer"},ua={href:"https://leetcode.com/problems/split-array-largest-sum",target:"_blank",rel:"noopener noreferrer"},_a=t("td",{style:{"text-align":"center"}},"209",-1),ha=t("td",{style:{"text-align":"left"}},"长度最小的子数组",-1),ka={style:{"text-align":"center"}},ma={style:{"text-align":"left"}},ga=t("code",null,"数组",-1),fa=t("code",null,"二分查找",-1),ba=t("code",null,"前缀和",-1),ya=t("code",null,"1+",-1),va=t("td",{style:{"text-align":"center"}},"🟠",-1),xa={style:{"text-align":"center"}},wa={href:"https://leetcode.cn/problems/minimum-size-subarray-sum",target:"_blank",rel:"noopener noreferrer"},Ia={href:"https://leetcode.com/problems/minimum-size-subarray-sum",target:"_blank",rel:"noopener noreferrer"},ja=t("td",{style:{"text-align":"center"}},"658",-1),Ba=t("td",{style:{"text-align":"left"}},"找到 K 个最接近的元素",-1),Ta={style:{"text-align":"center"}},Na={style:{"text-align":"left"}},Ea=t("code",null,"数组",-1),qa=t("code",null,"双指针",-1),Oa=t("code",null,"二分查找",-1),Ga=t("code",null,"3+",-1),Ma=t("td",{style:{"text-align":"center"}},"🟠",-1),Sa={style:{"text-align":"center"}},Da={href:"https://leetcode.cn/problems/find-k-closest-elements",target:"_blank",rel:"noopener noreferrer"},La={href:"https://leetcode.com/problems/find-k-closest-elements",target:"_blank",rel:"noopener noreferrer"},Ra=t("td",{style:{"text-align":"center"}},"270",-1),Va=t("td",{style:{"text-align":"left"}},"最接近的二叉搜索树值 🔒",-1),za=t("td",{style:{"text-align":"center"}},null,-1),Aa={style:{"text-align":"left"}},Ca=t("code",null,"树",-1),Pa=t("code",null,"深度优先搜索",-1),Ka=t("code",null,"二叉搜索树",-1),Ua=t("code",null,"2+",-1),Ha=t("td",{style:{"text-align":"center"}},"🟢",-1),Fa={style:{"text-align":"center"}},Ja={href:"https://leetcode.cn/problems/closest-binary-search-tree-value",target:"_blank",rel:"noopener noreferrer"},Qa={href:"https://leetcode.com/problems/closest-binary-search-tree-value",target:"_blank",rel:"noopener noreferrer"},Wa=t("td",{style:{"text-align":"center"}},"702",-1),Xa=t("td",{style:{"text-align":"left"}},"搜索长度未知的有序数组 🔒",-1),Ya=t("td",{style:{"text-align":"center"}},null,-1),Za={style:{"text-align":"left"}},$a=t("code",null,"数组",-1),to=t("code",null,"二分查找",-1),no=t("code",null,"交互",-1),eo=t("td",{style:{"text-align":"center"}},"🟠",-1),so={style:{"text-align":"center"}},ao={href:"https://leetcode.cn/problems/search-in-a-sorted-array-of-unknown-size",target:"_blank",rel:"noopener noreferrer"},oo={href:"https://leetcode.com/problems/search-in-a-sorted-array-of-unknown-size",target:"_blank",rel:"noopener noreferrer"},lo=t("td",{style:{"text-align":"center"}},"349",-1),co=t("td",{style:{"text-align":"left"}},"两个数组的交集",-1),ro={style:{"text-align":"center"}},po={style:{"text-align":"left"}},io=t("code",null,"数组",-1),uo=t("code",null,"哈希表",-1),_o=t("code",null,"双指针",-1),ho=t("code",null,"2+",-1),ko=t("td",{style:{"text-align":"center"}},"🟢",-1),mo={style:{"text-align":"center"}},go={href:"https://leetcode.cn/problems/intersection-of-two-arrays",target:"_blank",rel:"noopener noreferrer"},fo={href:"https://leetcode.com/problems/intersection-of-two-arrays",target:"_blank",rel:"noopener noreferrer"},bo=t("td",{style:{"text-align":"center"}},"350",-1),yo=t("td",{style:{"text-align":"left"}},"两个数组的交集 II",-1),vo={style:{"text-align":"center"}},xo={style:{"text-align":"left"}},wo=t("code",null,"数组",-1),Io=t("code",null,"哈希表",-1),jo=t("code",null,"双指针",-1),Bo=t("code",null,"2+",-1),To=t("td",{style:{"text-align":"center"}},"🟢",-1),No={style:{"text-align":"center"}},Eo={href:"https://leetcode.cn/problems/intersection-of-two-arrays-ii",target:"_blank",rel:"noopener noreferrer"},qo={href:"https://leetcode.com/problems/intersection-of-two-arrays-ii",target:"_blank",rel:"noopener noreferrer"},Oo=t("td",{style:{"text-align":"center"}},"287",-1),Go=t("td",{style:{"text-align":"left"}},"寻找重复数",-1),Mo={style:{"text-align":"center"}},So={style:{"text-align":"left"}},Do=t("code",null,"位运算",-1),Lo=t("code",null,"数组",-1),Ro=t("code",null,"双指针",-1),Vo=t("code",null,"1+",-1),zo=t("td",{style:{"text-align":"center"}},"🟠",-1),Ao={style:{"text-align":"center"}},Co={href:"https://leetcode.cn/problems/find-the-duplicate-number",target:"_blank",rel:"noopener noreferrer"},Po={href:"https://leetcode.com/problems/find-the-duplicate-number",target:"_blank",rel:"noopener noreferrer"},Ko=t("td",{style:{"text-align":"center"}},"719",-1),Uo=t("td",{style:{"text-align":"left"}},"找出第 K 小的数对距离",-1),Ho=t("td",{style:{"text-align":"center"}},null,-1),Fo={style:{"text-align":"left"}},Jo=t("code",null,"数组",-1),Qo=t("code",null,"双指针",-1),Wo=t("code",null,"二分查找",-1),Xo=t("code",null,"1+",-1),Yo=t("td",{style:{"text-align":"center"}},"🔴",-1),Zo={style:{"text-align":"center"}},$o={href:"https://leetcode.cn/problems/find-k-th-smallest-pair-distance",target:"_blank",rel:"noopener noreferrer"},tl={href:"https://leetcode.com/problems/find-k-th-smallest-pair-distance",target:"_blank",rel:"noopener noreferrer"},nl=t("td",{style:{"text-align":"center"}},"259",-1),el=t("td",{style:{"text-align":"left"}},"较小的三数之和 🔒",-1),sl={style:{"text-align":"center"}},al={style:{"text-align":"left"}},ol=t("code",null,"数组",-1),ll=t("code",null,"双指针",-1),cl=t("code",null,"二分查找",-1),rl=t("code",null,"1+",-1),pl=t("td",{style:{"text-align":"center"}},"🟠",-1),il={style:{"text-align":"center"}},dl={href:"https://leetcode.cn/problems/3sum-smaller",target:"_blank",rel:"noopener noreferrer"},ul={href:"https://leetcode.com/problems/3sum-smaller",target:"_blank",rel:"noopener noreferrer"},_l=t("td",{style:{"text-align":"center"}},"1011",-1),hl=t("td",{style:{"text-align":"left"}},"在 D 天内送达包裹的能力",-1),kl=t("td",{style:{"text-align":"center"}},null,-1),ml={style:{"text-align":"left"}},gl=t("code",null,"数组",-1),fl=t("code",null,"二分查找",-1),bl=t("td",{style:{"text-align":"center"}},"🟠",-1),yl={style:{"text-align":"center"}},vl={href:"https://leetcode.cn/problems/capacity-to-ship-packages-within-d-days",target:"_blank",rel:"noopener noreferrer"},xl={href:"https://leetcode.com/problems/capacity-to-ship-packages-within-d-days",target:"_blank",rel:"noopener noreferrer"},wl=t("td",{style:{"text-align":"center"}},"1482",-1),Il=t("td",{style:{"text-align":"left"}},"制作 m 束花所需的最少天数",-1),jl=t("td",{style:{"text-align":"center"}},null,-1),Bl={style:{"text-align":"left"}},Tl=t("code",null,"数组",-1),Nl=t("code",null,"二分查找",-1),El=t("td",{style:{"text-align":"center"}},"🟠",-1),ql={style:{"text-align":"center"}},Ol={href:"https://leetcode.cn/problems/minimum-number-of-days-to-make-m-bouquets",target:"_blank",rel:"noopener noreferrer"},Gl={href:"https://leetcode.com/problems/minimum-number-of-days-to-make-m-bouquets",target:"_blank",rel:"noopener noreferrer"};function Ml(Sl,Dl){const s=c("RouterLink"),o=c("ExternalLinkIcon");return p(),i("div",null,[_,l(" START TABLE "),l(" Please keep comment here to allow auto update "),l(" DON'T EDIT THIS SECTION, INSTEAD RE-RUN `npm run lc` TO UPDATE "),h,k,l(" prettier-ignore "),t("table",null,[m,t("tbody",null,[t("tr",null,[g,f,t("td",b,[e(s,{to:"/problem/0704.html"},{default:a(()=>[n("[✓]")]),_:1})]),t("td",y,[e(s,{to:"/tag/array.html"},{default:a(()=>[v]),_:1}),n(),e(s,{to:"/tag/binary-search.html"},{default:a(()=>[x]),_:1})]),w,t("td",I,[t("a",j,[n("🀄️"),e(o)]),n(),t("a",B,[n("🔗"),e(o)])])]),t("tr",null,[T,N,t("td",E,[e(s,{to:"/problem/0374.html"},{default:a(()=>[n("[✓]")]),_:1})]),t("td",q,[e(s,{to:"/tag/binary-search.html"},{default:a(()=>[O]),_:1}),n(),e(s,{to:"/tag/interactive.html"},{default:a(()=>[G]),_:1})]),M,t("td",S,[t("a",D,[n("🀄️"),e(o)]),n(),t("a",L,[n("🔗"),e(o)])])]),t("tr",null,[R,V,t("td",z,[e(s,{to:"/problem/0035.html"},{default:a(()=>[n("[✓]")]),_:1})]),t("td",A,[e(s,{to:"/tag/array.html"},{default:a(()=>[C]),_:1}),n(),e(s,{to:"/tag/binary-search.html"},{default:a(()=>[P]),_:1})]),K,t("td",U,[t("a",H,[n("🀄️"),e(o)]),n(),t("a",F,[n("🔗"),e(o)])])]),t("tr",null,[J,Q,t("td",W,[e(s,{to:"/problem/0034.html"},{default:a(()=>[n("[✓]")]),_:1})]),t("td",X,[e(s,{to:"/tag/array.html"},{default:a(()=>[Y]),_:1}),n(),e(s,{to:"/tag/binary-search.html"},{default:a(()=>[Z]),_:1})]),$,t("td",tt,[t("a",nt,[n("🀄️"),e(o)]),n(),t("a",et,[n("🔗"),e(o)])])]),t("tr",null,[st,at,t("td",ot,[e(s,{to:"/problem/0167.html"},{default:a(()=>[n("[✓]")]),_:1})]),t("td",lt,[e(s,{to:"/tag/array.html"},{default:a(()=>[ct]),_:1}),n(),e(s,{to:"/tag/two-pointers.html"},{default:a(()=>[rt]),_:1}),n(),e(s,{to:"/tag/binary-search.html"},{default:a(()=>[pt]),_:1})]),it,t("td",dt,[t("a",ut,[n("🀄️"),e(o)]),n(),t("a",_t,[n("🔗"),e(o)])])]),t("tr",null,[ht,kt,t("td",mt,[e(s,{to:"/problem/0153.html"},{default:a(()=>[n("[✓]")]),_:1})]),t("td",gt,[e(s,{to:"/tag/array.html"},{default:a(()=>[ft]),_:1}),n(),e(s,{to:"/tag/binary-search.html"},{default:a(()=>[bt]),_:1})]),yt,t("td",vt,[t("a",xt,[n("🀄️"),e(o)]),n(),t("a",wt,[n("🔗"),e(o)])])]),t("tr",null,[It,jt,t("td",Bt,[e(s,{to:"/problem/0154.html"},{default:a(()=>[n("[✓]")]),_:1})]),t("td",Tt,[e(s,{to:"/tag/array.html"},{default:a(()=>[Nt]),_:1}),n(),e(s,{to:"/tag/binary-search.html"},{default:a(()=>[Et]),_:1})]),qt,t("td",Ot,[t("a",Gt,[n("🀄️"),e(o)]),n(),t("a",Mt,[n("🔗"),e(o)])])]),t("tr",null,[St,Dt,t("td",Lt,[e(s,{to:"/problem/0033.html"},{default:a(()=>[n("[✓]")]),_:1})]),t("td",Rt,[e(s,{to:"/tag/array.html"},{default:a(()=>[Vt]),_:1}),n(),e(s,{to:"/tag/binary-search.html"},{default:a(()=>[zt]),_:1})]),At,t("td",Ct,[t("a",Pt,[n("🀄️"),e(o)]),n(),t("a",Kt,[n("🔗"),e(o)])])]),t("tr",null,[Ut,Ht,t("td",Ft,[e(s,{to:"/problem/0081.html"},{default:a(()=>[n("[✓]")]),_:1})]),t("td",Jt,[e(s,{to:"/tag/array.html"},{default:a(()=>[Qt]),_:1}),n(),e(s,{to:"/tag/binary-search.html"},{default:a(()=>[Wt]),_:1})]),Xt,t("td",Yt,[t("a",Zt,[n("🀄️"),e(o)]),n(),t("a",$t,[n("🔗"),e(o)])])]),t("tr",null,[tn,nn,t("td",en,[e(s,{to:"/problem/0278.html"},{default:a(()=>[n("[✓]")]),_:1})]),t("td",sn,[e(s,{to:"/tag/binary-search.html"},{default:a(()=>[an]),_:1}),n(),e(s,{to:"/tag/interactive.html"},{default:a(()=>[on]),_:1})]),ln,t("td",cn,[t("a",rn,[n("🀄️"),e(o)]),n(),t("a",pn,[n("🔗"),e(o)])])]),t("tr",null,[dn,un,t("td",_n,[e(s,{to:"/problem/0162.html"},{default:a(()=>[n("[✓]")]),_:1})]),t("td",hn,[e(s,{to:"/tag/array.html"},{default:a(()=>[kn]),_:1}),n(),e(s,{to:"/tag/binary-search.html"},{default:a(()=>[mn]),_:1})]),gn,t("td",fn,[t("a",bn,[n("🀄️"),e(o)]),n(),t("a",yn,[n("🔗"),e(o)])])]),t("tr",null,[vn,xn,t("td",wn,[e(s,{to:"/problem/0852.html"},{default:a(()=>[n("[✓]")]),_:1})]),t("td",In,[e(s,{to:"/tag/array.html"},{default:a(()=>[jn]),_:1}),n(),e(s,{to:"/tag/binary-search.html"},{default:a(()=>[Bn]),_:1})]),Tn,t("td",Nn,[t("a",En,[n("🀄️"),e(o)]),n(),t("a",qn,[n("🔗"),e(o)])])]),t("tr",null,[On,Gn,Mn,t("td",Sn,[e(s,{to:"/tag/array.html"},{default:a(()=>[Dn]),_:1}),n(),e(s,{to:"/tag/binary-search.html"},{default:a(()=>[Ln]),_:1}),n(),e(s,{to:"/tag/interactive.html"},{default:a(()=>[Rn]),_:1})]),Vn,t("td",zn,[t("a",An,[n("🀄️"),e(o)]),n(),t("a",Cn,[n("🔗"),e(o)])])]),t("tr",null,[Pn,Kn,t("td",Un,[e(s,{to:"/problem/0744.html"},{default:a(()=>[n("[✓]")]),_:1})]),t("td",Hn,[e(s,{to:"/tag/array.html"},{default:a(()=>[Fn]),_:1}),n(),e(s,{to:"/tag/binary-search.html"},{default:a(()=>[Jn]),_:1})]),Qn,t("td",Wn,[t("a",Xn,[n("🀄️"),e(o)]),n(),t("a",Yn,[n("🔗"),e(o)])])]),t("tr",null,[Zn,$n,t("td",te,[e(s,{to:"/problem/0004.html"},{default:a(()=>[n("[✓]")]),_:1})]),t("td",ne,[e(s,{to:"/tag/array.html"},{default:a(()=>[ee]),_:1}),n(),e(s,{to:"/tag/binary-search.html"},{default:a(()=>[se]),_:1}),n(),e(s,{to:"/tag/divide-and-conquer.html"},{default:a(()=>[ae]),_:1})]),oe,t("td",le,[t("a",ce,[n("🀄️"),e(o)]),n(),t("a",re,[n("🔗"),e(o)])])]),t("tr",null,[pe,ie,t("td",de,[e(s,{to:"/problem/0074.html"},{default:a(()=>[n("[✓]")]),_:1})]),t("td",ue,[e(s,{to:"/tag/array.html"},{default:a(()=>[_e]),_:1}),n(),e(s,{to:"/tag/binary-search.html"},{default:a(()=>[he]),_:1}),n(),e(s,{to:"/tag/matrix.html"},{default:a(()=>[ke]),_:1})]),me,t("td",ge,[t("a",fe,[n("🀄️"),e(o)]),n(),t("a",be,[n("🔗"),e(o)])])]),t("tr",null,[ye,ve,t("td",xe,[e(s,{to:"/problem/0240.html"},{default:a(()=>[n("[✓]")]),_:1})]),t("td",we,[e(s,{to:"/tag/array.html"},{default:a(()=>[Ie]),_:1}),n(),e(s,{to:"/tag/binary-search.html"},{default:a(()=>[je]),_:1}),n(),e(s,{to:"/tag/divide-and-conquer.html"},{default:a(()=>[Be]),_:1}),n(),Te]),Ne,t("td",Ee,[t("a",qe,[n("🀄️"),e(o)]),n(),t("a",Oe,[n("🔗"),e(o)])])])])]),Ge,l(" prettier-ignore "),t("table",null,[Me,t("tbody",null,[t("tr",null,[Se,De,t("td",Le,[e(s,{to:"/problem/0069.html"},{default:a(()=>[n("[✓]")]),_:1})]),t("td",Re,[e(s,{to:"/tag/math.html"},{default:a(()=>[Ve]),_:1}),n(),e(s,{to:"/tag/binary-search.html"},{default:a(()=>[ze]),_:1})]),Ae,t("td",Ce,[t("a",Pe,[n("🀄️"),e(o)]),n(),t("a",Ke,[n("🔗"),e(o)])])]),t("tr",null,[Ue,He,t("td",Fe,[e(s,{to:"/problem/0287.html"},{default:a(()=>[n("[✓]")]),_:1})]),t("td",Je,[e(s,{to:"/tag/bit-manipulation.html"},{default:a(()=>[Qe]),_:1}),n(),e(s,{to:"/tag/array.html"},{default:a(()=>[We]),_:1}),n(),e(s,{to:"/tag/two-pointers.html"},{default:a(()=>[Xe]),_:1}),n(),Ye]),Ze,t("td",$e,[t("a",ts,[n("🀄️"),e(o)]),n(),t("a",ns,[n("🔗"),e(o)])])]),t("tr",null,[es,ss,t("td",as,[e(s,{to:"/problem/0050.html"},{default:a(()=>[n("[✓]")]),_:1})]),t("td",os,[e(s,{to:"/tag/recursion.html"},{default:a(()=>[ls]),_:1}),n(),e(s,{to:"/tag/math.html"},{default:a(()=>[cs]),_:1})]),rs,t("td",ps,[t("a",is,[n("🀄️"),e(o)]),n(),t("a",ds,[n("🔗"),e(o)])])]),t("tr",null,[us,_s,t("td",hs,[e(s,{to:"/problem/0367.html"},{default:a(()=>[n("[✓]")]),_:1})]),t("td",ks,[e(s,{to:"/tag/math.html"},{default:a(()=>[ms]),_:1}),n(),e(s,{to:"/tag/binary-search.html"},{default:a(()=>[gs]),_:1})]),fs,t("td",bs,[t("a",ys,[n("🀄️"),e(o)]),n(),t("a",vs,[n("🔗"),e(o)])])]),t("tr",null,[xs,ws,Is,t("td",js,[e(s,{to:"/tag/array.html"},{default:a(()=>[Bs]),_:1}),n(),e(s,{to:"/tag/binary-search.html"},{default:a(()=>[Ts]),_:1}),n(),e(s,{to:"/tag/sorting.html"},{default:a(()=>[Ns]),_:1})]),Es,t("td",qs,[t("a",Os,[n("🀄️"),e(o)]),n(),t("a",Gs,[n("🔗"),e(o)])])]),t("tr",null,[Ms,Ss,t("td",Ds,[e(s,{to:"/problem/0400.html"},{default:a(()=>[n("[✓]")]),_:1})]),t("td",Ls,[e(s,{to:"/tag/math.html"},{default:a(()=>[Rs]),_:1}),n(),e(s,{to:"/tag/binary-search.html"},{default:a(()=>[Vs]),_:1})]),zs,t("td",As,[t("a",Cs,[n("🀄️"),e(o)]),n(),t("a",Ps,[n("🔗"),e(o)])])])])]),Ks,l(" prettier-ignore "),t("table",null,[Us,t("tbody",null,[t("tr",null,[Hs,Fs,t("td",Js,[e(s,{to:"/problem/0875.html"},{default:a(()=>[n("[✓]")]),_:1})]),t("td",Qs,[e(s,{to:"/tag/array.html"},{default:a(()=>[Ws]),_:1}),n(),e(s,{to:"/tag/binary-search.html"},{default:a(()=>[Xs]),_:1})]),Ys,t("td",Zs,[t("a",$s,[n("🀄️"),e(o)]),n(),t("a",ta,[n("🔗"),e(o)])])]),t("tr",null,[na,ea,sa,t("td",aa,[e(s,{to:"/tag/greedy.html"},{default:a(()=>[oa]),_:1}),n(),e(s,{to:"/tag/array.html"},{default:a(()=>[la]),_:1}),n(),e(s,{to:"/tag/binary-search.html"},{default:a(()=>[ca]),_:1}),n(),ra]),pa,t("td",ia,[t("a",da,[n("🀄️"),e(o)]),n(),t("a",ua,[n("🔗"),e(o)])])]),t("tr",null,[_a,ha,t("td",ka,[e(s,{to:"/problem/0209.html"},{default:a(()=>[n("[✓]")]),_:1})]),t("td",ma,[e(s,{to:"/tag/array.html"},{default:a(()=>[ga]),_:1}),n(),e(s,{to:"/tag/binary-search.html"},{default:a(()=>[fa]),_:1}),n(),e(s,{to:"/tag/prefix-sum.html"},{default:a(()=>[ba]),_:1}),n(),ya]),va,t("td",xa,[t("a",wa,[n("🀄️"),e(o)]),n(),t("a",Ia,[n("🔗"),e(o)])])]),t("tr",null,[ja,Ba,t("td",Ta,[e(s,{to:"/problem/0658.html"},{default:a(()=>[n("[✓]")]),_:1})]),t("td",Na,[e(s,{to:"/tag/array.html"},{default:a(()=>[Ea]),_:1}),n(),e(s,{to:"/tag/two-pointers.html"},{default:a(()=>[qa]),_:1}),n(),e(s,{to:"/tag/binary-search.html"},{default:a(()=>[Oa]),_:1}),n(),Ga]),Ma,t("td",Sa,[t("a",Da,[n("🀄️"),e(o)]),n(),t("a",La,[n("🔗"),e(o)])])]),t("tr",null,[Ra,Va,za,t("td",Aa,[e(s,{to:"/tag/tree.html"},{default:a(()=>[Ca]),_:1}),n(),e(s,{to:"/tag/depth-first-search.html"},{default:a(()=>[Pa]),_:1}),n(),e(s,{to:"/tag/binary-search-tree.html"},{default:a(()=>[Ka]),_:1}),n(),Ua]),Ha,t("td",Fa,[t("a",Ja,[n("🀄️"),e(o)]),n(),t("a",Qa,[n("🔗"),e(o)])])]),t("tr",null,[Wa,Xa,Ya,t("td",Za,[e(s,{to:"/tag/array.html"},{default:a(()=>[$a]),_:1}),n(),e(s,{to:"/tag/binary-search.html"},{default:a(()=>[to]),_:1}),n(),e(s,{to:"/tag/interactive.html"},{default:a(()=>[no]),_:1})]),eo,t("td",so,[t("a",ao,[n("🀄️"),e(o)]),n(),t("a",oo,[n("🔗"),e(o)])])]),t("tr",null,[lo,co,t("td",ro,[e(s,{to:"/problem/0349.html"},{default:a(()=>[n("[✓]")]),_:1})]),t("td",po,[e(s,{to:"/tag/array.html"},{default:a(()=>[io]),_:1}),n(),e(s,{to:"/tag/hash-table.html"},{default:a(()=>[uo]),_:1}),n(),e(s,{to:"/tag/two-pointers.html"},{default:a(()=>[_o]),_:1}),n(),ho]),ko,t("td",mo,[t("a",go,[n("🀄️"),e(o)]),n(),t("a",fo,[n("🔗"),e(o)])])]),t("tr",null,[bo,yo,t("td",vo,[e(s,{to:"/problem/0350.html"},{default:a(()=>[n("[✓]")]),_:1})]),t("td",xo,[e(s,{to:"/tag/array.html"},{default:a(()=>[wo]),_:1}),n(),e(s,{to:"/tag/hash-table.html"},{default:a(()=>[Io]),_:1}),n(),e(s,{to:"/tag/two-pointers.html"},{default:a(()=>[jo]),_:1}),n(),Bo]),To,t("td",No,[t("a",Eo,[n("🀄️"),e(o)]),n(),t("a",qo,[n("🔗"),e(o)])])]),t("tr",null,[Oo,Go,t("td",Mo,[e(s,{to:"/problem/0287.html"},{default:a(()=>[n("[✓]")]),_:1})]),t("td",So,[e(s,{to:"/tag/bit-manipulation.html"},{default:a(()=>[Do]),_:1}),n(),e(s,{to:"/tag/array.html"},{default:a(()=>[Lo]),_:1}),n(),e(s,{to:"/tag/two-pointers.html"},{default:a(()=>[Ro]),_:1}),n(),Vo]),zo,t("td",Ao,[t("a",Co,[n("🀄️"),e(o)]),n(),t("a",Po,[n("🔗"),e(o)])])]),t("tr",null,[Ko,Uo,Ho,t("td",Fo,[e(s,{to:"/tag/array.html"},{default:a(()=>[Jo]),_:1}),n(),e(s,{to:"/tag/two-pointers.html"},{default:a(()=>[Qo]),_:1}),n(),e(s,{to:"/tag/binary-search.html"},{default:a(()=>[Wo]),_:1}),n(),Xo]),Yo,t("td",Zo,[t("a",$o,[n("🀄️"),e(o)]),n(),t("a",tl,[n("🔗"),e(o)])])]),t("tr",null,[nl,el,t("td",sl,[e(s,{to:"/problem/0259.html"},{default:a(()=>[n("[✓]")]),_:1})]),t("td",al,[e(s,{to:"/tag/array.html"},{default:a(()=>[ol]),_:1}),n(),e(s,{to:"/tag/two-pointers.html"},{default:a(()=>[ll]),_:1}),n(),e(s,{to:"/tag/binary-search.html"},{default:a(()=>[cl]),_:1}),n(),rl]),pl,t("td",il,[t("a",dl,[n("🀄️"),e(o)]),n(),t("a",ul,[n("🔗"),e(o)])])]),t("tr",null,[_l,hl,kl,t("td",ml,[e(s,{to:"/tag/array.html"},{default:a(()=>[gl]),_:1}),n(),e(s,{to:"/tag/binary-search.html"},{default:a(()=>[fl]),_:1})]),bl,t("td",yl,[t("a",vl,[n("🀄️"),e(o)]),n(),t("a",xl,[n("🔗"),e(o)])])]),t("tr",null,[wl,Il,jl,t("td",Bl,[e(s,{to:"/tag/array.html"},{default:a(()=>[Tl]),_:1}),n(),e(s,{to:"/tag/binary-search.html"},{default:a(()=>[Nl]),_:1})]),El,t("td",ql,[t("a",Ol,[n("🀄️"),e(o)]),n(),t("a",Gl,[n("🔗"),e(o)])])])])])])}const Rl=r(u,[["render",Ml],["__file","binary_search.html.vue"]]);export{Rl as default};
