import{_ as p,r as c,o as r,c as u,a as n,b as t,d as s,w as a,f as i,e as d}from"./app-aQeLbVW9.js";const b={},k=n("h1",{id:"_1358-包含所有三种字符的子字符串数目",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_1358-包含所有三种字符的子字符串数目","aria-hidden":"true"},"#"),t(" 1358. 包含所有三种字符的子字符串数目")],-1),h=n("code",null,"哈希表",-1),g=n("code",null,"字符串",-1),_=n("code",null,"滑动窗口",-1),m={href:"https://leetcode.cn/problems/number-of-substrings-containing-all-three-characters",target:"_blank",rel:"noopener noreferrer"},q=n("code",null,"力扣",-1),f={href:"https://leetcode.com/problems/number-of-substrings-containing-all-three-characters",target:"_blank",rel:"noopener noreferrer"},v=n("code",null,"LeetCode",-1),x=d(`<h2 id="题目" tabindex="-1"><a class="header-anchor" href="#题目" aria-hidden="true">#</a> 题目</h2><p>Given a string <code>s</code> consisting only of characters a , b and c.</p><p>Return the number of substrings containing <strong>at least</strong> one occurrence of all these characters a , b and c.</p><p><strong>Example 1:</strong></p><blockquote><p>Input: s = &quot;abcabc&quot;</p><p>Output: 10</p><p>Explanation: The substrings containing at least one occurrence of the characters a , b and c are &quot;abc&quot; , &quot;abca&quot; , &quot;abcab&quot; , &quot;abcabc&quot; , &quot;bca&quot; , &quot;bcab &quot; , &quot;bcabc&quot; , &quot;cab&quot; , &quot;cabc&quot; and &quot;abc&quot; (<strong>again</strong>).</p></blockquote><p><strong>Example 2:</strong></p><blockquote><p>Input: s = &quot;aaacb&quot;</p><p>Output: 3</p><p>Explanation: The substrings containing at least one occurrence of the characters a , b and c are &quot;aaacb &quot; , &quot;aacb &quot; and &quot;acb &quot;.</p></blockquote><p><strong>Example 3:</strong></p><blockquote><p>Input: s = &quot;abc&quot;</p><p>Output: 1</p></blockquote><p><strong>Constraints:</strong></p><ul><li><code>3 &lt;= s.length &lt;= 5 x 10^4</code></li><li><code>s</code> only consists of a , b or c characters.</li></ul><h2 id="题目大意" tabindex="-1"><a class="header-anchor" href="#题目大意" aria-hidden="true">#</a> 题目大意</h2><p>给你一个字符串 <code>s</code> ，它只包含三种字符 a, b 和 c 。</p><p>请你返回 a，b 和 c 都 **至少 **出现过一次的子字符串数目。</p><p><strong>示例 1：</strong></p><blockquote><p><strong>输入：</strong> s = &quot;abcabc&quot;</p><p><strong>输出：</strong> 10</p><p><strong>解释：</strong> 包含 a，b 和 c 各至少一次的子字符串为 &quot;abc &quot; , &quot;abca &quot; , &quot;abcab &quot; , &quot;abcabc &quot; , &quot;bca &quot; , &quot;bcab &quot; , &quot;bcabc &quot; , &quot;cab &quot; , &quot;cabc &quot; 和 &quot;abc &quot; (<strong>相同</strong>字符串算多次)。</p></blockquote><p><strong>示例 2：</strong></p><blockquote><p><strong>输入：</strong> s = &quot;aaacb&quot;</p><p><strong>输出：</strong> 3</p><p><strong>解释：</strong> 包含 a，b 和 c 各至少一次的子字符串为 &quot;aaacb &quot; , &quot;aacb &quot; 和 &quot;acb &quot; 。</p></blockquote><p><strong>示例 3：</strong></p><blockquote><p><strong>输入：</strong> s = &quot;abc&quot;</p><p><strong>输出：</strong> 1</p></blockquote><p><strong>提示：</strong></p><ul><li><code>3 &lt;= s.length &lt;= 5 x 10^4</code></li><li><code>s</code> 只包含字符 a，b 和 c 。</li></ul><h2 id="解题思路" tabindex="-1"><a class="header-anchor" href="#解题思路" aria-hidden="true">#</a> 解题思路</h2><ol><li><p>使用 <strong>滑动窗口</strong> (<code>l</code> 到 <code>r</code>) 遍历 <code>s</code>，并维护一个 <strong>固定大小的数组 <code>count[3]</code> 记录当前窗口内 <code>a, b, c</code> 出现的次数</strong>。</p></li><li><p><strong>右边界扩展窗口 (<code>r</code> 从 <code>0</code> 到 <code>n-1</code>)</strong></p><ul><li><code>count[s[r]]</code> 计数 +1，表示字符 <code>s[r]</code> 进入窗口。</li></ul></li><li><p><strong>左边界缩小窗口 (<code>l++</code>)</strong></p><ul><li>当 <code>count[0] &gt; 0 &amp;&amp; count[1] &gt; 0 &amp;&amp; count[2] &gt; 0</code>（即窗口内包含 <code>a, b, c</code>）时：</li><li><code>count[s[l]]</code> 计数 -1，<code>l++</code> 移动左边界。</li></ul></li><li><p><strong>统计符合条件的子字符串</strong></p><ul><li>缩小左边界直到窗口内不再同时包含 <code>a, b, c</code>，此时 <code>l</code> 代表有多少个可行的子字符串</li><li><code>result += l</code>，计算所有可能的子字符串。</li></ul></li></ol><h4 id="复杂度分析" tabindex="-1"><a class="header-anchor" href="#复杂度分析" aria-hidden="true">#</a> 复杂度分析</h4><ul><li><strong>时间复杂度</strong>：<code>O(n)</code>，遍历 <code>s</code>。</li><li><strong>空间复杂度</strong>：<code>O(1)</code>，只是用了常数个变量。</li></ul><h2 id="代码" tabindex="-1"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>string<span class="token punctuation">}</span></span> <span class="token parameter">s</span>
 * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">}</span></span>
 */</span>
<span class="token keyword">var</span> <span class="token function-variable function">numberOfSubstrings</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">s</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">let</span> l <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> r <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> r <span class="token operator">&lt;</span> s<span class="token punctuation">.</span>length<span class="token punctuation">;</span> r<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		count<span class="token punctuation">[</span>s<span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">97</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>
		<span class="token comment">// 只有当 &#39;a&#39;, &#39;b&#39;, &#39;c&#39; 都出现后，才移动左指针</span>
		<span class="token keyword">while</span> <span class="token punctuation">(</span>count<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> count<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> count<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			count<span class="token punctuation">[</span>s<span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">97</span><span class="token punctuation">]</span><span class="token operator">--</span><span class="token punctuation">;</span>
			l<span class="token operator">++</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		result <span class="token operator">+=</span> l<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="相关题目" tabindex="-1"><a class="header-anchor" href="#相关题目" aria-hidden="true">#</a> 相关题目</h2>`,29),y=n("thead",null,[n("tr",null,[n("th",{style:{"text-align":"center"}},"题号"),n("th",{style:{"text-align":"left"}},"标题"),n("th",{style:{"text-align":"center"}},"题解"),n("th",{style:{"text-align":"left"}},"标签"),n("th",{style:{"text-align":"center"}},"难度"),n("th",{style:{"text-align":"center"}},"力扣")])],-1),w=n("td",{style:{"text-align":"center"}},"2063",-1),E=n("td",{style:{"text-align":"left"}},"所有子字符串中的元音",-1),C=n("td",{style:{"text-align":"center"}},null,-1),O={style:{"text-align":"left"}},I=n("code",null,"数学",-1),L=n("code",null,"字符串",-1),N=n("code",null,"动态规划",-1),V=n("code",null,"1+",-1),j=n("td",{style:{"text-align":"center"}},"🟠",-1),B={style:{"text-align":"center"}},R={href:"https://leetcode.cn/problems/vowels-of-all-substrings",target:"_blank",rel:"noopener noreferrer"},T={href:"https://leetcode.com/problems/vowels-of-all-substrings",target:"_blank",rel:"noopener noreferrer"},A=n("td",{style:{"text-align":"center"}},"2953",-1),S=n("td",{style:{"text-align":"left"}},"统计完全子字符串",-1),G=n("td",{style:{"text-align":"center"}},null,-1),M={style:{"text-align":"left"}},z=n("code",null,"哈希表",-1),D=n("code",null,"字符串",-1),F=n("code",null,"滑动窗口",-1),H=n("td",{style:{"text-align":"center"}},"🔴",-1),J={style:{"text-align":"center"}},K={href:"https://leetcode.cn/problems/count-complete-substrings",target:"_blank",rel:"noopener noreferrer"},P={href:"https://leetcode.com/problems/count-complete-substrings",target:"_blank",rel:"noopener noreferrer"};function Q(U,W){const l=c("font"),e=c("RouterLink"),o=c("ExternalLinkIcon");return r(),u("div",null,[k,n("p",null,[t("🟠 "),s(l,{color:"#ffb800"},{default:a(()=>[t("Medium")]),_:1}),t("  🔖  "),s(e,{to:"/tag/hash-table.html"},{default:a(()=>[h]),_:1}),t(),s(e,{to:"/tag/string.html"},{default:a(()=>[g]),_:1}),t(),s(e,{to:"/tag/sliding-window.html"},{default:a(()=>[_]),_:1}),t("  🔗 "),n("a",m,[q,s(o)]),t(),n("a",f,[v,s(o)])]),x,i(" prettier-ignore "),n("table",null,[y,n("tbody",null,[n("tr",null,[w,E,C,n("td",O,[s(e,{to:"/tag/math.html"},{default:a(()=>[I]),_:1}),t(),s(e,{to:"/tag/string.html"},{default:a(()=>[L]),_:1}),t(),s(e,{to:"/tag/dynamic-programming.html"},{default:a(()=>[N]),_:1}),t(),V]),j,n("td",B,[n("a",R,[t("🀄️"),s(o)]),t(),n("a",T,[t("🔗"),s(o)])])]),n("tr",null,[A,S,G,n("td",M,[s(e,{to:"/tag/hash-table.html"},{default:a(()=>[z]),_:1}),t(),s(e,{to:"/tag/string.html"},{default:a(()=>[D]),_:1}),t(),s(e,{to:"/tag/sliding-window.html"},{default:a(()=>[F]),_:1})]),H,n("td",J,[n("a",K,[t("🀄️"),s(o)]),t(),n("a",P,[t("🔗"),s(o)])])])])])])}const Y=p(b,[["render",Q],["__file","1358.html.vue"]]);export{Y as default};
