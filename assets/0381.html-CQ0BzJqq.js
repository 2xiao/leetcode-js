import{_ as p,r as c,o as i,c as d,a as n,b as s,d as e,w as a,f as u,e as r}from"./app-B5EG-zH0.js";const m={},k=n("h1",{id:"_381-o-1-时间插入、删除和获取随机元素-允许重复",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_381-o-1-时间插入、删除和获取随机元素-允许重复","aria-hidden":"true"},"#"),s(" 381. O(1) 时间插入、删除和获取随机元素 - 允许重复")],-1),v=n("code",null,"设计",-1),h=n("code",null,"数组",-1),g=n("code",null,"哈希表",-1),b=n("code",null,"数学",-1),f=n("code",null,"随机化",-1),_={href:"https://leetcode.cn/problems/insert-delete-getrandom-o1-duplicates-allowed",target:"_blank",rel:"noopener noreferrer"},y=n("code",null,"力扣",-1),w={href:"https://leetcode.com/problems/insert-delete-getrandom-o1-duplicates-allowed",target:"_blank",rel:"noopener noreferrer"},x=n("code",null,"LeetCode",-1),R=r(`<h2 id="题目" tabindex="-1"><a class="header-anchor" href="#题目" aria-hidden="true">#</a> 题目</h2><p><code>RandomizedCollection</code> is a data structure that contains a collection of numbers, possibly duplicates (i.e., a multiset). It should support inserting and removing specific elements and also reporting a random element.</p><p>Implement the <code>RandomizedCollection</code> class:</p><ul><li><code>RandomizedCollection()</code> Initializes the empty <code>RandomizedCollection</code> object.</li><li><code>bool insert(int val)</code> Inserts an item <code>val</code> into the multiset, even if the item is already present. Returns <code>true</code> if the item is not present, <code>false</code> otherwise.</li><li><code>bool remove(int val)</code> Removes an item <code>val</code> from the multiset if present. Returns <code>true</code> if the item is present, <code>false</code> otherwise. Note that if <code>val</code> has multiple occurrences in the multiset, we only remove one of them.</li><li><code>int getRandom()</code> Returns a random element from the current multiset of elements. The probability of each element being returned is <strong>linearly related</strong> to the number of the same values the multiset contains.</li></ul><p>You must implement the functions of the class such that each function works on <strong>average</strong> <code>O(1)</code> time complexity.</p><p><strong>Note:</strong> The test cases are generated such that <code>getRandom</code> will only be called if there is <strong>at least one</strong> item in the <code>RandomizedCollection</code>.</p><p><strong>Example 1:</strong></p><blockquote><p><strong>Input</strong></p><p>[&quot;RandomizedCollection&quot;, &quot;insert&quot;, &quot;insert&quot;, &quot;insert&quot;, &quot;getRandom&quot;, &quot;remove&quot;, &quot;getRandom&quot;]</p><p>[[], [1], [1], [2], [], [1], []]</p><p><strong>Output</strong></p><p>[null, true, false, true, 2, true, 1]</p><p><strong>Explanation</strong></p><p>RandomizedCollection randomizedCollection = new RandomizedCollection();</p><p>randomizedCollection.insert(1); // return true since the collection does not contain 1.</p><p>// Inserts 1 into the collection.</p><p>randomizedCollection.insert(1); // return false since the collection contains 1.</p><p>// Inserts another 1 into the collection. Collection now contains [1,1].</p><p>randomizedCollection.insert(2); // return true since the collection does not contain 2.</p><p>// Inserts 2 into the collection. Collection now contains [1,1,2].</p><p>randomizedCollection.getRandom(); // getRandom should:</p><p>// - return 1 with probability 2/3, or</p><p>// - return 2 with probability 1/3.</p><p>randomizedCollection.remove(1); // return true since the collection contains 1.</p><p>// Removes 1 from the collection. Collection now contains [1,2].</p><p>randomizedCollection.getRandom(); // getRandom should return 1 or 2, both equally likely.</p></blockquote><p><strong>Constraints:</strong></p><ul><li><code>-2^31 &lt;= val &lt;= 2^31 - 1</code></li><li>At most <code>2 * 10^5</code> calls <strong>in total</strong> will be made to <code>insert</code>, <code>remove</code>, and <code>getRandom</code>.</li><li>There will be <strong>at least one</strong> element in the data structure when <code>getRandom</code> is called.</li></ul><h2 id="题目大意" tabindex="-1"><a class="header-anchor" href="#题目大意" aria-hidden="true">#</a> 题目大意</h2><p><code>RandomizedCollection</code> 是一种包含数字集合(可能是重复的)的数据结构。它应该支持插入和删除特定元素，以及删除随机元素。</p><p>实现 <code>RandomizedCollection</code> 类:</p><ul><li><code>RandomizedCollection()</code>初始化空的 <code>RandomizedCollection</code> 对象。</li><li><code>bool insert(int val)</code> 将一个 <code>val</code> 项插入到集合中，即使该项已经存在。如果该项不存在，则返回 <code>true</code> ，否则返回 <code>false</code> 。</li><li><code>bool remove(int val)</code> 如果存在，从集合中移除一个 <code>val</code> 项。如果该项存在，则返回 <code>true</code> ，否则返回 <code>false</code> 。注意，如果 <code>val</code> 在集合中出现多次，我们只删除其中一个。</li><li><code>int getRandom()</code> 从当前的多个元素集合中返回一个随机元素。每个元素被返回的概率与集合中包含的相同值的数量 <strong>线性相关</strong> 。</li></ul><p>您必须实现类的函数，使每个函数的 <strong>平均</strong> 时间复杂度为 <code>O(1)</code> 。</p><p><strong>注意：</strong> 生成测试用例时，只有在 <code>RandomizedCollection</code> 中 <strong>至少有一项</strong> 时，才会调用 <code>getRandom</code> 。</p><p><strong>示例 1:</strong></p><blockquote><p><strong>输入</strong></p><p>[&quot;RandomizedCollection&quot;, &quot;insert&quot;, &quot;insert&quot;, &quot;insert&quot;, &quot;getRandom&quot;, &quot;remove&quot;, &quot;getRandom&quot;]</p><p>[[], [1], [1], [2], [], [1], []]</p><p><strong>输出</strong></p><p>[null, true, false, true, 2, true, 1]</p><p><strong>解释</strong></p><p>RandomizedCollection collection = new RandomizedCollection();// 初始化一个空的集合。</p><p>collection.insert(1); // 返回 true，因为集合不包含 1。</p><p>// 将 1 插入到集合中。</p><p>collection.insert(1); // 返回 false，因为集合包含 1。</p><p>// 将另一个 1 插入到集合中。集合现在包含 [1,1]。</p><p>collection.insert(2); // 返回 true，因为集合不包含 2。</p><p>// 将 2 插入到集合中。集合现在包含 [1,1,2]。</p><p>collection.getRandom(); // getRandom 应当:</p><p>// 有 2/3 的概率返回 1,</p><p>// 1/3 的概率返回 2。</p><p>collection.remove(1); // 返回 true，因为集合包含 1。</p><p>// 从集合中移除 1。集合现在包含 [1,2]。</p><p>collection.getRandom(); // getRandom 应该返回 1 或 2，两者的可能性相同。</p></blockquote><p><strong>提示:</strong></p><ul><li><code>-2^31 &lt;= val &lt;= 2^31 - 1</code></li><li><code>insert</code>, <code>remove</code> 和 <code>getRandom</code> 最多 <strong>总共</strong> 被调用 <code>2 * 10^5</code> 次</li><li>当调用 <code>getRandom</code> 时，数据结构中 <strong>至少有一个</strong> 元素</li></ul><h2 id="解题思路" tabindex="-1"><a class="header-anchor" href="#解题思路" aria-hidden="true">#</a> 解题思路</h2><p>我们需要支持 <strong>O(1) 的插入、删除和随机访问</strong>，因此采用：</p><ul><li><strong>数组 <code>elements</code></strong>：用于存储所有插入的元素，方便 <code>getRandom()</code> 通过索引 <strong>O(1)</strong> 获取随机元素。</li><li><strong>哈希表 <code>indicesMap</code></strong>（<code>Map&lt;number, Set&lt;number&gt;&gt;</code>）： <ul><li><strong>key</strong>: 存储元素值</li><li><strong>value</strong>: 该值在数组 <code>elements</code> 中的所有索引集合（<code>Set</code>）。</li><li><strong>为什么用 <code>Set</code>?</strong> 允许相同的 <code>val</code> 多次插入，并且删除操作仍然保持 O(1) 复杂度。</li></ul></li></ul><h4 id="_1-insert-val" tabindex="-1"><a class="header-anchor" href="#_1-insert-val" aria-hidden="true">#</a> 1. <code>insert(val)</code></h4><ol><li>先检查 <code>val</code> 是否已经存在于 <code>indicesMap</code>。</li><li>将 <code>val</code> 添加到 <code>elements</code> 数组的 <strong>末尾</strong>。</li><li>在 <code>indicesMap</code> 里 <strong>记录索引</strong>： <ul><li>如果 <code>val</code> 不存在，创建 <code>Set</code> 存储索引。</li><li>如果 <code>val</code> 已存在，直接将新索引加入 <code>Set</code>。</li></ul></li><li><strong>返回</strong> <code>val</code> 是否是第一次插入（<code>true</code> 或 <code>false</code>）。</li></ol><ul><li><strong>时间复杂度：O(1)</strong>，因为 <code>数组 push</code> 和 <code>Map 操作</code> 皆为 O(1)。</li></ul><hr><h4 id="_2-remove-val" tabindex="-1"><a class="header-anchor" href="#_2-remove-val" aria-hidden="true">#</a> 2. <code>remove(val)</code></h4><ol><li>先检查 <code>val</code> 是否存在于 <code>indicesMap</code>，如果不存在直接返回 <code>false</code>。</li><li>找到 <code>val</code> 在数组中的某个索引 <code>removeIndex</code>。</li><li>获取 <code>elements</code> <strong>最后一个元素</strong> <code>lastElement</code>，准备 <strong>将其移动到 <code>removeIndex</code> 位置</strong>（避免数组 <code>splice</code> 操作，保证 O(1)）。</li><li><strong>替换 <code>val</code></strong><ul><li><code>elements[removeIndex] = lastElement</code> （将最后一个元素移动到 <code>val</code> 的位置）</li><li><code>elements.pop()</code> 删除最后一个元素</li></ul></li><li>更新 <code>indicesMap</code><ul><li><strong>删除 <code>removeIndex</code></strong>，如果 <code>val</code> 没有索引了，从 <code>Map</code> 中删除。</li><li><strong>更新 <code>lastElement</code> 的索引</strong>（如果 <code>lastElement</code> 不是 <code>val</code> 本身）。</li></ul></li><li>返回 <code>true</code>，表示成功删除。</li></ol><ul><li><strong>时间复杂度：O(1)</strong>，因为： <ul><li>获取索引是 O(1) (<code>Set.values().next().value</code>)</li><li>替换索引是 O(1)</li><li><code>elements.pop()</code> 是 O(1)</li><li><code>Map</code> 操作是 O(1)</li></ul></li></ul><h4 id="_3-getrandom" tabindex="-1"><a class="header-anchor" href="#_3-getrandom" aria-hidden="true">#</a> 3. <code>getRandom()</code></h4><ol><li>生成 <code>[0, elements.length - 1]</code> 之间的随机索引。</li><li>返回 <code>elements[randomIndex]</code>。</li></ol><ul><li><strong>时间复杂度：O(1)</strong>，因为数组随机访问是 O(1)。</li></ul><h4 id="复杂度分析" tabindex="-1"><a class="header-anchor" href="#复杂度分析" aria-hidden="true">#</a> 复杂度分析</h4><ul><li><strong>时间复杂度</strong>：<code>O(1)</code>，<code> insert</code>, <code>remove </code> 和 <code>getRandom</code> 都是<code>O(1)</code>时间复杂度。</li><li><strong>空间复杂度</strong>：<code>O(n)</code>，使用了一个数组和一个哈希表存储元素及其索引。</li></ul><h2 id="代码" tabindex="-1"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">RandomizedCollection</span> <span class="token punctuation">{</span>
	<span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span>elements <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 存储所有插入的元素</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span>indicesMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Map&lt;number, Set&lt;number&gt;&gt;，存储每个值的索引集合</span>
	<span class="token punctuation">}</span>

	<span class="token doc-comment comment">/**
	 * 插入一个值到集合中
	 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">}</span></span> <span class="token parameter">val</span>
	 * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>boolean<span class="token punctuation">}</span></span> 是否是第一次插入
	 */</span>
	<span class="token function">insert</span><span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">const</span> exists <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>indicesMap<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 记录 val 是否已经存在</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span>elements<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 将 val 添加到数组末尾</span>

		<span class="token comment">// 在哈希表中记录 val 对应的索引</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>exists<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">this</span><span class="token punctuation">.</span>indicesMap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>val<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span>indicesMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>elements<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

		<span class="token keyword">return</span> <span class="token operator">!</span>exists<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token doc-comment comment">/**
	 * 从集合中删除一个值
	 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">}</span></span> <span class="token parameter">val</span>
	 * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>boolean<span class="token punctuation">}</span></span> 是否删除成功
	 */</span>
	<span class="token function">remove</span><span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>indicesMap<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment">// 若 val 不存在，直接返回 false</span>

		<span class="token keyword">const</span> lastIndex <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>elements<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 获取数组最后一个元素的索引</span>
		<span class="token keyword">const</span> valIndices <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>indicesMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 获取 val 所在的索引集合</span>
		<span class="token keyword">const</span> removeIndex <span class="token operator">=</span> valIndices<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span> <span class="token comment">// 取出 val 在数组中的某个索引</span>

		<span class="token keyword">const</span> lastElement <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>elements<span class="token punctuation">[</span>lastIndex<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 获取数组的最后一个元素</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span>elements<span class="token punctuation">[</span>removeIndex<span class="token punctuation">]</span> <span class="token operator">=</span> lastElement<span class="token punctuation">;</span> <span class="token comment">// 用最后一个元素覆盖待删除元素</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span>elements<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 删除数组最后一个元素</span>

		<span class="token comment">// 更新 val 的索引集合</span>
		valIndices<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>removeIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>valIndices<span class="token punctuation">.</span>size <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">this</span><span class="token punctuation">.</span>indicesMap<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 若 val 没有索引了，从 Map 中删除</span>

		<span class="token comment">// 若被替换的元素 lastElement 不是 val，则需要更新 lastElement 的索引</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>removeIndex <span class="token operator">!==</span> lastIndex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">const</span> lastIndices <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>indicesMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>lastElement<span class="token punctuation">)</span><span class="token punctuation">;</span>
			lastIndices<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>lastIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>
			lastIndices<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>removeIndex<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 更新 lastElement 在数组中的位置</span>
		<span class="token punctuation">}</span>

		<span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token doc-comment comment">/**
	 * 随机获取一个元素
	 * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">}</span></span> 随机返回集合中的一个元素
	 */</span>
	<span class="token function">getRandom</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">const</span> randomIndex <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token keyword">this</span><span class="token punctuation">.</span>elements<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>elements<span class="token punctuation">[</span>randomIndex<span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token doc-comment comment">/**
 * Your RandomizedCollection object will be instantiated and called as such:
 * var obj = new RandomizedCollection()
 * var param_1 = obj.insert(val)
 * var param_2 = obj.remove(val)
 * var param_3 = obj.getRandom()
 */</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="相关题目" tabindex="-1"><a class="header-anchor" href="#相关题目" aria-hidden="true">#</a> 相关题目</h2>`,38),C=n("thead",null,[n("tr",null,[n("th",{style:{"text-align":"center"}},"题号"),n("th",{style:{"text-align":"left"}},"标题"),n("th",{style:{"text-align":"center"}},"题解"),n("th",{style:{"text-align":"left"}},"标签"),n("th",{style:{"text-align":"center"}},"难度"),n("th",{style:{"text-align":"center"}},"力扣")])],-1),q=n("td",{style:{"text-align":"center"}},"380",-1),I=n("td",{style:{"text-align":"left"}},"O(1) 时间插入、删除和获取随机元素",-1),z={style:{"text-align":"center"}},M={style:{"text-align":"left"}},O=n("code",null,"设计",-1),E=n("code",null,"数组",-1),j=n("code",null,"哈希表",-1),S=n("code",null,"2+",-1),N=n("td",{style:{"text-align":"center"}},"🟠",-1),L={style:{"text-align":"center"}},V={href:"https://leetcode.cn/problems/insert-delete-getrandom-o1",target:"_blank",rel:"noopener noreferrer"},T={href:"https://leetcode.com/problems/insert-delete-getrandom-o1",target:"_blank",rel:"noopener noreferrer"};function B(Y,A){const l=c("font"),t=c("RouterLink"),o=c("ExternalLinkIcon");return i(),d("div",null,[k,n("p",null,[s("🔴 "),e(l,{color:"#ff334b"},{default:a(()=>[s("Hard")]),_:1}),s("  🔖  "),e(t,{to:"/tag/design.html"},{default:a(()=>[v]),_:1}),s(),e(t,{to:"/tag/array.html"},{default:a(()=>[h]),_:1}),s(),e(t,{to:"/tag/hash-table.html"},{default:a(()=>[g]),_:1}),s(),e(t,{to:"/tag/math.html"},{default:a(()=>[b]),_:1}),s(),e(t,{to:"/tag/randomized.html"},{default:a(()=>[f]),_:1}),s("  🔗 "),n("a",_,[y,e(o)]),s(),n("a",w,[x,e(o)])]),R,u(" prettier-ignore "),n("table",null,[C,n("tbody",null,[n("tr",null,[q,I,n("td",z,[e(t,{to:"/problem/0380.html"},{default:a(()=>[s("[✓]")]),_:1})]),n("td",M,[e(t,{to:"/tag/design.html"},{default:a(()=>[O]),_:1}),s(),e(t,{to:"/tag/array.html"},{default:a(()=>[E]),_:1}),s(),e(t,{to:"/tag/hash-table.html"},{default:a(()=>[j]),_:1}),s(),S]),N,n("td",L,[n("a",V,[s("🀄️"),e(o)]),s(),n("a",T,[s("🔗"),e(o)])])])])])])}const D=p(m,[["render",B],["__file","0381.html.vue"]]);export{D as default};
