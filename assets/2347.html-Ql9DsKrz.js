import{_ as r,r as c,o as u,c as l,a as n,b as t,d as s,w as a,f as i,e as d}from"./app-fBVbqwGY.js";const k={},h=n("h1",{id:"_2347-最好的扑克手牌",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_2347-最好的扑克手牌","aria-hidden":"true"},"#"),t(" 2347. 最好的扑克手牌")],-1),q=n("code",null,"数组",-1),g=n("code",null,"哈希表",-1),m=n("code",null,"计数",-1),f={href:"https://leetcode.cn/problems/best-poker-hand",target:"_blank",rel:"noopener noreferrer"},b=n("code",null,"力扣",-1),_={href:"https://leetcode.com/problems/best-poker-hand",target:"_blank",rel:"noopener noreferrer"},v=n("code",null,"LeetCode",-1),x=d(`<h2 id="题目" tabindex="-1"><a class="header-anchor" href="#题目" aria-hidden="true">#</a> 题目</h2><p>You are given an integer array <code>ranks</code> and a character array <code>suits</code>. You have <code>5</code> cards where the <code>ith</code> card has a rank of <code>ranks[i]</code> and a suit of <code>suits[i]</code>.</p><p>The following are the types of <strong>poker hands</strong> you can make from best to worst:</p><ol><li><code>&quot;Flush&quot;</code>: Five cards of the same suit.</li><li><code>&quot;Three of a Kind&quot;</code>: Three cards of the same rank.</li><li><code>&quot;Pair&quot;</code>: Two cards of the same rank.</li><li><code>&quot;High Card&quot;</code>: Any single card.</li></ol><p>Return <em>a string representing the <strong>best</strong> type of <strong>poker hand</strong> you can make with the given cards.</em></p><p><strong>Note</strong> that the return values are <strong>case-sensitive</strong>.</p><p><strong>Example 1:</strong></p><blockquote><p>Input: ranks = [13,2,3,1,9], suits = [&quot;a&quot;,&quot;a&quot;,&quot;a&quot;,&quot;a&quot;,&quot;a&quot;]</p><p>Output: &quot;Flush&quot;</p><p>Explanation: The hand with all the cards consists of 5 cards with the same suit, so we have a &quot;Flush&quot;.</p></blockquote><p><strong>Example 2:</strong></p><blockquote><p>Input: ranks = [4,4,2,4,4], suits = [&quot;d&quot;,&quot;a&quot;,&quot;a&quot;,&quot;b&quot;,&quot;c&quot;]</p><p>Output: &quot;Three of a Kind&quot;</p><p>Explanation: The hand with the first, second, and fourth card consists of 3 cards with the same rank, so we have a &quot;Three of a Kind&quot;.</p><p>Note that we could also make a &quot;Pair&quot; hand but &quot;Three of a Kind&quot; is a better hand.</p><p>Also note that other cards could be used to make the &quot;Three of a Kind&quot; hand.</p></blockquote><p><strong>Example 3:</strong></p><blockquote><p>Input: ranks = [10,10,2,12,9], suits = [&quot;a&quot;,&quot;b&quot;,&quot;c&quot;,&quot;a&quot;,&quot;d&quot;]</p><p>Output: &quot;Pair&quot;</p><p>Explanation: The hand with the first and second card consists of 2 cards with the same rank, so we have a &quot;Pair&quot;.</p><p>Note that we cannot make a &quot;Flush&quot; or a &quot;Three of a Kind&quot;.</p></blockquote><p><strong>Constraints:</strong></p><ul><li><code>ranks.length == suits.length == 5</code></li><li><code>1 &lt;= ranks[i] &lt;= 13</code></li><li><code>&#39;a&#39; &lt;= suits[i] &lt;= &#39;d&#39;</code></li><li>No two cards have the same rank and suit.</li></ul><h2 id="题目大意" tabindex="-1"><a class="header-anchor" href="#题目大意" aria-hidden="true">#</a> 题目大意</h2><p>给你一个整数数组 <code>ranks</code> 和一个字符数组 <code>suit</code> 。你有 <code>5</code> 张扑克牌，第 <code>i</code> 张牌大小为 <code>ranks[i]</code> ，花色为 <code>suits[i]</code> 。</p><p>下述是从好到坏你可能持有的 <strong>手牌类型</strong>：</p><ol><li><code>&quot;Flush&quot;</code>：同花，五张相同花色的扑克牌。</li><li><code>&quot;Three of a Kind&quot;</code>：三条，有 3 张大小相同的扑克牌。</li><li><code>&quot;Pair&quot;</code>：对子，两张大小一样的扑克牌。</li><li><code>&quot;High Card&quot;</code>：高牌，五张大小互不相同的扑克牌。</li></ol><p>请你返回一个字符串，表示给定的 5 张牌中，你能组成的 <strong>最好手牌类型</strong> 。</p><p><strong>注意：</strong> 返回的字符串 <strong>大小写</strong> 需与题目描述相同。</p><p><strong>示例 1：</strong></p><blockquote><p><strong>输入：</strong> ranks = [13,2,3,1,9], suits = [&quot;a&quot;,&quot;a&quot;,&quot;a&quot;,&quot;a&quot;,&quot;a&quot;]</p><p><strong>输出：</strong> &quot;Flush&quot;</p><p><strong>解释：</strong> 5 张扑克牌的花色相同，所以返回 &quot;Flush&quot; 。</p></blockquote><p><strong>示例 2：</strong></p><blockquote><p><strong>输入：</strong> ranks = [4,4,2,4,4], suits = [&quot;d&quot;,&quot;a&quot;,&quot;a&quot;,&quot;b&quot;,&quot;c&quot;]</p><p><strong>输出：</strong> &quot;Three of a Kind&quot;</p><p><strong>解释：</strong> 第一、二和四张牌组成三张相同大小的扑克牌，所以得到 &quot;Three of a Kind&quot; 。</p><p>注意我们也可以得到 &quot;Pair&quot; ，但是 &quot;Three of a Kind&quot; 是更好的手牌类型。</p><p>有其他的 3 张牌也可以组成 &quot;Three of a Kind&quot; 手牌类型。</p></blockquote><p><strong>示例 3：</strong></p><blockquote><p><strong>输入：</strong> ranks = [10,10,2,12,9], suits = [&quot;a&quot;,&quot;b&quot;,&quot;c&quot;,&quot;a&quot;,&quot;d&quot;]</p><p><strong>输出：</strong> &quot;Pair&quot;</p><p><strong>解释：</strong> 第一和第二张牌大小相同，所以得到 &quot;Pair&quot; 。</p><p>我们无法得到 &quot;Flush&quot; 或者 &quot;Three of a Kind&quot; 。</p></blockquote><p><strong>提示：</strong></p><ul><li><code>ranks.length == suits.length == 5</code></li><li><code>1 &lt;= ranks[i] &lt;= 13</code></li><li><code>&#39;a&#39; &lt;= suits[i] &lt;= &#39;d&#39;</code></li><li>任意两张扑克牌不会同时有相同的大小和花色。</li></ul><h2 id="解题思路" tabindex="-1"><a class="header-anchor" href="#解题思路" aria-hidden="true">#</a> 解题思路</h2><ol><li><p><strong>判断是否是 Flush</strong>：</p><ul><li>使用 <code>Set</code> 统计 <code>suits</code> 中的花色种类数量。如果 <code>Set</code> 的大小为 <code>1</code>，说明所有花色相同，直接返回 <code>&quot;Flush&quot;</code>。</li></ul></li><li><p><strong>统计点数频率</strong>：</p><ul><li>使用 <code>Map</code> 统计 <code>ranks</code> 中每种点数出现的次数。</li><li>计算点数的最大频率 <code>maxFreq</code>，用于判断其他手牌类型。</li></ul></li><li><p><strong>判断手牌类型</strong>：</p><ul><li>如果 <code>maxFreq &gt;= 3</code>，说明存在至少三张点数相同的牌，返回 <code>&quot;Three of a Kind&quot;</code>。</li><li>如果 <code>maxFreq == 2</code>，说明存在两张点数相同的牌，返回 <code>&quot;Pair&quot;</code>。</li><li>如果 <code>maxFreq == 1</code>，说明没有任何点数重复，返回 <code>&quot;High Card&quot;</code>。</li></ul></li></ol><h4 id="复杂度分析" tabindex="-1"><a class="header-anchor" href="#复杂度分析" aria-hidden="true">#</a> 复杂度分析</h4><ul><li><p><strong>时间复杂度</strong>：<code>O(1)</code></p><ul><li><strong>计算花色种类</strong>：<code>O(5)</code>，因为 <code>suits</code> 的长度为 5。</li><li><strong>统计点数频率</strong>：<code>O(5)</code>，因为 <code>ranks</code> 的长度为 5。</li><li><strong>计算最大频率</strong>：<code>O(5)</code>，因为 <code>ranksFreq.values()</code> 的长度不会超过 5。</li></ul></li><li><p><strong>空间复杂度</strong>：<code>O(1)</code>，使用了 <code>Set</code> 和 <code>Map</code>，大小为 <code>O(5) = O(1)</code>。</p></li></ul><h2 id="代码" tabindex="-1"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span> <span class="token parameter">ranks</span>
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>character<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span> <span class="token parameter">suits</span>
 * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>string<span class="token punctuation">}</span></span>
 */</span>
<span class="token keyword">var</span> <span class="token function-variable function">bestHand</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">ranks<span class="token punctuation">,</span> suits</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">let</span> suitsSet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span>suits<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>suitsSet<span class="token punctuation">.</span>size <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token string">&#39;Flush&#39;</span><span class="token punctuation">;</span>
	<span class="token keyword">let</span> ranksFreq <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> num <span class="token keyword">of</span> ranks<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		ranksFreq<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span> <span class="token punctuation">(</span>ranksFreq<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">const</span> maxFreq <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token operator">...</span>ranksFreq<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>maxFreq <span class="token operator">&gt;=</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token string">&#39;Three of a Kind&#39;</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>maxFreq <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token string">&#39;Pair&#39;</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token string">&#39;High Card&#39;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="相关题目" tabindex="-1"><a class="header-anchor" href="#相关题目" aria-hidden="true">#</a> 相关题目</h2>`,35),y=n("thead",null,[n("tr",null,[n("th",{style:{"text-align":"center"}},"题号"),n("th",{style:{"text-align":"left"}},"标题"),n("th",{style:{"text-align":"center"}},"题解"),n("th",{style:{"text-align":"left"}},"标签"),n("th",{style:{"text-align":"center"}},"难度"),n("th",{style:{"text-align":"center"}},"力扣")])],-1),w=n("td",{style:{"text-align":"center"}},"2525",-1),F=n("td",{style:{"text-align":"left"}},"根据规则将箱子分类",-1),T=n("td",{style:{"text-align":"center"}},null,-1),K={style:{"text-align":"left"}},E=n("code",null,"数学",-1),O=n("td",{style:{"text-align":"center"}},"🟢",-1),P={style:{"text-align":"center"}},C={href:"https://leetcode.cn/problems/categorize-box-according-to-criteria",target:"_blank",rel:"noopener noreferrer"},N={href:"https://leetcode.com/problems/categorize-box-according-to-criteria",target:"_blank",rel:"noopener noreferrer"};function S(H,I){const p=c("font"),o=c("RouterLink"),e=c("ExternalLinkIcon");return u(),l("div",null,[h,n("p",null,[t("🟢 "),s(p,{color:"#15bd66"},{default:a(()=>[t("Easy")]),_:1}),t("  🔖  "),s(o,{to:"/tag/array.html"},{default:a(()=>[q]),_:1}),t(),s(o,{to:"/tag/hash-table.html"},{default:a(()=>[g]),_:1}),t(),s(o,{to:"/tag/counting.html"},{default:a(()=>[m]),_:1}),t("  🔗 "),n("a",f,[b,s(e)]),t(),n("a",_,[v,s(e)])]),x,i(" prettier-ignore "),n("table",null,[y,n("tbody",null,[n("tr",null,[w,F,T,n("td",K,[s(o,{to:"/tag/math.html"},{default:a(()=>[E]),_:1})]),O,n("td",P,[n("a",C,[t("🀄️"),s(e)]),t(),n("a",N,[t("🔗"),s(e)])])])])])])}const V=r(k,[["render",S],["__file","2347.html.vue"]]);export{V as default};
