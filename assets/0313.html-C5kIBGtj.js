import{_ as l,r as p,o as i,c as r,a as n,b as s,d as a,w as t,f as u,e as d}from"./app-aQeLbVW9.js";const k={},m=n("h1",{id:"_313-超级丑数",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_313-超级丑数","aria-hidden":"true"},"#"),s(" 313. 超级丑数")],-1),g=n("code",null,"数组",-1),h=n("code",null,"数学",-1),b=n("code",null,"动态规划",-1),_={href:"https://leetcode.cn/problems/super-ugly-number",target:"_blank",rel:"noopener noreferrer"},v=n("code",null,"力扣",-1),f={href:"https://leetcode.com/problems/super-ugly-number",target:"_blank",rel:"noopener noreferrer"},y=n("code",null,"LeetCode",-1),x=d(`<h2 id="题目" tabindex="-1"><a class="header-anchor" href="#题目" aria-hidden="true">#</a> 题目</h2><p>A <strong>super ugly number</strong> is a positive integer whose prime factors are in the array <code>primes</code>.</p><p>Given an integer <code>n</code> and an array of integers <code>primes</code>, return <em>the</em> <code>nth</code><em><strong>super ugly number</strong></em>.</p><p>The <code>nth</code> <strong>super ugly number</strong> is <strong>guaranteed</strong> to fit in a <strong>32-bit</strong> signed integer.</p><p><strong>Example 1:</strong></p><blockquote><p>Input: n = 12, primes = [2,7,13,19]</p><p>Output: 32</p><p>Explanation: [1,2,4,7,8,13,14,16,19,26,28,32] is the sequence of the first 12 super ugly numbers given primes = [2,7,13,19].</p></blockquote><p><strong>Example 2:</strong></p><blockquote><p>Input: n = 1, primes = [2,3,5]</p><p>Output: 1</p><p>Explanation: 1 has no prime factors, therefore all of its prime factors are in the array primes = [2,3,5].</p></blockquote><p><strong>Constraints:</strong></p><ul><li><code>1 &lt;= n &lt;= 10^5</code></li><li><code>1 &lt;= primes.length &lt;= 100</code></li><li><code>2 &lt;= primes[i] &lt;= 1000</code></li><li><code>primes[i]</code> is <strong>guaranteed</strong> to be a prime number.</li><li>All the values of <code>primes</code> are <strong>unique</strong> and sorted in <strong>ascending order</strong>.</li></ul><h2 id="题目大意" tabindex="-1"><a class="header-anchor" href="#题目大意" aria-hidden="true">#</a> 题目大意</h2><p><strong>超级丑数</strong> 是一个正整数，并满足其所有质因数都出现在质数数组 <code>primes</code> 中。</p><p>给你一个整数 <code>n</code> 和一个整数数组 <code>primes</code> ，返回第 <code>n</code> 个 <strong>超级丑数</strong> 。</p><p>题目数据保证第 <code>n</code> 个 <strong>超级丑数</strong> 在 <strong>32-bit</strong> 带符号整数范围内。</p><p><strong>示例 1：</strong></p><blockquote><p><strong>输入：</strong> n = 12, primes = [2,7,13,19]</p><p><strong>输出：</strong> 32</p><p><strong>解释：</strong> 给定长度为 4 的质数数组 primes = [2,7,13,19]，前 12 个超级丑数序列为：[1,2,4,7,8,13,14,16,19,26,28,32] 。</p></blockquote><p><strong>示例 2：</strong></p><blockquote><p><strong>输入：</strong> n = 1, primes = [2,3,5]</p><p><strong>输出：</strong> 1</p><p><strong>解释：</strong> 1 不含质因数，因此它的所有质因数都在质数数组 primes = [2,3,5] 中。</p></blockquote><p><strong>提示：</strong></p><ul><li><code>1 &lt;= n &lt;= 10^5</code></li><li><code>1 &lt;= primes.length &lt;= 100</code></li><li><code>2 &lt;= primes[i] &lt;= 1000</code></li><li>题目数据<strong>保证</strong> <code>primes[i]</code> 是一个质数</li><li><code>primes</code> 中的所有值都 <strong>互不相同</strong> ，且按 <strong>递增顺序</strong> 排列</li></ul><h2 id="解题思路" tabindex="-1"><a class="header-anchor" href="#解题思路" aria-hidden="true">#</a> 解题思路</h2><p>这道题是对 <strong>丑数问题</strong> 的拓展，利用动态规划和多指针法来生成超级丑数。核心思想是不断计算当前的最小丑数并扩展出新的丑数。</p><ol><li><p><strong>定义状态</strong>：</p><ul><li><code>dp[i]</code> 表示第 <code>i+1</code> 个超级丑数。</li><li>初始化 <code>dp[0] = 1</code>。</li></ul></li><li><p><strong>多指针数组</strong>：</p><ul><li>使用一个数组 <code>idx</code>，<code>idx[j]</code> 表示质因子 <code>primes[j]</code> 对应的指针在 <code>dp</code> 中的索引位置。</li><li>初始时 <code>idx = [0, 0, ..., 0]</code>。</li></ul></li><li><p><strong>当前丑数的生成</strong>：</p><ul><li>对每个质因子 <code>primes[j]</code>，计算其生成的丑数：<br><code>uglyNums[j] = dp[idx[j]] * primes[j]</code>。</li></ul></li><li><p><strong>选取最小值</strong>：</p><ul><li>当前的超级丑数是 <code>ugly = Math.min(...uglyNums)</code>。</li></ul></li><li><p><strong>更新指针</strong>：</p><ul><li>如果某个 <code>uglyNums[j]</code> 等于当前的 <code>ugly</code>，则增加 <code>idx[j]</code>，表示 <code>primes[j]</code> 的指针向右移动。</li></ul></li><li><p><strong>重复计算</strong>：</p><ul><li>不断重复上述过程，直到找到第 <code>n</code> 个超级丑数。</li></ul></li></ol><h4 id="复杂度分析" tabindex="-1"><a class="header-anchor" href="#复杂度分析" aria-hidden="true">#</a> 复杂度分析</h4><ul><li><strong>时间复杂度</strong>：<code>O(n * m)</code>，动态规划计算 <code>n</code> 个超级丑数，每次需要从 <code>m</code> 个质因子中找到最小值。</li><li><strong>空间复杂度</strong>：<code>O(n + m)</code>，需要存储动态规划数组 <code>dp</code> 和辅助数组 <code>idx</code>、<code>uglyNums</code>。</li></ul><h2 id="代码" tabindex="-1"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">}</span></span> <span class="token parameter">n</span>
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span> <span class="token parameter">primes</span>
 * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">}</span></span>
 */</span>
<span class="token keyword">var</span> <span class="token function-variable function">nthSuperUglyNumber</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">n<span class="token punctuation">,</span> primes</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">const</span> m <span class="token operator">=</span> primes<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
	<span class="token keyword">const</span> dp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 动态规划数组</span>
	<span class="token keyword">const</span> idx <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 每个质因子的指针</span>
	<span class="token keyword">const</span> uglyNums <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 每个质因子当前对应的丑数</span>

	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token comment">// 找到当前的最小丑数</span>
		<span class="token keyword">const</span> ugly <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token operator">...</span>uglyNums<span class="token punctuation">)</span><span class="token punctuation">;</span>
		dp<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>ugly<span class="token punctuation">)</span><span class="token punctuation">;</span>

		<span class="token comment">// 更新指针和对应丑数</span>
		<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span>uglyNums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">===</span> ugly<span class="token punctuation">)</span> <span class="token punctuation">{</span>
				uglyNums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>idx<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">*</span> primes<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
				idx<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">return</span> dp<span class="token punctuation">[</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="相关题目" tabindex="-1"><a class="header-anchor" href="#相关题目" aria-hidden="true">#</a> 相关题目</h2>`,28),w=n("thead",null,[n("tr",null,[n("th",{style:{"text-align":"center"}},"题号"),n("th",{style:{"text-align":"left"}},"标题"),n("th",{style:{"text-align":"center"}},"题解"),n("th",{style:{"text-align":"left"}},"标签"),n("th",{style:{"text-align":"center"}},"难度"),n("th",{style:{"text-align":"center"}},"力扣")])],-1),j=n("td",{style:{"text-align":"center"}},"264",-1),N=n("td",{style:{"text-align":"left"}},"丑数 II",-1),q={style:{"text-align":"center"}},E={style:{"text-align":"left"}},I=n("code",null,"哈希表",-1),C=n("code",null,"数学",-1),L=n("code",null,"动态规划",-1),V=n("code",null,"1+",-1),A=n("td",{style:{"text-align":"center"}},"🟠",-1),O={style:{"text-align":"center"}},B={href:"https://leetcode.cn/problems/ugly-number-ii",target:"_blank",rel:"noopener noreferrer"},M={href:"https://leetcode.com/problems/ugly-number-ii",target:"_blank",rel:"noopener noreferrer"};function R(S,T){const c=p("font"),e=p("RouterLink"),o=p("ExternalLinkIcon");return i(),r("div",null,[m,n("p",null,[s("🟠 "),a(c,{color:"#ffb800"},{default:t(()=>[s("Medium")]),_:1}),s("  🔖  "),a(e,{to:"/tag/array.html"},{default:t(()=>[g]),_:1}),s(),a(e,{to:"/tag/math.html"},{default:t(()=>[h]),_:1}),s(),a(e,{to:"/tag/dynamic-programming.html"},{default:t(()=>[b]),_:1}),s("  🔗 "),n("a",_,[v,a(o)]),s(),n("a",f,[y,a(o)])]),x,u(" prettier-ignore "),n("table",null,[w,n("tbody",null,[n("tr",null,[j,N,n("td",q,[a(e,{to:"/problem/0264.html"},{default:t(()=>[s("[✓]")]),_:1})]),n("td",E,[a(e,{to:"/tag/hash-table.html"},{default:t(()=>[I]),_:1}),s(),a(e,{to:"/tag/math.html"},{default:t(()=>[C]),_:1}),s(),a(e,{to:"/tag/dynamic-programming.html"},{default:t(()=>[L]),_:1}),s(),V]),A,n("td",O,[n("a",B,[s("🀄️"),a(o)]),s(),n("a",M,[s("🔗"),a(o)])])])])])])}const U=l(k,[["render",R],["__file","0313.html.vue"]]);export{U as default};
