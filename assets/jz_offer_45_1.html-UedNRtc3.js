import{_ as l,r as e,o as r,c as i,a as n,b as s,d as a,w as o,e as d}from"./app-fBVbqwGY.js";const u={},k=n("h1",{id:"_45-把数组排成最小的数",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_45-把数组排成最小的数","aria-hidden":"true"},"#"),s(" 45. 把数组排成最小的数")],-1),h=n("code",null,"贪心",-1),m=n("code",null,"字符串",-1),g=n("code",null,"排序",-1),_={href:"https://leetcode.cn/problems/ba-shu-zu-pai-cheng-zui-xiao-de-shu-lcof",target:"_blank",rel:"noopener noreferrer"},b=n("code",null,"力扣",-1),v=d(`<h2 id="题目" tabindex="-1"><a class="header-anchor" href="#题目" aria-hidden="true">#</a> 题目</h2><p>闯关游戏需要破解一组密码，闯关组给出的有关密码的线索是：</p><ul><li>一个拥有密码所有元素的非负整数数组 <code>password</code></li><li>密码是 <code>password</code> 中所有元素拼接后得到的最小的一个数</li></ul><p>请编写一个程序返回这个密码。</p><p><strong>示例 1:</strong></p><blockquote><p><strong>输入:</strong> password = [15, 8, 7]</p><p><strong>输出:</strong> &quot;1578&quot;</p></blockquote><p><strong>示例 2:</strong></p><blockquote><p><strong>输入:</strong> password = [0, 3, 30, 34, 5, 9]</p><p><strong>输出:</strong> &quot;03033459&quot;</p></blockquote><p><strong>提示:</strong></p><ul><li><code>0 &lt; password.length &lt;= 100</code></li></ul><p><strong>说明:</strong></p><ul><li>输出结果可能非常大，所以你需要返回一个字符串而不是整数</li><li>拼接起来的数字可能会有前导 0，最后结果不需要去掉前导 0</li></ul><h2 id="解题思路" tabindex="-1"><a class="header-anchor" href="#解题思路" aria-hidden="true">#</a> 解题思路</h2><p>要解决这个问题，需要对数组中的元素进行排序，使得拼接后的结果最小，可以使用自定义排序规则来实现。</p><ol><li><strong>处理数组</strong>：将数组中的数字转换为字符串。</li><li><strong>自定义排序</strong>：定义一个比较函数，判断两个数的拼接顺序。对于任意两个字符串 <code>x</code> 和 <code>y</code>，我们将 <code>x</code> 和 <code>y</code> 拼接成两个不同的顺序（即 <code>xy</code> 和 <code>yx</code>），然后比较这两个拼接后的结果，决定它们的排序顺序。</li><li><strong>拼接结果</strong>：对排序后的数组进行拼接，形成最终的密码字符串。</li></ol><h4 id="复杂度分析" tabindex="-1"><a class="header-anchor" href="#复杂度分析" aria-hidden="true">#</a> 复杂度分析</h4><ul><li><strong>时间复杂度</strong>：<code>O(n log n)</code>，其中 <code>n</code> 是数组的长度。</li><li><strong>空间复杂度</strong>：<code>O(n)</code>，用于存储字符串数组。</li></ul><h2 id="代码" tabindex="-1"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span> <span class="token parameter">password</span>
 * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>string<span class="token punctuation">}</span></span>
 */</span>
<span class="token keyword">var</span> <span class="token function-variable function">crackPassword</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">password</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">// 将数字转换为字符串</span>
	<span class="token keyword">const</span> arr <span class="token operator">=</span> password<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>String<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token comment">// 自定义比较函数</span>
	arr<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span>a <span class="token operator">+</span> b <span class="token operator">&gt;</span> b <span class="token operator">+</span> a <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token comment">// 拼接结果</span>
	<span class="token keyword">return</span> arr<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,19);function f(x,w){const p=e("font"),t=e("RouterLink"),c=e("ExternalLinkIcon");return r(),i("div",null,[k,n("p",null,[s("🟠 "),a(p,{color:"#ffb800"},{default:o(()=>[s("Medium")]),_:1}),s("  🔖  "),a(t,{to:"/tag/greedy.html"},{default:o(()=>[h]),_:1}),s(),a(t,{to:"/tag/string.html"},{default:o(()=>[m]),_:1}),s(),a(t,{to:"/tag/sorting.html"},{default:o(()=>[g]),_:1}),s("  🔗 "),n("a",_,[b,a(c)])]),v])}const q=l(u,[["render",f],["__file","jz_offer_45_1.html.vue"]]);export{q as default};
