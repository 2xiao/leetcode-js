import{_ as l,r as p,o as i,c as r,a as n,b as s,d as t,w as a,f as u,e as d}from"./app-fBVbqwGY.js";const k={},m=n("h1",{id:"_1027-最长等差数列",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_1027-最长等差数列","aria-hidden":"true"},"#"),s(" 1027. 最长等差数列")],-1),h=n("code",null,"数组",-1),g=n("code",null,"哈希表",-1),f=n("code",null,"二分查找",-1),_=n("code",null,"动态规划",-1),b={href:"https://leetcode.cn/problems/longest-arithmetic-subsequence",target:"_blank",rel:"noopener noreferrer"},v=n("code",null,"力扣",-1),y={href:"https://leetcode.com/problems/longest-arithmetic-subsequence",target:"_blank",rel:"noopener noreferrer"},x=n("code",null,"LeetCode",-1),q=d(`<h2 id="题目" tabindex="-1"><a class="header-anchor" href="#题目" aria-hidden="true">#</a> 题目</h2><p>Given an array <code>nums</code> of integers, return <em>the length of the longest arithmetic subsequence in</em> <code>nums</code>.</p><p><strong>Note</strong> that:</p><ul><li>A <strong>subsequence</strong> is an array that can be derived from another array by deleting some or no elements without changing the order of the remaining elements.</li><li>A sequence <code>seq</code> is arithmetic if <code>seq[i + 1] - seq[i]</code> are all the same value (for <code>0 &lt;= i &lt; seq.length - 1</code>).</li></ul><p><strong>Example 1:</strong></p><blockquote><p>Input: nums = [3,6,9,12]</p><p>Output: 4</p><p>Explanation: The whole array is an arithmetic sequence with steps of length = 3.</p></blockquote><p><strong>Example 2:</strong></p><blockquote><p>Input: nums = [9,4,7,2,10]</p><p>Output: 3</p><p>Explanation: The longest arithmetic subsequence is [4,7,10].</p></blockquote><p><strong>Example 3:</strong></p><blockquote><p>Input: nums = [20,1,15,3,10,5,8]</p><p>Output: 4</p><p>Explanation: The longest arithmetic subsequence is [20,15,10,5].</p></blockquote><p><strong>Constraints:</strong></p><ul><li><code>2 &lt;= nums.length &lt;= 1000</code></li><li><code>0 &lt;= nums[i] &lt;= 500</code></li></ul><h2 id="题目大意" tabindex="-1"><a class="header-anchor" href="#题目大意" aria-hidden="true">#</a> 题目大意</h2><p>给你一个整数数组 <code>nums</code>，返回 <code>nums</code> 中最长等差子序列的<strong>长度</strong> 。</p><p>回想一下，<code>nums</code> 的子序列是一个列表 <code>nums[i1], nums[i2], ..., nums[ik]</code> ，且 <code>0 &lt;= i1 &lt; i2 &lt; ... &lt; ik &lt;= nums.length - 1</code>。并且如果 <code>seq[i+1] - seq[i]</code>( <code>0 &lt;= i &lt; seq.length - 1</code>) 的值都相同，那么序列 <code>seq</code> 是等差的。</p><p><strong>示例 1：</strong></p><blockquote><p><strong>输入：</strong> nums = [3,6,9,12]</p><p><strong>输出：</strong> 4</p><p><strong>解释：</strong></p><p>整个数组是公差为 3 的等差数列。</p></blockquote><p><strong>示例 2：</strong></p><blockquote><p><strong>输入：</strong> nums = [9,4,7,2,10]</p><p><strong>输出：</strong> 3</p><p><strong>解释：</strong></p><p>最长的等差子序列是 [4,7,10]。</p></blockquote><p><strong>示例 3：</strong></p><blockquote><p><strong>输入：</strong> nums = [20,1,15,3,10,5,8]</p><p><strong>输出：</strong> 4</p><p><strong>解释：</strong></p><p>最长的等差子序列是 [20,15,10,5]。</p></blockquote><p><strong>提示：</strong></p><ul><li><code>2 &lt;= nums.length &lt;= 1000</code></li><li><code>0 &lt;= nums[i] &lt;= 500</code></li></ul><h2 id="解题思路" tabindex="-1"><a class="header-anchor" href="#解题思路" aria-hidden="true">#</a> 解题思路</h2><ol><li><p><strong>定义状态 <code>dp[i][diff]</code></strong></p><ul><li><code>dp[i][diff]</code> 代表 <strong>以 <code>nums[i]</code> 结尾，公差为 <code>diff</code> 的最长等差子序列的长度</strong>。</li><li>我们用 <strong>哈希表 <code>Map</code> 代替二维数组</strong> 来存储 <code>(i, diff) -&gt; 长度</code> 关系，减少不必要的存储。</li></ul></li><li><p><strong>状态转移方程</strong></p><ul><li>枚举 <code>j &lt; i</code>，计算 <code>diff = nums[i] - nums[j]</code>： <ul><li>若 <code>dp[j][diff]</code> 存在，则 <code>dp[i][diff] = dp[j][diff] + 1</code></li><li>否则，<code>dp[i][diff] = 2</code>（默认至少包含 <code>nums[j]</code> 和 <code>nums[i]</code>）</li></ul></li></ul></li><li><p><strong>优化</strong></p><ul><li>由于 <code>dp[i][diff]</code> 只依赖于 <code>dp[j][diff]</code>，我们 <strong>直接用 <code>Map</code> 存储 <code>(索引 i, 公差 diff) -&gt; 最长长度</code></strong>。</li><li>这样可以 <strong>避免 <code>O(n^2)</code> 级别的二维数组存储开销</strong>，提升空间效率。</li></ul></li></ol><h4 id="复杂度分析" tabindex="-1"><a class="header-anchor" href="#复杂度分析" aria-hidden="true">#</a> 复杂度分析</h4><ul><li><strong>时间复杂度</strong>：<code>O(n^2)</code>，需要两层循环遍历所有 <code>(i, j)</code> 组合。</li><li><strong>空间复杂度</strong>：<code>O(n * d)</code>，其中 <code>d</code> 是 <code>nums[i] - nums[j]</code> 的取值范围，通常小于 <code>O(n^2)</code>，相比 <code>dp[i][diff]</code> 方式更节省空间。</li></ul><h2 id="代码" tabindex="-1"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span> <span class="token parameter">nums</span>
 * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">}</span></span>
 */</span>
<span class="token keyword">var</span> <span class="token function-variable function">longestArithSeqLength</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">nums</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">const</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">return</span> n<span class="token punctuation">;</span>

	<span class="token keyword">let</span> maxLen <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
	<span class="token keyword">const</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 只存储实际的 (索引, 差值) 组合</span>

	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">const</span> diff <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
			<span class="token keyword">const</span> key <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>i<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">,</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>diff<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span> <span class="token comment">// 组合索引和公差</span>
			dp<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token punctuation">(</span>dp<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>j<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">,</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>diff<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			maxLen <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>maxLen<span class="token punctuation">,</span> dp<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> maxLen<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="相关题目" tabindex="-1"><a class="header-anchor" href="#相关题目" aria-hidden="true">#</a> 相关题目</h2>`,30),w=n("thead",null,[n("tr",null,[n("th",{style:{"text-align":"center"}},"题号"),n("th",{style:{"text-align":"left"}},"标题"),n("th",{style:{"text-align":"center"}},"题解"),n("th",{style:{"text-align":"left"}},"标签"),n("th",{style:{"text-align":"center"}},"难度"),n("th",{style:{"text-align":"center"}},"力扣")])],-1),j=n("td",{style:{"text-align":"center"}},"2453",-1),L=n("td",{style:{"text-align":"left"}},"摧毁一系列目标",-1),E=n("td",{style:{"text-align":"center"}},null,-1),O={style:{"text-align":"left"}},N=n("code",null,"数组",-1),C=n("code",null,"哈希表",-1),I=n("code",null,"计数",-1),M=n("td",{style:{"text-align":"center"}},"🟠",-1),V={style:{"text-align":"center"}},T={href:"https://leetcode.cn/problems/destroy-sequential-targets",target:"_blank",rel:"noopener noreferrer"},$={href:"https://leetcode.com/problems/destroy-sequential-targets",target:"_blank",rel:"noopener noreferrer"};function A(B,R){const c=p("font"),e=p("RouterLink"),o=p("ExternalLinkIcon");return i(),r("div",null,[m,n("p",null,[s("🟠 "),t(c,{color:"#ffb800"},{default:a(()=>[s("Medium")]),_:1}),s("  🔖  "),t(e,{to:"/tag/array.html"},{default:a(()=>[h]),_:1}),s(),t(e,{to:"/tag/hash-table.html"},{default:a(()=>[g]),_:1}),s(),t(e,{to:"/tag/binary-search.html"},{default:a(()=>[f]),_:1}),s(),t(e,{to:"/tag/dynamic-programming.html"},{default:a(()=>[_]),_:1}),s("  🔗 "),n("a",b,[v,t(o)]),s(),n("a",y,[x,t(o)])]),q,u(" prettier-ignore "),n("table",null,[w,n("tbody",null,[n("tr",null,[j,L,E,n("td",O,[t(e,{to:"/tag/array.html"},{default:a(()=>[N]),_:1}),s(),t(e,{to:"/tag/hash-table.html"},{default:a(()=>[C]),_:1}),s(),t(e,{to:"/tag/counting.html"},{default:a(()=>[I]),_:1})]),M,n("td",V,[n("a",T,[s("🀄️"),t(o)]),s(),n("a",$,[s("🔗"),t(o)])])])])])])}const G=l(k,[["render",A],["__file","1027.html.vue"]]);export{G as default};
