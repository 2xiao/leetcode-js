import{_ as l,r as a,o as u,c as i,a as n,b as s,d as t,w as e,e as r}from"./app-aQeLbVW9.js";const d={},k=n("h1",{id:"_1694-重新格式化电话号码",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_1694-重新格式化电话号码","aria-hidden":"true"},"#"),s(" 1694. 重新格式化电话号码")],-1),g=n("code",null,"字符串",-1),m={href:"https://leetcode.cn/problems/reformat-phone-number",target:"_blank",rel:"noopener noreferrer"},b=n("code",null,"力扣",-1),h={href:"https://leetcode.com/problems/reformat-phone-number",target:"_blank",rel:"noopener noreferrer"},q=n("code",null,"LeetCode",-1),v=r(`<h2 id="题目" tabindex="-1"><a class="header-anchor" href="#题目" aria-hidden="true">#</a> 题目</h2><p>You are given a phone number as a string <code>number</code>. <code>number</code> consists of digits, spaces <code>&#39; &#39;</code>, and/or dashes <code>&#39;-&#39;</code>.</p><p>You would like to reformat the phone number in a certain manner. Firstly, <strong>remove</strong> all spaces and dashes. Then, <strong>group</strong> the digits from left to right into blocks of length 3 <strong>until</strong> there are 4 or fewer digits. The final digits are then grouped as follows:</p><ul><li>2 digits: A single block of length 2.</li><li>3 digits: A single block of length 3.</li><li>4 digits: Two blocks of length 2 each.</li></ul><p>The blocks are then joined by dashes. Notice that the reformatting process should <strong>never</strong> produce any blocks of length 1 and produce <strong>at most</strong> two blocks of length 2.</p><p>Return <em>the phone number after formatting.</em></p><p><strong>Example 1:</strong></p><blockquote><p>Input: number = &quot;1-23-45 6&quot;</p><p>Output: &quot;123-456&quot;</p><p>Explanation: The digits are &quot;123456&quot;.</p><p>Step 1: There are more than 4 digits, so group the next 3 digits. The 1st block is &quot;123&quot;.</p><p>Step 2: There are 3 digits remaining, so put them in a single block of length 3. The 2nd block is &quot;456&quot;.</p><p>Joining the blocks gives &quot;123-456&quot;.</p></blockquote><p><strong>Example 2:</strong></p><blockquote><p>Input: number = &quot;123 4-567&quot;</p><p>Output: &quot;123-45-67&quot;</p><p>Explanation: The digits are &quot;1234567&quot;.</p><p>Step 1: There are more than 4 digits, so group the next 3 digits. The 1st block is &quot;123&quot;.</p><p>Step 2: There are 4 digits left, so split them into two blocks of length 2. The blocks are &quot;45&quot; and &quot;67&quot;.</p><p>Joining the blocks gives &quot;123-45-67&quot;.</p></blockquote><p><strong>Example 3:</strong></p><blockquote><p>Input: number = &quot;123 4-5678&quot;</p><p>Output: &quot;123-456-78&quot;</p><p>Explanation: The digits are &quot;12345678&quot;.</p><p>Step 1: The 1st block is &quot;123&quot;.</p><p>Step 2: The 2nd block is &quot;456&quot;.</p><p>Step 3: There are 2 digits left, so put them in a single block of length 2. The 3rd block is &quot;78&quot;.</p><p>Joining the blocks gives &quot;123-456-78&quot;.</p></blockquote><p><strong>Constraints:</strong></p><ul><li><code>2 &lt;= number.length &lt;= 100</code></li><li><code>number</code> consists of digits and the characters <code>&#39;-&#39;</code> and <code>&#39; &#39;</code>.</li><li>There are at least <strong>two</strong> digits in <code>number</code>.</li></ul><h2 id="题目大意" tabindex="-1"><a class="header-anchor" href="#题目大意" aria-hidden="true">#</a> 题目大意</h2><p>给你一个字符串形式的电话号码 <code>number</code> 。<code>number</code> 由数字、空格 <code>&#39; &#39;</code>、和破折号 <code>&#39;-&#39;</code> 组成。</p><p>请你按下述方式重新格式化电话号码。</p><ul><li>首先，<strong>删除</strong> 所有的空格和破折号。</li><li>其次，将数组从左到右 <strong>每 3 个一组</strong> 分块，<strong>直到</strong> 剩下 4 个或更少数字。剩下的数字将按下述规定再分块： <ul><li>2 个数字：单个含 2 个数字的块。</li><li>3 个数字：单个含 3 个数字的块。</li><li>4 个数字：两个分别含 2 个数字的块。</li></ul></li></ul><p>最后用破折号将这些块连接起来。注意，重新格式化过程中 <strong>不应该</strong> 生成仅含 1 个数字的块，并且 <strong>最多</strong> 生成两个含 2 个数字的块。</p><p>返回格式化后的电话号码。</p><p><strong>示例 1：</strong></p><blockquote><p><strong>输入：</strong> number = &quot;1-23-45 6&quot;</p><p><strong>输出：</strong> &quot;123-456&quot;</p><p><strong>解释：</strong> 数字是 &quot;123456&quot;</p><p>步骤 1：共有超过 4 个数字，所以先取 3 个数字分为一组。第 1 个块是 &quot;123&quot; 。</p><p>步骤 2：剩下 3 个数字，将它们放入单个含 3 个数字的块。第 2 个块是 &quot;456&quot; 。</p><p>连接这些块后得到 &quot;123-456&quot; 。</p></blockquote><p><strong>示例 2：</strong></p><blockquote><p><strong>输入：</strong> number = &quot;123 4-567&quot;</p><p><strong>输出：</strong> &quot;123-45-67&quot;</p><p><strong>解释：</strong> 数字是 &quot;1234567&quot;.</p><p>步骤 1：共有超过 4 个数字，所以先取 3 个数字分为一组。第 1 个块是 &quot;123&quot; 。</p><p>步骤 2：剩下 4 个数字，所以将它们分成两个含 2 个数字的块。这 2 块分别是 &quot;45&quot; 和 &quot;67&quot; 。</p><p>连接这些块后得到 &quot;123-45-67&quot; 。</p></blockquote><p><strong>示例 3：</strong></p><blockquote><p><strong>输入：</strong> number = &quot;123 4-5678&quot;</p><p><strong>输出：</strong> &quot;123-456-78&quot;</p><p><strong>解释：</strong> 数字是 &quot;12345678&quot; 。</p><p>步骤 1：第 1 个块 &quot;123&quot; 。</p><p>步骤 2：第 2 个块 &quot;456&quot; 。</p><p>步骤 3：剩下 2 个数字，将它们放入单个含 2 个数字的块。第 3 个块是 &quot;78&quot; 。</p><p>连接这些块后得到 &quot;123-456-78&quot; 。</p></blockquote><p><strong>示例 4：</strong></p><blockquote><p><strong>输入：</strong> number = &quot;12&quot;</p><p><strong>输出：</strong> &quot;12&quot;</p></blockquote><p><strong>示例 5：</strong></p><blockquote><p><strong>输入：</strong> number = &quot;--17-5 229 35-39475 &quot;</p><p><strong>输出：</strong> &quot;175-229-353-94-75&quot;</p></blockquote><p><strong>提示：</strong></p><ul><li><code>2 &lt;= number.length &lt;= 100</code></li><li><code>number</code> 由数字和字符 <code>&#39;-&#39;</code> 及 <code>&#39; &#39;</code> 组成。</li><li><code>number</code> 中至少含 <strong>2</strong> 个数字。</li></ul><h2 id="解题思路" tabindex="-1"><a class="header-anchor" href="#解题思路" aria-hidden="true">#</a> 解题思路</h2><ol><li><p><strong>清理输入</strong>：</p><ul><li>使用正则表达式 <code>replace(/\\-|\\s+/g, &#39;&#39;)</code> 删除号码中的 <code>&quot;-&quot;</code> 和空格，得到连续数字字符串。</li></ul></li><li><p><strong>分组逻辑</strong>：</p><ul><li>遍历数字字符串，检查剩余数字的长度： <ul><li>如果剩余数字长度大于 4，则取前三个作为一组。</li><li>如果剩余数字长度等于 4，则分为两组，每组两个数字。</li><li>如果剩余数字为 2 或 3，则直接作为最后一组。</li></ul></li></ul></li><li><p><strong>拼接结果</strong>：</p><ul><li>将分好的组用 <code>&quot;-&quot;</code> 连接，返回结果。</li></ul></li></ol><h4 id="复杂度分析" tabindex="-1"><a class="header-anchor" href="#复杂度分析" aria-hidden="true">#</a> 复杂度分析</h4><ul><li><p><strong>时间复杂度</strong>：<code>O(n)</code>，遍历输入字符串一次，<code>n</code> 为输入字符串的长度。</p></li><li><p><strong>空间复杂度</strong>：<code>O(n)</code>，存储分组结果的数组。</p></li></ul><h2 id="代码" tabindex="-1"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>string<span class="token punctuation">}</span></span> <span class="token parameter">number</span>
 * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>string<span class="token punctuation">}</span></span>
 */</span>
<span class="token keyword">var</span> <span class="token function-variable function">reformatNumber</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	number <span class="token operator">=</span> number<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\-|\\s+</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 清理输入</span>
	<span class="token keyword">const</span> n <span class="token operator">=</span> number<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
	<span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> i <span class="token operator">&gt;</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token comment">// 剩余长度大于 4，取 3 个</span>
			arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>number<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			i <span class="token operator">+=</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment">// 前进 3 个位置</span>
		<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> i <span class="token operator">==</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token comment">// 剩余长度等于 4，分两组</span>
			arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>number<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			i <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 前进 2 个位置</span>
		<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
			<span class="token comment">// 剩余长度为 2 或 3，直接作为一组</span>
			arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>number<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token keyword">break</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> arr<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;-&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 拼接结果</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,38);function f(_,x){const p=a("font"),c=a("RouterLink"),o=a("ExternalLinkIcon");return u(),i("div",null,[k,n("p",null,[s("🟢 "),t(p,{color:"#15bd66"},{default:e(()=>[s("Easy")]),_:1}),s("  🔖  "),t(c,{to:"/tag/string.html"},{default:e(()=>[g]),_:1}),s("  🔗 "),n("a",m,[b,t(o)]),s(),n("a",h,[q,t(o)])]),v])}const T=l(d,[["render",f],["__file","1694.html.vue"]]);export{T as default};
