import{_ as r,r as a,o as i,c as d,a as n,b as e,d as s,w as o,f as p,e as u}from"./app-B5EG-zH0.js";const h={},k=n("h1",{id:"_551-学生出勤记录-i",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_551-学生出勤记录-i","aria-hidden":"true"},"#"),e(" 551. 学生出勤记录 I")],-1),g=n("code",null,"字符串",-1),m={href:"https://leetcode.cn/problems/student-attendance-record-i",target:"_blank",rel:"noopener noreferrer"},b=n("code",null,"力扣",-1),f={href:"https://leetcode.com/problems/student-attendance-record-i",target:"_blank",rel:"noopener noreferrer"},_=n("code",null,"LeetCode",-1),v=u(`<h2 id="题目" tabindex="-1"><a class="header-anchor" href="#题目" aria-hidden="true">#</a> 题目</h2><p>You are given a string <code>s</code> representing an attendance record for a student where each character signifies whether the student was absent, late, or present on that day. The record only contains the following three characters:</p><ul><li><code>&#39;A&#39;</code>: Absent.</li><li><code>&#39;L&#39;</code>: Late.</li><li><code>&#39;P&#39;</code>: Present.</li></ul><p>The student is eligible for an attendance award if they meet <strong>both</strong> of the following criteria:</p><ul><li>The student was absent (<code>&#39;A&#39;</code>) for <strong>strictly</strong> fewer than 2 days <strong>total</strong>.</li><li>The student was <strong>never</strong> late (<code>&#39;L&#39;</code>) for 3 or more <strong>consecutive</strong> days.</li></ul><p>Return <code>true</code> <em>if the student is eligible for an attendance award, or</em><code>false</code><em>otherwise</em>.</p><p><strong>Example 1:</strong></p><blockquote><p>Input: s = &quot;PPALLP&quot;</p><p>Output: true</p><p>Explanation: The student has fewer than 2 absences and was never late 3 or more consecutive days.</p></blockquote><p><strong>Example 2:</strong></p><blockquote><p>Input: s = &quot;PPALLL&quot;</p><p>Output: false</p><p>Explanation: The student was late 3 consecutive days in the last 3 days, so is not eligible for the award.</p></blockquote><p><strong>Constraints:</strong></p><ul><li><code>1 &lt;= s.length &lt;= 1000</code></li><li><code>s[i]</code> is either <code>&#39;A&#39;</code>, <code>&#39;L&#39;</code>, or <code>&#39;P&#39;</code>.</li></ul><h2 id="题目大意" tabindex="-1"><a class="header-anchor" href="#题目大意" aria-hidden="true">#</a> 题目大意</h2><p>给你一个字符串 <code>s</code> 表示一个学生的出勤记录，其中的每个字符用来标记当天的出勤情况（缺勤、迟到、到场）。记录中只含下面三种字符：</p><ul><li><code>&#39;A&#39;</code>：Absent，缺勤</li><li><code>&#39;L&#39;</code>：Late，迟到</li><li><code>&#39;P&#39;</code>：Present，到场</li></ul><p>如果学生能够 <strong>同时</strong> 满足下面两个条件，则可以获得出勤奖励：</p><ul><li>按 <strong>总出勤</strong> 计，学生缺勤（<code>&#39;A&#39;</code>）<strong>严格</strong> 少于两天。</li><li>学生 <strong>不会</strong> 存在 <strong>连续</strong> 3 天或 <strong>连续</strong> 3 天以上的迟到（<code>&#39;L&#39;</code>）记录。</li></ul><p>如果学生可以获得出勤奖励，返回 <code>true</code> ；否则，返回 <code>false</code> 。</p><p><strong>示例 1：</strong></p><blockquote><p><strong>输入：</strong> s = &quot;PPALLP&quot;</p><p><strong>输出：</strong> true</p><p><strong>解释：</strong> 学生缺勤次数少于 2 次，且不存在 3 天或以上的连续迟到记录。</p></blockquote><p><strong>示例 2：</strong></p><blockquote><p><strong>输入：</strong> s = &quot;PPALLL&quot;</p><p><strong>输出：</strong> false</p><p><strong>解释：</strong> 学生最后三天连续迟到，所以不满足出勤奖励的条件。</p></blockquote><p><strong>提示：</strong></p><ul><li><code>1 &lt;= s.length &lt;= 1000</code></li><li><code>s[i]</code> 为 <code>&#39;A&#39;</code>、<code>&#39;L&#39;</code> 或 <code>&#39;P&#39;</code></li></ul><h2 id="解题思路" tabindex="-1"><a class="header-anchor" href="#解题思路" aria-hidden="true">#</a> 解题思路</h2><ol><li><p><strong>条件 1：缺勤次数严格少于 2 次</strong></p><ul><li>遍历字符串统计字符 <code>&#39;A&#39;</code> 的个数。</li><li>如果缺勤次数大于等于 2 次，直接返回 <code>false</code>。</li></ul></li><li><p><strong>条件 2：不存在连续 3 次或以上的迟到</strong></p><ul><li>使用字符串方法 <code>s.includes(&#39;LLL&#39;)</code> 判断是否存在连续 3 个 <code>&#39;L&#39;</code> 的子串。</li><li>如果存在，返回 <code>false</code>。</li></ul></li><li><p>如果两项检查均通过，返回 <code>true</code>。</p></li></ol><h4 id="复杂度分析" tabindex="-1"><a class="header-anchor" href="#复杂度分析" aria-hidden="true">#</a> 复杂度分析</h4><ul><li><strong>时间复杂度</strong>：<code>O(n)</code>，其中 <code>n</code> 是字符串长度。 <ul><li>遍历统计缺勤次数，时间复杂度为 <code>O(n)</code>；</li><li>使用 <code>s.includes(&#39;LLL&#39;)</code>检查连续迟到，时间复杂度为 <code>O(n)</code>。</li><li>总时间复杂度 <code>O(n) + O(n) = O(n)</code>。</li></ul></li><li><strong>空间复杂度</strong>：<code>O(1)</code>，没有额外的数据结构使用。</li></ul><h2 id="代码" tabindex="-1"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>string<span class="token punctuation">}</span></span> <span class="token parameter">s</span>
 * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>boolean<span class="token punctuation">}</span></span>
 */</span>
<span class="token keyword">var</span> <span class="token function-variable function">checkRecord</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">s</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">// 检查缺勤次数是否少于 2 次</span>
	<span class="token keyword">let</span> absentCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> char <span class="token keyword">of</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>char <span class="token operator">===</span> <span class="token string">&#39;A&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			absentCount<span class="token operator">++</span><span class="token punctuation">;</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span>absentCount <span class="token operator">&gt;=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment">// 提前终止</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token comment">// 检查是否存在连续 3 次迟到</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">&#39;LLL&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>

	<span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="相关题目" tabindex="-1"><a class="header-anchor" href="#相关题目" aria-hidden="true">#</a> 相关题目</h2>`,31),y=n("thead",null,[n("tr",null,[n("th",{style:{"text-align":"center"}},"题号"),n("th",{style:{"text-align":"left"}},"标题"),n("th",{style:{"text-align":"center"}},"题解"),n("th",{style:{"text-align":"left"}},"标签"),n("th",{style:{"text-align":"center"}},"难度"),n("th",{style:{"text-align":"center"}},"力扣")])],-1),L=n("td",{style:{"text-align":"center"}},"552",-1),w=n("td",{style:{"text-align":"left"}},"学生出勤记录 II",-1),x=n("td",{style:{"text-align":"center"}},null,-1),q={style:{"text-align":"left"}},P=n("code",null,"动态规划",-1),A=n("td",{style:{"text-align":"center"}},"🔴",-1),O={style:{"text-align":"center"}},C={href:"https://leetcode.cn/problems/student-attendance-record-ii",target:"_blank",rel:"noopener noreferrer"},E={href:"https://leetcode.com/problems/student-attendance-record-ii",target:"_blank",rel:"noopener noreferrer"};function I(T,N){const l=a("font"),c=a("RouterLink"),t=a("ExternalLinkIcon");return i(),d("div",null,[k,n("p",null,[e("🟢 "),s(l,{color:"#15bd66"},{default:o(()=>[e("Easy")]),_:1}),e("  🔖  "),s(c,{to:"/tag/string.html"},{default:o(()=>[g]),_:1}),e("  🔗 "),n("a",m,[b,s(t)]),e(),n("a",f,[_,s(t)])]),v,p(" prettier-ignore "),n("table",null,[y,n("tbody",null,[n("tr",null,[L,w,x,n("td",q,[s(c,{to:"/tag/dynamic-programming.html"},{default:o(()=>[P]),_:1})]),A,n("td",O,[n("a",C,[e("🀄️"),s(t)]),e(),n("a",E,[e("🔗"),s(t)])])])])])])}const R=r(h,[["render",I],["__file","0551.html.vue"]]);export{R as default};
