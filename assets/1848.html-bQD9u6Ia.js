import{_ as r,r as t,o as l,c as i,a as n,b as s,d as a,w as o,e as d}from"./app-aQeLbVW9.js";const u={},m=n("h1",{id:"_1848-到目标元素的最小距离",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_1848-到目标元素的最小距离","aria-hidden":"true"},"#"),s(" 1848. 到目标元素的最小距离")],-1),k=n("code",null,"数组",-1),g={href:"https://leetcode.cn/problems/minimum-distance-to-the-target-element",target:"_blank",rel:"noopener noreferrer"},h=n("code",null,"力扣",-1),b={href:"https://leetcode.com/problems/minimum-distance-to-the-target-element",target:"_blank",rel:"noopener noreferrer"},v=n("code",null,"LeetCode",-1),_=d(`<h2 id="题目" tabindex="-1"><a class="header-anchor" href="#题目" aria-hidden="true">#</a> 题目</h2><p>Given an integer array <code>nums</code> <strong>(0-indexed)</strong> and two integers <code>target</code> and <code>start</code>, find an index <code>i</code> such that <code>nums[i] == target</code> and <code>abs(i - start)</code> is <strong>minimized</strong>. Note that <code>abs(x)</code> is the absolute value of <code>x</code>.</p><p>Return <code>abs(i - start)</code>.</p><p>It is <strong>guaranteed</strong> that <code>target</code> exists in <code>nums</code>.</p><p><strong>Example 1:</strong></p><blockquote><p>Input: nums = [1,2,3,4,5], target = 5, start = 3</p><p>Output: 1</p><p>Explanation: nums[4] = 5 is the only value equal to target, so the answer is abs(4 - 3) = 1.</p></blockquote><p><strong>Example 2:</strong></p><blockquote><p>Input: nums = [1], target = 1, start = 0</p><p>Output: 0</p><p>Explanation: nums[0] = 1 is the only value equal to target, so the answer is abs(0 - 0) = 0.</p></blockquote><p><strong>Example 3:</strong></p><blockquote><p>Input: nums = [1,1,1,1,1,1,1,1,1,1], target = 1, start = 0</p><p>Output: 0</p><p>Explanation: Every value of nums is 1, but nums[0] minimizes abs(i - start), which is abs(0 - 0) = 0.</p></blockquote><p><strong>Constraints:</strong></p><ul><li><code>1 &lt;= nums.length &lt;= 1000</code></li><li><code>1 &lt;= nums[i] &lt;= 10^4</code></li><li><code>0 &lt;= start &lt; nums.length</code></li><li><code>target</code> is in <code>nums</code>.</li></ul><h2 id="题目大意" tabindex="-1"><a class="header-anchor" href="#题目大意" aria-hidden="true">#</a> 题目大意</h2><p>给你一个整数数组 <code>nums</code> （下标 <strong>从 0 开始</strong> 计数）以及两个整数 <code>target</code> 和 <code>start</code> ，请你找出一个下标 <code>i</code> ，满足 <code>nums[i] == target</code> 且 <code>abs(i - start)</code> <strong>最小化</strong> 。注意：<code>abs(x)</code> 表示 <code>x</code> 的绝对值。</p><p>返回 <code>abs(i - start)</code> 。</p><p>题目数据保证 <code>target</code> 存在于 <code>nums</code> 中。</p><p><strong>示例 1：</strong></p><blockquote><p><strong>输入：</strong> nums = [1,2,3,4,5], target = 5, start = 3</p><p><strong>输出：</strong> 1</p><p><strong>解释：</strong> nums[4] = 5 是唯一一个等于 target 的值，所以答案是 abs(4 - 3) = 1 。</p></blockquote><p><strong>示例 2：</strong></p><blockquote><p><strong>输入：</strong> nums = [1], target = 1, start = 0</p><p><strong>输出：</strong> 0</p><p><strong>解释：</strong> nums[0] = 1 是唯一一个等于 target 的值，所以答案是 abs(0 - 0) = 0 。</p></blockquote><p><strong>示例 3：</strong></p><blockquote><p><strong>输入：</strong> nums = [1,1,1,1,1,1,1,1,1,1], target = 1, start = 0</p><p><strong>输出：</strong> 0</p><p><strong>解释：</strong> nums 中的每个值都是 1 ，但 nums[0] 使 abs(i - start) 的结果得以最小化，所以答案是 abs(0 - 0) = 0 。</p></blockquote><p><strong>提示：</strong></p><ul><li><code>1 &lt;= nums.length &lt;= 1000</code></li><li><code>1 &lt;= nums[i] &lt;= 10^4</code></li><li><code>0 &lt;= start &lt; nums.length</code></li><li><code>target</code> 存在于 <code>nums</code> 中</li></ul><h2 id="解题思路" tabindex="-1"><a class="header-anchor" href="#解题思路" aria-hidden="true">#</a> 解题思路</h2><p>可以从 <code>start</code> 开始同时向两边扩展，直到找到目标值。</p><ol><li><strong>双向遍历</strong>：<code>i</code> 用来向左移动，<code>j</code> 用来向右移动。</li><li>同时从 <code>start</code> 向左（<code>i--</code>）和向右（<code>j++</code>）移动。</li><li>在每一次循环中，先检查 <code>i</code> 是否有效（即是否超出数组范围），如果有效且 <code>nums[i] == target</code>，则更新 <code>res</code> 为从 <code>start</code> 到 <code>i</code> 的距离。</li><li>同时，检查 <code>j</code> 是否有效，如果有效且 <code>nums[j] == target</code>，则更新 <code>res</code> 为从 <code>start</code> 到 <code>j</code> 的距离。</li><li><strong>提前终止</strong>：一旦找到了目标值，计算并返回距离，遍历就可以结束。</li></ol><h4 id="复杂度分析" tabindex="-1"><a class="header-anchor" href="#复杂度分析" aria-hidden="true">#</a> 复杂度分析</h4><ul><li><strong>时间复杂度</strong>：<code>O(n)</code>，其中 <code>n</code> 是数组 <code>nums</code> 的长度，最多需要遍历数组一遍。</li><li><strong>空间复杂度</strong>：<code>O(1)</code>，只使用了常数空间来存储临时变量。</li></ul><h2 id="代码" tabindex="-1"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span> <span class="token parameter">nums</span>
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">}</span></span> <span class="token parameter">target</span>
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">}</span></span> <span class="token parameter">start</span>
 * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">}</span></span>
 */</span>
<span class="token keyword">var</span> <span class="token function-variable function">getMinDistance</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">nums<span class="token punctuation">,</span> target<span class="token punctuation">,</span> start</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">// 双向遍历</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> start<span class="token punctuation">,</span> j <span class="token operator">=</span> start<span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">||</span> j <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">,</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token comment">// 向左查找</span>
			<span class="token keyword">return</span> start <span class="token operator">-</span> i<span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token comment">// 向右查找</span>
			<span class="token keyword">return</span> j <span class="token operator">-</span> start<span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,31);function f(x,w){const c=t("font"),p=t("RouterLink"),e=t("ExternalLinkIcon");return l(),i("div",null,[m,n("p",null,[s("🟢 "),a(c,{color:"#15bd66"},{default:o(()=>[s("Easy")]),_:1}),s("  🔖  "),a(p,{to:"/tag/array.html"},{default:o(()=>[k]),_:1}),s("  🔗 "),n("a",g,[h,a(e)]),s(),n("a",b,[v,a(e)])]),_])}const j=r(u,[["render",f],["__file","1848.html.vue"]]);export{j as default};
