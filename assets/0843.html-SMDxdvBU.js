import{_ as l,r as o,o as u,c as i,a as s,b as n,d as a,w as e,e as r}from"./app-B5EG-zH0.js";const d={},k=s("h1",{id:"_843-猜猜这个单词",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#_843-猜猜这个单词","aria-hidden":"true"},"#"),n(" 843. 猜猜这个单词")],-1),m=s("code",null,"数组",-1),v=s("code",null,"数学",-1),g=s("code",null,"字符串",-1),w=s("code",null,"博弈",-1),h=s("code",null,"交互",-1),b={href:"https://leetcode.cn/problems/guess-the-word",target:"_blank",rel:"noopener noreferrer"},f=s("code",null,"力扣",-1),q={href:"https://leetcode.com/problems/guess-the-word",target:"_blank",rel:"noopener noreferrer"},y=s("code",null,"LeetCode",-1),x=r(`<h2 id="题目" tabindex="-1"><a class="header-anchor" href="#题目" aria-hidden="true">#</a> 题目</h2><p>You are given an array of unique strings <code>words</code> where <code>words[i]</code> is six letters long. One word of <code>words</code> was chosen as a secret word.</p><p>You are also given the helper object <code>Master</code>. You may call <code>Master.guess(word)</code> where <code>word</code> is a six-letter-long string, and it must be from <code>words</code>. <code>Master.guess(word)</code> returns:</p><ul><li><code>-1</code> if <code>word</code> is not from <code>words</code>, or</li><li>an integer representing the number of exact matches (value and position) of your guess to the secret word.</li></ul><p>There is a parameter <code>allowedGuesses</code> for each test case where <code>allowedGuesses</code> is the maximum number of times you can call <code>Master.guess(word)</code>.</p><p>For each test case, you should call <code>Master.guess</code> with the secret word without exceeding the maximum number of allowed guesses. You will get:</p><ul><li><strong><code>&quot;Either you took too many guesses, or you did not find the secret word.&quot;</code></strong> if you called <code>Master.guess</code> more than <code>allowedGuesses</code> times or if you did not call <code>Master.guess</code> with the secret word, or</li><li><strong><code>&quot;You guessed the secret word correctly.&quot;</code></strong> if you called <code>Master.guess</code> with the secret word with the number of calls to <code>Master.guess</code> less than or equal to <code>allowedGuesses</code>.</li></ul><p>The test cases are generated such that you can guess the secret word with a reasonable strategy (other than using the bruteforce method).</p><p><strong>Example 1:</strong></p><blockquote><p>Input: secret = &quot;acckzz&quot;, words = [&quot;acckzz&quot;,&quot;ccbazz&quot;,&quot;eiowzz&quot;,&quot;abcczz&quot;], allowedGuesses = 10</p><p>Output: You guessed the secret word correctly.</p><p>Explanation:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>master.guess(&quot;aaaaaa&quot;) returns -1, because &quot;aaaaaa&quot; is not in wordlist.
master.guess(&quot;acckzz&quot;) returns 6, because &quot;acckzz&quot; is secret and has all 6 matches.
master.guess(&quot;ccbazz&quot;) returns 3, because &quot;ccbazz&quot; has 3 matches.
master.guess(&quot;eiowzz&quot;) returns 2, because &quot;eiowzz&quot; has 2 matches.
master.guess(&quot;abcczz&quot;) returns 4, because &quot;abcczz&quot; has 4 matches.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>We made 5 calls to master.guess, and one of them was the secret, so we pass the test case.</p></blockquote><p><strong>Example 2:</strong></p><blockquote><p>Input: secret = &quot;hamada&quot;, words = [&quot;hamada&quot;,&quot;khaled&quot;], allowedGuesses = 10</p><p>Output: You guessed the secret word correctly.</p><p>Explanation: Since there are two words, you can guess both.</p></blockquote><p><strong>Constraints:</strong></p><ul><li><code>1 &lt;= words.length &lt;= 100</code></li><li><code>words[i].length == 6</code></li><li><code>words[i]</code> consist of lowercase English letters.</li><li>All the strings of <code>wordlist</code> are <strong>unique</strong>.</li><li><code>secret</code> exists in <code>words</code>.</li><li><code>10 &lt;= allowedGuesses &lt;= 30</code></li></ul><h2 id="题目大意" tabindex="-1"><a class="header-anchor" href="#题目大意" aria-hidden="true">#</a> 题目大意</h2><p>给你一个由 <strong>不同</strong> 字符串组成的单词列表 <code>words</code> ，其中 <code>words[i]</code> 长度均为 <code>6</code> 。<code>words</code> 中的一个单词将被选作秘密单词 <code>secret</code> 。</p><p>另给你一个辅助对象 <code>Master</code> ，你可以调用 <code>Master.guess(word)</code> 来猜单词，其中参数 <code>word</code> 长度为 6 且必须是 <code>words</code> 中的字符串。</p><p><code>Master.guess(word)</code> 将会返回如下结果：</p><ul><li>如果 <code>word</code> 不是 <code>words</code> 中的字符串，返回 <code>-1</code> ，或者</li><li>一个整数，表示你所猜测的单词 <code>word</code> 与 <strong>秘密单词</strong> <code>secret</code> 的准确匹配（值和位置同时匹配）的数目。</li></ul><p>每组测试用例都会包含一个参数 <code>allowedGuesses</code> ，其中 <code>allowedGuesses</code> 是你可以调用 <code>Master.guess(word)</code> 的最大次数。</p><p>对于每组测试用例，在不超过允许猜测的次数的前提下，你应该调用 <code>Master.guess</code> 来猜出秘密单词。最终，你将会得到以下结果：</p><ul><li>如果你调用 <code>Master.guess</code> 的次数大于 <code>allowedGuesses</code> 所限定的次数或者你没有用 <code>Master.guess</code> 猜到秘密单词，则得到 <strong><code>&quot;Either you took too many guesses, or you did not find the secret word.&quot;</code> 。</strong></li><li>如果你调用 <code>Master.guess</code> 猜到秘密单词，且调用 <code>Master.guess</code> 的次数小于或等于 <code>allowedGuesses</code> ，则得到 <strong><code>&quot;You guessed the secret word correctly.&quot;</code> 。</strong></li></ul><p>生成的测试用例保证你可以利用某种合理的策略（而不是暴力）猜到秘密单词。</p><p><strong>示例 1：</strong></p><blockquote><p><strong>输入：</strong> secret = &quot;acckzz&quot;, words = [&quot;acckzz&quot;,&quot;ccbazz&quot;,&quot;eiowzz&quot;,&quot;abcczz&quot;], allowedGuesses = 10</p><p><strong>输出：</strong> You guessed the secret word correctly.</p><p><strong>解释：</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>master.guess(&quot;aaaaaa&quot;) 返回 -1 ，因为 &quot;aaaaaa&quot; 不在 words 中。
master.guess(&quot;acckzz&quot;) 返回 6 ，因为 &quot;acckzz&quot; 是秘密单词 secret ，共有 6 个字母匹配。
master.guess(&quot;ccbazz&quot;) 返回 3 ，因为 &quot;ccbazz&quot; 共有 3 个字母匹配。
master.guess(&quot;eiowzz&quot;) 返回 2 ，因为 &quot;eiowzz&quot; 共有 2 个字母匹配。
master.guess(&quot;abcczz&quot;) 返回 4 ，因为 &quot;abcczz&quot; 共有 4 个字母匹配。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>一共调用 5 次 master.guess ，其中一个为秘密单词，所以通过测试用例。</p></blockquote><p><strong>示例 2：</strong></p><blockquote><p><strong>输入：</strong> secret = &quot;hamada&quot;, words = [&quot;hamada&quot;,&quot;khaled&quot;], allowedGuesses = 10</p><p><strong>输出：</strong> You guessed the secret word correctly.</p><p><strong>解释：</strong> 共有 2 个单词，且其中一个为秘密单词，可以通过测试用例。</p></blockquote><p><strong>提示：</strong></p><ul><li><code>1 &lt;= words.length &lt;= 100</code></li><li><code>words[i].length == 6</code></li><li><code>words[i]</code> 仅由小写英文字母组成</li><li><code>words</code> 中所有字符串 <strong>互不相同</strong></li><li><code>secret</code> 存在于 <code>words</code> 中</li><li><code>10 &lt;= allowedGuesses &lt;= 30</code></li></ul><h2 id="解题思路" tabindex="-1"><a class="header-anchor" href="#解题思路" aria-hidden="true">#</a> 解题思路</h2><p>目标是设计一个算法，通过调用 <code>master.guess()</code> 找到秘密单词。</p><p>为了尽量减少调用次数，我们需要在每次调用 <code>master.guess()</code> 后，通过结果缩小候选单词的范围。算法结构如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">while</span> <span class="token punctuation">(</span>words<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">// 从候选列表中选择一个单词</span>
	<span class="token keyword">let</span> guessWord <span class="token operator">=</span> <span class="token string">&#39;xxxxxx&#39;</span><span class="token punctuation">;</span>
	matches <span class="token operator">=</span> master<span class="token punctuation">.</span><span class="token function">guess</span><span class="token punctuation">(</span>guessWord<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token comment">// 更新候选列表，仅保留可能的单词;</span>
  words <span class="token operator">=</span> words<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token operator">...</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>关键问题是：</p><ul><li>如何根据 <code>master.guess()</code> 的结果缩小候选列表？</li><li>如何选择每次猜测的单词？</li></ul><p><strong>1. 缩小候选列表</strong></p><p>每次调用 <code>master.guess()</code> 时，会返回当前猜测单词与秘密单词的匹配数 <code>x</code>。通过匹配规则：</p><ul><li>若 <code>x == 6</code>，即找到秘密单词，算法结束。</li><li>若 <code>x != 6</code>，说明秘密单词与当前猜测单词有 <code>x</code> 个字符相同，其他单词中不符合这一匹配规则的单词可以被排除。</li></ul><p>为此，构建一个辅助方法 <code>getMatches</code> 来计算两个单词之间的匹配数。</p><p>算法更新为：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">while</span> <span class="token punctuation">(</span>words<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">// 从候选列表中选择一个单词</span>
	<span class="token keyword">let</span> guessWord <span class="token operator">=</span> <span class="token string">&#39;xxxxxx&#39;</span><span class="token punctuation">;</span>
	matches <span class="token operator">=</span> master<span class="token punctuation">.</span><span class="token function">guess</span><span class="token punctuation">(</span>guessWord<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token comment">// 更新候选列表，仅保留匹配数量一致的单词;</span>
	words <span class="token operator">=</span> words<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">word</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">getMatches</span><span class="token punctuation">(</span>word<span class="token punctuation">,</span> guessWord<span class="token punctuation">)</span> <span class="token operator">==</span> matches<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>2. 如何选择猜测的单词</strong></p><p>每次调用 <code>master.guess()</code> 时，会返回当前猜测单词与秘密单词的匹配数 <code>x</code>，通过概率计算可知：</p><p>得到 0 个匹配项的可能性是：<code>(25/26) ^ 6 = 79.03%</code></p><p>也就是说，如果我们盲猜，我们有大约 <code>80%</code> 的机会得到与秘密单词 <code>0</code> 个匹配项。</p><p>此时，我们将保留所有 <code>getMatches(word, guessWord) == 0</code> 的候选词，由于所有候选词都是随机生成的，因此我们可以假设有 <code>80%</code> 的候选词会被保留。</p><p>由于 <code>master.guess()</code> 接口的调用次数有限，我们希望每次调用接口都可以删除最多的单词，因此我们希望选择一个拥有最多匹配项的候选单词（即与其他单词匹配项为 0 的情况最少）。</p><p>选择猜测单词的方法有很多种：</p><ol><li><strong>固定选择</strong>：每次都选候选列表中的第一个单词。</li><li><strong>随机选择</strong>：每次从候选列表中随机选一个单词。</li><li><strong>根据字母频率选择</strong>：统计候选单词中每个字符在各位置的出现频率，选择一个具有最高“匹配分数”的单词进行猜测。</li></ol><p>前两种随机的方式并不是每次又有足够的好运，可以在 <code>allowedGuesses</code> 次内猜中秘密单词。</p><p>为此，构建一个辅助方法 <code>getBestGuessWord</code> 来得到“匹配分数”最高的单词。</p><ul><li>使用一个二维数组 <code>counts</code> 记录每个位置上各字母的出现频率。</li><li>遍历候选单词，累加单词中每个字母的出现频率，得到其分数。</li><li>选择分数最高的单词作为下一次的猜测单词。</li></ul><p>算法更新为：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">while</span> <span class="token punctuation">(</span>words<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">// 从候选列表中选择一个单词</span>
	<span class="token keyword">let</span> guessWord <span class="token operator">=</span> <span class="token function">getBestGuessWord</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	matches <span class="token operator">=</span> master<span class="token punctuation">.</span><span class="token function">guess</span><span class="token punctuation">(</span>guessWord<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token comment">// 更新候选列表，仅保留匹配数量一致的单词;</span>
	words <span class="token operator">=</span> words<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">word</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">getMatches</span><span class="token punctuation">(</span>word<span class="token punctuation">,</span> guessWord<span class="token punctuation">)</span> <span class="token operator">==</span> matches<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="复杂度分析" tabindex="-1"><a class="header-anchor" href="#复杂度分析" aria-hidden="true">#</a> 复杂度分析</h4><ul><li><strong>时间复杂度</strong>：<code>O(n)</code><ul><li>每次调用 <code>getBestGuessWord</code> 的时间复杂度为 <code>O(6 * n) = O(n)</code>，其中 <code>n</code> 是候选单词数量。</li><li>过滤后选单词列表的时间复杂度为 <code>O(n)</code>。</li><li>在最坏情况下，最多进行 <code>allowedGuesses &lt;= 30</code> 次猜测，因此总时间复杂度为 <code>O(30 * n)</code>，即 <code>O(n)</code>。</li></ul></li><li><strong>空间复杂度</strong>：<code>O(n)</code><ul><li>需要一个二维数组 <code>counts</code> 来记录每个位置字符的频率，空间复杂度为 <code>O(m * 26) = O(n)</code>。</li><li>需要存储候选单词列表，空间复杂度为 <code>O(n)</code>。</li></ul></li></ul><h2 id="代码" tabindex="-1"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>string<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span> <span class="token parameter">words</span>
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>Master<span class="token punctuation">}</span></span> <span class="token parameter">master</span>
 * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span><span class="token keyword">void</span><span class="token punctuation">}</span></span>
 */</span>
<span class="token keyword">var</span> <span class="token function-variable function">findSecretWord</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">words<span class="token punctuation">,</span> master</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">// 计算两个单词的匹配数</span>
	<span class="token keyword">const</span> <span class="token function-variable function">getMatches</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">word1<span class="token punctuation">,</span> word2</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
		<span class="token keyword">let</span> matches <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
		<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> word1<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span>word1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">===</span> word2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
				matches<span class="token operator">++</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">return</span> matches<span class="token punctuation">;</span>
	<span class="token punctuation">}</span><span class="token punctuation">;</span>

	<span class="token comment">// 从候选单词中选择一个“重叠分数”最高的单词</span>
	<span class="token comment">// 目的是选择一个具有代表性，能最大化缩小候选范围的单词</span>
	<span class="token keyword">const</span> <span class="token function-variable function">getBestGuessWord</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
		<span class="token comment">// 用二维数组记录每个位置上各字母的出现频率</span>
		<span class="token keyword">let</span> counts <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">26</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> word <span class="token keyword">of</span> words<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">6</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
				<span class="token keyword">const</span> char <span class="token operator">=</span> word<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token string">&#39;a&#39;</span><span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 字母的 ASCII 值偏移量</span>
				counts<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>char<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
		<span class="token comment">// 遍历候选单词，计算每个单词的重叠分数</span>
		<span class="token keyword">let</span> maxScore <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>
			guessWord<span class="token punctuation">;</span>
		<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> word <span class="token keyword">of</span> words<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">let</span> score <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
			<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">6</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
				<span class="token keyword">const</span> char <span class="token operator">=</span> word<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token string">&#39;a&#39;</span><span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
				score <span class="token operator">+=</span> counts<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>char<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 根据每个位置上字母的频率累加分数</span>
			<span class="token punctuation">}</span>
			<span class="token comment">// 更新当前的最优猜测单词</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span>score <span class="token operator">&gt;</span> maxScore<span class="token punctuation">)</span> <span class="token punctuation">{</span>
				maxScore <span class="token operator">=</span> score<span class="token punctuation">;</span>
				guessWord <span class="token operator">=</span> word<span class="token punctuation">;</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">return</span> guessWord<span class="token punctuation">;</span>
	<span class="token punctuation">}</span><span class="token punctuation">;</span>

	<span class="token comment">// 主循环，逐步缩小候选单词列表</span>
	<span class="token keyword">while</span> <span class="token punctuation">(</span>words<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">const</span> guessWord <span class="token operator">=</span> <span class="token function">getBestGuessWord</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 选择最优猜测单词</span>
		<span class="token keyword">const</span> matches <span class="token operator">=</span> master<span class="token punctuation">.</span><span class="token function">guess</span><span class="token punctuation">(</span>guessWord<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 调用 master.guess 获取匹配数</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>matches <span class="token operator">===</span> <span class="token number">6</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span> <span class="token comment">// 如果匹配数为 6，找到秘密单词，退出</span>
		<span class="token comment">// 根据匹配数过滤候选单词，仅保留匹配数相等的单词</span>
		words <span class="token operator">=</span> words<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">word</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">getMatches</span><span class="token punctuation">(</span>word<span class="token punctuation">,</span> guessWord<span class="token punctuation">)</span> <span class="token operator">===</span> matches<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,58);function z(_,M){const p=o("font"),t=o("RouterLink"),c=o("ExternalLinkIcon");return u(),i("div",null,[k,s("p",null,[n("🔴 "),a(p,{color:"#ff334b"},{default:e(()=>[n("Hard")]),_:1}),n("  🔖  "),a(t,{to:"/tag/array.html"},{default:e(()=>[m]),_:1}),n(),a(t,{to:"/tag/math.html"},{default:e(()=>[v]),_:1}),n(),a(t,{to:"/tag/string.html"},{default:e(()=>[g]),_:1}),n(),a(t,{to:"/tag/game-theory.html"},{default:e(()=>[w]),_:1}),n(),a(t,{to:"/tag/interactive.html"},{default:e(()=>[h]),_:1}),n("  🔗 "),s("a",b,[f,a(c)]),n(),s("a",q,[y,a(c)])]),x])}const G=l(d,[["render",z],["__file","0843.html.vue"]]);export{G as default};
