import{_ as u,r as t,o as l,c as i,a as n,b as s,d as a,w as o,e as r}from"./app-B5EG-zH0.js";const d={},k=n("h1",{id:"_38-字符串的排列",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_38-字符串的排列","aria-hidden":"true"},"#"),s(" 38. 字符串的排列")],-1),v=n("code",null,"字符串",-1),m=n("code",null,"回溯",-1),b={href:"https://leetcode.cn/problems/zi-fu-chuan-de-pai-lie-lcof",target:"_blank",rel:"noopener noreferrer"},g=n("code",null,"力扣",-1),q=r(`<h2 id="题目" tabindex="-1"><a class="header-anchor" href="#题目" aria-hidden="true">#</a> 题目</h2><p>某店铺将用于组成套餐的商品记作字符串 <code>goods</code>，其中 <code>goods[i]</code> 表示对应商品。请返回该套餐内所含商品的 <strong>全部排列方式</strong> 。</p><p>返回结果 <strong>无顺序要求</strong> ，但不能含有重复的元素。</p><p><strong>示例 1:</strong></p><blockquote><p>输入：goods = &quot;agew&quot;</p><p>输出：[&quot;aegw&quot;,&quot;aewg&quot;,&quot;agew&quot;,&quot;agwe&quot;,&quot;aweg&quot;,&quot;awge&quot;,&quot;eagw&quot;,&quot;eawg&quot;,&quot;egaw&quot;,&quot;egwa&quot;,&quot;ewag&quot;,&quot;ewga&quot;,&quot;gaew&quot;,&quot;gawe&quot;,&quot;geaw&quot;,&quot;gewa&quot;,&quot;gwae&quot;,&quot;gwea&quot;,&quot;waeg&quot;,&quot;wage&quot;,&quot;weag&quot;,&quot;wega&quot;,&quot;wgae&quot;,&quot;wgea&quot;]</p></blockquote><p><strong>提示：</strong></p><ul><li><code>1 &lt;= goods.length &lt;= 8</code></li></ul><h2 id="解题思路" tabindex="-1"><a class="header-anchor" href="#解题思路" aria-hidden="true">#</a> 解题思路</h2><ol><li>对 <code>goods</code> 进行排序，方便处理相同元素的情况。</li><li>使用回溯算法生成排列。定义一个 <code>used</code> 数组来标记每个元素是否被使用过。</li><li>在回溯过程中，遍历 <code>goods</code>，对于每个元素，如果它与前一个元素相同且前一个元素未被使用，就跳过当前元素的选择。</li><li>递归结束条件为当前排列的长度等于 <code>goods</code> 的长度，将当前排列加入结果集。</li><li>最终返回结果集。</li></ol><h2 id="代码" tabindex="-1"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>string<span class="token punctuation">}</span></span> <span class="token parameter">goods</span>
 * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>string<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span>
 */</span>
<span class="token keyword">var</span> <span class="token function-variable function">goodsOrder</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">goods</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">const</span> len <span class="token operator">=</span> goods<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
	<span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token keyword">let</span> used <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>len<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token comment">// 首先将商品字符串排序，确保相同的字符相邻</span>
	<span class="token keyword">const</span> soredGoods <span class="token operator">=</span> goods<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">const</span> <span class="token function-variable function">backtrack</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">word</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
		<span class="token comment">// 如果当前路径长度等于商品总数，则将当前排列加入结果集</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>word<span class="token punctuation">.</span>length <span class="token operator">==</span> len<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">...</span>word<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token keyword">return</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>

		<span class="token comment">// 遍历商品，尝试将未使用的商品加入当前排列</span>
		<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token comment">// 如果当前元素已经被使用或者与前一个元素相同且前一个元素未被使用，则跳过</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span>
				used<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">||</span>
				<span class="token punctuation">(</span>i <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> soredGoods<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> soredGoods<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>used<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
			<span class="token punctuation">)</span> <span class="token punctuation">{</span>
				<span class="token keyword">continue</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span>

			word<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>soredGoods<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			used<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>

			<span class="token comment">// 递归调用，生成下一层的排列</span>
			<span class="token function">backtrack</span><span class="token punctuation">(</span>word<span class="token punctuation">)</span><span class="token punctuation">;</span>

			<span class="token comment">// 回溯，撤销选择</span>
			word<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			used<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span><span class="token punctuation">;</span>

	<span class="token function">backtrack</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> res<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,11);function w(f,h){const p=t("font"),e=t("RouterLink"),c=t("ExternalLinkIcon");return l(),i("div",null,[k,n("p",null,[s("🟠 "),a(p,{color:"#ffb800"},{default:o(()=>[s("Medium")]),_:1}),s("  🔖  "),a(e,{to:"/tag/string.html"},{default:o(()=>[v]),_:1}),s(),a(e,{to:"/tag/backtracking.html"},{default:o(()=>[m]),_:1}),s("  🔗 "),n("a",b,[g,a(c)])]),q])}const y=u(d,[["render",w],["__file","jz_offer_38_1.html.vue"]]);export{y as default};
