import{_ as l,r as e,o as i,c as u,a as n,b as s,d as a,w as t,e as r}from"./app-aQeLbVW9.js";const d={},k=n("h1",{id:"_773-滑动谜题",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_773-滑动谜题","aria-hidden":"true"},"#"),s(" 773. 滑动谜题")],-1),m=n("code",null,"广度优先搜索",-1),b=n("code",null,"数组",-1),g=n("code",null,"矩阵",-1),v={href:"https://leetcode.cn/problems/sliding-puzzle",target:"_blank",rel:"noopener noreferrer"},h=n("code",null,"力扣",-1),f={href:"https://leetcode.com/problems/sliding-puzzle",target:"_blank",rel:"noopener noreferrer"},_=n("code",null,"LeetCode",-1),w=r(`<h2 id="题目" tabindex="-1"><a class="header-anchor" href="#题目" aria-hidden="true">#</a> 题目</h2><p>On an <code>2 x 3</code> board, there are five tiles labeled from <code>1</code> to <code>5</code>, and an empty square represented by <code>0</code>. A <strong>move</strong> consists of choosing <code>0</code> and a 4-directionally adjacent number and swapping it.</p><p>The state of the board is solved if and only if the board is <code>[[1,2,3],[4,5,0]]</code>.</p><p>Given the puzzle board <code>board</code>, return <em>the least number of moves required so that the state of the board is solved</em>. If it is impossible for the state of the board to be solved, return <code>-1</code>.</p><p><strong>Example 1:</strong></p><figure><img src="https://assets.leetcode.com/uploads/2021/06/29/slide1-grid.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><blockquote><p>Input: board = [[1,2,3],[4,0,5]]</p><p>Output: 1</p><p>Explanation: Swap the 0 and the 5 in one move.</p></blockquote><p><strong>Example 2:</strong></p><figure><img src="https://assets.leetcode.com/uploads/2021/06/29/slide2-grid.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><blockquote><p>Input: board = [[1,2,3],[5,4,0]]</p><p>Output: -1</p><p>Explanation: No number of moves will make the board solved.</p></blockquote><p><strong>Example 3:</strong></p><figure><img src="https://assets.leetcode.com/uploads/2021/06/29/slide3-grid.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><blockquote><p>Input: board = [[4,1,2],[5,0,3]]</p><p>Output: 5</p><p>Explanation: 5 is the smallest number of moves that solves the board.</p><p>An example path:</p><p>After move 0: [[4,1,2],[5,0,3]]</p><p>After move 1: [[4,1,2],[0,5,3]]</p><p>After move 2: [[0,1,2],[4,5,3]]</p><p>After move 3: [[1,0,2],[4,5,3]]</p><p>After move 4: [[1,2,0],[4,5,3]]</p><p>After move 5: [[1,2,3],[4,5,0]]</p></blockquote><p><strong>Constraints:</strong></p><ul><li><code>board.length == 2</code></li><li><code>board[i].length == 3</code></li><li><code>0 &lt;= board[i][j] &lt;= 5</code></li><li>Each value <code>board[i][j]</code> is <strong>unique</strong>.</li></ul><h2 id="题目大意" tabindex="-1"><a class="header-anchor" href="#题目大意" aria-hidden="true">#</a> 题目大意</h2><p>在一个 <code>2 x 3</code> 的板上（<code>board</code>）有 5 块砖瓦，用数字 <code>1~5</code> 来表示, 以及一块空缺用 <code>0</code> 来表示。一次 <strong>移动</strong> 定义为选择 <code>0</code> 与一个相邻的数字（上下左右）进行交换.</p><p>最终当板 <code>board</code> 的结果是 <code>[[1,2,3],[4,5,0]]</code> 谜板被解开。</p><p>给出一个谜板的初始状态 <code>board</code> ，返回最少可以通过多少次移动解开谜板，如果不能解开谜板，则返回 <code>-1</code> 。</p><p><strong>示例 1：</strong></p><figure><img src="https://assets.leetcode.com/uploads/2021/06/29/slide1-grid.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><blockquote><p><strong>输入：</strong> board = [[1,2,3],[4,0,5]]</p><p><strong>输出：</strong> 1</p><p><strong>解释：</strong> 交换 0 和 5 ，1 步完成</p></blockquote><p><strong>示例 2:</strong></p><figure><img src="https://assets.leetcode.com/uploads/2021/06/29/slide2-grid.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><blockquote><p><strong>输入：</strong> board = [[1,2,3],[5,4,0]]</p><p><strong>输出：</strong> -1</p><p><strong>解释：</strong> 没有办法完成谜板</p></blockquote><p><strong>示例 3:</strong></p><figure><img src="https://assets.leetcode.com/uploads/2021/06/29/slide3-grid.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><blockquote><p><strong>输入：</strong> board = [[4,1,2],[5,0,3]]</p><p><strong>输出：</strong> 5</p><p><strong>解释：</strong></p><p>最少完成谜板的最少移动次数是 5 ，</p><p>一种移动路径:</p><p>尚未移动: [[4,1,2],[5,0,3]]</p><p>移动 1 次: [[4,1,2],[0,5,3]]</p><p>移动 2 次: [[0,1,2],[4,5,3]]</p><p>移动 3 次: [[1,0,2],[4,5,3]]</p><p>移动 4 次: [[1,2,0],[4,5,3]]</p><p>移动 5 次: [[1,2,3],[4,5,0]]</p></blockquote><p><strong>提示：</strong></p><ul><li><code>board.length == 2</code></li><li><code>board[i].length == 3</code></li><li><code>0 &lt;= board[i][j] &lt;= 5</code></li><li><code>board[i][j]</code> 中每个值都 <strong>不同</strong></li></ul><h2 id="解题思路" tabindex="-1"><a class="header-anchor" href="#解题思路" aria-hidden="true">#</a> 解题思路</h2><p>这是一个典型的 <strong>状态空间搜索问题</strong>，可以通过 <strong>广度优先搜索（BFS）</strong> 寻找从初始状态到目标状态的最短路径。</p><ol><li><p><strong>状态表示：</strong></p><ul><li>将 <code>2 * 3</code> 的拼图转换为字符串表示（如 <code>&quot;123450&quot;</code>），以便表示状态。</li><li>空格 <code>0</code> 的位置决定了可以进行的移动。</li></ul></li><li><p><strong>状态转移：</strong></p><ul><li>定义每个位置（索引）的合法移动方向。例如： <ul><li>索引 <code>0</code> 的合法移动位置为 <code>[1,3]</code>（右、下）。</li><li>索引 <code>4</code> 的合法移动位置为 <code>[1,3,5]</code>（上、左、右）。</li></ul></li><li>预定义一个方向数组表示索引间的相邻关系。</li></ul></li><li><p><strong>BFS 搜索：</strong></p><ul><li>将初始状态加入队列，使用 BFS 搜索所有可能的状态。</li><li>每次弹出队列中的状态，将空格 <code>0</code> 和其相邻位置的数字交换，生成新的状态。</li><li>如果新状态是目标状态，则返回当前步数。</li><li>使用集合记录已访问状态，避免重复计算。</li><li>若队列为空且未找到目标状态，返回 <code>-1</code>。</li></ul></li></ol><h4 id="复杂度分析" tabindex="-1"><a class="header-anchor" href="#复杂度分析" aria-hidden="true">#</a> 复杂度分析</h4><ul><li><p><strong>时间复杂度：</strong> <code>O((m * n)!)</code>，最多需要遍历所有状态，状态总数为 <code>(m * n)!</code>（这里 <code>m * n = 6</code>），每个状态需要 <code>O(m * n)</code> 的字符串操作。</p></li><li><p><strong>空间复杂度：</strong> <code>O((m * n)!)</code>，队列与集合的空间复杂度由状态数量决定。</p></li></ul><h2 id="代码" tabindex="-1"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span> <span class="token parameter">board</span>
 * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">}</span></span>
 */</span>
<span class="token keyword">var</span> <span class="token function-variable function">slidingPuzzle</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">board</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">const</span> target <span class="token operator">=</span> <span class="token string">&#39;123450&#39;</span><span class="token punctuation">;</span> <span class="token comment">// 目标状态</span>
	<span class="token keyword">const</span> start <span class="token operator">=</span> board<span class="token punctuation">.</span><span class="token function">flat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 初始状态</span>

	<span class="token comment">// 每个索引的合法移动位置</span>
	<span class="token keyword">const</span> neighbors <span class="token operator">=</span> <span class="token punctuation">[</span>
		<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// 0</span>
		<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// 1</span>
		<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// 2</span>
		<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// 3</span>
		<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// 4</span>
		<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span> <span class="token comment">// 5</span>
	<span class="token punctuation">]</span><span class="token punctuation">;</span>

	<span class="token comment">// BFS 初始化</span>
	<span class="token keyword">const</span> queue <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>start<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [状态, 步数]</span>
	<span class="token keyword">const</span> visited <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	visited<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>start<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">while</span> <span class="token punctuation">(</span>queue<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">const</span> <span class="token punctuation">[</span>state<span class="token punctuation">,</span> steps<span class="token punctuation">]</span> <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>state <span class="token operator">===</span> target<span class="token punctuation">)</span> <span class="token keyword">return</span> steps<span class="token punctuation">;</span> <span class="token comment">// 找到目标状态</span>

		<span class="token keyword">const</span> zeroIndex <span class="token operator">=</span> state<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">&#39;0&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 找到空格位置</span>
		<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> neighbor <span class="token keyword">of</span> neighbors<span class="token punctuation">[</span>zeroIndex<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token comment">// 交换空格与邻居位置</span>
			<span class="token keyword">const</span> newState <span class="token operator">=</span> <span class="token function">swap</span><span class="token punctuation">(</span>state<span class="token punctuation">,</span> zeroIndex<span class="token punctuation">,</span> neighbor<span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>visited<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>newState<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
				visited<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>newState<span class="token punctuation">)</span><span class="token punctuation">;</span>
				queue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">[</span>newState<span class="token punctuation">,</span> steps <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 无法到达目标状态</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// 辅助函数：交换字符串中两个索引位置的字符</span>
<span class="token keyword">function</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token parameter">str<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">const</span> arr <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">[</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> arr<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,37);function y(x,q){const c=e("font"),o=e("RouterLink"),p=e("ExternalLinkIcon");return i(),u("div",null,[k,n("p",null,[s("🔴 "),a(c,{color:"#ff334b"},{default:t(()=>[s("Hard")]),_:1}),s("  🔖  "),a(o,{to:"/tag/breadth-first-search.html"},{default:t(()=>[m]),_:1}),s(),a(o,{to:"/tag/array.html"},{default:t(()=>[b]),_:1}),s(),a(o,{to:"/tag/matrix.html"},{default:t(()=>[g]),_:1}),s("  🔗 "),n("a",v,[h,a(p)]),s(),n("a",f,[_,a(p)])]),w])}const z=l(d,[["render",y],["__file","0773.html.vue"]]);export{z as default};
