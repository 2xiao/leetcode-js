import{_ as p,r as l,o as i,c as r,a as e,b as t,d as n,w as s,f as d,e as u}from"./app-aQeLbVW9.js";const k={},h=e("h1",{id:"_284-窥视迭代器",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#_284-窥视迭代器","aria-hidden":"true"},"#"),t(" 284. 窥视迭代器")],-1),g=e("code",null,"设计",-1),m=e("code",null,"数组",-1),_=e("code",null,"迭代器",-1),x={href:"https://leetcode.cn/problems/peeking-iterator",target:"_blank",rel:"noopener noreferrer"},v=e("code",null,"力扣",-1),b={href:"https://leetcode.com/problems/peeking-iterator",target:"_blank",rel:"noopener noreferrer"},f=e("code",null,"LeetCode",-1),y=u(`<h2 id="题目" tabindex="-1"><a class="header-anchor" href="#题目" aria-hidden="true">#</a> 题目</h2><p>Design an iterator that supports the <code>peek</code> operation on an existing iterator in addition to the <code>hasNext</code> and the <code>next</code> operations.</p><p>Implement the <code>PeekingIterator</code> class:</p><ul><li><code>PeekingIterator(Iterator&lt;int&gt; nums)</code> Initializes the object with the given integer iterator <code>iterator</code>.</li><li><code>int next()</code> Returns the next element in the array and moves the pointer to the next element.</li><li><code>boolean hasNext()</code> Returns <code>true</code> if there are still elements in the array.</li><li><code>int peek()</code> Returns the next element in the array <strong>without</strong> moving the pointer.</li></ul><p><strong>Note:</strong> Each language may have a different implementation of the constructor and <code>Iterator</code>, but they all support the <code>int next()</code> and <code>boolean hasNext()</code> functions.</p><p><strong>Example 1:</strong></p><blockquote><p><strong>Input</strong></p><p>[&quot;PeekingIterator&quot;, &quot;next&quot;, &quot;peek&quot;, &quot;next&quot;, &quot;next&quot;, &quot;hasNext&quot;]</p><p>[[[1, 2, 3]], [], [], [], [], []]</p><p><strong>Output</strong></p><p>[null, 1, 2, 2, 3, false]</p><p><strong>Explanation</strong></p><p>PeekingIterator peekingIterator = new PeekingIterator([1, 2, 3]); // [<em><strong>1</strong></em> ,2,3]</p><p>peekingIterator.next(); // return 1, the pointer moves to the next element [1,<em><strong>2</strong></em> ,3].</p><p>peekingIterator.peek(); // return 2, the pointer does not move [1,<em><strong>2</strong></em> ,3].</p><p>peekingIterator.next(); // return 2, the pointer moves to the next element [1,2,<em><strong>3</strong></em>]</p><p>peekingIterator.next(); // return 3, the pointer moves to the next element [1,2,3]</p><p>peekingIterator.hasNext(); // return False</p></blockquote><p><strong>Constraints:</strong></p><ul><li><code>1 &lt;= nums.length &lt;= 1000</code></li><li><code>1 &lt;= nums[i] &lt;= 1000</code></li><li>All the calls to <code>next</code> and <code>peek</code> are valid.</li><li>At most <code>1000</code> calls will be made to <code>next</code>, <code>hasNext</code>, and <code>peek</code>.</li></ul><p><strong>Follow up:</strong> How would you extend your design to be generic and work with all types, not just integer?</p><h2 id="题目大意" tabindex="-1"><a class="header-anchor" href="#题目大意" aria-hidden="true">#</a> 题目大意</h2><p>请你在设计一个迭代器，在集成现有迭代器拥有的 <code>hasNext</code> 和 <code>next</code> 操作的基础上，还额外支持 <code>peek</code> 操作。</p><p>实现 <code>PeekingIterator</code> 类：</p><ul><li><code>PeekingIterator(Iterator&lt;int&gt; nums)</code> 使用指定整数迭代器 <code>nums</code> 初始化迭代器。</li><li><code>int next()</code> 返回数组中的下一个元素，并将指针移动到下个元素处。</li><li><code>bool hasNext()</code> 如果数组中存在下一个元素，返回 <code>true</code> ；否则，返回 <code>false</code> 。</li><li><code>int peek()</code> 返回数组中的下一个元素，但 <strong>不</strong> 移动指针。</li></ul><p><strong>注意：</strong> 每种语言可能有不同的构造函数和迭代器 <code>Iterator</code>，但均支持 <code>int next()</code> 和 <code>boolean hasNext()</code> 函数。</p><p><strong>示例 1：</strong></p><blockquote><p><strong>输入：</strong></p><p>[&quot;PeekingIterator&quot;, &quot;next&quot;, &quot;peek&quot;, &quot;next&quot;, &quot;next&quot;, &quot;hasNext&quot;]</p><p>[[[1, 2, 3]], [], [], [], [], []]</p><p><strong>输出：</strong></p><p>[null, 1, 2, 2, 3, false]</p><p><strong>解释：</strong></p><p>PeekingIterator peekingIterator = new PeekingIterator([1, 2, 3]); // [<em><strong>1</strong></em> ,2,3]</p><p>peekingIterator.next(); // 返回 1 ，指针移动到下一个元素 [1,<em><strong>2</strong></em> ,3]</p><p>peekingIterator.peek(); // 返回 2 ，指针未发生移动 [1,<em><strong>2</strong></em> ,3]</p><p>peekingIterator.next(); // 返回 2 ，指针移动到下一个元素 [1,2,<em><strong>3</strong></em>]</p><p>peekingIterator.next(); // 返回 3 ，指针移动到下一个元素 [1,2,3]</p><p>peekingIterator.hasNext(); // 返回 False</p></blockquote><p><strong>提示：</strong></p><ul><li><code>1 &lt;= nums.length &lt;= 1000</code></li><li><code>1 &lt;= nums[i] &lt;= 1000</code></li><li>对 <code>next</code> 和 <code>peek</code> 的调用均有效</li><li><code>next</code>、<code>hasNext</code> 和 <code>peek </code>最多调用 <code>1000</code> 次</li></ul><p><strong>进阶：</strong> 你将如何拓展你的设计？使之变得通用化，从而适应所有的类型，而不只是整数型？</p><h2 id="解题思路" tabindex="-1"><a class="header-anchor" href="#解题思路" aria-hidden="true">#</a> 解题思路</h2><p><code>PeekingIterator</code> 是对一个迭代器进行包装，提供额外的 <code>peek()</code> 功能，用于预览下一个元素而不移动迭代器的当前位置。实现过程中，需要维护一个缓存变量来存储“预览的值”，以便在调用 <code>peek()</code> 后，实际调用 <code>next()</code> 时返回正确的结果。</p><ol><li><p><strong>缓存机制</strong></p><ul><li>引入一个私有变量 <code>peeked</code> 用于存储调用 <code>peek()</code> 时预览的值。</li><li>如果 <code>peeked</code> 中有值，说明上一次调用了 <code>peek()</code> 而未调用 <code>next()</code>，这时应直接返回缓存值。</li></ul></li><li><p><strong>三个方法的逻辑</strong></p><ul><li><strong><code>peek()</code></strong><ul><li>如果 <code>peeked</code> 中有值，直接返回该值。</li><li>如果 <code>peeked</code> 中为空，调用 <code>iterator.next()</code> 获取下一个值并存入 <code>peeked</code>，然后返回该值。</li></ul></li><li><strong><code>next()</code></strong><ul><li>如果 <code>peeked</code> 中有值，说明调用过 <code>peek()</code>，返回缓存值并清空 <code>peeked</code>。</li><li>如果 <code>peeked</code> 为空，直接调用 <code>iterator.next()</code> 返回下一个值。</li></ul></li><li><strong><code>hasNext()</code></strong><ul><li>如果 <code>peeked</code> 中有值，说明还有预览的元素，返回 <code>true</code>。</li><li>如果 <code>peeked</code> 为空，则调用 <code>iterator.hasNext()</code> 判断底层迭代器是否有更多元素。</li></ul></li></ul></li><li><p><strong>边界条件</strong></p><ul><li><code>peeked</code> 的初始值为 <code>null</code>，以便区分缓存状态。</li><li>处理 <code>iterator</code> 在边界条件（如没有更多元素时）的行为。</li></ul></li></ol><h4 id="复杂度分析" tabindex="-1"><a class="header-anchor" href="#复杂度分析" aria-hidden="true">#</a> 复杂度分析</h4><ul><li><strong>时间复杂度</strong>：<code>O(1)</code>，<code>peek()</code>、<code>next()</code> 和 <code>hasNext()</code> 的时间复杂度均为 <code>O(1)</code>，因为每次操作最多涉及缓存或底层迭代器的调用。</li><li><strong>空间复杂度</strong>：<code>O(1)</code>，额外的缓存变量 <code>peeked</code> 占用常数空间。</li></ul><h2 id="代码" tabindex="-1"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">PeekingIterator</span> <span class="token punctuation">{</span>
	<span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">iterator</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span>iterator <span class="token operator">=</span> iterator<span class="token punctuation">;</span> <span class="token comment">// 底层迭代器</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span>peeked <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">// 缓存的预览值</span>
	<span class="token punctuation">}</span>

	<span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token comment">// 如果没有缓存值，获取下一个值并缓存</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>peeked <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">this</span><span class="token punctuation">.</span>peeked <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>peeked<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token comment">// 如果缓存中有值，返回缓存值并清空缓存</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>peeked <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">const</span> temp <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>peeked<span class="token punctuation">;</span>
			<span class="token keyword">this</span><span class="token punctuation">.</span>peeked <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
			<span class="token keyword">return</span> temp<span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		<span class="token comment">// 如果没有缓存，直接从底层迭代器获取下一个值</span>
		<span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token comment">// 如果缓存中有值，则一定有下一个元素</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>peeked <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		<span class="token comment">// 否则检查底层迭代器是否有更多元素</span>
		<span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>iterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="相关题目" tabindex="-1"><a class="header-anchor" href="#相关题目" aria-hidden="true">#</a> 相关题目</h2>`,28),w=e("thead",null,[e("tr",null,[e("th",{style:{"text-align":"center"}},"题号"),e("th",{style:{"text-align":"left"}},"标题"),e("th",{style:{"text-align":"center"}},"题解"),e("th",{style:{"text-align":"left"}},"标签"),e("th",{style:{"text-align":"center"}},"难度"),e("th",{style:{"text-align":"center"}},"力扣")])],-1),I=e("td",{style:{"text-align":"center"}},"173",-1),q=e("td",{style:{"text-align":"left"}},"二叉搜索树迭代器",-1),N={style:{"text-align":"center"}},P={style:{"text-align":"left"}},E=e("code",null,"栈",-1),j=e("code",null,"树",-1),z=e("code",null,"设计",-1),C=e("code",null,"3+",-1),L=e("td",{style:{"text-align":"center"}},"🟠",-1),R={style:{"text-align":"center"}},V={href:"https://leetcode.cn/problems/binary-search-tree-iterator",target:"_blank",rel:"noopener noreferrer"},O={href:"https://leetcode.com/problems/binary-search-tree-iterator",target:"_blank",rel:"noopener noreferrer"},B=e("td",{style:{"text-align":"center"}},"251",-1),F=e("td",{style:{"text-align":"left"}},"展开二维向量 🔒",-1),A=e("td",{style:{"text-align":"center"}},null,-1),D={style:{"text-align":"left"}},H=e("code",null,"设计",-1),M=e("code",null,"数组",-1),S=e("code",null,"双指针",-1),T=e("code",null,"1+",-1),G=e("td",{style:{"text-align":"center"}},"🟠",-1),J={style:{"text-align":"center"}},K={href:"https://leetcode.cn/problems/flatten-2d-vector",target:"_blank",rel:"noopener noreferrer"},Q={href:"https://leetcode.com/problems/flatten-2d-vector",target:"_blank",rel:"noopener noreferrer"},U=e("td",{style:{"text-align":"center"}},"281",-1),W=e("td",{style:{"text-align":"left"}},"锯齿迭代器 🔒",-1),X=e("td",{style:{"text-align":"center"}},null,-1),Y={style:{"text-align":"left"}},Z=e("code",null,"设计",-1),$=e("code",null,"队列",-1),ee=e("code",null,"数组",-1),te=e("code",null,"1+",-1),ne=e("td",{style:{"text-align":"center"}},"🟠",-1),se={style:{"text-align":"center"}},oe={href:"https://leetcode.cn/problems/zigzag-iterator",target:"_blank",rel:"noopener noreferrer"},ae={href:"https://leetcode.com/problems/zigzag-iterator",target:"_blank",rel:"noopener noreferrer"};function le(ce,pe){const c=l("font"),o=l("RouterLink"),a=l("ExternalLinkIcon");return i(),r("div",null,[h,e("p",null,[t("🟠 "),n(c,{color:"#ffb800"},{default:s(()=>[t("Medium")]),_:1}),t("  🔖  "),n(o,{to:"/tag/design.html"},{default:s(()=>[g]),_:1}),t(),n(o,{to:"/tag/array.html"},{default:s(()=>[m]),_:1}),t(),n(o,{to:"/tag/iterator.html"},{default:s(()=>[_]),_:1}),t("  🔗 "),e("a",x,[v,n(a)]),t(),e("a",b,[f,n(a)])]),y,d(" prettier-ignore "),e("table",null,[w,e("tbody",null,[e("tr",null,[I,q,e("td",N,[n(o,{to:"/problem/0173.html"},{default:s(()=>[t("[✓]")]),_:1})]),e("td",P,[n(o,{to:"/tag/stack.html"},{default:s(()=>[E]),_:1}),t(),n(o,{to:"/tag/tree.html"},{default:s(()=>[j]),_:1}),t(),n(o,{to:"/tag/design.html"},{default:s(()=>[z]),_:1}),t(),C]),L,e("td",R,[e("a",V,[t("🀄️"),n(a)]),t(),e("a",O,[t("🔗"),n(a)])])]),e("tr",null,[B,F,A,e("td",D,[n(o,{to:"/tag/design.html"},{default:s(()=>[H]),_:1}),t(),n(o,{to:"/tag/array.html"},{default:s(()=>[M]),_:1}),t(),n(o,{to:"/tag/two-pointers.html"},{default:s(()=>[S]),_:1}),t(),T]),G,e("td",J,[e("a",K,[t("🀄️"),n(a)]),t(),e("a",Q,[t("🔗"),n(a)])])]),e("tr",null,[U,W,X,e("td",Y,[n(o,{to:"/tag/design.html"},{default:s(()=>[Z]),_:1}),t(),n(o,{to:"/tag/queue.html"},{default:s(()=>[$]),_:1}),t(),n(o,{to:"/tag/array.html"},{default:s(()=>[ee]),_:1}),t(),te]),ne,e("td",se,[e("a",oe,[t("🀄️"),n(a)]),t(),e("a",ae,[t("🔗"),n(a)])])])])])])}const re=p(k,[["render",le],["__file","0284.html.vue"]]);export{re as default};
