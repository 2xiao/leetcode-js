import{_ as l,r as t,o as i,c as d,a as n,b as s,d as a,w as e,e as r}from"./app-aQeLbVW9.js";const u={},k=n("h1",{id:"_1252-奇数值单元格的数目",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_1252-奇数值单元格的数目","aria-hidden":"true"},"#"),s(" 1252. 奇数值单元格的数目")],-1),m=n("code",null,"数组",-1),v=n("code",null,"数学",-1),g=n("code",null,"模拟",-1),h={href:"https://leetcode.cn/problems/cells-with-odd-values-in-a-matrix",target:"_blank",rel:"noopener noreferrer"},b=n("code",null,"力扣",-1),f={href:"https://leetcode.com/problems/cells-with-odd-values-in-a-matrix",target:"_blank",rel:"noopener noreferrer"},w=n("code",null,"LeetCode",-1),_=r(`<h2 id="题目" tabindex="-1"><a class="header-anchor" href="#题目" aria-hidden="true">#</a> 题目</h2><p>There is an <code>m x n</code> matrix that is initialized to all <code>0</code>&#39;s. There is also a 2D array <code>indices</code> where each <code>indices[i] = [ri, ci]</code> represents a <strong>0-indexed location</strong> to perform some increment operations on the matrix.</p><p>For each location <code>indices[i]</code>, do <strong>both</strong> of the following:</p><ol><li>Increment <strong>all</strong> the cells on row <code>ri</code>.</li><li>Increment <strong>all</strong> the cells on column <code>ci</code>.</li></ol><p>Given <code>m</code>, <code>n</code>, and <code>indices</code>, return _the <strong>number of odd-valued cells</strong> in the matrix after applying the increment to all locations in _<code>indices</code>.</p><p><strong>Example 1:</strong></p><figure><img src="https://assets.leetcode.com/uploads/2019/10/30/e1.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><blockquote><p>Input: m = 2, n = 3, indices = [[0,1],[1,1]]</p><p>Output: 6</p><p>Explanation: Initial matrix = [[0,0,0],[0,0,0]].</p><p>After applying first increment it becomes [[1,2,1],[0,1,0]].</p><p>The final matrix is [[1,3,1],[1,3,1]], which contains 6 odd numbers.</p></blockquote><p><strong>Example 2:</strong></p><figure><img src="https://assets.leetcode.com/uploads/2019/10/30/e2.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><blockquote><p>Input: m = 2, n = 2, indices = [[1,1],[0,0]]</p><p>Output: 0</p><p>Explanation: Final matrix = [[2,2],[2,2]]. There are no odd numbers in the final matrix.</p></blockquote><p><strong>Constraints:</strong></p><ul><li><code>1 &lt;= m, n &lt;= 50</code></li><li><code>1 &lt;= indices.length &lt;= 100</code></li><li><code>0 &lt;= ri &lt; m</code></li><li><code>0 &lt;= ci &lt; n</code></li></ul><p><strong>Follow up:</strong> Could you solve this in <code>O(n + m + indices.length)</code> time with only <code>O(n + m)</code> extra space?</p><h2 id="题目大意" tabindex="-1"><a class="header-anchor" href="#题目大意" aria-hidden="true">#</a> 题目大意</h2><p>给你一个 <code>m x n</code> 的矩阵，最开始的时候，每个单元格中的值都是 <code>0</code>。</p><p>另有一个二维索引数组 <code>indices</code>，<code>indices[i] = [ri, ci]</code> 指向矩阵中的某个位置，其中 <code>ri</code> 和 <code>ci</code> 分别表示指定的行和列（<strong>从<code>0</code> 开始编号</strong>）。</p><p>对 <code>indices[i]</code> 所指向的每个位置，应同时执行下述增量操作：</p><ol><li><code>ri</code> 行上的所有单元格，加 <code>1</code> 。</li><li><code>ci</code> 列上的所有单元格，加 <code>1</code> 。</li></ol><p>给你 <code>m</code>、<code>n</code> 和 <code>indices</code> 。请你在执行完所有 <code>indices</code> 指定的增量操作后，返回矩阵中 <strong>奇数值单元格</strong> 的数目。</p><p><strong>示例 1：</strong></p><figure><img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/11/06/e1.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><blockquote><p><strong>输入：</strong> m = 2, n = 3, indices = [[0,1],[1,1]]</p><p><strong>输出：</strong> 6</p><p><strong>解释：</strong> 最开始的矩阵是 [[0,0,0],[0,0,0]]。</p><p>第一次增量操作后得到 [[1,2,1],[0,1,0]]。</p><p>最后的矩阵是 [[1,3,1],[1,3,1]]，里面有 6 个奇数。</p></blockquote><p><strong>示例 2：</strong></p><figure><img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/11/06/e2.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><blockquote><p><strong>输入：</strong> m = 2, n = 2, indices = [[1,1],[0,0]]</p><p><strong>输出：</strong> 0</p><p><strong>解释：</strong> 最后的矩阵是 [[2,2],[2,2]]，里面没有奇数。</p></blockquote><p><strong>提示：</strong></p><ul><li><code>1 &lt;= m, n &lt;= 50</code></li><li><code>1 &lt;= indices.length &lt;= 100</code></li><li><code>0 &lt;= ri &lt; m</code></li><li><code>0 &lt;= ci &lt; n</code></li></ul><p><strong>进阶：</strong> 你可以设计一个时间复杂度为 <code>O(n + m + indices.length)</code> 且仅用 <code>O(n + m)</code> 额外空间的算法来解决此问题吗？</p><h2 id="解题思路" tabindex="-1"><a class="header-anchor" href="#解题思路" aria-hidden="true">#</a> 解题思路</h2><ol><li><p><strong>行和列的影响分离：</strong></p><ul><li>每次对 <code>r</code> 行加 1 的操作，只会增加该行对应元素的值；</li><li>每次对 <code>c</code> 列加 1 的操作，只会增加该列对应元素的值。</li><li>所以，可以分别统计行和列的增量，并通过求和来确定最终值是否为奇数。</li></ul></li><li><p><strong>奇偶性判断：</strong></p><ul><li>一个矩阵元素是否为奇数，仅取决于其所在行和列的增量奇偶性。</li><li>如果某个元素所在行的增量 <code>row[i]</code> 和列的增量 <code>col[j]</code> 之和是奇数，则该元素是奇数。</li><li>行奇数与列偶数交叉的元素为奇数。</li><li>行偶数与列奇数交叉的元素为奇数。</li></ul></li><li><p><strong>公式化结果：</strong></p><ul><li>设 <code>oddRow</code> 和 <code>evenRow</code> 分别为奇数行和偶数行的数量；</li><li>设 <code>oddCol</code> 和 <code>evenCol</code> 分别为奇数列和偶数列的数量；</li><li>矩阵中奇数值元素的数量为：<code>oddRow * evenCol + evenRow * oddCol</code></li></ul></li><li><p><strong>实现步骤：</strong></p><ul><li>初始化两个数组 <code>row</code> 和 <code>col</code>，分别记录每行和每列的增量；</li><li>遍历 <code>indices</code>，更新 <code>row</code> 和 <code>col</code> 的计数；</li><li>遍历 <code>row</code> 和 <code>col</code>，统计奇偶行和列的数量；</li><li>根据公式计算奇数值元素的总数。</li></ul></li></ol><h4 id="复杂度分析" tabindex="-1"><a class="header-anchor" href="#复杂度分析" aria-hidden="true">#</a> 复杂度分析</h4><ul><li><strong>时间复杂度</strong>：<code>O(k + m + n)</code>， <ul><li>遍历 <code>indices</code> 更新 <code>row</code> 和 <code>col</code>，时间复杂度为 <code>O(k)</code>，其中 <code>k</code> 是 <code>indices</code> 的长度。</li><li>分别遍历 <code>row</code> 和 <code>col</code> 统计奇偶行和列，时间复杂度为 <code>O(m + n)</code>。</li></ul></li><li><strong>空间复杂度</strong>：<code>O(m + n)</code>，<code>row</code> 和 <code>col</code> 的大小分别为 <code>O(m)</code> 和 <code>O(n)</code>。</li></ul><h2 id="代码" tabindex="-1"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">}</span></span> <span class="token parameter">m</span>
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">}</span></span> <span class="token parameter">n</span>
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span> <span class="token parameter">indices</span>
 * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">}</span></span>
 */</span>
<span class="token keyword">var</span> <span class="token function-variable function">oddCells</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">m<span class="token punctuation">,</span> n<span class="token punctuation">,</span> indices</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">let</span> row <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">let</span> col <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token comment">// 更新行和列的增量</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> <span class="token punctuation">[</span>r<span class="token punctuation">,</span> c<span class="token punctuation">]</span> <span class="token keyword">of</span> indices<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		row<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>
		col<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token comment">// 统计奇偶行和列的数量</span>
	<span class="token keyword">let</span> oddRow <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>
		evenRow <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> num <span class="token keyword">of</span> row<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			evenRow<span class="token operator">++</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
			oddRow<span class="token operator">++</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">let</span> oddCol <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>
		evenCol <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> num <span class="token keyword">of</span> col<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			evenCol<span class="token operator">++</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
			oddCol<span class="token operator">++</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>

	<span class="token comment">// 根据公式计算奇数值元素总数</span>
	<span class="token keyword">return</span> oddRow <span class="token operator">*</span> evenCol <span class="token operator">+</span> evenRow <span class="token operator">*</span> oddCol<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,35);function y(x,C){const p=t("font"),o=t("RouterLink"),c=t("ExternalLinkIcon");return i(),d("div",null,[k,n("p",null,[s("🟢 "),a(p,{color:"#15bd66"},{default:e(()=>[s("Easy")]),_:1}),s("  🔖  "),a(o,{to:"/tag/array.html"},{default:e(()=>[m]),_:1}),s(),a(o,{to:"/tag/math.html"},{default:e(()=>[v]),_:1}),s(),a(o,{to:"/tag/simulation.html"},{default:e(()=>[g]),_:1}),s("  🔗 "),n("a",h,[b,a(c)]),s(),n("a",f,[w,a(c)])]),_])}const R=l(u,[["render",y],["__file","1252.html.vue"]]);export{R as default};
