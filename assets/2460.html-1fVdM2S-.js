import{_ as c,r as l,o as r,c as i,a as n,b as s,d as t,w as e,f as u,e as d}from"./app-aQeLbVW9.js";const m={},k=n("h1",{id:"_2460-对数组执行操作",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_2460-对数组执行操作","aria-hidden":"true"},"#"),s(" 2460. 对数组执行操作")],-1),h=n("code",null,"数组",-1),g=n("code",null,"双指针",-1),_=n("code",null,"模拟",-1),b={href:"https://leetcode.cn/problems/apply-operations-to-an-array",target:"_blank",rel:"noopener noreferrer"},f=n("code",null,"力扣",-1),v={href:"https://leetcode.com/problems/apply-operations-to-an-array",target:"_blank",rel:"noopener noreferrer"},y=n("code",null,"LeetCode",-1),w=d(`<h2 id="题目" tabindex="-1"><a class="header-anchor" href="#题目" aria-hidden="true">#</a> 题目</h2><p>You are given a <strong>0-indexed</strong> array <code>nums</code> of size <code>n</code> consisting of <strong>non- negative</strong> integers.</p><p>You need to apply <code>n - 1</code> operations to this array where, in the <code>ith</code> operation (<strong>0-indexed</strong>), you will apply the following on the <code>ith</code> element of <code>nums</code>:</p><ul><li>If <code>nums[i] == nums[i + 1]</code>, then multiply <code>nums[i]</code> by <code>2</code> and set <code>nums[i + 1]</code> to <code>0</code>. Otherwise, you skip this operation.</li></ul><p>After performing <strong>all</strong> the operations, <strong>shift</strong> all the <code>0</code>&#39;s to the <strong>end</strong> of the array.</p><ul><li>For example, the array <code>[1,0,2,0,0,1]</code> after shifting all its <code>0</code>&#39;s to the end, is <code>[1,2,1,0,0,0]</code>.</li></ul><p>Return <em>the resulting array</em>.</p><p><strong>Note</strong> that the operations are applied <strong>sequentially</strong> , not all at once.</p><p><strong>Example 1:</strong></p><blockquote><p>Input: nums = [1,2,2,1,1,0]</p><p>Output: [1,4,2,0,0,0]</p><p>Explanation: We do the following operations:</p><ul><li>i = 0: nums[0] and nums[1] are not equal, so we skip this operation.</li><li>i = 1: nums[1] and nums[2] are equal, we multiply nums[1] by 2 and change nums[2] to 0. The array becomes [1,<strong><em>4</em></strong> ,<strong><em>0</em></strong> ,1,1,0].</li><li>i = 2: nums[2] and nums[3] are not equal, so we skip this operation.</li><li>i = 3: nums[3] and nums[4] are equal, we multiply nums[3] by 2 and change nums[4] to 0. The array becomes [1,4,0,<strong><em>2</em></strong> ,<strong><em>0</em></strong> ,0].</li><li>i = 4: nums[4] and nums[5] are equal, we multiply nums[4] by 2 and change nums[5] to 0. The array becomes [1,4,0,2,<strong><em>0</em></strong> ,<strong><em>0</em></strong>].</li></ul><p>After that, we shift the 0&#39;s to the end, which gives the array [1,4,2,0,0,0].</p></blockquote><p><strong>Example 2:</strong></p><blockquote><p>Input: nums = [0,1]</p><p>Output: [1,0]</p><p>Explanation: No operation can be applied, we just shift the 0 to the end.</p></blockquote><p><strong>Constraints:</strong></p><ul><li><code>2 &lt;= nums.length &lt;= 2000</code></li><li><code>0 &lt;= nums[i] &lt;= 1000</code></li></ul><h2 id="题目大意" tabindex="-1"><a class="header-anchor" href="#题目大意" aria-hidden="true">#</a> 题目大意</h2><p>给你一个下标从 <strong>0</strong> 开始的数组 <code>nums</code> ，数组大小为 <code>n</code> ，且由 <strong>非负</strong> 整数组成。</p><p>你需要对数组执行 <code>n - 1</code> 步操作，其中第 <code>i</code> 步操作（从 <strong>0</strong> 开始计数）要求对 <code>nums</code> 中第 <code>i</code> 个元素执行下述指令：</p><ul><li>如果 <code>nums[i] == nums[i + 1]</code> ，则 <code>nums[i]</code> 的值变成原来的 <code>2</code> 倍，<code>nums[i + 1]</code> 的值变成 <code>0</code> 。否则，跳过这步操作。</li></ul><p>在执行完 <strong>全部</strong> 操作后，将所有 <code>0</code> <strong>移动</strong> 到数组的 <strong>末尾</strong> 。</p><ul><li>例如，数组 <code>[1,0,2,0,0,1]</code> 将所有 <code>0</code> 移动到末尾后变为 <code>[1,2,1,0,0,0]</code> 。</li></ul><p>返回结果数组。</p><p><strong>注意</strong> 操作应当 <strong>依次有序</strong> 执行，而不是一次性全部执行。</p><p><strong>示例 1：</strong></p><blockquote><p><strong>输入：</strong> nums = [1,2,2,1,1,0]</p><p><strong>输出：</strong>[1,4,2,0,0,0]</p><p><strong>解释：</strong> 执行以下操作：</p><ul><li>i = 0: nums[0] 和 nums[1] 不相等，跳过这步操作。</li><li>i = 1: nums[1] 和 nums[2] 相等，nums[1] 的值变成原来的 2 倍，nums[2] 的值变成 0 。数组变成 [1,<em><strong>4</strong></em> ,<em><strong>0</strong></em> ,1,1,0] 。</li><li>i = 2: nums[2] 和 nums[3] 不相等，所以跳过这步操作。</li><li>i = 3: nums[3] 和 nums[4] 相等，nums[3] 的值变成原来的 2 倍，nums[4] 的值变成 0 。数组变成 [1,4,0,<em><strong>2</strong></em> ,<em><strong>0</strong></em> ,0] 。</li><li>i = 4: nums[4] 和 nums[5] 相等，nums[4] 的值变成原来的 2 倍，nums[5] 的值变成 0 。数组变成 [1,4,0,2,<em><strong>0</strong></em> ,<em><strong>0</strong></em>] 。</li></ul><p>执行完所有操作后，将 0 全部移动到数组末尾，得到结果数组 [1,4,2,0,0,0] 。</p></blockquote><p><strong>示例 2：</strong></p><blockquote><p><strong>输入：</strong> nums = [0,1]</p><p><strong>输出：</strong>[1,0]</p><p><strong>解释：</strong> 无法执行任何操作，只需要将 0 移动到末尾。</p></blockquote><p><strong>提示：</strong></p><ul><li><code>2 &lt;= nums.length &lt;= 2000</code></li><li><code>0 &lt;= nums[i] &lt;= 1000</code></li></ul><h2 id="解题思路" tabindex="-1"><a class="header-anchor" href="#解题思路" aria-hidden="true">#</a> 解题思路</h2><ol><li><p><strong>合并相邻相等元素</strong></p><ul><li>遍历数组 <code>nums</code>，检查相邻元素 <code>nums[i]</code> 和 <code>nums[i+1]</code> 是否相等且非零。</li><li>如果相等，执行 <code>nums[i] *= 2</code>，并将 <code>nums[i + 1] = 0</code>。</li></ul></li><li><p><strong>移动非零元素</strong></p><ul><li>使用 <strong>双指针</strong> 方法： <ul><li>指针 <code>slow</code> 指向下一个要放置非零元素的位置。</li><li>指针 <code>fast</code> 遍历数组： <ul><li>将所有非零元素按顺序填入 <code>nums[slow]</code>；</li><li>若 <code>fast !== slow</code>，将 <code>nums[fast]</code> 置为 <code>0</code>；</li><li>更新 <code>slow</code>；</li></ul></li><li>遍历结束后，所有非零元素已经左移。</li></ul></li></ul></li></ol><h4 id="复杂度分析" tabindex="-1"><a class="header-anchor" href="#复杂度分析" aria-hidden="true">#</a> 复杂度分析</h4><ul><li><strong>时间复杂度</strong>：<code>O(n)</code>，遍历数组两次（一次合并，一次移动）。</li><li><strong>空间复杂度</strong>：<code>O(1)</code>，原地修改 <code>nums</code>，不额外使用数组。</li></ul><h2 id="代码" tabindex="-1"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span> <span class="token parameter">nums</span>
 * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span>
 */</span>
<span class="token keyword">var</span> <span class="token function-variable function">applyOperations</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">nums</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">const</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>

	<span class="token comment">// 合并相邻相同的非零元素</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">===</span> nums<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*=</span> <span class="token number">2</span><span class="token punctuation">;</span>
			nums<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>

	<span class="token comment">// 双指针移动非零元素</span>
	<span class="token keyword">let</span> slow <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> fast <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> fast <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> fast<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">const</span> num <span class="token operator">=</span> nums<span class="token punctuation">[</span>fast<span class="token punctuation">]</span><span class="token punctuation">;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>fast<span class="token punctuation">]</span> <span class="token operator">!==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			nums<span class="token punctuation">[</span>slow<span class="token punctuation">]</span> <span class="token operator">=</span> num<span class="token punctuation">;</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span>slow <span class="token operator">!==</span> fast<span class="token punctuation">)</span> <span class="token punctuation">{</span>
				nums<span class="token punctuation">[</span>fast<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span>
			slow<span class="token operator">++</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">return</span> nums<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="相关题目" tabindex="-1"><a class="header-anchor" href="#相关题目" aria-hidden="true">#</a> 相关题目</h2>`,35),x=n("thead",null,[n("tr",null,[n("th",{style:{"text-align":"center"}},"题号"),n("th",{style:{"text-align":"left"}},"标题"),n("th",{style:{"text-align":"center"}},"题解"),n("th",{style:{"text-align":"left"}},"标签"),n("th",{style:{"text-align":"center"}},"难度"),n("th",{style:{"text-align":"center"}},"力扣")])],-1),q=n("td",{style:{"text-align":"center"}},"26",-1),E=n("td",{style:{"text-align":"left"}},"删除有序数组中的重复项",-1),N={style:{"text-align":"center"}},O={style:{"text-align":"left"}},C=n("code",null,"数组",-1),I=n("code",null,"双指针",-1),L=n("td",{style:{"text-align":"center"}},"🟢",-1),V={style:{"text-align":"center"}},j={href:"https://leetcode.cn/problems/remove-duplicates-from-sorted-array",target:"_blank",rel:"noopener noreferrer"},T={href:"https://leetcode.com/problems/remove-duplicates-from-sorted-array",target:"_blank",rel:"noopener noreferrer"},z=n("td",{style:{"text-align":"center"}},"283",-1),B=n("td",{style:{"text-align":"left"}},"移动零",-1),R={style:{"text-align":"center"}},A={style:{"text-align":"left"}},Y=n("code",null,"数组",-1),F=n("code",null,"双指针",-1),S=n("td",{style:{"text-align":"center"}},"🟢",-1),W={style:{"text-align":"center"}},D={href:"https://leetcode.cn/problems/move-zeroes",target:"_blank",rel:"noopener noreferrer"},G={href:"https://leetcode.com/problems/move-zeroes",target:"_blank",rel:"noopener noreferrer"};function H(J,K){const p=l("font"),a=l("RouterLink"),o=l("ExternalLinkIcon");return r(),i("div",null,[k,n("p",null,[s("🟢 "),t(p,{color:"#15bd66"},{default:e(()=>[s("Easy")]),_:1}),s("  🔖  "),t(a,{to:"/tag/array.html"},{default:e(()=>[h]),_:1}),s(),t(a,{to:"/tag/two-pointers.html"},{default:e(()=>[g]),_:1}),s(),t(a,{to:"/tag/simulation.html"},{default:e(()=>[_]),_:1}),s("  🔗 "),n("a",b,[f,t(o)]),s(),n("a",v,[y,t(o)])]),w,u(" prettier-ignore "),n("table",null,[x,n("tbody",null,[n("tr",null,[q,E,n("td",N,[t(a,{to:"/problem/0026.html"},{default:e(()=>[s("[✓]")]),_:1})]),n("td",O,[t(a,{to:"/tag/array.html"},{default:e(()=>[C]),_:1}),s(),t(a,{to:"/tag/two-pointers.html"},{default:e(()=>[I]),_:1})]),L,n("td",V,[n("a",j,[s("🀄️"),t(o)]),s(),n("a",T,[s("🔗"),t(o)])])]),n("tr",null,[z,B,n("td",R,[t(a,{to:"/problem/0283.html"},{default:e(()=>[s("[✓]")]),_:1})]),n("td",A,[t(a,{to:"/tag/array.html"},{default:e(()=>[Y]),_:1}),s(),t(a,{to:"/tag/two-pointers.html"},{default:e(()=>[F]),_:1})]),S,n("td",W,[n("a",D,[s("🀄️"),t(o)]),s(),n("a",G,[s("🔗"),t(o)])])])])])])}const P=c(m,[["render",H],["__file","2460.html.vue"]]);export{P as default};
