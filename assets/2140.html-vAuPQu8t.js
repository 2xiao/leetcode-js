import{_ as i,r as p,o as c,c as r,a as n,b as s,d as e,w as t,f as u,e as d}from"./app-fBVbqwGY.js";const k={},h=n("h1",{id:"_2140-解决智力问题",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_2140-解决智力问题","aria-hidden":"true"},"#"),s(" 2140. 解决智力问题")],-1),g=n("code",null,"数组",-1),m=n("code",null,"动态规划",-1),b={href:"https://leetcode.cn/problems/solving-questions-with-brainpower",target:"_blank",rel:"noopener noreferrer"},_=n("code",null,"力扣",-1),v={href:"https://leetcode.com/problems/solving-questions-with-brainpower",target:"_blank",rel:"noopener noreferrer"},f=n("code",null,"LeetCode",-1),x=d(`<h2 id="题目" tabindex="-1"><a class="header-anchor" href="#题目" aria-hidden="true">#</a> 题目</h2><p>You are given a <strong>0-indexed</strong> 2D integer array <code>questions</code> where <code>questions[i] = [pointsi, brainpoweri]</code>.</p><p>The array describes the questions of an exam, where you have to process the questions <strong>in order</strong> (i.e., starting from question <code>0</code>) and make a decision whether to <strong>solve</strong> or <strong>skip</strong> each question. Solving question <code>i</code> will <strong>earn</strong> you <code>pointsi</code> points but you will be <strong>unable</strong> to solve each of the next <code>brainpoweri</code> questions. If you skip question <code>i</code>, you get to make the decision on the next question.</p><ul><li><p>For example, given <code>questions = [[3, 2], [4, 3], [4, 4], [2, 5]]</code>:</p><ul><li><p>If question <code>0</code> is solved, you will earn <code>3</code> points but you will be unable to solve questions <code>1</code> and <code>2</code>.</p></li><li><p>If instead, question <code>0</code> is skipped and question <code>1</code> is solved, you will earn <code>4</code> points but you will be unable to solve questions <code>2</code> and <code>3</code>.</p></li></ul></li></ul><p>Return <em>the<strong>maximum</strong> points you can earn for the exam</em>.</p><p><strong>Example 1:</strong></p><blockquote><p>Input: questions = [[3,2],[4,3],[4,4],[2,5]]</p><p>Output: 5</p><p>Explanation: The maximum points can be earned by solving questions 0 and 3.</p><ul><li>Solve question 0: Earn 3 points, will be unable to solve the next 2 questions</li><li>Unable to solve questions 1 and 2</li><li>Solve question 3: Earn 2 points</li></ul><p>Total points earned: 3 + 2 = 5. There is no other way to earn 5 or more points.</p></blockquote><p><strong>Example 2:</strong></p><blockquote><p>Input: questions = [[1,1],[2,2],[3,3],[4,4],[5,5]]</p><p>Output: 7</p><p>Explanation: The maximum points can be earned by solving questions 1 and 4.</p><ul><li>Skip question 0</li><li>Solve question 1: Earn 2 points, will be unable to solve the next 2 questions</li><li>Unable to solve questions 2 and 3</li><li>Solve question 4: Earn 5 points</li></ul><p>Total points earned: 2 + 5 = 7. There is no other way to earn 7 or more points.</p></blockquote><p><strong>Constraints:</strong></p><ul><li><code>1 &lt;= questions.length &lt;= 10^5</code></li><li><code>questions[i].length == 2</code></li><li><code>1 &lt;= pointsi, brainpoweri &lt;= 10^5</code></li></ul><h2 id="题目大意" tabindex="-1"><a class="header-anchor" href="#题目大意" aria-hidden="true">#</a> 题目大意</h2><p>给你一个下标从 <strong>0</strong> 开始的二维整数数组 <code>questions</code> ，其中 <code>questions[i] = [pointsi, brainpoweri]</code> 。</p><p>这个数组表示一场考试里的一系列题目，你需要 <strong>按顺序</strong> （也就是从问题 <code>0</code>** ** 开始依次解决），针对每个问题选择 <strong>解决</strong> 或者 <strong>跳过</strong> 操作。解决问题 <code>i</code> 将让你 <strong>获得</strong> <code>pointsi</code> 的分数，但是你将 **无法** 解决接下来的 <code>brainpoweri</code> 个问题（即只能跳过接下来的 <code>brainpoweri</code> 个问题）。如果你跳过问题 <code>i</code> ，你可以对下一个问题决定使用哪种操作。</p><ul><li><p>比方说，给你 <code>questions = [[3, 2], [4, 3], [4, 4], [2, 5]]</code> ：</p><ul><li><p>如果问题 <code>0</code> 被解决了， 那么你可以获得 <code>3</code> 分，但你不能解决问题 <code>1</code> 和 <code>2</code> 。</p></li><li><p>如果你跳过问题 <code>0</code> ，且解决问题 <code>1</code> ，你将获得 <code>4</code> 分但是不能解决问题 <code>2</code> 和 <code>3</code> 。</p></li></ul></li></ul><p>请你返回这场考试里你能获得的 <strong>最高</strong> 分数。</p><p><strong>示例 1：</strong></p><blockquote><p><strong>输入：</strong> questions = [[3,2],[4,3],[4,4],[2,5]]</p><p><strong>输出：</strong> 5</p><p><strong>解释：</strong> 解决问题 0 和 3 得到最高分。</p><ul><li>解决问题 0 ：获得 3 分，但接下来 2 个问题都不能解决。</li><li>不能解决问题 1 和 2</li><li>解决问题 3 ：获得 2 分</li></ul><p>总得分为：3 + 2 = 5 。没有别的办法获得 5 分或者多于 5 分。</p></blockquote><p><strong>示例 2：</strong></p><blockquote><p><strong>输入：</strong> questions = [[1,1],[2,2],[3,3],[4,4],[5,5]]</p><p><strong>输出：</strong> 7</p><p><strong>解释：</strong> 解决问题 1 和 4 得到最高分。</p><ul><li>跳过问题 0</li><li>解决问题 1 ：获得 2 分，但接下来 2 个问题都不能解决。</li><li>不能解决问题 2 和 3</li><li>解决问题 4 ：获得 5 分</li></ul><p>总得分为：2 + 5 = 7 。没有别的办法获得 7 分或者多于 7 分。</p></blockquote><p><strong>提示：</strong></p><ul><li><code>1 &lt;= questions.length &lt;= 10^5</code></li><li><code>questions[i].length == 2</code></li><li><code>1 &lt;= pointsi, brainpoweri &lt;= 10^5</code></li></ul><h2 id="解题思路" tabindex="-1"><a class="header-anchor" href="#解题思路" aria-hidden="true">#</a> 解题思路</h2><ol><li><p><code>dp[i]</code> 表示从 <code>i</code> 开始能获得的最大分数。</p></li><li><p><strong>状态转移方程</strong>：</p><ul><li><strong>跳过当前题目</strong>：<code>dp[i] = dp[i + 1]</code></li><li><strong>选择当前题目</strong>：<code>dp[i] = points[i] + dp[i + brainpower[i] + 1]</code></li><li><strong>最终递推公式</strong>：</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> points<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> dp<span class="token punctuation">[</span>i <span class="token operator">+</span> brainpower<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p><strong>初始化</strong>：</p><ul><li><code>dp[n] = 0</code>（超出范围时得分为 <code>0</code>）</li><li><code>dp[i]</code> 依赖于 <code>dp[i+1]</code>，所以我们<strong>从后往前遍历</strong>。</li></ul></li></ol><h4 id="复杂度分析" tabindex="-1"><a class="header-anchor" href="#复杂度分析" aria-hidden="true">#</a> 复杂度分析</h4><ul><li><strong>时间复杂度</strong>：<code>O(n)</code>，只遍历一次 <code>questions</code>。</li><li><strong>空间复杂度</strong>：<code>O(n)</code>，使用了一个一维数组来存储中间状态。</li></ul><h2 id="代码" tabindex="-1"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span> <span class="token parameter">questions</span>
 * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">}</span></span>
 */</span>
<span class="token keyword">var</span> <span class="token function-variable function">mostPoints</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">questions</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">const</span> n <span class="token operator">=</span> questions<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
	<span class="token keyword">const</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 额外留一个位置，避免越界</span>

	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">const</span> <span class="token punctuation">[</span>point<span class="token punctuation">,</span> brainpower<span class="token punctuation">]</span> <span class="token operator">=</span> questions<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
		<span class="token keyword">const</span> nextIndex <span class="token operator">=</span> i <span class="token operator">+</span> brainpower <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
		<span class="token keyword">const</span> solve <span class="token operator">=</span> point <span class="token operator">+</span> <span class="token punctuation">(</span>nextIndex <span class="token operator">&lt;</span> n <span class="token operator">?</span> dp<span class="token punctuation">[</span>nextIndex<span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> solve<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">return</span> dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="相关题目" tabindex="-1"><a class="header-anchor" href="#相关题目" aria-hidden="true">#</a> 相关题目</h2>`,29),y=n("thead",null,[n("tr",null,[n("th",{style:{"text-align":"center"}},"题号"),n("th",{style:{"text-align":"left"}},"标题"),n("th",{style:{"text-align":"center"}},"题解"),n("th",{style:{"text-align":"left"}},"标签"),n("th",{style:{"text-align":"center"}},"难度"),n("th",{style:{"text-align":"center"}},"力扣")])],-1),q=n("td",{style:{"text-align":"center"}},"198",-1),w=n("td",{style:{"text-align":"left"}},"打家劫舍",-1),E={style:{"text-align":"center"}},I={style:{"text-align":"left"}},j=n("code",null,"数组",-1),T=n("code",null,"动态规划",-1),S=n("td",{style:{"text-align":"center"}},"🟠",-1),C={style:{"text-align":"center"}},L={href:"https://leetcode.cn/problems/house-robber",target:"_blank",rel:"noopener noreferrer"},N={href:"https://leetcode.com/problems/house-robber",target:"_blank",rel:"noopener noreferrer"},V=n("td",{style:{"text-align":"center"}},"403",-1),O=n("td",{style:{"text-align":"left"}},"青蛙过河",-1),B=n("td",{style:{"text-align":"center"}},null,-1),M={style:{"text-align":"left"}},R=n("code",null,"数组",-1),U=n("code",null,"动态规划",-1),A=n("td",{style:{"text-align":"center"}},"🔴",-1),D={style:{"text-align":"center"}},F={href:"https://leetcode.cn/problems/frog-jump",target:"_blank",rel:"noopener noreferrer"},P={href:"https://leetcode.com/problems/frog-jump",target:"_blank",rel:"noopener noreferrer"};function Y(z,G){const l=p("font"),o=p("RouterLink"),a=p("ExternalLinkIcon");return c(),r("div",null,[h,n("p",null,[s("🟠 "),e(l,{color:"#ffb800"},{default:t(()=>[s("Medium")]),_:1}),s("  🔖  "),e(o,{to:"/tag/array.html"},{default:t(()=>[g]),_:1}),s(),e(o,{to:"/tag/dynamic-programming.html"},{default:t(()=>[m]),_:1}),s("  🔗 "),n("a",b,[_,e(a)]),s(),n("a",v,[f,e(a)])]),x,u(" prettier-ignore "),n("table",null,[y,n("tbody",null,[n("tr",null,[q,w,n("td",E,[e(o,{to:"/problem/0198.html"},{default:t(()=>[s("[✓]")]),_:1})]),n("td",I,[e(o,{to:"/tag/array.html"},{default:t(()=>[j]),_:1}),s(),e(o,{to:"/tag/dynamic-programming.html"},{default:t(()=>[T]),_:1})]),S,n("td",C,[n("a",L,[s("🀄️"),e(a)]),s(),n("a",N,[s("🔗"),e(a)])])]),n("tr",null,[V,O,B,n("td",M,[e(o,{to:"/tag/array.html"},{default:t(()=>[R]),_:1}),s(),e(o,{to:"/tag/dynamic-programming.html"},{default:t(()=>[U]),_:1})]),A,n("td",D,[n("a",F,[s("🀄️"),e(a)]),s(),n("a",P,[s("🔗"),e(a)])])])])])])}const J=i(k,[["render",Y],["__file","2140.html.vue"]]);export{J as default};
