import{_ as l,r as c,o as i,c as r,a as n,b as s,d as t,w as e,f as d,e as u}from"./app-fBVbqwGY.js";const k={},h=n("h1",{id:"_447-回旋镖的数量",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_447-回旋镖的数量","aria-hidden":"true"},"#"),s(" 447. 回旋镖的数量")],-1),g=n("code",null,"数组",-1),m=n("code",null,"哈希表",-1),b=n("code",null,"数学",-1),_={href:"https://leetcode.cn/problems/number-of-boomerangs",target:"_blank",rel:"noopener noreferrer"},v=n("code",null,"力扣",-1),f={href:"https://leetcode.com/problems/number-of-boomerangs",target:"_blank",rel:"noopener noreferrer"},y=n("code",null,"LeetCode",-1),x=u(`<h2 id="题目" tabindex="-1"><a class="header-anchor" href="#题目" aria-hidden="true">#</a> 题目</h2><p>You are given <code>n</code> <code>points</code> in the plane that are all <strong>distinct</strong> , where <code>points[i] = [xi, yi]</code>. A <strong>boomerang</strong> is a tuple of points <code>(i, j, k)</code> such that the distance between <code>i</code> and <code>j</code> equals the distance between <code>i</code> and <code>k</code><strong>(the order of the tuple matters)</strong>.</p><p>Return <em>the number of boomerangs</em>.</p><p><strong>Example 1:</strong></p><blockquote><p>Input: points = [[0,0],[1,0],[2,0]]</p><p>Output: 2</p><p>Explanation: The two boomerangs are [[1,0],[0,0],[2,0]] and [[1,0],[2,0],[0,0]].</p></blockquote><p><strong>Example 2:</strong></p><blockquote><p>Input: points = [[1,1],[2,2],[3,3]]</p><p>Output: 2</p></blockquote><p><strong>Example 3:</strong></p><blockquote><p>Input: points = [[1,1]]</p><p>Output: 0</p></blockquote><p><strong>Constraints:</strong></p><ul><li><code>n == points.length</code></li><li><code>1 &lt;= n &lt;= 500</code></li><li><code>points[i].length == 2</code></li><li><code>-10^4 &lt;= xi, yi &lt;= 10^4</code></li><li>All the points are <strong>unique</strong>.</li></ul><h2 id="题目大意" tabindex="-1"><a class="header-anchor" href="#题目大意" aria-hidden="true">#</a> 题目大意</h2><p>给定平面上 <code>n</code> 对 <strong>互不相同</strong> 的点 <code>points</code> ，其中 <code>points[i] = [xi, yi]</code> 。<strong>回旋镖</strong> 是由点 <code>(i, j, k)</code> 表示的元组 ，其中 <code>i</code> 和 <code>j</code> 之间的欧式距离和 <code>i</code> 和 <code>k</code> 之间的欧式距离相等（<strong>需要考虑元组的顺序</strong> ）。</p><p>返回平面上所有回旋镖的数量。</p><p><strong>示例 1：</strong></p><blockquote><p><strong>输入：</strong> points = [[0,0],[1,0],[2,0]]</p><p><strong>输出：</strong> 2</p><p><strong>解释：</strong> 两个回旋镖为 <strong>[[1,0],[0,0],[2,0]]</strong> 和 <strong>[[1,0],[2,0],[0,0]]</strong></p></blockquote><p><strong>示例 2：</strong></p><blockquote><p><strong>输入：</strong> points = [[1,1],[2,2],[3,3]]</p><p><strong>输出：</strong> 2</p></blockquote><p><strong>示例 3：</strong></p><blockquote><p><strong>输入：</strong> points = [[1,1]]</p><p><strong>输出：</strong> 0</p></blockquote><p><strong>提示：</strong></p><ul><li><code>n == points.length</code></li><li><code>1 &lt;= n &lt;= 500</code></li><li><code>points[i].length == 2</code></li><li><code>-10^4 &lt;= xi, yi &lt;= 10^4</code></li><li>所有点都 <strong>互不相同</strong></li></ul><h2 id="解题思路" tabindex="-1"><a class="header-anchor" href="#解题思路" aria-hidden="true">#</a> 解题思路</h2><ol><li><p><strong>定义回旋镖</strong></p><ul><li>题目要求找到所有满足 <code>(i, j, k)</code> 的 <strong>回旋镖</strong>（Boomerang），即满足： <code>dist(i, j) == dist(i, k)</code> 其中 <code>dist(i, j)</code> 表示点 <code>i</code> 和 <code>j</code> 之间的距离。</li></ul></li><li><p><strong>计算点对之间的距离</strong></p><ul><li>我们可以使用 <strong>平方欧几里得距离</strong> 来避免浮点运算： <code>dist(i, j) = (x1 - x2)^2 + (y1 - y2)^2</code></li><li>对于每个点 <code>i</code>，统计它与其他点的距离出现的次数。</li></ul></li><li><p><strong>利用哈希表统计相同距离的点</strong></p><ul><li>对于每个点 <code>i</code>，用哈希表 <code>count</code> 统计到其他点的距离： <ul><li><code>count[dist]</code> 记录当前 <code>i</code> 点下，出现相同 <code>dist</code> 的点的个数。</li></ul></li><li>若 <code>count[dist] = m</code>，那么从这些点中选出两个点 <code>(j, k)</code> 组成回旋镖的方案数为： <code>m * (m - 1)</code> 因为 <code>j -&gt; k</code> 和 <code>k -&gt; j</code> 是不同的排列。</li></ul></li><li><p><strong>遍历所有点，累加所有方案</strong></p><ul><li>对于每个点 <code>i</code>，遍历 <code>j</code> 计算所有 <code>dist(i, j)</code> 并更新 <code>count[dist]</code> 统计数量。</li><li>计算 <code>m * (m - 1)</code> 并累加到 <code>res</code>。</li></ul></li></ol><h4 id="复杂度分析" tabindex="-1"><a class="header-anchor" href="#复杂度分析" aria-hidden="true">#</a> 复杂度分析</h4><ul><li><strong>时间复杂度：</strong> <code>O(n^2)</code><ul><li>两层循环计算所有点对的距离，共 <code>O(n^2)</code> 次。</li><li><code>count</code> 哈希表的插入和查询平均时间复杂度为 <code>O(1)</code>，整体 <code>O(n^2)</code>。</li></ul></li><li><strong>空间复杂度：</strong> <code>O(n)</code><ul><li><code>count</code> 哈希表最多存储 <code>n</code> 个不同的距离（极端情况）。</li><li>由于 <code>count</code> 每轮 <code>i</code> 计算完成后都会清空，额外空间复杂度为 <code>O(n)</code>。</li></ul></li></ul><h2 id="代码" tabindex="-1"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span> <span class="token parameter">points</span>
 * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">}</span></span>
 */</span>
<span class="token keyword">var</span> <span class="token function-variable function">numberOfBoomerangs</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">points</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">const</span> n <span class="token operator">=</span> points<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
	<span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">===</span> j<span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>
			<span class="token keyword">const</span> <span class="token punctuation">[</span>x1<span class="token punctuation">,</span> y1<span class="token punctuation">]</span> <span class="token operator">=</span> points<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
			<span class="token keyword">const</span> <span class="token punctuation">[</span>x2<span class="token punctuation">,</span> y2<span class="token punctuation">]</span> <span class="token operator">=</span> points<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
			<span class="token keyword">const</span> dist <span class="token operator">=</span> <span class="token punctuation">(</span>x1 <span class="token operator">-</span> x2<span class="token punctuation">)</span> <span class="token operator">**</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token punctuation">(</span>y1 <span class="token operator">-</span> y2<span class="token punctuation">)</span> <span class="token operator">**</span> <span class="token number">2</span><span class="token punctuation">;</span>
			<span class="token keyword">const</span> cnt <span class="token operator">=</span> count<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>dist<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token number">0</span><span class="token punctuation">;</span>
			res <span class="token operator">+=</span> <span class="token number">2</span> <span class="token operator">*</span> cnt<span class="token punctuation">;</span> <span class="token comment">// 两个排列： (j, k) 和 (k, j)</span>
			count<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>dist<span class="token punctuation">,</span> cnt <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> res<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="相关题目" tabindex="-1"><a class="header-anchor" href="#相关题目" aria-hidden="true">#</a> 相关题目</h2>`,29),w=n("thead",null,[n("tr",null,[n("th",{style:{"text-align":"center"}},"题号"),n("th",{style:{"text-align":"left"}},"标题"),n("th",{style:{"text-align":"center"}},"题解"),n("th",{style:{"text-align":"left"}},"标签"),n("th",{style:{"text-align":"center"}},"难度"),n("th",{style:{"text-align":"center"}},"力扣")])],-1),j=n("td",{style:{"text-align":"center"}},"356",-1),q=n("td",{style:{"text-align":"left"}},"直线镜像 🔒",-1),O=n("td",{style:{"text-align":"center"}},null,-1),E={style:{"text-align":"left"}},B=n("code",null,"数组",-1),C=n("code",null,"哈希表",-1),I=n("code",null,"数学",-1),L=n("td",{style:{"text-align":"center"}},"🟠",-1),N={style:{"text-align":"center"}},V={href:"https://leetcode.cn/problems/line-reflection",target:"_blank",rel:"noopener noreferrer"},R={href:"https://leetcode.com/problems/line-reflection",target:"_blank",rel:"noopener noreferrer"};function A(M,T){const p=c("font"),a=c("RouterLink"),o=c("ExternalLinkIcon");return i(),r("div",null,[h,n("p",null,[s("🟠 "),t(p,{color:"#ffb800"},{default:e(()=>[s("Medium")]),_:1}),s("  🔖  "),t(a,{to:"/tag/array.html"},{default:e(()=>[g]),_:1}),s(),t(a,{to:"/tag/hash-table.html"},{default:e(()=>[m]),_:1}),s(),t(a,{to:"/tag/math.html"},{default:e(()=>[b]),_:1}),s("  🔗 "),n("a",_,[v,t(o)]),s(),n("a",f,[y,t(o)])]),x,d(" prettier-ignore "),n("table",null,[w,n("tbody",null,[n("tr",null,[j,q,O,n("td",E,[t(a,{to:"/tag/array.html"},{default:e(()=>[B]),_:1}),s(),t(a,{to:"/tag/hash-table.html"},{default:e(()=>[C]),_:1}),s(),t(a,{to:"/tag/math.html"},{default:e(()=>[I]),_:1})]),L,n("td",N,[n("a",V,[s("🀄️"),t(o)]),s(),n("a",R,[s("🔗"),t(o)])])])])])])}const Y=l(k,[["render",A],["__file","0447.html.vue"]]);export{Y as default};
