import{_ as u,r as l,o as k,c as d,a as n,b as s,d as t,w as a,f as m,e as b}from"./app-aQeLbVW9.js";const g={},h=n("h1",{id:"_3191-使二进制数组全部等于-1-的最少操作次数-i",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_3191-使二进制数组全部等于-1-的最少操作次数-i","aria-hidden":"true"},"#"),s(" 3191. 使二进制数组全部等于 1 的最少操作次数 I")],-1),f=n("code",null,"位运算",-1),_=n("code",null,"队列",-1),v=n("code",null,"数组",-1),y=n("code",null,"前缀和",-1),w=n("code",null,"滑动窗口",-1),x={href:"https://leetcode.cn/problems/minimum-operations-to-make-binary-array-elements-equal-to-one-i",target:"_blank",rel:"noopener noreferrer"},C=n("code",null,"力扣",-1),O={href:"https://leetcode.com/problems/minimum-operations-to-make-binary-array-elements-equal-to-one-i",target:"_blank",rel:"noopener noreferrer"},q=n("code",null,"LeetCode",-1),E=b('<h2 id="题目" tabindex="-1"><a class="header-anchor" href="#题目" aria-hidden="true">#</a> 题目</h2><p>You are given a binary array <code>nums</code>.</p><p>You can do the following operation on the array <strong>any</strong> number of times (possibly zero):</p><ul><li>Choose <strong>any</strong> 3 <strong>consecutive</strong> elements from the array and <strong>flip</strong> <strong>all</strong> of them.</li></ul><p><strong>Flipping</strong> an element means changing its value from 0 to 1, and from 1 to 0.</p><p>Return the <strong>minimum</strong> number of operations required to make all elements in <code>nums</code> equal to 1. If it is impossible, return -1.</p><p><strong>Example 1:</strong></p><p><strong>Input:</strong> nums = [0,1,1,1,0,0]</p><p><strong>Output:</strong> 3</p><p><strong>Explanation:</strong><br> We can do the following operations:</p><ul><li>Choose the elements at indices 0, 1 and 2. The resulting array is <code>nums = [1, 0, 0, 1, 0, 0]</code>.</li><li>Choose the elements at indices 1, 2 and 3. The resulting array is <code>nums = [1, 1, 1, 0, 0, 0]</code>.</li><li>Choose the elements at indices 3, 4 and 5. The resulting array is <code>nums = [1, 1, 1, 1, 1, 1]</code>.</li></ul><p><strong>Example 2:</strong></p><p><strong>Input:</strong> nums = [0,1,1,1]</p><p><strong>Output:</strong> -1</p><p><strong>Explanation:</strong><br> It is impossible to make all elements equal to 1.</p><p><strong>Constraints:</strong></p><ul><li><code>3 &lt;= nums.length &lt;= 10^5</code></li><li><code>0 &lt;= nums[i] &lt;= 1</code></li></ul><h2 id="题目大意" tabindex="-1"><a class="header-anchor" href="#题目大意" aria-hidden="true">#</a> 题目大意</h2><p>给你一个二进制数组 <code>nums</code> 。</p><p>你可以对数组执行以下操作 <strong>任意</strong> 次（也可以 0 次）：</p><ul><li>选择数组中 <strong>任意连续</strong> 3 个元素，并将它们 <strong>全部反转</strong> 。</li></ul><p><strong>反转</strong> 一个元素指的是将它的值从 0 变 1 ，或者从 1 变 0 。</p><p>请你返回将 <code>nums</code> 中所有元素变为 1 的 <strong>最少</strong> 操作次数。如果无法全部变成 1 ，返回 -1 。</p><p><strong>示例 1：</strong></p><p><strong>输入：</strong> nums = [0,1,1,1,0,0]</p><p><strong>输出：</strong> 3</p><p><strong>解释：</strong><br> 我们可以执行以下操作：</p><ul><li>选择下标为 0 ，1 和 2 的元素并反转，得到 <code>nums = [1, 0, 0, 1, 0, 0]</code> 。</li><li>选择下标为 1 ，2 和 3 的元素并反转，得到 <code>nums = [1, 1, 1, 0, 0, 0]</code> 。</li><li>选择下标为 3 ，4 和 5 的元素并反转，得到 <code>nums = [1, 1, 1, 1, 1, 1]</code> 。</li></ul><p><strong>示例 2：</strong></p><p><strong>输入：</strong> nums = [0,1,1,1]</p><p><strong>输出：</strong> -1</p><p><strong>解释：</strong><br> 无法将所有元素都变为 1 。</p><p><strong>提示：</strong></p><ul><li><code>3 &lt;= nums.length &lt;= 10^5</code></li><li><code>0 &lt;= nums[i] &lt;= 1</code></li></ul><h2 id="解题思路" tabindex="-1"><a class="header-anchor" href="#解题思路" aria-hidden="true">#</a> 解题思路</h2><p>我们使用<strong>贪心</strong>算法，从左到右遍历数组：</p><ol><li><strong>维护一个 <code>flip</code> 数组</strong>：<code>flip[i]</code> 表示索引 <code>i</code> 处是否经历了奇数次翻转。</li><li><strong>判断当前位置是否为 <code>0</code></strong>： <ul><li>若 <code>nums[i]</code> 在当前翻转状态下是 <code>0</code>，则必须翻转 <code>nums[i]、nums[i+1]、nums[i+2]</code> 这三个元素，使 <code>nums[i]</code> 变 <code>1</code>。</li><li>记录翻转次数 <code>flipCount</code>。</li></ul></li><li><strong>遍历到 <code>n-2</code> 后检查最后两个元素</strong>： <ul><li>若 <code>nums[n-2]</code> 或 <code>nums[n-1]</code> 仍然是 <code>0</code>，则无法转化为全 <code>1</code>，返回 <code>-1</code>。</li></ul></li></ol><h4 id="复杂度分析" tabindex="-1"><a class="header-anchor" href="#复杂度分析" aria-hidden="true">#</a> 复杂度分析</h4><ul><li><strong>时间复杂度</strong>：<code>O(n)</code>，遍历数组一次。</li><li><strong>空间复杂度</strong>：<code>O(n)</code>，<code>flip</code> 数组占 <code>O(n)</code> 额外空间。 <ul><li>目前的解法使用了 <code>flip</code> 数组来记录是否被翻转，实际上我们可以<strong>使用两个布尔变量</strong> <code>flip_0, flip_1</code> 代替 <code>flip</code> 数组，从而优化空间复杂度至 <code>O(1)</code>。</li></ul></li></ul><h2 id="代码" tabindex="-1"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h2>',40),I=n("div",{class:"language-javascript line-numbers-mode","data-ext":"js"},[n("pre",{class:"language-javascript"},[n("code",null,[n("span",{class:"token doc-comment comment"},[s(`/**
 * `),n("span",{class:"token keyword"},"@param"),s(),n("span",{class:"token class-name"},[n("span",{class:"token punctuation"},"{"),s("number"),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"}")]),s(),n("span",{class:"token parameter"},"nums"),s(`
 * `),n("span",{class:"token keyword"},"@return"),s(),n("span",{class:"token class-name"},[n("span",{class:"token punctuation"},"{"),s("number"),n("span",{class:"token punctuation"},"}")]),s(`
 */`)]),s(`
`),n("span",{class:"token keyword"},"var"),s(),n("span",{class:"token function-variable function"},"minOperations"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"function"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"nums"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
	`),n("span",{class:"token keyword"},"const"),s(" n "),n("span",{class:"token operator"},"="),s(" nums"),n("span",{class:"token punctuation"},"."),s("length"),n("span",{class:"token punctuation"},";"),s(`
	`),n("span",{class:"token keyword"},"let"),s(" flipCount "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},";"),s(`
	`),n("span",{class:"token keyword"},"let"),s(" flip "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"Array"),n("span",{class:"token punctuation"},"("),s("n"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"fill"),n("span",{class:"token punctuation"},"("),n("span",{class:"token boolean"},"false"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
	`),n("span",{class:"token keyword"},"const"),s(),n("span",{class:"token function-variable function"},"isZero"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"i"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"=>"),s(),n("span",{class:"token punctuation"},"("),s("nums"),n("span",{class:"token punctuation"},"["),s("i"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token operator"},"=="),s(),n("span",{class:"token number"},"0"),s(),n("span",{class:"token operator"},"&&"),s(),n("span",{class:"token operator"},"!"),s("flip"),n("span",{class:"token punctuation"},"["),s("i"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"||"),s(),n("span",{class:"token punctuation"},"("),s("nums"),n("span",{class:"token punctuation"},"["),s("i"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token operator"},"=="),s(),n("span",{class:"token number"},"1"),s(),n("span",{class:"token operator"},"&&"),s(" flip"),n("span",{class:"token punctuation"},"["),s("i"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
	`),n("span",{class:"token keyword"},"for"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"let"),s(" i "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},";"),s(" i "),n("span",{class:"token operator"},"<"),s(" n "),n("span",{class:"token operator"},"-"),s(),n("span",{class:"token number"},"2"),n("span",{class:"token punctuation"},";"),s(" i"),n("span",{class:"token operator"},"++"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
		`),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token function"},"isZero"),n("span",{class:"token punctuation"},"("),s("i"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
			flip`),n("span",{class:"token punctuation"},"["),s("i"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token operator"},"!"),s("flip"),n("span",{class:"token punctuation"},"["),s("i"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),s(`
			flip`),n("span",{class:"token punctuation"},"["),s("i "),n("span",{class:"token operator"},"+"),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token operator"},"!"),s("flip"),n("span",{class:"token punctuation"},"["),s("i "),n("span",{class:"token operator"},"+"),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),s(`
			flip`),n("span",{class:"token punctuation"},"["),s("i "),n("span",{class:"token operator"},"+"),s(),n("span",{class:"token number"},"2"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token operator"},"!"),s("flip"),n("span",{class:"token punctuation"},"["),s("i "),n("span",{class:"token operator"},"+"),s(),n("span",{class:"token number"},"2"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),s(`
			flipCount `),n("span",{class:"token operator"},"+="),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},";"),s(`
		`),n("span",{class:"token punctuation"},"}"),s(`
	`),n("span",{class:"token punctuation"},"}"),s(`
	`),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("n "),n("span",{class:"token operator"},"-"),s(),n("span",{class:"token number"},"2"),s(),n("span",{class:"token operator"},">="),s(),n("span",{class:"token number"},"0"),s(),n("span",{class:"token operator"},"&&"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token function"},"isZero"),n("span",{class:"token punctuation"},"("),s("n "),n("span",{class:"token operator"},"-"),s(),n("span",{class:"token number"},"2"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"||"),s(),n("span",{class:"token function"},"isZero"),n("span",{class:"token punctuation"},"("),s("n "),n("span",{class:"token operator"},"-"),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token operator"},"-"),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},";"),s(`
	`),n("span",{class:"token keyword"},"return"),s(" flipCount"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),j=n("div",{class:"language-javascript line-numbers-mode","data-ext":"js"},[n("pre",{class:"language-javascript"},[n("code",null,[n("span",{class:"token doc-comment comment"},[s(`/**
 * `),n("span",{class:"token keyword"},"@param"),s(),n("span",{class:"token class-name"},[n("span",{class:"token punctuation"},"{"),s("number"),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"}")]),s(),n("span",{class:"token parameter"},"nums"),s(`
 * `),n("span",{class:"token keyword"},"@return"),s(),n("span",{class:"token class-name"},[n("span",{class:"token punctuation"},"{"),s("number"),n("span",{class:"token punctuation"},"}")]),s(`
 */`)]),s(`
`),n("span",{class:"token keyword"},"var"),s(),n("span",{class:"token function-variable function"},"minOperations"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"function"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"nums"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
	`),n("span",{class:"token keyword"},"const"),s(" n "),n("span",{class:"token operator"},"="),s(" nums"),n("span",{class:"token punctuation"},"."),s("length"),n("span",{class:"token punctuation"},";"),s(`
	`),n("span",{class:"token keyword"},"let"),s(" flipCount "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},";"),s(`
	`),n("span",{class:"token keyword"},"let"),s(" flip_0 "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token boolean"},"false"),n("span",{class:"token punctuation"},";"),s(`
	`),n("span",{class:"token keyword"},"let"),s(" flip_1 "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token boolean"},"false"),n("span",{class:"token punctuation"},";"),s(`

	`),n("span",{class:"token keyword"},"for"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"let"),s(" i "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},";"),s(" i "),n("span",{class:"token operator"},"<"),s(" n "),n("span",{class:"token operator"},"-"),s(),n("span",{class:"token number"},"2"),n("span",{class:"token punctuation"},";"),s(" i"),n("span",{class:"token operator"},"++"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
		`),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"("),s("nums"),n("span",{class:"token punctuation"},"["),s("i"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token operator"},"==="),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"!=="),s(" flip_0"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
			flipCount`),n("span",{class:"token operator"},"++"),n("span",{class:"token punctuation"},";"),s(`
			flip_0 `),n("span",{class:"token operator"},"="),s(),n("span",{class:"token operator"},"!"),s("flip_1"),n("span",{class:"token punctuation"},";"),s(`
			flip_1 `),n("span",{class:"token operator"},"="),s(),n("span",{class:"token boolean"},"true"),n("span",{class:"token punctuation"},";"),s(`
		`),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"else"),s(),n("span",{class:"token punctuation"},"{"),s(`
			flip_0 `),n("span",{class:"token operator"},"="),s(" flip_1"),n("span",{class:"token punctuation"},";"),s(`
			flip_1 `),n("span",{class:"token operator"},"="),s(),n("span",{class:"token boolean"},"false"),n("span",{class:"token punctuation"},";"),s(`
		`),n("span",{class:"token punctuation"},"}"),s(`
	`),n("span",{class:"token punctuation"},"}"),s(`

	`),n("span",{class:"token comment"},"// 最后两个元素检查是否能全部变为 1"),s(`
	`),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"("),s("nums"),n("span",{class:"token punctuation"},"["),s("n "),n("span",{class:"token operator"},"-"),s(),n("span",{class:"token number"},"2"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token operator"},"==="),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"!=="),s(" flip_0 "),n("span",{class:"token operator"},"||"),s(),n("span",{class:"token punctuation"},"("),s("nums"),n("span",{class:"token punctuation"},"["),s("n "),n("span",{class:"token operator"},"-"),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token operator"},"==="),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"!=="),s(" flip_1"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
		`),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token operator"},"-"),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},";"),s(`
	`),n("span",{class:"token punctuation"},"}"),s(`

	`),n("span",{class:"token keyword"},"return"),s(" flipCount"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),T=n("h2",{id:"相关题目",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#相关题目","aria-hidden":"true"},"#"),s(" 相关题目")],-1),A=n("thead",null,[n("tr",null,[n("th",{style:{"text-align":"center"}},"题号"),n("th",{style:{"text-align":"left"}},"标题"),n("th",{style:{"text-align":"center"}},"题解"),n("th",{style:{"text-align":"left"}},"标签"),n("th",{style:{"text-align":"center"}},"难度"),n("th",{style:{"text-align":"center"}},"力扣")])],-1),L=n("td",{style:{"text-align":"center"}},"995",-1),N=n("td",{style:{"text-align":"left"}},"K 连续位的最小翻转次数",-1),V=n("td",{style:{"text-align":"center"}},null,-1),Z={style:{"text-align":"left"}},B=n("code",null,"位运算",-1),R=n("code",null,"队列",-1),Y=n("code",null,"数组",-1),z=n("code",null,"2+",-1),F=n("td",{style:{"text-align":"center"}},"🔴",-1),K={style:{"text-align":"center"}},M={href:"https://leetcode.cn/problems/minimum-number-of-k-consecutive-bit-flips",target:"_blank",rel:"noopener noreferrer"},S={href:"https://leetcode.com/problems/minimum-number-of-k-consecutive-bit-flips",target:"_blank",rel:"noopener noreferrer"};function W(D,G){const i=l("font"),e=l("RouterLink"),o=l("ExternalLinkIcon"),r=l("CodeTabs");return k(),d("div",null,[h,n("p",null,[s("🟠 "),t(i,{color:"#ffb800"},{default:a(()=>[s("Medium")]),_:1}),s("  🔖  "),t(e,{to:"/tag/bit-manipulation.html"},{default:a(()=>[f]),_:1}),s(),t(e,{to:"/tag/queue.html"},{default:a(()=>[_]),_:1}),s(),t(e,{to:"/tag/array.html"},{default:a(()=>[v]),_:1}),s(),t(e,{to:"/tag/prefix-sum.html"},{default:a(()=>[y]),_:1}),s(),t(e,{to:"/tag/sliding-window.html"},{default:a(()=>[w]),_:1}),s("  🔗 "),n("a",x,[C,t(o)]),s(),n("a",O,[q,t(o)])]),E,t(r,{id:"229",data:[{id:"贪心算法"},{id:"压缩状态的贪心算法"}]},{title0:a(({value:c,isActive:p})=>[s("贪心算法")]),title1:a(({value:c,isActive:p})=>[s("压缩状态的贪心算法")]),tab0:a(({value:c,isActive:p})=>[I]),tab1:a(({value:c,isActive:p})=>[j]),_:1}),T,m(" prettier-ignore "),n("table",null,[A,n("tbody",null,[n("tr",null,[L,N,V,n("td",Z,[t(e,{to:"/tag/bit-manipulation.html"},{default:a(()=>[B]),_:1}),s(),t(e,{to:"/tag/queue.html"},{default:a(()=>[R]),_:1}),s(),t(e,{to:"/tag/array.html"},{default:a(()=>[Y]),_:1}),s(),z]),F,n("td",K,[n("a",M,[s("🀄️"),t(o)]),s(),n("a",S,[s("🔗"),t(o)])])])])])])}const J=u(g,[["render",W],["__file","3191.html.vue"]]);export{J as default};
