import{_ as r,r as p,o as i,c as u,a as n,b as s,d as a,w as t,e as c}from"./app-aQeLbVW9.js";const d={},k=n("h1",{id:"_953-验证外星语词典",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_953-验证外星语词典","aria-hidden":"true"},"#"),s(" 953. 验证外星语词典")],-1),h=n("code",null,"数组",-1),g=n("code",null,"哈希表",-1),m=n("code",null,"字符串",-1),w={href:"https://leetcode.cn/problems/verifying-an-alien-dictionary",target:"_blank",rel:"noopener noreferrer"},b=n("code",null,"力扣",-1),v={href:"https://leetcode.com/problems/verifying-an-alien-dictionary",target:"_blank",rel:"noopener noreferrer"},f=n("code",null,"LeetCode",-1),_=c('<h2 id="题目" tabindex="-1"><a class="header-anchor" href="#题目" aria-hidden="true">#</a> 题目</h2><p>In an alien language, surprisingly, they also use English lowercase letters, but possibly in a different <code>order</code>. The <code>order</code> of the alphabet is some permutation of lowercase letters.</p><p>Given a sequence of <code>words</code> written in the alien language, and the <code>order</code> of the alphabet, return <code>true</code> if and only if the given <code>words</code> are sorted lexicographically in this alien language.</p><p><strong>Example 1:</strong></p><blockquote><p>Input: words = [&quot;hello&quot;,&quot;leetcode&quot;], order = &quot;hlabcdefgijkmnopqrstuvwxyz&quot;</p><p>Output: true</p><p>Explanation: As &#39;h&#39; comes before &#39;l&#39; in this language, then the sequence is sorted.</p></blockquote><p><strong>Example 2:</strong></p><blockquote><p>Input: words = [&quot;word&quot;,&quot;world&quot;,&quot;row&quot;], order = &quot;worldabcefghijkmnpqstuvxyz&quot;</p><p>Output: false</p><p>Explanation: As &#39;d&#39; comes after &#39;l&#39; in this language, then words[0] &gt; words[1], hence the sequence is unsorted.</p></blockquote><p><strong>Example 3:</strong></p>',8),q=n("p",null,'Input: words = ["apple","app"], order = "abcdefghijklmnopqrstuvwxyz"',-1),y=n("p",null,"Output: false",-1),x={href:"https://en.wikipedia.org/wiki/Lexicographical_order",target:"_blank",rel:"noopener noreferrer"},E=c('<p><strong>Constraints:</strong></p><ul><li><code>1 &lt;= words.length &lt;= 100</code></li><li><code>1 &lt;= words[i].length &lt;= 20</code></li><li><code>order.length == 26</code></li><li>All characters in <code>words[i]</code> and <code>order</code> are English lowercase letters.</li></ul><h2 id="题目大意" tabindex="-1"><a class="header-anchor" href="#题目大意" aria-hidden="true">#</a> 题目大意</h2><p>某种外星语也使用英文小写字母，但可能顺序 <code>order</code> 不同。字母表的顺序（<code>order</code>）是一些小写字母的排列。</p><p>给定一组用外星语书写的单词 <code>words</code>，以及其字母表的顺序 <code>order</code>，只有当给定的单词在这种外星语中按字典序排列时，返回 <code>true</code>；否则，返回 <code>false</code>。</p><p><strong>示例 1：</strong></p><blockquote><p><strong>输入：</strong> words = [&quot;hello&quot;,&quot;leetcode&quot;], order = &quot;hlabcdefgijkmnopqrstuvwxyz&quot;</p><p><strong>输出：</strong> true</p><p><strong>解释：</strong> 在该语言的字母表中，&#39;h&#39; 位于 &#39;l&#39; 之前，所以单词序列是按字典序排列的。</p></blockquote><p><strong>示例 2：</strong></p><blockquote><p><strong>输入：</strong> words = [&quot;word&quot;,&quot;world&quot;,&quot;row&quot;], order = &quot;worldabcefghijkmnpqstuvxyz&quot;</p><p><strong>输出：</strong> false</p><p><strong>解释：</strong> 在该语言的字母表中，&#39;d&#39; 位于 &#39;l&#39; 之后，那么 words[0] &gt; words[1]，因此单词序列不是按字典序排列的。</p></blockquote><p><strong>示例 3：</strong></p>',10),M=n("p",null,[n("strong",null,"输入："),s(' words = ["apple","app"], order = "abcdefghijklmnopqrstuvwxyz"')],-1),j=n("p",null,[n("strong",null,"输出："),s(" false")],-1),O=n("strong",null,"解释：",-1),z={href:"https://baike.baidu.com/item/%E5%AD%97%E5%85%B8%E5%BA%8F",target:"_blank",rel:"noopener noreferrer"},A=c(`<p><strong>提示：</strong></p><ul><li><code>1 &lt;= words.length &lt;= 100</code></li><li><code>1 &lt;= words[i].length &lt;= 20</code></li><li><code>order.length == 26</code></li><li>在 <code>words[i]</code> 和 <code>order</code> 中的所有字符都是英文小写字母。</li></ul><h2 id="解题思路" tabindex="-1"><a class="header-anchor" href="#解题思路" aria-hidden="true">#</a> 解题思路</h2><ol><li><p><strong>构建自定义顺序的映射表</strong>：</p><ul><li>将 <code>order</code> 转换为一个哈希表 <code>orderMap</code>，其中键为字母，值为其在 <code>order</code> 中的索引。</li><li>通过 <code>orderMap</code> 快速查询每个字母的优先级。</li></ul></li><li><p><strong>定义比较函数</strong>：</p><ul><li>编写函数 <code>compare(word1, word2)</code> 比较两个单词： <ul><li>按照字母顺序逐位比较： <ul><li>如果 <code>word1[i]</code> 的优先级小于 <code>word2[i]</code>，则 <code>word1</code> 小于 <code>word2</code>。</li><li>如果 <code>word1[i]</code> 的优先级大于 <code>word2[i]</code>，则 <code>word1</code> 大于 <code>word2</code>。</li><li>如果相等，则继续比较下一位。</li></ul></li><li>如果比较到末尾且没有确定大小关系，短单词优先（例如 <code>&quot;apple&quot;</code> 小于 <code>&quot;apples&quot;</code>）。</li></ul></li></ul></li><li><p><strong>逐对比较</strong>：</p><ul><li>遍历 <code>words</code> 的相邻单词，调用 <code>compare</code> 检查是否满足顺序。</li><li>如果发现任意一对不满足条件，直接返回 <code>false</code>。</li><li>如果所有相邻单词都满足条件，则返回 <code>true</code>。</li></ul></li></ol><h4 id="复杂度分析" tabindex="-1"><a class="header-anchor" href="#复杂度分析" aria-hidden="true">#</a> 复杂度分析</h4><ul><li><p><strong>时间复杂度</strong>: <code>O(n * m)</code>，其中 <code>n</code> 是单词数组的长度，<code>m</code> 是单个单词的平均长度。</p><ul><li>构建 <code>orderMap</code> 的时间复杂度为 <code>O(26)</code>，常数时间。</li><li>比较相邻单词需要最多 <code>O(m)</code> 的时间。</li><li>总共进行 <code>n-1</code> 次比较，因此整体复杂度为 <code>O(n * m)</code>。</li></ul></li><li><p><strong>空间复杂度</strong>: <code>O(1)</code>，只使用了常量级的额外空间（<code>orderMap</code> 占用固定空间）。</p></li></ul><h2 id="代码" tabindex="-1"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>string<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span> <span class="token parameter">words</span>
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>string<span class="token punctuation">}</span></span> <span class="token parameter">order</span>
 * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>boolean<span class="token punctuation">}</span></span>
 */</span>
<span class="token keyword">var</span> <span class="token function-variable function">isAlienSorted</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">words<span class="token punctuation">,</span> order</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">let</span> orderMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	order<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">char<span class="token punctuation">,</span> i</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> orderMap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>char<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">const</span> <span class="token function-variable function">compare</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">word1<span class="token punctuation">,</span> word2</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
		<span class="token keyword">const</span> len1 <span class="token operator">=</span> word1<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
		<span class="token keyword">const</span> len2 <span class="token operator">=</span> word2<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
		<span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
		<span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> len1 <span class="token operator">&amp;&amp;</span> i <span class="token operator">&lt;</span> len2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span>orderMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>word1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> orderMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>word2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
				<span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>orderMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>word1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> orderMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>word2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
				<span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
				i<span class="token operator">++</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">return</span> i <span class="token operator">==</span> len1<span class="token punctuation">;</span>
	<span class="token punctuation">}</span><span class="token punctuation">;</span>

	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> words<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">compare</span><span class="token punctuation">(</span>words<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> words<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,8);function I(L,B){const l=p("font"),e=p("RouterLink"),o=p("ExternalLinkIcon");return i(),u("div",null,[k,n("p",null,[s("🟢 "),a(l,{color:"#15bd66"},{default:t(()=>[s("Easy")]),_:1}),s("  🔖  "),a(e,{to:"/tag/array.html"},{default:t(()=>[h]),_:1}),s(),a(e,{to:"/tag/hash-table.html"},{default:t(()=>[g]),_:1}),s(),a(e,{to:"/tag/string.html"},{default:t(()=>[m]),_:1}),s("  🔗 "),n("a",w,[b,a(o)]),s(),n("a",v,[f,a(o)])]),_,n("blockquote",null,[q,y,n("p",null,[s(`Explanation: The first three characters "app" match, and the second string is shorter (in size.) According to lexicographical rules "apple" > "app", because 'l' > '∅', where '∅' is defined as the blank character which is less than any other character (`),n("a",x,[s("More info"),a(o)]),s(").")])]),E,n("blockquote",null,[M,j,n("p",null,[O,s(` 当前三个字符 "app" 匹配时，第二个字符串相对短一些，然后根据词典编纂规则 "apple" > "app"，因为 'l' > '∅'，其中 '∅' 是空白字符，定义为比任何其他字符都小（`),n("a",z,[s("更多信息"),a(o)]),s("）。")])]),A])}const N=r(d,[["render",I],["__file","0953.html.vue"]]);export{N as default};
