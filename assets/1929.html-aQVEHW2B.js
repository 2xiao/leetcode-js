import{_ as r,r as o,o as i,c as p,a as n,b as s,d as e,w as a,e as d}from"./app-fBVbqwGY.js";const u={},m=n("h1",{id:"_1929-数组串联",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_1929-数组串联","aria-hidden":"true"},"#"),s(" 1929. 数组串联")],-1),h=n("code",null,"数组",-1),g=n("code",null,"模拟",-1),k={href:"https://leetcode.cn/problems/concatenation-of-array",target:"_blank",rel:"noopener noreferrer"},_=n("code",null,"力扣",-1),f={href:"https://leetcode.com/problems/concatenation-of-array",target:"_blank",rel:"noopener noreferrer"},b=n("code",null,"LeetCode",-1),v=d(`<h2 id="题目" tabindex="-1"><a class="header-anchor" href="#题目" aria-hidden="true">#</a> 题目</h2><p>Given an integer array <code>nums</code> of length <code>n</code>, you want to create an array <code>ans</code> of length <code>2n</code> where <code>ans[i] == nums[i]</code> and <code>ans[i + n] == nums[i]</code> for <code>0 &lt;= i &lt; n</code> (<strong>0-indexed</strong>).</p><p>Specifically, <code>ans</code> is the <strong>concatenation</strong> of two <code>nums</code> arrays.</p><p>Return <em>the array</em><code>ans</code>.</p><p><strong>Example 1:</strong></p><blockquote><p>Input: nums = [1,2,1]</p><p>Output: [1,2,1,1,2,1]</p><p>Explanation: The array ans is formed as follows:</p><ul><li>ans = [nums[0],nums[1],nums[2],nums[0],nums[1],nums[2]]</li><li>ans = [1,2,1,1,2,1]</li></ul></blockquote><p><strong>Example 2:</strong></p><blockquote><p>Input: nums = [1,3,2,1]</p><p>Output: [1,3,2,1,1,3,2,1]</p><p>Explanation: The array ans is formed as follows:</p><ul><li>ans = [nums[0],nums[1],nums[2],nums[3],nums[0],nums[1],nums[2],nums[3]]</li><li>ans = [1,3,2,1,1,3,2,1]</li></ul></blockquote><p><strong>Constraints:</strong></p><ul><li><code>n == nums.length</code></li><li><code>1 &lt;= n &lt;= 1000</code></li><li><code>1 &lt;= nums[i] &lt;= 1000</code></li></ul><h2 id="题目大意" tabindex="-1"><a class="header-anchor" href="#题目大意" aria-hidden="true">#</a> 题目大意</h2><p>给你一个长度为 <code>n</code> 的整数数组 <code>nums</code> 。请你构建一个长度为 <code>2n</code> 的答案数组 <code>ans</code> ，数组下标<strong>从 0 开始计数</strong> ，对于所有 <code>0 &lt;= i &lt; n</code> 的 <code>i</code> ，满足下述所有要求：</p><ul><li><code>ans[i] == nums[i]</code></li><li><code>ans[i + n] == nums[i]</code></li></ul><p>具体而言，<code>ans</code> 由两个 <code>nums</code> 数组 <strong>串联</strong> 形成。</p><p>返回数组 <code>ans</code> 。</p><p><strong>示例 1：</strong></p><blockquote><p><strong>输入：</strong> nums = [1,2,1]</p><p><strong>输出：</strong>[1,2,1,1,2,1]</p><p><strong>解释：</strong> 数组 ans 按下述方式形成：</p><ul><li>ans = [nums[0],nums[1],nums[2],nums[0],nums[1],nums[2]]</li><li>ans = [1,2,1,1,2,1]</li></ul></blockquote><p><strong>示例 2：</strong></p><blockquote><p><strong>输入：</strong> nums = [1,3,2,1]</p><p><strong>输出：</strong>[1,3,2,1,1,3,2,1]</p><p><strong>解释：</strong> 数组 ans 按下述方式形成：</p><ul><li>ans = [nums[0],nums[1],nums[2],nums[3],nums[0],nums[1],nums[2],nums[3]]</li><li>ans = [1,3,2,1,1,3,2,1]</li></ul></blockquote><p><strong>提示：</strong></p><ul><li><code>n == nums.length</code></li><li><code>1 &lt;= n &lt;= 1000</code></li><li><code>1 &lt;= nums[i] &lt;= 1000</code></li></ul><h2 id="解题思路" tabindex="-1"><a class="header-anchor" href="#解题思路" aria-hidden="true">#</a> 解题思路</h2><ol><li><p><strong>数组解构扩展</strong>：</p><ul><li>使用 JavaScript 的扩展运算符 (<code>...</code>) 将 <code>nums</code> 拆解成元素列表。</li><li>通过 <code>[...nums, ...nums]</code>，直接将两个 <code>nums</code> 的内容拼接成新的数组。</li></ul></li><li><p><strong>返回结果</strong>：</p><ul><li>执行扩展并返回拼接后的数组。</li></ul></li></ol><h4 id="复杂度分析" tabindex="-1"><a class="header-anchor" href="#复杂度分析" aria-hidden="true">#</a> 复杂度分析</h4><ul><li><strong>时间复杂度</strong>：<code>O(n)</code>，扩展 <code>nums</code> 两次，每次需要拷贝 <code>n</code> 个元素</li><li><strong>空间复杂度</strong>：<code>O(n)</code>，结果数组占用 <code>O(2n)</code> 的额外空间。</li></ul><h2 id="代码" tabindex="-1"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span> <span class="token parameter">nums</span>
 * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span>
 */</span>
<span class="token keyword">var</span> <span class="token function-variable function">getConcatenation</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">nums</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token operator">...</span>nums<span class="token punctuation">,</span> <span class="token operator">...</span>nums<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,27);function x(y,w){const l=o("font"),t=o("RouterLink"),c=o("ExternalLinkIcon");return i(),p("div",null,[m,n("p",null,[s("🟢 "),e(l,{color:"#15bd66"},{default:a(()=>[s("Easy")]),_:1}),s("  🔖  "),e(t,{to:"/tag/array.html"},{default:a(()=>[h]),_:1}),s(),e(t,{to:"/tag/simulation.html"},{default:a(()=>[g]),_:1}),s("  🔗 "),n("a",k,[_,e(c)]),s(),n("a",f,[b,e(c)])]),v])}const E=r(u,[["render",x],["__file","1929.html.vue"]]);export{E as default};
