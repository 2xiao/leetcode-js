import{_ as r,r as c,o as d,c as k,a as n,b as t,d as s,w as a,f as m,e as f}from"./app-B5EG-zH0.js";const b={},h=n("h1",{id:"_3042-统计前后缀下标对-i",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_3042-统计前后缀下标对-i","aria-hidden":"true"},"#"),t(" 3042. 统计前后缀下标对 I")],-1),g=n("code",null,"字典树",-1),q=n("code",null,"数组",-1),x=n("code",null,"字符串",-1),_=n("code",null,"字符串匹配",-1),w=n("code",null,"哈希函数",-1),v=n("code",null,"滚动哈希",-1),y={href:"https://leetcode.cn/problems/count-prefix-and-suffix-pairs-i",target:"_blank",rel:"noopener noreferrer"},j=n("code",null,"力扣",-1),P={href:"https://leetcode.com/problems/count-prefix-and-suffix-pairs-i",target:"_blank",rel:"noopener noreferrer"},S=n("code",null,"LeetCode",-1),A=f('<h2 id="题目" tabindex="-1"><a class="header-anchor" href="#题目" aria-hidden="true">#</a> 题目</h2><p>You are given a <strong>0-indexed</strong> string array <code>words</code>.</p><p>Let&#39;s define a <strong>boolean</strong> function <code>isPrefixAndSuffix</code> that takes two strings, <code>str1</code> and <code>str2</code>:</p><ul><li><code>isPrefixAndSuffix(str1, str2)</code> returns <code>true</code> if <code>str1</code> is <strong>both</strong> a prefix and a suffix of <code>str2</code>, and <code>false</code> otherwise.</li></ul><p>For example, <code>isPrefixAndSuffix(&quot;aba&quot;, &quot;ababa&quot;)</code> is <code>true</code> because <code>&quot;aba&quot;</code> is a prefix of <code>&quot;ababa&quot;</code> and also a suffix, but <code>isPrefixAndSuffix(&quot;abc&quot;, &quot;abcd&quot;)</code> is <code>false</code>.</p><p>Return <em>an integer denoting the <strong>number</strong> of index pairs</em> <code>(i, j)</code><em>such that</em><code>i &lt; j</code> <em>, and</em><code>isPrefixAndSuffix(words[i], words[j])</code><em>is</em><code>true</code> .</p><p><strong>Example 1:</strong></p><blockquote><p>Input: words = [&quot;a&quot;,&quot;aba&quot;,&quot;ababa&quot;,&quot;aa&quot;]</p><p>Output: 4</p><p>Explanation: In this example, the counted index pairs are:</p><p>i = 0 and j = 1 because isPrefixAndSuffix(&quot;a&quot;, &quot;aba&quot;) is true.</p><p>i = 0 and j = 2 because isPrefixAndSuffix(&quot;a&quot;, &quot;ababa&quot;) is true.</p><p>i = 0 and j = 3 because isPrefixAndSuffix(&quot;a&quot;, &quot;aa&quot;) is true.</p><p>i = 1 and j = 2 because isPrefixAndSuffix(&quot;aba&quot;, &quot;ababa&quot;) is true.</p><p>Therefore, the answer is 4.</p></blockquote><p><strong>Example 2:</strong></p><blockquote><p>Input: words = [&quot;pa&quot;,&quot;papa&quot;,&quot;ma&quot;,&quot;mama&quot;]</p><p>Output: 2</p><p>Explanation: In this example, the counted index pairs are:</p><p>i = 0 and j = 1 because isPrefixAndSuffix(&quot;pa&quot;, &quot;papa&quot;) is true.</p><p>i = 2 and j = 3 because isPrefixAndSuffix(&quot;ma&quot;, &quot;mama&quot;) is true.</p><p>Therefore, the answer is 2.</p></blockquote><p><strong>Example 3:</strong></p><blockquote><p>Input: words = [&quot;abab&quot;,&quot;ab&quot;]</p><p>Output: 0</p><p>Explanation: In this example, the only valid index pair is i = 0 and j = 1, and isPrefixAndSuffix(&quot;abab&quot;, &quot;ab&quot;) is false.</p><p>Therefore, the answer is 0.</p></blockquote><p><strong>Constraints:</strong></p><ul><li><code>1 &lt;= words.length &lt;= 50</code></li><li><code>1 &lt;= words[i].length &lt;= 10</code></li><li><code>words[i]</code> consists only of lowercase English letters.</li></ul><h2 id="题目大意" tabindex="-1"><a class="header-anchor" href="#题目大意" aria-hidden="true">#</a> 题目大意</h2><p>给你一个下标从 <strong>0</strong> 开始的字符串数组 <code>words</code> 。</p><p>定义一个 <strong>布尔</strong> 函数 <code>isPrefixAndSuffix</code> ，它接受两个字符串参数 <code>str1</code> 和 <code>str2</code> ：</p><ul><li>当 <code>str1</code> 同时是 <code>str2</code> 的前缀（prefix）和后缀（suffix）时，<code>isPrefixAndSuffix(str1, str2)</code> 返回 <code>true</code>，否则返回 <code>false</code>。</li></ul><p>例如，<code>isPrefixAndSuffix(&quot;aba&quot;, &quot;ababa&quot;)</code> 返回 <code>true</code>，因为 <code>&quot;aba&quot;</code> 既是 <code>&quot;ababa&quot;</code> 的前缀，也是 <code>&quot;ababa&quot;</code> 的后缀，但是 <code>isPrefixAndSuffix(&quot;abc&quot;, &quot;abcd&quot;)</code> 返回<code> false</code>。</p><p>以整数形式，返回满足 <code>i &lt; j</code> 且 <code>isPrefixAndSuffix(words[i], words[j])</code> 为 <code>true</code> 的下标对 <code>(i, j)</code> 的<strong>数量</strong> 。</p><p><strong>示例 1：</strong></p><blockquote><p><strong>输入：</strong> words = [&quot;a&quot;,&quot;aba&quot;,&quot;ababa&quot;,&quot;aa&quot;]</p><p><strong>输出：</strong> 4</p><p><strong>解释：</strong> 在本示例中，计数的下标对包括：</p><p>i = 0 且 j = 1 ，因为 isPrefixAndSuffix(&quot;a&quot;, &quot;aba&quot;) 为 true 。</p><p>i = 0 且 j = 2 ，因为 isPrefixAndSuffix(&quot;a&quot;, &quot;ababa&quot;) 为 true 。</p><p>i = 0 且 j = 3 ，因为 isPrefixAndSuffix(&quot;a&quot;, &quot;aa&quot;) 为 true 。</p><p>i = 1 且 j = 2 ，因为 isPrefixAndSuffix(&quot;aba&quot;, &quot;ababa&quot;) 为 true 。</p><p>因此，答案是 4 。</p></blockquote><p><strong>示例 2：</strong></p><blockquote><p><strong>输入：</strong> words = [&quot;pa&quot;,&quot;papa&quot;,&quot;ma&quot;,&quot;mama&quot;]</p><p><strong>输出：</strong> 2</p><p><strong>解释：</strong> 在本示例中，计数的下标对包括：</p><p>i = 0 且 j = 1 ，因为 isPrefixAndSuffix(&quot;pa&quot;, &quot;papa&quot;) 为 true 。</p><p>i = 2 且 j = 3 ，因为 isPrefixAndSuffix(&quot;ma&quot;, &quot;mama&quot;) 为 true 。</p><p>因此，答案是 2 。</p></blockquote><p><strong>示例 3：</strong></p><blockquote><p><strong>输入：</strong> words = [&quot;abab&quot;,&quot;ab&quot;]</p><p><strong>输出：</strong> 0</p><p><strong>解释：</strong> 在本示例中，唯一有效的下标对是 i = 0 且 j = 1 ，但是 isPrefixAndSuffix(&quot;abab&quot;, &quot;ab&quot;) 为 false 。</p><p>因此，答案是 0 。</p></blockquote><p><strong>提示：</strong></p><ul><li><code>1 &lt;= words.length &lt;= 50</code></li><li><code>1 &lt;= words[i].length &lt;= 10</code></li><li><code>words[i]</code> 仅由小写英文字母组成。</li></ul><h2 id="解题思路" tabindex="-1"><a class="header-anchor" href="#解题思路" aria-hidden="true">#</a> 解题思路</h2><h3 id="思路一-双层循环暴力法" tabindex="-1"><a class="header-anchor" href="#思路一-双层循环暴力法" aria-hidden="true">#</a> 思路一：双层循环暴力法</h3><ul><li>外层循环遍历每个字符串 <code>words[i]</code>。</li><li>内层循环从 <code>i + 1</code> 开始遍历剩余字符串 <code>words[j]</code>。</li><li>检查： <ul><li>如果 <code>words[i]</code> 长度大于 <code>words[j]</code>，则跳过，优化效率。</li><li>否则判断 <code>words[i]</code> 是否是 <code>words[j]</code> 的前缀且后缀。</li><li>使用 JavaScript 的字符串方法 <code>startsWith</code> 和 <code>endsWith</code> 分别检查前缀和后缀关系。</li></ul></li><li>如果满足条件，计数器 <code>count</code> 增加。</li></ul><h4 id="复杂度分析" tabindex="-1"><a class="header-anchor" href="#复杂度分析" aria-hidden="true">#</a> 复杂度分析</h4><ul><li><strong>时间复杂度</strong>：<code>O(n^2 * m)</code><ul><li>外层循环遍历 <code>n</code> 个字符串，内层循环最多遍历 <code>n-1</code> 个字符串，在最坏情况下需要比较所有的字符串对，因此时间复杂度为 <code>O(n^2)</code>。</li><li>每次比较字符串的前缀和后缀时，复杂度与字符串的长度 <code>m</code> 成正比，因此整体复杂度为 <code>O(n^2 * m)</code>，其中 <code>m</code> 是字符串的平均长度。</li></ul></li><li><strong>空间复杂度</strong>：<code>O(1)</code>，仅使用了常数级别的辅助变量。</li></ul><hr><h3 id="思路二-前缀树法" tabindex="-1"><a class="header-anchor" href="#思路二-前缀树法" aria-hidden="true">#</a> 思路二：前缀树法</h3><p>为了提高效率，可以使用前缀树（Trie）和后缀树分别处理前缀和后缀匹配，从而优化暴力解法的时间复杂度。</p><ol><li><p><strong>构建前缀树和后缀树：</strong></p><ul><li><strong>前缀树（Prefix Trie）：</strong> 用于快速判断某个字符串是否是另一个字符串的前缀。</li><li><strong>后缀树（Suffix Trie）：</strong> 用于快速判断某个字符串是否是另一个字符串的后缀。</li><li>遍历所有字符串，将每个字符串插入到前缀树和后缀树中。</li><li>插入到后缀树时，先将字符串反转，这样后缀匹配变成前缀匹配。</li></ul></li><li><p><strong>查询前缀和后缀匹配：</strong></p><ul><li>对于当前字符串前面的每个字符串，查询它是否同时是当前字符串的前缀和后缀。</li></ul></li><li><p><strong>计数：</strong></p><ul><li>如果满足条件，增加计数。</li></ul></li></ol><h4 id="复杂度分析-1" tabindex="-1"><a class="header-anchor" href="#复杂度分析-1" aria-hidden="true">#</a> 复杂度分析</h4><ul><li><strong>时间复杂度</strong>：<code>O(n * m)</code><ul><li>构建前缀树和后缀树的时间复杂度是 <code>O(n * m)</code>，其中 <code>n</code> 是字符串数量，<code>m</code> 是字符串的平均长度。</li><li>每个字符串查询前缀和后缀的时间复杂度是 <code>O(m)</code>，总复杂度是 <code>O(n * m)</code>。</li></ul></li><li><strong>空间复杂度</strong>：<code>O(n * m)</code>，前缀树和后缀树的存储复杂度为 <code>O(n * m)</code>，需要存储所有字符串的节点。</li></ul><h2 id="代码" tabindex="-1"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h2>',40),T=n("div",{class:"language-javascript line-numbers-mode","data-ext":"js"},[n("pre",{class:"language-javascript"},[n("code",null,[n("span",{class:"token doc-comment comment"},[t(`/**
 * `),n("span",{class:"token keyword"},"@param"),t(),n("span",{class:"token class-name"},[n("span",{class:"token punctuation"},"{"),t("string"),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"}")]),t(),n("span",{class:"token parameter"},"words"),t(`
 * `),n("span",{class:"token keyword"},"@return"),t(),n("span",{class:"token class-name"},[n("span",{class:"token punctuation"},"{"),t("number"),n("span",{class:"token punctuation"},"}")]),t(`
 */`)]),t(`
`),n("span",{class:"token keyword"},"var"),t(),n("span",{class:"token function-variable function"},"countPrefixSuffixPairs"),t(),n("span",{class:"token operator"},"="),t(),n("span",{class:"token keyword"},"function"),t(),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"words"),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token punctuation"},"{"),t(`
	`),n("span",{class:"token keyword"},"let"),t(" count "),n("span",{class:"token operator"},"="),t(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},";"),t(`

	`),n("span",{class:"token comment"},"// 遍历每个字符串对"),t(`
	`),n("span",{class:"token keyword"},"for"),t(),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"let"),t(" i "),n("span",{class:"token operator"},"="),t(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},";"),t(" i "),n("span",{class:"token operator"},"<"),t(" words"),n("span",{class:"token punctuation"},"."),t("length"),n("span",{class:"token punctuation"},";"),t(" i"),n("span",{class:"token operator"},"++"),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token punctuation"},"{"),t(`
		`),n("span",{class:"token keyword"},"for"),t(),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"let"),t(" j "),n("span",{class:"token operator"},"="),t(" i "),n("span",{class:"token operator"},"+"),t(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},";"),t(" j "),n("span",{class:"token operator"},"<"),t(" words"),n("span",{class:"token punctuation"},"."),t("length"),n("span",{class:"token punctuation"},";"),t(" j"),n("span",{class:"token operator"},"++"),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token punctuation"},"{"),t(`
			`),n("span",{class:"token comment"},"// 如果 words[i] 比 words[j] 长，直接跳过"),t(`
			`),n("span",{class:"token keyword"},"if"),t(),n("span",{class:"token punctuation"},"("),t("words"),n("span",{class:"token punctuation"},"["),t("i"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"."),t("length "),n("span",{class:"token operator"},">"),t(" words"),n("span",{class:"token punctuation"},"["),t("j"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"."),t("length"),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token punctuation"},"{"),t(`
				`),n("span",{class:"token keyword"},"continue"),n("span",{class:"token punctuation"},";"),t(`
			`),n("span",{class:"token punctuation"},"}"),t(`

			`),n("span",{class:"token comment"},"// 检查 words[i] 是否为 words[j] 的前缀和后缀"),t(`
			`),n("span",{class:"token keyword"},"if"),t(),n("span",{class:"token punctuation"},"("),t("words"),n("span",{class:"token punctuation"},"["),t("j"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"startsWith"),n("span",{class:"token punctuation"},"("),t("words"),n("span",{class:"token punctuation"},"["),t("i"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token operator"},"&&"),t(" words"),n("span",{class:"token punctuation"},"["),t("j"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"endsWith"),n("span",{class:"token punctuation"},"("),t("words"),n("span",{class:"token punctuation"},"["),t("i"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token punctuation"},"{"),t(`
				count`),n("span",{class:"token operator"},"++"),n("span",{class:"token punctuation"},";"),t(`
			`),n("span",{class:"token punctuation"},"}"),t(`
		`),n("span",{class:"token punctuation"},"}"),t(`
	`),n("span",{class:"token punctuation"},"}"),t(`

	`),n("span",{class:"token keyword"},"return"),t(" count"),n("span",{class:"token punctuation"},";"),t(`
`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";"),t(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),E=n("div",{class:"language-javascript line-numbers-mode","data-ext":"js"},[n("pre",{class:"language-javascript"},[n("code",null,[n("span",{class:"token doc-comment comment"},[t(`/**
 * `),n("span",{class:"token keyword"},"@param"),t(),n("span",{class:"token class-name"},[n("span",{class:"token punctuation"},"{"),t("string"),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"}")]),t(),n("span",{class:"token parameter"},"words"),t(`
 * `),n("span",{class:"token keyword"},"@return"),t(),n("span",{class:"token class-name"},[n("span",{class:"token punctuation"},"{"),t("number"),n("span",{class:"token punctuation"},"}")]),t(`
 */`)]),t(`
`),n("span",{class:"token keyword"},"var"),t(),n("span",{class:"token function-variable function"},"countPrefixSuffixPairs"),t(),n("span",{class:"token operator"},"="),t(),n("span",{class:"token keyword"},"function"),t(),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"words"),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token punctuation"},"{"),t(`
	`),n("span",{class:"token keyword"},"let"),t(" count "),n("span",{class:"token operator"},"="),t(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},";"),t(`
	`),n("span",{class:"token keyword"},"const"),t(" n "),n("span",{class:"token operator"},"="),t(" words"),n("span",{class:"token punctuation"},"."),t("length"),n("span",{class:"token punctuation"},";"),t(`
	`),n("span",{class:"token keyword"},"for"),t(),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"let"),t(" i "),n("span",{class:"token operator"},"="),t(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},";"),t(" i "),n("span",{class:"token operator"},"<"),t(" n"),n("span",{class:"token punctuation"},";"),t(" i"),n("span",{class:"token operator"},"++"),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token punctuation"},"{"),t(`
		`),n("span",{class:"token comment"},"// 构建前缀树和后缀树"),t(`
		`),n("span",{class:"token keyword"},"const"),t(" prefixTrie "),n("span",{class:"token operator"},"="),t(),n("span",{class:"token keyword"},"new"),t(),n("span",{class:"token class-name"},"Trie"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),t(`
		`),n("span",{class:"token keyword"},"const"),t(" suffixTrie "),n("span",{class:"token operator"},"="),t(),n("span",{class:"token keyword"},"new"),t(),n("span",{class:"token class-name"},"Trie"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),t(`
		`),n("span",{class:"token comment"},"// 插入前缀树"),t(`
		prefixTrie`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"insert"),n("span",{class:"token punctuation"},"("),t("words"),n("span",{class:"token punctuation"},"["),t("i"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),t(`
		`),n("span",{class:"token comment"},"// 插入后缀树（反转字符串）"),t(`
		suffixTrie`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"insert"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"["),n("span",{class:"token operator"},"..."),t("words"),n("span",{class:"token punctuation"},"["),t("i"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"reverse"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"join"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"''"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),t(`

		`),n("span",{class:"token comment"},"// 遍历每个字符串，查询前缀和后缀匹配"),t(`
		`),n("span",{class:"token keyword"},"for"),t(),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"let"),t(" j "),n("span",{class:"token operator"},"="),t(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},";"),t(" j "),n("span",{class:"token operator"},"<"),t(" i"),n("span",{class:"token punctuation"},";"),t(" j"),n("span",{class:"token operator"},"++"),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token punctuation"},"{"),t(`
			`),n("span",{class:"token comment"},"// 如果 words[j] 比 words[i] 长，直接跳过"),t(`
			`),n("span",{class:"token keyword"},"if"),t(),n("span",{class:"token punctuation"},"("),t("words"),n("span",{class:"token punctuation"},"["),t("i"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"."),t("length "),n("span",{class:"token operator"},"<"),t(" words"),n("span",{class:"token punctuation"},"["),t("j"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"."),t("length"),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token keyword"},"continue"),n("span",{class:"token punctuation"},";"),t(`

			`),n("span",{class:"token keyword"},"const"),t(" word "),n("span",{class:"token operator"},"="),t(" words"),n("span",{class:"token punctuation"},"["),t("j"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),t(`
			`),n("span",{class:"token keyword"},"const"),t(" reversedWord "),n("span",{class:"token operator"},"="),t(),n("span",{class:"token punctuation"},"["),n("span",{class:"token operator"},"..."),t("word"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"reverse"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"join"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"''"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),t(`
			`),n("span",{class:"token keyword"},"if"),t(),n("span",{class:"token punctuation"},"("),t("prefixTrie"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"startsWith"),n("span",{class:"token punctuation"},"("),t("word"),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token operator"},"&&"),t(" suffixTrie"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"startsWith"),n("span",{class:"token punctuation"},"("),t("reversedWord"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token punctuation"},"{"),t(`
				count`),n("span",{class:"token operator"},"++"),n("span",{class:"token punctuation"},";"),t(`
			`),n("span",{class:"token punctuation"},"}"),t(`
		`),n("span",{class:"token punctuation"},"}"),t(`
	`),n("span",{class:"token punctuation"},"}"),t(`
	`),n("span",{class:"token keyword"},"return"),t(" count"),n("span",{class:"token punctuation"},";"),t(`
`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";"),t(`
`),n("span",{class:"token keyword"},"class"),t(),n("span",{class:"token class-name"},"TrieNode"),t(),n("span",{class:"token punctuation"},"{"),t(`
	`),n("span",{class:"token function"},"constructor"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token punctuation"},"{"),t(`
		`),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),t("children "),n("span",{class:"token operator"},"="),t(),n("span",{class:"token punctuation"},"{"),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";"),t(),n("span",{class:"token comment"},"// 子节点映射"),t(`
		`),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),t("isEnd "),n("span",{class:"token operator"},"="),t(),n("span",{class:"token boolean"},"false"),n("span",{class:"token punctuation"},";"),t(),n("span",{class:"token comment"},"// 标记是否是某个字符串的结束"),t(`
	`),n("span",{class:"token punctuation"},"}"),t(`
`),n("span",{class:"token punctuation"},"}"),t(`
`),n("span",{class:"token keyword"},"class"),t(),n("span",{class:"token class-name"},"Trie"),t(),n("span",{class:"token punctuation"},"{"),t(`
	`),n("span",{class:"token function"},"constructor"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token punctuation"},"{"),t(`
		`),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),t("root "),n("span",{class:"token operator"},"="),t(),n("span",{class:"token keyword"},"new"),t(),n("span",{class:"token class-name"},"TrieNode"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),t(`
	`),n("span",{class:"token punctuation"},"}"),t(`
	`),n("span",{class:"token comment"},"// 插入字符串"),t(`
	`),n("span",{class:"token function"},"insert"),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"str"),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token punctuation"},"{"),t(`
		`),n("span",{class:"token keyword"},"let"),t(" node "),n("span",{class:"token operator"},"="),t(),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),t("root"),n("span",{class:"token punctuation"},";"),t(`
		`),n("span",{class:"token keyword"},"for"),t(),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"let"),t(" char "),n("span",{class:"token keyword"},"of"),t(" str"),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token punctuation"},"{"),t(`
			`),n("span",{class:"token keyword"},"if"),t(),n("span",{class:"token punctuation"},"("),n("span",{class:"token operator"},"!"),t("node"),n("span",{class:"token punctuation"},"."),t("children"),n("span",{class:"token punctuation"},"["),t("char"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token punctuation"},"{"),t(`
				node`),n("span",{class:"token punctuation"},"."),t("children"),n("span",{class:"token punctuation"},"["),t("char"),n("span",{class:"token punctuation"},"]"),t(),n("span",{class:"token operator"},"="),t(),n("span",{class:"token keyword"},"new"),t(),n("span",{class:"token class-name"},"TrieNode"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),t(`
			`),n("span",{class:"token punctuation"},"}"),t(`
			node `),n("span",{class:"token operator"},"="),t(" node"),n("span",{class:"token punctuation"},"."),t("children"),n("span",{class:"token punctuation"},"["),t("char"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),t(`
		`),n("span",{class:"token punctuation"},"}"),t(`
		node`),n("span",{class:"token punctuation"},"."),t("isEnd "),n("span",{class:"token operator"},"="),t(),n("span",{class:"token boolean"},"true"),n("span",{class:"token punctuation"},";"),t(`
	`),n("span",{class:"token punctuation"},"}"),t(`
	`),n("span",{class:"token comment"},"// 查询是否为前缀"),t(`
	`),n("span",{class:"token function"},"startsWith"),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"prefix"),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token punctuation"},"{"),t(`
		`),n("span",{class:"token keyword"},"let"),t(" node "),n("span",{class:"token operator"},"="),t(),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),t("root"),n("span",{class:"token punctuation"},";"),t(`
		`),n("span",{class:"token keyword"},"for"),t(),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"let"),t(" char "),n("span",{class:"token keyword"},"of"),t(" prefix"),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token punctuation"},"{"),t(`
			`),n("span",{class:"token keyword"},"if"),t(),n("span",{class:"token punctuation"},"("),n("span",{class:"token operator"},"!"),t("node"),n("span",{class:"token punctuation"},"."),t("children"),n("span",{class:"token punctuation"},"["),t("char"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token punctuation"},"{"),t(`
				`),n("span",{class:"token keyword"},"return"),t(),n("span",{class:"token boolean"},"false"),n("span",{class:"token punctuation"},";"),t(`
			`),n("span",{class:"token punctuation"},"}"),t(`
			node `),n("span",{class:"token operator"},"="),t(" node"),n("span",{class:"token punctuation"},"."),t("children"),n("span",{class:"token punctuation"},"["),t("char"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),t(`
		`),n("span",{class:"token punctuation"},"}"),t(`
		`),n("span",{class:"token keyword"},"return"),t(),n("span",{class:"token boolean"},"true"),n("span",{class:"token punctuation"},";"),t(`
	`),n("span",{class:"token punctuation"},"}"),t(`
`),n("span",{class:"token punctuation"},"}"),t(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),O=n("h2",{id:"相关题目",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#相关题目","aria-hidden":"true"},"#"),t(" 相关题目")],-1),I=n("thead",null,[n("tr",null,[n("th",{style:{"text-align":"center"}},"题号"),n("th",{style:{"text-align":"left"}},"标题"),n("th",{style:{"text-align":"center"}},"题解"),n("th",{style:{"text-align":"left"}},"标签"),n("th",{style:{"text-align":"center"}},"难度"),n("th",{style:{"text-align":"center"}},"力扣")])],-1),W=n("td",{style:{"text-align":"center"}},"208",-1),N=n("td",{style:{"text-align":"left"}},"实现 Trie (前缀树)",-1),C={style:{"text-align":"center"}},L={style:{"text-align":"left"}},V=n("code",null,"设计",-1),B=n("code",null,"字典树",-1),R=n("code",null,"哈希表",-1),F=n("code",null,"1+",-1),J=n("td",{style:{"text-align":"center"}},"🟠",-1),Y={style:{"text-align":"center"}},z={href:"https://leetcode.cn/problems/implement-trie-prefix-tree",target:"_blank",rel:"noopener noreferrer"},D={href:"https://leetcode.com/problems/implement-trie-prefix-tree",target:"_blank",rel:"noopener noreferrer"},G=n("td",{style:{"text-align":"center"}},"211",-1),H=n("td",{style:{"text-align":"left"}},"添加与搜索单词 - 数据结构设计",-1),K={style:{"text-align":"center"}},M={style:{"text-align":"left"}},Q=n("code",null,"深度优先搜索",-1),U=n("code",null,"设计",-1),X=n("code",null,"字典树",-1),Z=n("code",null,"1+",-1),$=n("td",{style:{"text-align":"center"}},"🟠",-1),nn={style:{"text-align":"center"}},tn={href:"https://leetcode.cn/problems/design-add-and-search-words-data-structure",target:"_blank",rel:"noopener noreferrer"},sn={href:"https://leetcode.com/problems/design-add-and-search-words-data-structure",target:"_blank",rel:"noopener noreferrer"};function an(en,on){const i=c("font"),e=c("RouterLink"),o=c("ExternalLinkIcon"),p=c("CodeTabs");return d(),k("div",null,[h,n("p",null,[t("🟢 "),s(i,{color:"#15bd66"},{default:a(()=>[t("Easy")]),_:1}),t("  🔖  "),s(e,{to:"/tag/trie.html"},{default:a(()=>[g]),_:1}),t(),s(e,{to:"/tag/array.html"},{default:a(()=>[q]),_:1}),t(),s(e,{to:"/tag/string.html"},{default:a(()=>[x]),_:1}),t(),s(e,{to:"/tag/string-matching.html"},{default:a(()=>[_]),_:1}),t(),s(e,{to:"/tag/hash-function.html"},{default:a(()=>[w]),_:1}),t(),s(e,{to:"/tag/rolling-hash.html"},{default:a(()=>[v]),_:1}),t("  🔗 "),n("a",y,[j,s(o)]),t(),n("a",P,[S,s(o)])]),A,s(p,{id:"390",data:[{id:"双层循环暴力法"},{id:"前缀树法"}]},{title0:a(({value:l,isActive:u})=>[t("双层循环暴力法")]),title1:a(({value:l,isActive:u})=>[t("前缀树法")]),tab0:a(({value:l,isActive:u})=>[T]),tab1:a(({value:l,isActive:u})=>[E]),_:1}),O,m(" prettier-ignore "),n("table",null,[I,n("tbody",null,[n("tr",null,[W,N,n("td",C,[s(e,{to:"/problem/0208.html"},{default:a(()=>[t("[✓]")]),_:1})]),n("td",L,[s(e,{to:"/tag/design.html"},{default:a(()=>[V]),_:1}),t(),s(e,{to:"/tag/trie.html"},{default:a(()=>[B]),_:1}),t(),s(e,{to:"/tag/hash-table.html"},{default:a(()=>[R]),_:1}),t(),F]),J,n("td",Y,[n("a",z,[t("🀄️"),s(o)]),t(),n("a",D,[t("🔗"),s(o)])])]),n("tr",null,[G,H,n("td",K,[s(e,{to:"/problem/0211.html"},{default:a(()=>[t("[✓]")]),_:1})]),n("td",M,[s(e,{to:"/tag/depth-first-search.html"},{default:a(()=>[Q]),_:1}),t(),s(e,{to:"/tag/design.html"},{default:a(()=>[U]),_:1}),t(),s(e,{to:"/tag/trie.html"},{default:a(()=>[X]),_:1}),t(),Z]),$,n("td",nn,[n("a",tn,[t("🀄️"),s(o)]),t(),n("a",sn,[t("🔗"),s(o)])])])])])])}const ln=r(b,[["render",an],["__file","3042.html.vue"]]);export{ln as default};
