import{_ as l,r as c,o as r,c as d,a as n,b as e,d as t,w as s,f as i,e as u}from"./app-B5EG-zH0.js";const k={},h=n("h1",{id:"_2787-将一个数字表示成幂的和的方案数",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_2787-将一个数字表示成幂的和的方案数","aria-hidden":"true"},"#"),e(" 2787. 将一个数字表示成幂的和的方案数")],-1),m=n("code",null,"动态规划",-1),_={href:"https://leetcode.cn/problems/ways-to-express-an-integer-as-sum-of-powers",target:"_blank",rel:"noopener noreferrer"},g=n("code",null,"力扣",-1),f={href:"https://leetcode.com/problems/ways-to-express-an-integer-as-sum-of-powers",target:"_blank",rel:"noopener noreferrer"},x=n("code",null,"LeetCode",-1),b=u(`<h2 id="题目" tabindex="-1"><a class="header-anchor" href="#题目" aria-hidden="true">#</a> 题目</h2><p>Given two <strong>positive</strong> integers <code>n</code> and <code>x</code>.</p><p>Return <em>the number of ways</em><code>n</code> <em>can be expressed as the sum of the</em> <code>xth</code><em>power of <strong>unique</strong> positive integers, in other words, the number of sets of unique integers</em> <code>[n1, n2, ..., nk]</code> <em>where</em> <code>n = n1x + n2x + ... + nkx</code> <em>.</em></p><p>Since the result can be very large, return it modulo <code>10^9 + 7</code>.</p><p>For example, if <code>n = 160</code> and <code>x = 3</code>, one way to express <code>n</code> is <code>n = 23 + 33 - 53</code>.</p><p><strong>Example 1:</strong></p><blockquote><p>Input: n = 10, x = 2</p><p>Output: 1</p><p>Explanation: We can express n as the following: n = 32 + 12 = 10.</p><p>It can be shown that it is the only way to express 10 as the sum of the 2nd power of unique integers.</p></blockquote><p><strong>Example 2:</strong></p><blockquote><p>Input: n = 4, x = 1</p><p>Output: 2</p><p>Explanation: We can express n in the following ways:</p><ul><li>n = 41 = 4.</li><li>n = 31 + 11 = 4.</li></ul></blockquote><p><strong>Constraints:</strong></p><ul><li><code>1 &lt;= n &lt;= 300</code></li><li><code>1 &lt;= x &lt;= 5</code></li></ul><h2 id="题目大意" tabindex="-1"><a class="header-anchor" href="#题目大意" aria-hidden="true">#</a> 题目大意</h2><p>给你两个 <strong>正</strong> 整数 <code>n</code> 和 <code>x</code> 。</p><p>请你返回将 <em><code>n</code> 表示成一些 <strong>互不相同</strong> 正整数的</em> <code>x</code> 次幂之和的方案数。换句话说，你需要返回互不相同整数 <code>[n1, n2, ..., nk]</code> 的集合数目，满足 <code>n = n1x + n2x + ... + nkx</code> 。</p><p>由于答案可能非常大，请你将它对 <code>10^9 + 7</code> 取余后返回。</p><p>比方说，<code>n = 160</code> 且 <code>x = 3</code> ，一个表示 <code>n</code> 的方法是 <code>n = 23 + 33 + 53</code> 。</p><p><strong>示例 1：</strong></p><blockquote><p><strong>输入：</strong> n = 10, x = 2</p><p><strong>输出：</strong> 1</p><p><strong>解释：</strong> 我们可以将 n 表示为：n = 32 + 12 = 10 。</p><p>这是唯一将 10 表达成不同整数 2 次方之和的方案。</p></blockquote><p><strong>示例 2：</strong></p><blockquote><p><strong>输入：</strong> n = 4, x = 1</p><p><strong>输出：</strong> 2</p><p><strong>解释：</strong> 我们可以将 n 按以下方案表示：</p><ul><li>n = 41 = 4 。</li><li>n = 31 + 11 = 4 。</li></ul></blockquote><p><strong>提示：</strong></p><ul><li><code>1 &lt;= n &lt;= 300</code></li><li><code>1 &lt;= x &lt;= 5</code></li></ul><h2 id="解题思路" tabindex="-1"><a class="header-anchor" href="#解题思路" aria-hidden="true">#</a> 解题思路</h2><p>本题要求计算可以用不同整数的 <code>x</code> 次幂之和表示 <code>n</code> 的不同方案数。<br> 我们可以将其转换为 <strong>背包问题（完全背包）</strong>，即：</p><ul><li><code>n</code> 是背包的容量。</li><li><code>i^x</code>（<code>i</code> 的 <code>x</code> 次幂）是可选的物品。</li><li>目标是求出能填满 <code>n</code> 的不同组合方式。</li></ul><ol><li><p>定义状态 <code>dp[j]</code> 表示填满 <code>j</code> 这个目标数的方案数。</p></li><li><p>状态转移</p><ul><li>对于每个 <code>i</code>（从 <code>1</code> 开始），计算 <code>pow = i^x</code>。</li><li>从 <code>n</code> 递减遍历 <code>j</code>，如果 <code>j &gt;= pow</code>，则可以选择使用 <code>pow</code>： <ul><li><code>dp[j] = (dp[j] + dp[j - pow]) % mod</code></li><li>其中 <code>dp[j - pow]</code> 代表去掉 <code>pow</code> 之前的方案数。</li></ul></li></ul></li><li><p>初始化 <code>dp[0] = 1</code>，表示填满 <code>0</code> 只有一种方式（什么都不选）。</p></li><li><p>计算顺序</p><ul><li><code>i</code> 从 <code>1</code> 开始递增，直到 <code>i^x &gt; n</code>，确保 <code>i^x</code> 不会超过 <code>n</code>。</li><li><code>j</code> 采用 <strong>倒序遍历</strong>，避免重复使用相同的 <code>i^x</code>。</li></ul></li><li><p>取模运算：由于结果可能很大，每次更新 <code>dp[j]</code> 时需要 <code>% 10^9+7</code>。</p></li></ol><h4 id="复杂度分析" tabindex="-1"><a class="header-anchor" href="#复杂度分析" aria-hidden="true">#</a> 复杂度分析</h4><ul><li><strong>时间复杂度</strong>：<code>O(n^(1/x) * n)</code>，外层 <code>i</code> 的范围为 <code>O(n^(1/x))</code>，内层遍历 <code>O(n)</code>。</li><li><strong>空间复杂度</strong>：<code>O(n)</code>，使用 <code>dp</code> 数组存储状态。</li></ul><h2 id="代码" tabindex="-1"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">}</span></span> <span class="token parameter">n</span>
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">}</span></span> <span class="token parameter">x</span>
 * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">}</span></span>
 */</span>
<span class="token keyword">var</span> <span class="token function-variable function">numberOfWays</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">n<span class="token punctuation">,</span> x</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">const</span> mod <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">7</span><span class="token punctuation">;</span>
	<span class="token keyword">const</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> x<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">let</span> pow <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> n<span class="token punctuation">;</span> j <span class="token operator">&gt;=</span> pow<span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> dp<span class="token punctuation">[</span>j <span class="token operator">-</span> pow<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">%</span> mod<span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="相关题目" tabindex="-1"><a class="header-anchor" href="#相关题目" aria-hidden="true">#</a> 相关题目</h2>`,31),y=n("thead",null,[n("tr",null,[n("th",{style:{"text-align":"center"}},"题号"),n("th",{style:{"text-align":"left"}},"标题"),n("th",{style:{"text-align":"center"}},"题解"),n("th",{style:{"text-align":"left"}},"标签"),n("th",{style:{"text-align":"center"}},"难度"),n("th",{style:{"text-align":"center"}},"力扣")])],-1),v=n("td",{style:{"text-align":"center"}},"279",-1),w=n("td",{style:{"text-align":"left"}},"完全平方数",-1),j={style:{"text-align":"center"}},q={style:{"text-align":"left"}},E=n("code",null,"广度优先搜索",-1),O=n("code",null,"数学",-1),C=n("code",null,"动态规划",-1),I=n("td",{style:{"text-align":"center"}},"🟠",-1),L={style:{"text-align":"center"}},N={href:"https://leetcode.cn/problems/perfect-squares",target:"_blank",rel:"noopener noreferrer"},V={href:"https://leetcode.com/problems/perfect-squares",target:"_blank",rel:"noopener noreferrer"},M=n("td",{style:{"text-align":"center"}},"377",-1),B=n("td",{style:{"text-align":"left"}},"组合总和 Ⅳ",-1),R={style:{"text-align":"center"}},W={style:{"text-align":"left"}},S=n("code",null,"数组",-1),A=n("code",null,"动态规划",-1),F=n("td",{style:{"text-align":"center"}},"🟠",-1),G={style:{"text-align":"center"}},T={href:"https://leetcode.cn/problems/combination-sum-iv",target:"_blank",rel:"noopener noreferrer"},z={href:"https://leetcode.com/problems/combination-sum-iv",target:"_blank",rel:"noopener noreferrer"},D=n("td",{style:{"text-align":"center"}},"494",-1),H=n("td",{style:{"text-align":"left"}},"目标和",-1),J={style:{"text-align":"center"}},K={style:{"text-align":"left"}},P=n("code",null,"数组",-1),Q=n("code",null,"动态规划",-1),U=n("code",null,"回溯",-1),X=n("td",{style:{"text-align":"center"}},"🟠",-1),Y={style:{"text-align":"center"}},Z={href:"https://leetcode.cn/problems/target-sum",target:"_blank",rel:"noopener noreferrer"},$={href:"https://leetcode.com/problems/target-sum",target:"_blank",rel:"noopener noreferrer"};function nn(en,tn){const p=c("font"),a=c("RouterLink"),o=c("ExternalLinkIcon");return r(),d("div",null,[h,n("p",null,[e("🟠 "),t(p,{color:"#ffb800"},{default:s(()=>[e("Medium")]),_:1}),e("  🔖  "),t(a,{to:"/tag/dynamic-programming.html"},{default:s(()=>[m]),_:1}),e("  🔗 "),n("a",_,[g,t(o)]),e(),n("a",f,[x,t(o)])]),b,i(" prettier-ignore "),n("table",null,[y,n("tbody",null,[n("tr",null,[v,w,n("td",j,[t(a,{to:"/problem/0279.html"},{default:s(()=>[e("[✓]")]),_:1})]),n("td",q,[t(a,{to:"/tag/breadth-first-search.html"},{default:s(()=>[E]),_:1}),e(),t(a,{to:"/tag/math.html"},{default:s(()=>[O]),_:1}),e(),t(a,{to:"/tag/dynamic-programming.html"},{default:s(()=>[C]),_:1})]),I,n("td",L,[n("a",N,[e("🀄️"),t(o)]),e(),n("a",V,[e("🔗"),t(o)])])]),n("tr",null,[M,B,n("td",R,[t(a,{to:"/problem/0377.html"},{default:s(()=>[e("[✓]")]),_:1})]),n("td",W,[t(a,{to:"/tag/array.html"},{default:s(()=>[S]),_:1}),e(),t(a,{to:"/tag/dynamic-programming.html"},{default:s(()=>[A]),_:1})]),F,n("td",G,[n("a",T,[e("🀄️"),t(o)]),e(),n("a",z,[e("🔗"),t(o)])])]),n("tr",null,[D,H,n("td",J,[t(a,{to:"/problem/0494.html"},{default:s(()=>[e("[✓]")]),_:1})]),n("td",K,[t(a,{to:"/tag/array.html"},{default:s(()=>[P]),_:1}),e(),t(a,{to:"/tag/dynamic-programming.html"},{default:s(()=>[Q]),_:1}),e(),t(a,{to:"/tag/backtracking.html"},{default:s(()=>[U]),_:1})]),X,n("td",Y,[n("a",Z,[e("🀄️"),t(o)]),e(),n("a",$,[e("🔗"),t(o)])])])])])])}const an=l(k,[["render",nn],["__file","2787.html.vue"]]);export{an as default};
