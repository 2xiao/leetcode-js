import{_ as o,r as p,o as c,c as l,a as n,b as s,d as a,w as i,e as u}from"./app-B5EG-zH0.js";const r={},k=n("h1",{id:"_2756-批处理查询-🔒",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_2756-批处理查询-🔒","aria-hidden":"true"},"#"),s(" 2756. 批处理查询 🔒")],-1),d={href:"https://leetcode.cn/problems/query-batching",target:"_blank",rel:"noopener noreferrer"},m=n("code",null,"力扣",-1),v={href:"https://leetcode.com/problems/query-batching",target:"_blank",rel:"noopener noreferrer"},y=n("code",null,"LeetCode",-1),b=u(`<h2 id="题目" tabindex="-1"><a class="header-anchor" href="#题目" aria-hidden="true">#</a> 题目</h2><p>Batching multiple small queries into a single large query can be a useful optimization. Write a class <code>QueryBatcher</code> that implements this functionality.</p><p>The constructor should accept two parameters:</p><ul><li>An asynchronous function <code>queryMultiple</code> which accepts an array of string keys <code>input</code>. It will resolve with an array of values that is the same length as the input array. Each index corresponds to the value associated with <code>input[i]</code>. You can assume the promise will never reject.</li><li>A throttle time in milliseconds <code>t</code>.</li></ul><p>The class has a single method.</p><ul><li><code>async getValue(key)</code>. Accepts a single string key and resolves with a single string value. The keys passed to this function should eventually get passed to the <code>queryMultiple</code> function. <code>queryMultiple</code> should never be called consecutively within <code>t</code> milliseconds. The first time <code>getValue</code> is called, <code>queryMultiple</code> should immediately be called with that single key. If after <code>t</code> milliseconds, <code>getValue</code> had been called again, all the passed keys should be passed to <code>queryMultiple</code> and ultimately returned. You can assume every key passed to this method is unique.</li></ul><p>The following diagram illustrates how the throttling algorithm works. Each rectangle represents 100ms. The throttle time is 400ms.</p><figure><img src="https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/2700-2799/2756.Query Batching/images/throttle.png" alt="Throttle
info" tabindex="0" loading="lazy"><figcaption>Throttle info</figcaption></figure><p><strong>Example 1:</strong></p><blockquote><p>Input:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function-variable function">queryMultiple</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">keys</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> keys<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">key</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> key <span class="token operator">+</span> <span class="token string">&#39;!&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

t <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>

calls <span class="token operator">=</span> <span class="token punctuation">[</span>
	<span class="token punctuation">{</span> <span class="token literal-property property">key</span><span class="token operator">:</span> <span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">time</span><span class="token operator">:</span> <span class="token number">10</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
	<span class="token punctuation">{</span> <span class="token literal-property property">key</span><span class="token operator">:</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">time</span><span class="token operator">:</span> <span class="token number">20</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
	<span class="token punctuation">{</span> <span class="token literal-property property">key</span><span class="token operator">:</span> <span class="token string">&#39;c&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">time</span><span class="token operator">:</span> <span class="token number">30</span> <span class="token punctuation">}</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Output:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">[</span>
	<span class="token punctuation">{</span> <span class="token literal-property property">resolved</span><span class="token operator">:</span> <span class="token string">&#39;a!&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">time</span><span class="token operator">:</span> <span class="token number">10</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
	<span class="token punctuation">{</span> <span class="token literal-property property">resolved</span><span class="token operator">:</span> <span class="token string">&#39;b!&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">time</span><span class="token operator">:</span> <span class="token number">110</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
	<span class="token punctuation">{</span> <span class="token literal-property property">resolved</span><span class="token operator">:</span> <span class="token string">&#39;c!&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">time</span><span class="token operator">:</span> <span class="token number">110</span> <span class="token punctuation">}</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Explanation:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> batcher <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryBatcher</span><span class="token punctuation">(</span>queryMultiple<span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> batcher<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;a!&quot; at t=10ms</span>
<span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> batcher<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token string">&#39;b&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;b!&quot; at t=110ms</span>
<span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> batcher<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token string">&#39;c&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;c!&quot; at t=110ms</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>queryMultiple simply adds an &quot;!&quot; to the key</p><p>At t=10ms, getValue(&#39;a&#39;) is called, queryMultiple([&#39;a&#39;]) is immediately called and the result is immediately returned.</p><p>At t=20ms, getValue(&#39;b&#39;) is called but the query is queued</p><p>At t=30ms, getValue(&#39;c&#39;) is called but the query is queued.</p><p>At t=110ms, queryMultiple([&#39;a&#39;, &#39;b&#39;]) is called and the results are immediately returned.</p></blockquote><p><strong>Example 2:</strong></p><blockquote><p>Input:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function-variable function">queryMultiple</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">keys</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">await</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> keys<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">key</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> key <span class="token operator">+</span> <span class="token string">&#39;!&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

t <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>

calls <span class="token operator">=</span> <span class="token punctuation">[</span>
	<span class="token punctuation">{</span> <span class="token literal-property property">key</span><span class="token operator">:</span> <span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">time</span><span class="token operator">:</span> <span class="token number">10</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
	<span class="token punctuation">{</span> <span class="token literal-property property">key</span><span class="token operator">:</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">time</span><span class="token operator">:</span> <span class="token number">20</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
	<span class="token punctuation">{</span> <span class="token literal-property property">key</span><span class="token operator">:</span> <span class="token string">&#39;c&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">time</span><span class="token operator">:</span> <span class="token number">30</span> <span class="token punctuation">}</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Output:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">[</span>
	<span class="token punctuation">{</span> <span class="token literal-property property">resolved</span><span class="token operator">:</span> <span class="token string">&#39;a!&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">time</span><span class="token operator">:</span> <span class="token number">110</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
	<span class="token punctuation">{</span> <span class="token literal-property property">resolved</span><span class="token operator">:</span> <span class="token string">&#39;b!&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">time</span><span class="token operator">:</span> <span class="token number">210</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
	<span class="token punctuation">{</span> <span class="token literal-property property">resolved</span><span class="token operator">:</span> <span class="token string">&#39;c!&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">time</span><span class="token operator">:</span> <span class="token number">210</span> <span class="token punctuation">}</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Explanation:</p><p>This example is the same as example 1 except there is a 100ms delay in queryMultiple. The results are the same except the promises resolve 100ms later.</p></blockquote><p><strong>Example 3:</strong></p><blockquote><p>Input:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function-variable function">queryMultiple</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">keys</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">await</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=&gt;</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> keys<span class="token punctuation">.</span>length <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> keys<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">key</span> <span class="token operator">=&gt;</span> key <span class="token operator">+</span> <span class="token string">&#39;!&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

t <span class="token operator">=</span> <span class="token number">100</span>

calls <span class="token operator">=</span> <span class="token punctuation">[</span>
	<span class="token punctuation">{</span><span class="token string-property property">&quot;key&quot;</span><span class="token operator">:</span> <span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span> <span class="token string-property property">&quot;time&quot;</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
	<span class="token punctuation">{</span><span class="token string-property property">&quot;key&quot;</span><span class="token operator">:</span> <span class="token string">&quot;b&quot;</span><span class="token punctuation">,</span> <span class="token string-property property">&quot;time&quot;</span><span class="token operator">:</span> <span class="token number">20</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
	<span class="token punctuation">{</span><span class="token string-property property">&quot;key&quot;</span><span class="token operator">:</span> <span class="token string">&quot;c&quot;</span><span class="token punctuation">,</span> <span class="token string-property property">&quot;time&quot;</span><span class="token operator">:</span> <span class="token number">30</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
	<span class="token punctuation">{</span><span class="token string-property property">&quot;key&quot;</span><span class="token operator">:</span> <span class="token string">&quot;d&quot;</span><span class="token punctuation">,</span> <span class="token string-property property">&quot;time&quot;</span><span class="token operator">:</span> <span class="token number">40</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
	<span class="token punctuation">{</span><span class="token string-property property">&quot;key&quot;</span><span class="token operator">:</span> <span class="token string">&quot;e&quot;</span><span class="token punctuation">,</span> <span class="token string-property property">&quot;time&quot;</span><span class="token operator">:</span> <span class="token number">250</span><span class="token punctuation">}</span>
	<span class="token punctuation">{</span><span class="token string-property property">&quot;key&quot;</span><span class="token operator">:</span> <span class="token string">&quot;f&quot;</span><span class="token punctuation">,</span> <span class="token string-property property">&quot;time&quot;</span><span class="token operator">:</span> <span class="token number">300</span><span class="token punctuation">}</span>
<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Output:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">[</span>
	<span class="token punctuation">{</span> <span class="token literal-property property">resolved</span><span class="token operator">:</span> <span class="token string">&#39;a!&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">time</span><span class="token operator">:</span> <span class="token number">110</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
	<span class="token punctuation">{</span> <span class="token literal-property property">resolved</span><span class="token operator">:</span> <span class="token string">&#39;e!&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">time</span><span class="token operator">:</span> <span class="token number">350</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
	<span class="token punctuation">{</span> <span class="token literal-property property">resolved</span><span class="token operator">:</span> <span class="token string">&#39;b!&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">time</span><span class="token operator">:</span> <span class="token number">410</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
	<span class="token punctuation">{</span> <span class="token literal-property property">resolved</span><span class="token operator">:</span> <span class="token string">&#39;c!&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">time</span><span class="token operator">:</span> <span class="token number">410</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
	<span class="token punctuation">{</span> <span class="token literal-property property">resolved</span><span class="token operator">:</span> <span class="token string">&#39;d!&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">time</span><span class="token operator">:</span> <span class="token number">410</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
	<span class="token punctuation">{</span> <span class="token literal-property property">resolved</span><span class="token operator">:</span> <span class="token string">&#39;f!&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">time</span><span class="token operator">:</span> <span class="token number">450</span> <span class="token punctuation">}</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Explanation: queryMultiple([&#39;a&#39;]) is called at t=10ms, it is resolved at t=110ms</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">queryMultiple</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;b&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;c&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;d&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span> is called at t<span class="token operator">=</span>110ms<span class="token punctuation">,</span> it is resolved at 410ms
<span class="token function">queryMultiple</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;e&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span> is called at t<span class="token operator">=</span>250ms<span class="token punctuation">,</span> it is resolved at 350ms
<span class="token function">queryMultiple</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;f&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span> is called at t<span class="token operator">=</span>350ms<span class="token punctuation">,</span> it is resolved at 450ms
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><p><strong>Constraints:</strong></p><ul><li><code>0 &lt;= t &lt;= 1000</code></li><li><code>0 &lt;= calls.length &lt;= 10</code></li><li><code>1 &lt;= key.length &lt;= 100</code></li><li>All keys are unique</li></ul><h2 id="题目大意" tabindex="-1"><a class="header-anchor" href="#题目大意" aria-hidden="true">#</a> 题目大意</h2><p>将多个小查询批处理为单个大查询可以是一种有用的优化。请编写一个名为 <code>QueryBatcher</code> 的类来实现这个功能。</p><p>它的构造函数应接受两个参数：</p><ul><li>一个异步函数 <code>queryMultiple</code> ，它接受一个字符串键的数组作为输入。它将返回一个与输入数组长度相同的值数组。每个索引对应于与 <code>input[i]</code> 相关联的值。可以假设该异步函数永远不会被拒绝。</li><li>一个以毫秒为单位的节流时间<code>t</code>。</li></ul><p>该类有一个方法：</p><ul><li><code>async getValue(key)</code>：接受一个字符串键，并返回一个解析后的字符串值。传递给此函数的键值最终应传递给 <code>queryMultiple</code> 函数。在 <code>t</code> 毫秒内不应连续调用 <code>queryMultiple</code> 。第一次调用 <code>getValue</code> 时，应立即使用该单个键调用 <code>queryMultiple</code> 。如果在 <code>t</code> 毫秒后再次调用了 <code>getValue</code> ，则所有传递的键应传递给 <code>queryMultiple</code> ，并返回最终结果。可以假设传递给该方法的每个键都是唯一的。</li></ul><p>下图说明了节流算法的工作原理。每个矩形代表 100 毫秒。节流时间为 400 毫秒。</p><figure><img src="https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/2700-2799/2756.Query Batching/images/throttle.png" alt="Throttle
info" tabindex="0" loading="lazy"><figcaption>Throttle info</figcaption></figure><p><strong>示例 1：</strong></p><blockquote><p><strong>输入：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function-variable function">queryMultiple</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">keys</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> keys<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">key</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> key <span class="token operator">+</span> <span class="token string">&#39;!&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

t <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>

calls <span class="token operator">=</span> <span class="token punctuation">[</span>
	<span class="token punctuation">{</span> <span class="token literal-property property">key</span><span class="token operator">:</span> <span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">time</span><span class="token operator">:</span> <span class="token number">10</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
	<span class="token punctuation">{</span> <span class="token literal-property property">key</span><span class="token operator">:</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">time</span><span class="token operator">:</span> <span class="token number">20</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
	<span class="token punctuation">{</span> <span class="token literal-property property">key</span><span class="token operator">:</span> <span class="token string">&#39;c&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">time</span><span class="token operator">:</span> <span class="token number">30</span> <span class="token punctuation">}</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>输出：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">[</span>
	<span class="token punctuation">{</span> <span class="token literal-property property">resolved</span><span class="token operator">:</span> <span class="token string">&#39;a!&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">time</span><span class="token operator">:</span> <span class="token number">10</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
	<span class="token punctuation">{</span> <span class="token literal-property property">resolved</span><span class="token operator">:</span> <span class="token string">&#39;b!&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">time</span><span class="token operator">:</span> <span class="token number">110</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
	<span class="token punctuation">{</span> <span class="token literal-property property">resolved</span><span class="token operator">:</span> <span class="token string">&#39;c!&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">time</span><span class="token operator">:</span> <span class="token number">110</span> <span class="token punctuation">}</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>解释：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> batcher <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryBatcher</span><span class="token punctuation">(</span>queryMultiple<span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> batcher<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;a!&quot; at t=10ms</span>
<span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> batcher<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token string">&#39;b&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;b!&quot; at t=110ms</span>
<span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> batcher<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token string">&#39;c&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;c!&quot; at t=110ms</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>queryMultiple 简单地给键添加了&quot;!&quot;。</p><p>在 t=10ms 时，调用 getValue(&#39;a&#39;)，立即调用 queryMultiple([&#39;a&#39;]) 并立即返回结果。</p><p>在 t=20ms 时，调用 getValue(&#39;b&#39;)，但查询需要等待。</p><p>在 t=30ms 时，调用 getValue(&#39;c&#39;)，但查询需要等待。</p><p>在 t=110ms 时，调用 queryMultiple([&#39;b&#39;, &#39;c&#39;]) 并立即返回结果。</p></blockquote><p><strong>示例 2；</strong></p><blockquote><p><strong>输入：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function-variable function">queryMultiple</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">keys</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">await</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> keys<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">key</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> key <span class="token operator">+</span> <span class="token string">&#39;!&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

t <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>

calls <span class="token operator">=</span> <span class="token punctuation">[</span>
	<span class="token punctuation">{</span> <span class="token literal-property property">key</span><span class="token operator">:</span> <span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">time</span><span class="token operator">:</span> <span class="token number">10</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
	<span class="token punctuation">{</span> <span class="token literal-property property">key</span><span class="token operator">:</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">time</span><span class="token operator">:</span> <span class="token number">20</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
	<span class="token punctuation">{</span> <span class="token literal-property property">key</span><span class="token operator">:</span> <span class="token string">&#39;c&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">time</span><span class="token operator">:</span> <span class="token number">30</span> <span class="token punctuation">}</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>输出：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">[</span>
	<span class="token punctuation">{</span> <span class="token literal-property property">resolved</span><span class="token operator">:</span> <span class="token string">&#39;a!&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">time</span><span class="token operator">:</span> <span class="token number">110</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
	<span class="token punctuation">{</span> <span class="token literal-property property">resolved</span><span class="token operator">:</span> <span class="token string">&#39;b!&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">time</span><span class="token operator">:</span> <span class="token number">210</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
	<span class="token punctuation">{</span> <span class="token literal-property property">resolved</span><span class="token operator">:</span> <span class="token string">&#39;c!&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">time</span><span class="token operator">:</span> <span class="token number">210</span> <span class="token punctuation">}</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>解释：</strong></p><p>这个例子与示例 1 相同，只是在 queryMultiple 中有一个 100ms 的延迟。结果也相同，只是 promise 的解析时间延迟了 100ms。</p></blockquote><p><strong>示例 3：</strong></p><blockquote><p><strong>输入：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function-variable function">queryMultiple</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">keys</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">await</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=&gt;</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> keys<span class="token punctuation">.</span>length <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> keys<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">key</span> <span class="token operator">=&gt;</span> key <span class="token operator">+</span> <span class="token string">&#39;!&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

t <span class="token operator">=</span> <span class="token number">100</span>

calls <span class="token operator">=</span> <span class="token punctuation">[</span>
	<span class="token punctuation">{</span><span class="token string-property property">&quot;key&quot;</span><span class="token operator">:</span> <span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span> <span class="token string-property property">&quot;time&quot;</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
	<span class="token punctuation">{</span><span class="token string-property property">&quot;key&quot;</span><span class="token operator">:</span> <span class="token string">&quot;b&quot;</span><span class="token punctuation">,</span> <span class="token string-property property">&quot;time&quot;</span><span class="token operator">:</span> <span class="token number">20</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
	<span class="token punctuation">{</span><span class="token string-property property">&quot;key&quot;</span><span class="token operator">:</span> <span class="token string">&quot;c&quot;</span><span class="token punctuation">,</span> <span class="token string-property property">&quot;time&quot;</span><span class="token operator">:</span> <span class="token number">30</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
	<span class="token punctuation">{</span><span class="token string-property property">&quot;key&quot;</span><span class="token operator">:</span> <span class="token string">&quot;d&quot;</span><span class="token punctuation">,</span> <span class="token string-property property">&quot;time&quot;</span><span class="token operator">:</span> <span class="token number">40</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
	<span class="token punctuation">{</span><span class="token string-property property">&quot;key&quot;</span><span class="token operator">:</span> <span class="token string">&quot;e&quot;</span><span class="token punctuation">,</span> <span class="token string-property property">&quot;time&quot;</span><span class="token operator">:</span> <span class="token number">250</span><span class="token punctuation">}</span>
	<span class="token punctuation">{</span><span class="token string-property property">&quot;key&quot;</span><span class="token operator">:</span> <span class="token string">&quot;f&quot;</span><span class="token punctuation">,</span> <span class="token string-property property">&quot;time&quot;</span><span class="token operator">:</span> <span class="token number">300</span><span class="token punctuation">}</span>
<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>输出：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">[</span>
	<span class="token punctuation">{</span> <span class="token literal-property property">resolved</span><span class="token operator">:</span> <span class="token string">&#39;a!&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">time</span><span class="token operator">:</span> <span class="token number">110</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
	<span class="token punctuation">{</span> <span class="token literal-property property">resolved</span><span class="token operator">:</span> <span class="token string">&#39;e!&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">time</span><span class="token operator">:</span> <span class="token number">350</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
	<span class="token punctuation">{</span> <span class="token literal-property property">resolved</span><span class="token operator">:</span> <span class="token string">&#39;b!&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">time</span><span class="token operator">:</span> <span class="token number">410</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
	<span class="token punctuation">{</span> <span class="token literal-property property">resolved</span><span class="token operator">:</span> <span class="token string">&#39;c!&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">time</span><span class="token operator">:</span> <span class="token number">410</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
	<span class="token punctuation">{</span> <span class="token literal-property property">resolved</span><span class="token operator">:</span> <span class="token string">&#39;d!&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">time</span><span class="token operator">:</span> <span class="token number">410</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
	<span class="token punctuation">{</span> <span class="token literal-property property">resolved</span><span class="token operator">:</span> <span class="token string">&#39;f!&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">time</span><span class="token operator">:</span> <span class="token number">450</span> <span class="token punctuation">}</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>解释：</strong> 在 t=10ms 时，调用 queryMultiple([&#39;a&#39;]) ，在 t=110ms 时解析。</p><p>在 t=110ms 时，调用 queryMultiple([&#39;b&#39;, &#39;c&#39;, &#39;d&#39;]) ，在 t=410ms 时解析。</p><p>在 t=250ms 时，调用 queryMultiple([&#39;e&#39;]) ，在 t=350ms 时解析。</p><p>在 t=350ms 时，调用 queryMultiple([&#39;f&#39;]) ，在 t=450ms 时解析。</p></blockquote><p><strong>提示：</strong></p><ul><li><code>0 &lt;= t &lt;= 1000</code></li><li><code>0 &lt;= calls.length &lt;= 10</code></li><li><code>1 &lt;= key.length &lt;= 100</code></li><li>所有的键值都是唯一的</li></ul><h2 id="解题思路" tabindex="-1"><a class="header-anchor" href="#解题思路" aria-hidden="true">#</a> 解题思路</h2><ol><li><p><strong>构造函数</strong>：初始化<code>queryMultiple</code>函数和节流时间<code>t</code>，并创建一个批次（数组）来存储需要查询的键，以及另一个对象来存储每个键的 Promise 以便在批处理后解析结果。</p><ul><li><code>queue</code> 存储当前批次的键。</li><li><code>promises</code> 记录每个键对应的 Promise，使每个调用者都能获取到查询结果。</li></ul></li><li><p><strong>批处理逻辑</strong>：</p><ul><li>第一次调用 <code>getValue</code> 时，立即触发查询。</li><li>接下来的调用在<code>t</code>毫秒内只会添加到批次中，并等待批次到达延迟时间后再一起查询。</li><li>使用<code>setTimeout</code>控制批次的间隔时间。</li></ul></li><li><p><strong>getValue 方法</strong>：</p><ul><li><code>getValue</code>接受一个键，返回与该键关联的值。</li><li>如果该键是第一次出现，则创建一个 Promise，将它加入批处理队列<code>queue</code>，并在批次执行后解析结果。</li><li>使用 <code>clearTimeout</code> 和 <code>setTimeout</code> 来控制调用间隔。没有计时器时立即查询，有计时器则等待其到期。</li><li>当达到<code>t</code>毫秒延迟时，将所有积累的键传递给<code>queryMultiple</code>，然后将对应的结果映射给各自的 Promise。</li></ul></li><li><p><strong>_triggerQuery 方法</strong>：</p><ul><li>将 <code>queue</code> 中的所有键批量查询，并将返回结果分配到相应的 Promise。</li><li>查询后清空 <code>queue</code> 并重置计时器。</li></ul></li></ol><h2 id="代码" tabindex="-1"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">QueryBatcher</span> <span class="token punctuation">{</span>
	<span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">queryMultiple<span class="token punctuation">,</span> t</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span>queryMultiple <span class="token operator">=</span> queryMultiple<span class="token punctuation">;</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span>t <span class="token operator">=</span> t<span class="token punctuation">;</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span>queue <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 存储需要查询的键</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span>promises <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// 存储每个键的 Promise</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span>timeout <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">// 用于控制批次的延迟</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">async</span> <span class="token function">getValue</span><span class="token punctuation">(</span><span class="token parameter">key</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token comment">// 如果该键是第一次出现，则初始化它的 Promise</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>promises<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">this</span><span class="token punctuation">.</span>promises<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
				<span class="token keyword">this</span><span class="token punctuation">.</span>queue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
				<span class="token keyword">this</span><span class="token punctuation">.</span>promises<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">.</span>resolve <span class="token operator">=</span> resolve<span class="token punctuation">;</span>
			<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token comment">// 如果没有延迟计时器，则立即查询当前批次中的键</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>timeout <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
				<span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_triggerQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
				<span class="token comment">// 如果已设置延迟计时器，则等待当前计时器到期后再查询</span>
				<span class="token function">clearTimeout</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>timeout<span class="token punctuation">)</span><span class="token punctuation">;</span>
				<span class="token keyword">this</span><span class="token punctuation">.</span>timeout <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_triggerQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>promises<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token comment">// 执行批次查询并解析结果</span>
	<span class="token keyword">async</span> <span class="token function">_triggerQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">const</span> keysToQuery <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token keyword">this</span><span class="token punctuation">.</span>queue<span class="token punctuation">]</span><span class="token punctuation">;</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span>queue <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 清空当前队列</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span>timeout <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">// 重置计时器</span>

		<span class="token comment">// 进行查询，并将结果分发给相应的 Promise</span>
		<span class="token keyword">const</span> results <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">queryMultiple</span><span class="token punctuation">(</span>keysToQuery<span class="token punctuation">)</span><span class="token punctuation">;</span>
		keysToQuery<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">key<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
			<span class="token keyword">this</span><span class="token punctuation">.</span>promises<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>results<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token keyword">delete</span> <span class="token keyword">this</span><span class="token punctuation">.</span>promises<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 查询后删除该键的 Promise</span>
		<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,36);function g(h,q){const e=p("font"),t=p("ExternalLinkIcon");return c(),l("div",null,[k,n("p",null,[s("🔴 "),a(e,{color:"#ff334b"},{default:i(()=>[s("Hard")]),_:1}),s("  🔗 "),n("a",d,[m,a(t)]),s(),n("a",v,[y,a(t)])]),b])}const w=o(r,[["render",g],["__file","2756.html.vue"]]);export{w as default};
