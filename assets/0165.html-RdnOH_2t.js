import{_ as c,r as e,o as i,c as l,a as n,b as s,d as o,w as a,e as d}from"./app-fBVbqwGY.js";const u={},v=n("h1",{id:"_165-比较版本号",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_165-比较版本号","aria-hidden":"true"},"#"),s(" 165. 比较版本号")],-1),k=n("code",null,"双指针",-1),g=n("code",null,"字符串",-1),m={href:"https://leetcode.cn/problems/compare-version-numbers",target:"_blank",rel:"noopener noreferrer"},h=n("code",null,"力扣",-1),b={href:"https://leetcode.com/problems/compare-version-numbers",target:"_blank",rel:"noopener noreferrer"},_=n("code",null,"LeetCode",-1),q=d(`<h2 id="题目" tabindex="-1"><a class="header-anchor" href="#题目" aria-hidden="true">#</a> 题目</h2><p>Given two <strong>version strings</strong> , <code>version1</code> and <code>version2</code>, compare them. A version string consists of <strong>revisions</strong> separated by dots <code>&#39;.&#39;</code>. The <strong>value of the revision</strong> is its <strong>integer conversion</strong> ignoring leading zeros.</p><p>To compare version strings, compare their revision values in <strong>left-to-right order</strong>. If one of the version strings has fewer revisions, treat the missing revision values as <code>0</code>.</p><p>Return the following:</p><ul><li>If <code>version1 &lt; version2</code>, return -1.</li><li>If <code>version1 &gt; version2</code>, return 1.</li><li>Otherwise, return 0.</li></ul><p><strong>Example 1:</strong></p><p><strong>Input:</strong> version1 = &quot;1.2&quot;, version2 = &quot;1.10&quot;</p><p><strong>Output:</strong> -1</p><p><strong>Explanation:</strong></p><p>version1&#39;s second revision is &quot;2&quot; and version2&#39;s second revision is &quot;10&quot;: 2 &lt; 10, so version1 &lt; version2.</p><p><strong>Example 2:</strong></p><p><strong>Input:</strong> version1 = &quot;1.01&quot;, version2 = &quot;1.001&quot;</p><p><strong>Output:</strong> 0</p><p><strong>Explanation:</strong></p><p>Ignoring leading zeroes, both &quot;01&quot; and &quot;001&quot; represent the same integer &quot;1&quot;.</p><p><strong>Example 3:</strong></p><p><strong>Input:</strong> version1 = &quot;1.0&quot;, version2 = &quot;1.0.0.0&quot;</p><p><strong>Output:</strong> 0</p><p><strong>Explanation:</strong></p><p>version1 has less revisions, which means every missing revision are treated as &quot;0&quot;.</p><p><strong>Constraints:</strong></p><ul><li><code>1 &lt;= version1.length, version2.length &lt;= 500</code></li><li><code>version1</code> and <code>version2</code> only contain digits and <code>&#39;.&#39;</code>.</li><li><code>version1</code> and <code>version2</code> <strong>are valid version numbers</strong>.</li><li>All the given revisions in <code>version1</code> and <code>version2</code> can be stored in a <strong>32-bit integer</strong>.</li></ul><h2 id="题目大意" tabindex="-1"><a class="header-anchor" href="#题目大意" aria-hidden="true">#</a> 题目大意</h2><p>给你两个 <strong>版本号字符串</strong> <code>version1</code> 和 <code>version2</code> ，请你比较它们。版本号由被点 <code>&#39;.&#39;</code> 分开的修订号组成。<strong>修订号的值</strong> 是它 <strong>转换为整数</strong> 并忽略前导零。</p><p>比较版本号时，请按 <strong>从左到右的顺序</strong> 依次比较它们的修订号。如果其中一个版本字符串的修订号较少，则将缺失的修订号视为 <code>0</code>。</p><p>返回规则如下：</p><ul><li>如果 <code>_version1 _&lt; _version2_</code> 返回 <code>-1</code>，</li><li>如果 <code>_version1 _&gt; _version2_</code> 返回 <code>1</code>，</li><li>除此之外返回 <code>0</code>。</li></ul><p><strong>示例 1：</strong></p><p><strong>输入：</strong> version1 = &quot;1.2&quot;, version2 = &quot;1.10&quot;</p><p><strong>输出：</strong> -1</p><p><strong>解释：</strong></p><p>version1 的第二个修订号为 &quot;2&quot;，version2 的第二个修订号为 &quot;10&quot;：2 &lt; 10，所以 version1 &lt; version2。</p><p><strong>示例 2：</strong></p><p><strong>输入：</strong> version1 = &quot;1.01&quot;, version2 = &quot;1.001&quot;</p><p><strong>输出：</strong> 0</p><p><strong>解释：</strong></p><p>忽略前导零，&quot;01&quot; 和 &quot;001&quot; 都代表相同的整数 &quot;1&quot;。</p><p><strong>示例 3：</strong></p><p><strong>输入：</strong> version1 = &quot;1.0&quot;, version2 = &quot;1.0.0.0&quot;</p><p><strong>输出：</strong> 0</p><p><strong>解释：</strong></p><p>version1 有更少的修订号，每个缺失的修订号按 &quot;0&quot; 处理。</p><p><strong>提示：</strong></p><ul><li><code>1 &lt;= version1.length, version2.length &lt;= 500</code></li><li><code>version1</code> 和 <code>version2</code> 仅包含数字和 <code>&#39;.&#39;</code></li><li><code>version1</code> 和 <code>version2</code> 都是 <strong>有效版本号</strong></li><li><code>version1</code> 和 <code>version2</code> 的所有修订号都可以存储在 <strong>32 位整数</strong> 中</li></ul><h2 id="解题思路" tabindex="-1"><a class="header-anchor" href="#解题思路" aria-hidden="true">#</a> 解题思路</h2><ol><li><p><strong>初始化指针和辅助变量</strong>：</p><ul><li>定义指针 <code>i</code> 和 <code>j</code> 分别指向 <code>version1</code> 和 <code>version2</code> 的当前位置。</li><li>定义 <code>x1</code> 和 <code>x2</code> 用于存储当前部分的数值。</li></ul></li><li><p><strong>逐部分比较</strong>：</p><ul><li>用 <code>while</code> 循环读取两个版本号的当前部分，直到遇到 <code>.</code> 或字符串末尾。</li><li>将每个字符转换为数字，并累积计算当前部分的值。</li><li>比较当前部分的值 <code>x1</code> 和 <code>x2</code>： <ul><li>如果 <code>x1 &lt; x2</code>，返回 <code>-1</code>。</li><li>如果 <code>x1 &gt; x2</code>，返回 <code>1</code>。</li></ul></li></ul></li><li><p><strong>继续下一部分</strong>：</p><ul><li>重置 <code>x1</code> 和 <code>x2</code> 为 <code>0</code>，并移动指针 <code>i</code> 和 <code>j</code> 到下一个部分。</li></ul></li><li><p><strong>处理不同长度的版本号</strong>：</p><ul><li>即使 <code>i</code> 或 <code>j</code> 到达末尾，另一个版本号仍可能有剩余部分（例如：<code>1.0</code> 和 <code>1.0.0</code>）。</li><li>在这种情况下，将剩余部分视为 <code>0</code> 继续比较。</li></ul></li><li><p><strong>返回结果</strong>：</p><ul><li>如果所有部分都相等，返回 <code>0</code>。</li></ul></li></ol><h4 id="复杂度分析" tabindex="-1"><a class="header-anchor" href="#复杂度分析" aria-hidden="true">#</a> 复杂度分析</h4><ul><li><strong>时间复杂度</strong>：<code>O(max(n1, n2))</code>，其中 <code>n1</code> 和 <code>n2</code> 分别是 <code>version1</code> 和 <code>version2</code> 的长度，遍历两个版本号的所有字符。</li><li><strong>空间复杂度</strong>：<code>O(1)</code>，仅使用了常数级别的额外空间。</li></ul><h2 id="代码" tabindex="-1"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>string<span class="token punctuation">}</span></span> <span class="token parameter">version1</span>
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>string<span class="token punctuation">}</span></span> <span class="token parameter">version2</span>
 * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">}</span></span>
 */</span>
<span class="token keyword">var</span> <span class="token function-variable function">compareVersion</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">version1<span class="token punctuation">,</span> version2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">const</span> n1 <span class="token operator">=</span> version1<span class="token punctuation">.</span>length<span class="token punctuation">,</span>
		n2 <span class="token operator">=</span> version2<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
	<span class="token keyword">let</span> x1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>
		x2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n1 <span class="token operator">||</span> j <span class="token operator">&lt;</span> n2<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">,</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token comment">// 读取 version1 的下一段版本号</span>
		<span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> n1 <span class="token operator">&amp;&amp;</span> version1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!==</span> <span class="token string">&#39;.&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			x1 <span class="token operator">=</span> <span class="token number">10</span> <span class="token operator">*</span> x1 <span class="token operator">+</span> <span class="token function">Number</span><span class="token punctuation">(</span>version1<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		<span class="token comment">// 读取 version2 的下一段版本号</span>
		<span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;</span> n2 <span class="token operator">&amp;&amp;</span> version2<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!==</span> <span class="token string">&#39;.&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			x2 <span class="token operator">=</span> <span class="token number">10</span> <span class="token operator">*</span> x2 <span class="token operator">+</span> <span class="token function">Number</span><span class="token punctuation">(</span>version2<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>

		<span class="token comment">// 比较两个版本号</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>x1 <span class="token operator">&lt;</span> x2<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>x1 <span class="token operator">&gt;</span> x2<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>

		<span class="token comment">// 重置</span>
		x1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
		x2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,50);function x(f,w){const r=e("font"),t=e("RouterLink"),p=e("ExternalLinkIcon");return i(),l("div",null,[v,n("p",null,[s("🟠 "),o(r,{color:"#ffb800"},{default:a(()=>[s("Medium")]),_:1}),s("  🔖  "),o(t,{to:"/tag/two-pointers.html"},{default:a(()=>[k]),_:1}),s(),o(t,{to:"/tag/string.html"},{default:a(()=>[g]),_:1}),s("  🔗 "),n("a",m,[h,o(p)]),s(),n("a",b,[_,o(p)])]),q])}const j=c(u,[["render",x],["__file","0165.html.vue"]]);export{j as default};
