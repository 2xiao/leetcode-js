import{_ as l,r as e,o as i,c as r,a as n,b as s,d as t,w as a,e as d}from"./app-B5EG-zH0.js";const u={},k=n("h1",{id:"_3174-清除数字",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_3174-清除数字","aria-hidden":"true"},"#"),s(" 3174. 清除数字")],-1),g=n("code",null,"栈",-1),h=n("code",null,"字符串",-1),m=n("code",null,"模拟",-1),v={href:"https://leetcode.cn/problems/clear-digits",target:"_blank",rel:"noopener noreferrer"},_=n("code",null,"力扣",-1),b={href:"https://leetcode.com/problems/clear-digits",target:"_blank",rel:"noopener noreferrer"},f=n("code",null,"LeetCode",-1),q=d(`<h2 id="题目" tabindex="-1"><a class="header-anchor" href="#题目" aria-hidden="true">#</a> 题目</h2><p>You are given a string <code>s</code>.</p><p>Your task is to remove <strong>all</strong> digits by doing this operation repeatedly:</p><ul><li>Delete the <em>first</em> digit and the <strong>closest</strong> <strong>non-digit</strong> character to its <em>left</em>.</li></ul><p>Return the resulting string after removing all digits.</p><p><strong>Example 1:</strong></p><p><strong>Input:</strong> s = &quot;abc&quot;</p><p><strong>Output:</strong> &quot;abc&quot;</p><p><strong>Explanation:</strong></p><p>There is no digit in the string.</p><p><strong>Example 2:</strong></p><p><strong>Input:</strong> s = &quot;cb34&quot;</p><p><strong>Output:</strong> &quot;&quot;</p><p><strong>Explanation:</strong></p><p>First, we apply the operation on <code>s[2]</code>, and <code>s</code> becomes <code>&quot;c4&quot;</code>.</p><p>Then we apply the operation on <code>s[1]</code>, and <code>s</code> becomes <code>&quot;&quot;</code>.</p><p><strong>Constraints:</strong></p><ul><li><code>1 &lt;= s.length &lt;= 100</code></li><li><code>s</code> consists only of lowercase English letters and digits.</li><li>The input is generated such that it is possible to delete all digits.</li></ul><h2 id="题目大意" tabindex="-1"><a class="header-anchor" href="#题目大意" aria-hidden="true">#</a> 题目大意</h2><p>给你一个字符串 <code>s</code> 。</p><p>你的任务是重复以下操作删除 <strong>所有</strong> 数字字符：</p><ul><li>删除 <strong>第一个数字字符</strong> 以及它左边 <strong>最近</strong> 的 <strong>非数字</strong> 字符。</li></ul><p>请你返回删除所有数字字符以后剩下的字符串。</p><p><strong>示例 1：</strong></p><p><strong>输入：</strong> s = &quot;abc&quot;</p><p><strong>输出：</strong> &quot;abc&quot;</p><p><strong>解释：</strong></p><p>字符串中没有数字。</p><p><strong>示例 2：</strong></p><p><strong>输入：</strong> s = &quot;cb34&quot;</p><p><strong>输出：</strong> &quot;&quot;</p><p><strong>解释：</strong></p><p>一开始，我们对 <code>s[2]</code> 执行操作，<code>s</code> 变为 <code>&quot;c4&quot;</code> 。</p><p>然后对 <code>s[1]</code> 执行操作，<code>s</code> 变为 <code>&quot;&quot;</code> 。</p><p><strong>提示：</strong></p><ul><li><code>1 &lt;= s.length &lt;= 100</code></li><li><code>s</code> 只包含小写英文字母和数字字符。</li><li>输入保证所有数字都可以按以上操作被删除。</li></ul><h2 id="解题思路" tabindex="-1"><a class="header-anchor" href="#解题思路" aria-hidden="true">#</a> 解题思路</h2><ol><li>初始化一个空栈 <code>stack</code>。</li><li>遍历字符串 <code>s</code> 的每个字符 <code>char</code>： <ul><li>如果 <code>char</code> 是数字字符（<code>0 &lt;= char &lt;= 9</code>），则执行弹栈操作（若栈不为空）。</li><li>否则，将该字符入栈。</li></ul></li><li>遍历结束后，将栈中的字符拼接为最终结果并返回。</li></ol><h4 id="复杂度分析" tabindex="-1"><a class="header-anchor" href="#复杂度分析" aria-hidden="true">#</a> 复杂度分析</h4><ul><li><strong>时间复杂度</strong>：<code>O(n)</code>，其中 <code>n</code> 为字符串的长度。每个字符处理一次。</li><li><strong>空间复杂度</strong>：<code>O(n)</code>，在最坏情况下（没有数字）需要 <code>O(n)</code> 的栈空间。</li></ul><h2 id="代码" tabindex="-1"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>string<span class="token punctuation">}</span></span> <span class="token parameter">s</span>
 * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>string<span class="token punctuation">}</span></span>
 */</span>
<span class="token keyword">var</span> <span class="token function-variable function">clearDigits</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">s</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">let</span> stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> char <span class="token keyword">of</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>char <span class="token operator">&lt;=</span> <span class="token string">&#39;9&#39;</span> <span class="token operator">&amp;&amp;</span> char <span class="token operator">&gt;=</span> <span class="token string">&#39;0&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span>stack<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
				stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
			stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>char<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> stack<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,42);function x(y,w){const p=e("font"),o=e("RouterLink"),c=e("ExternalLinkIcon");return i(),r("div",null,[k,n("p",null,[s("🟢 "),t(p,{color:"#15bd66"},{default:a(()=>[s("Easy")]),_:1}),s("  🔖  "),t(o,{to:"/tag/stack.html"},{default:a(()=>[g]),_:1}),s(),t(o,{to:"/tag/string.html"},{default:a(()=>[h]),_:1}),s(),t(o,{to:"/tag/simulation.html"},{default:a(()=>[m]),_:1}),s("  🔗 "),n("a",v,[_,t(c)]),s(),n("a",b,[f,t(c)])]),q])}const L=l(u,[["render",x],["__file","3174.html.vue"]]);export{L as default};
