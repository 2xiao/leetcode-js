import{_ as p,r as c,o as r,c as i,a as n,b as e,d as s,w as a,f as d,e as u}from"./app-B5EG-zH0.js";const k={},h=n("h1",{id:"_1437-是否所有-1-都至少相隔-k-个元素",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_1437-是否所有-1-都至少相隔-k-个元素","aria-hidden":"true"},"#"),e(" 1437. 是否所有 1 都至少相隔 k 个元素")],-1),m=n("code",null,"数组",-1),g={href:"https://leetcode.cn/problems/check-if-all-1s-are-at-least-length-k-places-away",target:"_blank",rel:"noopener noreferrer"},_=n("code",null,"力扣",-1),f={href:"https://leetcode.com/problems/check-if-all-1s-are-at-least-length-k-places-away",target:"_blank",rel:"noopener noreferrer"},b=n("code",null,"LeetCode",-1),v=u(`<h2 id="题目" tabindex="-1"><a class="header-anchor" href="#题目" aria-hidden="true">#</a> 题目</h2><p>Given an binary array <code>nums</code> and an integer <code>k</code>, return <code>true</code> <em>if all</em><code>1</code> _&#39; s are at least _<code>k</code> <em>places away from each other, otherwise return</em><code>false</code>.</p><p><strong>Example 1:</strong></p><figure><img src="https://assets.leetcode.com/uploads/2020/04/15/sample_1_1791.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><blockquote><p>Input: nums = [1,0,0,0,1,0,0,1], k = 2</p><p>Output: true</p><p>Explanation: Each of the 1s are at least 2 places away from each other.</p></blockquote><p><strong>Example 2:</strong></p><figure><img src="https://assets.leetcode.com/uploads/2020/04/15/sample_2_1791.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><blockquote><p>Input: nums = [1,0,0,1,0,1], k = 2</p><p>Output: false</p><p>Explanation: The second 1 and third 1 are only one apart from each other.</p></blockquote><p><strong>Constraints:</strong></p><ul><li><code>1 &lt;= nums.length &lt;= 10^5</code></li><li><code>0 &lt;= k &lt;= nums.length</code></li><li><code>nums[i]</code> is <code>0</code> or <code>1</code></li></ul><h2 id="题目大意" tabindex="-1"><a class="header-anchor" href="#题目大意" aria-hidden="true">#</a> 题目大意</h2><p>给你一个由若干 <code>0</code> 和 <code>1</code> 组成的数组 <code>nums</code> 以及整数 <code>k</code>。如果所有 <code>1</code> 都至少相隔 <code>k</code> 个元素，则返回 true ；否则，返回 <code>false</code> 。</p><p><strong>示例 1：</strong></p><p><strong>![](https://assets.leetcode-cn.com/aliyun-lc- upload/uploads/2020/05/03/sample_1_1791.png)</strong></p><blockquote><p><strong>输入：</strong> nums = [1,0,0,0,1,0,0,1], k = 2</p><p><strong>输出：</strong> true</p><p><strong>解释：</strong> 每个 1 都至少相隔 2 个元素。</p></blockquote><p><strong>示例 2：</strong></p><p><strong>![](https://assets.leetcode-cn.com/aliyun-lc- upload/uploads/2020/05/03/sample_2_1791.png)</strong></p><blockquote><p><strong>输入：</strong> nums = [1,0,0,1,0,1], k = 2</p><p><strong>输出：</strong> false</p><p><strong>解释：</strong> 第二个 1 和第三个 1 之间只隔了 1 个元素。</p></blockquote><p><strong>提示：</strong></p><ul><li><code>1 &lt;= nums.length &lt;= 10^5</code></li><li><code>0 &lt;= k &lt;= nums.length</code></li><li><code>nums[i]</code> 的值为 <code>0</code> 或 <code>1</code></li></ul><h2 id="解题思路" tabindex="-1"><a class="header-anchor" href="#解题思路" aria-hidden="true">#</a> 解题思路</h2><p>可以通过遍历数组并记录上一个 <code>1</code> 出现的位置来实现。</p><ol><li><p>用 <code>prevOne</code> 记录上一次出现 <code>1</code> 的位置，初始值设置为 <code>-k-1</code>，确保第一次出现 <code>1</code> 时不会误判。</p></li><li><p><strong>遍历数组</strong>:</p><ul><li>如果当前元素是 <code>1</code>，检查当前位置与 <code>prevOne</code> 的差值是否小于等于 <code>k</code>。 <ul><li>如果小于或等于 <code>k</code>，返回 <code>false</code>。</li></ul></li><li>更新 <code>prevOne</code> 为当前的索引值。</li></ul></li><li><p>遍历结束后，如果所有的 <code>1</code> 间隔都符合要求，返回 <code>true</code>。</p></li></ol><h4 id="复杂度分析" tabindex="-1"><a class="header-anchor" href="#复杂度分析" aria-hidden="true">#</a> 复杂度分析</h4><ul><li><strong>时间复杂度</strong>: <code>O(n)</code>，需要遍历整个数组，每个元素只访问一次。</li><li><strong>空间复杂度</strong>: <code>O(1)</code>，只使用了常数额外空间。</li></ul><h2 id="代码" tabindex="-1"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span> <span class="token parameter">nums</span>
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">}</span></span> <span class="token parameter">k</span>
 * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>boolean<span class="token punctuation">}</span></span>
 */</span>
<span class="token keyword">var</span> <span class="token function-variable function">kLengthApart</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">nums<span class="token punctuation">,</span> k</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">let</span> prevOne <span class="token operator">=</span> <span class="token operator">-</span>k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 确保第一个 1 不会误判</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">-</span> prevOne <span class="token operator">&lt;=</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>
				<span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment">// 距离不足</span>
			<span class="token punctuation">}</span>
			prevOne <span class="token operator">=</span> i<span class="token punctuation">;</span> <span class="token comment">// 更新上一次出现 1 的位置</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="相关题目" tabindex="-1"><a class="header-anchor" href="#相关题目" aria-hidden="true">#</a> 相关题目</h2>`,28),y=n("thead",null,[n("tr",null,[n("th",{style:{"text-align":"center"}},"题号"),n("th",{style:{"text-align":"left"}},"标题"),n("th",{style:{"text-align":"center"}},"题解"),n("th",{style:{"text-align":"left"}},"标签"),n("th",{style:{"text-align":"center"}},"难度"),n("th",{style:{"text-align":"center"}},"力扣")])],-1),x=n("td",{style:{"text-align":"center"}},"2365",-1),w=n("td",{style:{"text-align":"left"}},"任务调度器 II",-1),O=n("td",{style:{"text-align":"center"}},null,-1),E={style:{"text-align":"left"}},q=n("code",null,"数组",-1),I=n("code",null,"哈希表",-1),L=n("code",null,"模拟",-1),C=n("td",{style:{"text-align":"center"}},"🟠",-1),N={style:{"text-align":"center"}},V={href:"https://leetcode.cn/problems/task-scheduler-ii",target:"_blank",rel:"noopener noreferrer"},j={href:"https://leetcode.com/problems/task-scheduler-ii",target:"_blank",rel:"noopener noreferrer"};function B(z,R){const l=c("font"),t=c("RouterLink"),o=c("ExternalLinkIcon");return r(),i("div",null,[h,n("p",null,[e("🟢 "),s(l,{color:"#15bd66"},{default:a(()=>[e("Easy")]),_:1}),e("  🔖  "),s(t,{to:"/tag/array.html"},{default:a(()=>[m]),_:1}),e("  🔗 "),n("a",g,[_,s(o)]),e(),n("a",f,[b,s(o)])]),v,d(" prettier-ignore "),n("table",null,[y,n("tbody",null,[n("tr",null,[x,w,O,n("td",E,[s(t,{to:"/tag/array.html"},{default:a(()=>[q]),_:1}),e(),s(t,{to:"/tag/hash-table.html"},{default:a(()=>[I]),_:1}),e(),s(t,{to:"/tag/simulation.html"},{default:a(()=>[L]),_:1})]),C,n("td",N,[n("a",V,[e("🀄️"),s(o)]),e(),n("a",j,[e("🔗"),s(o)])])])])])])}const A=p(k,[["render",B],["__file","1437.html.vue"]]);export{A as default};
