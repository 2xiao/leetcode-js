import{_ as c,r as l,o as p,c as i,a as n,b as t,d as e,w as s,f as d,e as u}from"./app-aQeLbVW9.js";const h={},_=n("h1",{id:"_429-n-叉树的层序遍历",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_429-n-叉树的层序遍历","aria-hidden":"true"},"#"),t(" 429. N 叉树的层序遍历")],-1),k=n("code",null,"树",-1),g=n("code",null,"广度优先搜索",-1),m={href:"https://leetcode.cn/problems/n-ary-tree-level-order-traversal",target:"_blank",rel:"noopener noreferrer"},f=n("code",null,"力扣",-1),b={href:"https://leetcode.com/problems/n-ary-tree-level-order-traversal",target:"_blank",rel:"noopener noreferrer"},v=n("code",null,"LeetCode",-1),y=u(`<h2 id="题目" tabindex="-1"><a class="header-anchor" href="#题目" aria-hidden="true">#</a> 题目</h2><p>Given an n-ary tree, return the <em>level order</em> traversal of its nodes&#39; values.</p><p><em>Nary-Tree input serialization is represented in their level order traversal, each group of children is separated by the null value (See examples).</em></p><p><strong>Example 1:</strong></p><figure><img src="https://assets.leetcode.com/uploads/2018/10/12/narytreeexample.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><blockquote><p>Input: root = [1,null,3,2,4,null,5,6]</p><p>Output: [[1],[3,2,4],[5,6]]</p></blockquote><p><strong>Example 2:</strong></p><figure><img src="https://assets.leetcode.com/uploads/2019/11/08/sample_4_964.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><blockquote><p>Input: root = [1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14]</p><p>Output: [[1],[2,3,4,5],[6,7,8,9,10],[11,12,13],[14]]</p></blockquote><p><strong>Constraints:</strong></p><ul><li>The height of the n-ary tree is less than or equal to <code>1000</code></li><li>The total number of nodes is between <code>[0, 10^4]</code></li></ul><h2 id="题目大意" tabindex="-1"><a class="header-anchor" href="#题目大意" aria-hidden="true">#</a> 题目大意</h2><p>给定一个 N 叉树，返回其节点值的 <em>层序遍历</em> 。（即从左到右，逐层遍历）。</p><p>树的序列化输入是用层序遍历，每组子节点都由 null 值分隔（参见示例）。</p><p><strong>示例 1：</strong></p><figure><img src="https://assets.leetcode.com/uploads/2018/10/12/narytreeexample.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><blockquote><p><strong>输入：</strong> root = [1,null,3,2,4,null,5,6]</p><p><strong>输出：</strong>[[1],[3,2,4],[5,6]]</p></blockquote><p><strong>示例 2：</strong></p><figure><img src="https://assets.leetcode.com/uploads/2019/11/08/sample_4_964.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><blockquote><p><strong>输入：</strong> root = [1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14]</p><p><strong>输出：</strong>[[1],[2,3,4,5],[6,7,8,9,10],[11,12,13],[14]]</p></blockquote><p><strong>提示：</strong></p><ul><li>树的高度不会超过 <code>1000</code></li><li>树的节点总数在 <code>[0, 10^4]</code> 之间</li></ul><h2 id="解题思路" tabindex="-1"><a class="header-anchor" href="#解题思路" aria-hidden="true">#</a> 解题思路</h2><ol><li><p><strong>使用 BFS 进行层序遍历</strong></p><ul><li>采用 <strong>队列 (queue)</strong> 进行层序遍历，每次处理当前层的所有节点，并将它们的值存入结果数组 <code>res</code>。</li></ul></li><li><p><strong>循环遍历队列</strong></p><ul><li>每次遍历当前层的所有节点，存入 <code>level</code> 数组，并将其所有子节点加入队列。</li></ul></li><li><p><strong>存储结果</strong></p><ul><li>每一层遍历完后，将 <code>level</code> 存入 <code>res</code>。</li></ul></li></ol><h4 id="复杂度分析" tabindex="-1"><a class="header-anchor" href="#复杂度分析" aria-hidden="true">#</a> 复杂度分析</h4><ul><li><strong>时间复杂度</strong>：<code>O(n)</code>，每个节点只进队列和出队列一次，总共有 <code>n</code> 个节点。</li><li><strong>空间复杂度</strong>：<code>O(n)</code>，在最坏情况下，队列可能存储所有叶子节点。</li></ul><h2 id="代码" tabindex="-1"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>_Node<span class="token operator">|</span><span class="token keyword">null</span><span class="token punctuation">}</span></span> <span class="token parameter">root</span>
 * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span>
 */</span>
<span class="token keyword">var</span> <span class="token function-variable function">levelOrder</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">root</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token punctuation">)</span> <span class="token keyword">return</span> res<span class="token punctuation">;</span>

	<span class="token keyword">let</span> queue <span class="token operator">=</span> <span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">;</span>

	<span class="token keyword">while</span> <span class="token punctuation">(</span>queue<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">const</span> len <span class="token operator">=</span> queue<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
		<span class="token keyword">let</span> level <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
		<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">const</span> node <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			level<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> child <span class="token keyword">of</span> node<span class="token punctuation">.</span>children<span class="token punctuation">)</span> <span class="token punctuation">{</span>
				queue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
		res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>level<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> res<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="相关题目" tabindex="-1"><a class="header-anchor" href="#相关题目" aria-hidden="true">#</a> 相关题目</h2>`,29),x=n("thead",null,[n("tr",null,[n("th",{style:{"text-align":"center"}},"题号"),n("th",{style:{"text-align":"left"}},"标题"),n("th",{style:{"text-align":"center"}},"题解"),n("th",{style:{"text-align":"left"}},"标签"),n("th",{style:{"text-align":"center"}},"难度"),n("th",{style:{"text-align":"center"}},"力扣")])],-1),w=n("td",{style:{"text-align":"center"}},"102",-1),q=n("td",{style:{"text-align":"left"}},"二叉树的层序遍历",-1),N={style:{"text-align":"center"}},z={style:{"text-align":"left"}},C=n("code",null,"树",-1),E=n("code",null,"广度优先搜索",-1),L=n("code",null,"二叉树",-1),O=n("td",{style:{"text-align":"center"}},"🟠",-1),V={style:{"text-align":"center"}},B={href:"https://leetcode.cn/problems/binary-tree-level-order-traversal",target:"_blank",rel:"noopener noreferrer"},I={href:"https://leetcode.com/problems/binary-tree-level-order-traversal",target:"_blank",rel:"noopener noreferrer"},T=n("td",{style:{"text-align":"center"}},"589",-1),j=n("td",{style:{"text-align":"left"}},"N 叉树的前序遍历",-1),S={style:{"text-align":"center"}},R={style:{"text-align":"left"}},F=n("code",null,"栈",-1),G=n("code",null,"树",-1),M=n("code",null,"深度优先搜索",-1),A=n("td",{style:{"text-align":"center"}},"🟢",-1),D={style:{"text-align":"center"}},H={href:"https://leetcode.cn/problems/n-ary-tree-preorder-traversal",target:"_blank",rel:"noopener noreferrer"},J={href:"https://leetcode.com/problems/n-ary-tree-preorder-traversal",target:"_blank",rel:"noopener noreferrer"},K=n("td",{style:{"text-align":"center"}},"590",-1),P=n("td",{style:{"text-align":"left"}},"N 叉树的后序遍历",-1),Q={style:{"text-align":"center"}},U={style:{"text-align":"left"}},W=n("code",null,"栈",-1),X=n("code",null,"树",-1),Y=n("code",null,"深度优先搜索",-1),Z=n("td",{style:{"text-align":"center"}},"🟢",-1),$={style:{"text-align":"center"}},nn={href:"https://leetcode.cn/problems/n-ary-tree-postorder-traversal",target:"_blank",rel:"noopener noreferrer"},tn={href:"https://leetcode.com/problems/n-ary-tree-postorder-traversal",target:"_blank",rel:"noopener noreferrer"},en=n("td",{style:{"text-align":"center"}},"2039",-1),sn=n("td",{style:{"text-align":"left"}},"网络空闲的时刻",-1),an=n("td",{style:{"text-align":"center"}},null,-1),on={style:{"text-align":"left"}},ln=n("code",null,"广度优先搜索",-1),rn=n("code",null,"图",-1),cn=n("code",null,"数组",-1),pn=n("td",{style:{"text-align":"center"}},"🟠",-1),dn={style:{"text-align":"center"}},un={href:"https://leetcode.cn/problems/the-time-when-the-network-becomes-idle",target:"_blank",rel:"noopener noreferrer"},hn={href:"https://leetcode.com/problems/the-time-when-the-network-becomes-idle",target:"_blank",rel:"noopener noreferrer"};function _n(kn,gn){const r=l("font"),a=l("RouterLink"),o=l("ExternalLinkIcon");return p(),i("div",null,[_,n("p",null,[t("🟠 "),e(r,{color:"#ffb800"},{default:s(()=>[t("Medium")]),_:1}),t("  🔖  "),e(a,{to:"/tag/tree.html"},{default:s(()=>[k]),_:1}),t(),e(a,{to:"/tag/breadth-first-search.html"},{default:s(()=>[g]),_:1}),t("  🔗 "),n("a",m,[f,e(o)]),t(),n("a",b,[v,e(o)])]),y,d(" prettier-ignore "),n("table",null,[x,n("tbody",null,[n("tr",null,[w,q,n("td",N,[e(a,{to:"/problem/0102.html"},{default:s(()=>[t("[✓]")]),_:1})]),n("td",z,[e(a,{to:"/tag/tree.html"},{default:s(()=>[C]),_:1}),t(),e(a,{to:"/tag/breadth-first-search.html"},{default:s(()=>[E]),_:1}),t(),e(a,{to:"/tag/binary-tree.html"},{default:s(()=>[L]),_:1})]),O,n("td",V,[n("a",B,[t("🀄️"),e(o)]),t(),n("a",I,[t("🔗"),e(o)])])]),n("tr",null,[T,j,n("td",S,[e(a,{to:"/problem/0589.html"},{default:s(()=>[t("[✓]")]),_:1})]),n("td",R,[e(a,{to:"/tag/stack.html"},{default:s(()=>[F]),_:1}),t(),e(a,{to:"/tag/tree.html"},{default:s(()=>[G]),_:1}),t(),e(a,{to:"/tag/depth-first-search.html"},{default:s(()=>[M]),_:1})]),A,n("td",D,[n("a",H,[t("🀄️"),e(o)]),t(),n("a",J,[t("🔗"),e(o)])])]),n("tr",null,[K,P,n("td",Q,[e(a,{to:"/problem/0590.html"},{default:s(()=>[t("[✓]")]),_:1})]),n("td",U,[e(a,{to:"/tag/stack.html"},{default:s(()=>[W]),_:1}),t(),e(a,{to:"/tag/tree.html"},{default:s(()=>[X]),_:1}),t(),e(a,{to:"/tag/depth-first-search.html"},{default:s(()=>[Y]),_:1})]),Z,n("td",$,[n("a",nn,[t("🀄️"),e(o)]),t(),n("a",tn,[t("🔗"),e(o)])])]),n("tr",null,[en,sn,an,n("td",on,[e(a,{to:"/tag/breadth-first-search.html"},{default:s(()=>[ln]),_:1}),t(),e(a,{to:"/tag/graph.html"},{default:s(()=>[rn]),_:1}),t(),e(a,{to:"/tag/array.html"},{default:s(()=>[cn]),_:1})]),pn,n("td",dn,[n("a",un,[t("🀄️"),e(o)]),t(),n("a",hn,[t("🔗"),e(o)])])])])])])}const fn=c(h,[["render",_n],["__file","0429.html.vue"]]);export{fn as default};
